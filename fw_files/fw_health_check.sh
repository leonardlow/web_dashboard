#!/bin/bash


details(){
clear
echo "author: Josh Dillig, TSD&O Tier 2 Security SWAT Proactive"
echo "author: Dan Conway, TSD&O EngOps"
echo ""
echo "Version 1.0 - 11/28/2018 - First Release"
echo ""
echo ""
echo "HISTORY LOG FORMAT"
echo "<HOSTNAME> - <FIRST4OFMD5#VERSION> - <EPOCH> - <FUNCTION> - <RESULT> - <VALUE>"
echo ""
echo "SYSLOG FORMAT"
echo "DEPRICATED FWHealthCheck - <FIRST4OFMD5#VERSION> - <EPOCH> - <HOSTNAME> - <FUNCTION> - <RESULT> - <VALUE>"
echo ""
echo ""
echo "RFE LIST - as of 31-Jan-19"
echo "NTP status, Neighbor table overflow, zombie processes, cores, debugs enabled, frags, sic status, backup and snapshot details, logins, pingable host for ipv6, sync overload, hardware fail loop confirmation, SP rollup under SMO name, SP asg perf CPS handle K and non K, remove ROMB and idrc workarounds"

#/usr/bin/is_scalable_platform.sh
}

globalVars(){
ORIGIFS=$IFS
EVALDROPS=$(ls -al /home/admin/fwhc_evaldrops 2>&1 | grep -v "No such" | wc -l)
MGMTINTERFACE=$(cat /config/active | grep "management:interface" | awk '{print $NF}')
MGMTIP=$(cat /config/active | grep "interface" | grep "ipaddr" | grep -v "mask" | grep $MGMTINTERFACE | awk '{print $1}' | awk -F ":" '{print $NF}')
MGMTIP1=$(echo $MGMTIP | awk -F "." '{print $1}')
MGMTIP2=$(echo $MGMTIP | awk -F "." '{print $2}')
if [[ $MGMTIP1 -eq "10" ]] && [[ $MGMTIP2 -eq "169" || $MGMTIP2 -eq "145" || $MGMTIP2 -eq "147" ]]; then
	BLABENABLED="1"
else
	BLABENABLED="0"
fi
HOSTNAME=$(hostname)
HOSTNAMESIMPLIFIED=$(hostname | tr '[:lower:]' '[:upper:]' | awk -F '-' '{print $1}')
if [[ $BLABENABLED -eq "1" ]]; then
	HOSTNAME=$(echo "BLVLAB_"$HOSTNAME)
	HOSTNAMESIMPLIFIED=$(echo "BLVLAB_"$HOSTNAMESIMPLIFIED)
fi

APPLIANCETYPE="unknown"
APPLIANCETYPE0=$(/usr/sbin/dmidecode -t System | grep Product | head -1 | awk '{print $3}')
FCPENABLED=$(hostname | grep "FCP" | wc -l)
MDPSENABLED="0"
if [[ $APPLIANCETYPE0 == "A-40" ]] || [[ $APPLIANCETYPE0 == "MIC-5342" ]]; then
	APPLIANCETYPE="SP"
fi

if [[ $APPLIANCETYPE0 == "MSN2740" || $APPLIANCETYPE0 == "MSN3700C" ]]; then
	APPLIANCETYPE="MAESTRO-ORCHESTRATOR"
fi

if [[ $APPLIANCETYPE0 == "QL-25-00" ]] || [[ $APPLIANCETYPE0 == "QL-20-00" ]]; then
	#if [[ -f /opt/CPsmo-R80.30/bin/asg ]] || [[ -f /opt/CPsmo-R81.10/bin/asg ]] || [[ -f /opt/CPsmo-R81.20/bin/asg ]]; then
	if [[ $IS_SCALABLE_PLATFORM -eq "1" ]]; then
		APPLIANCETYPE="MAESTRO"
	else
		APPLIANCETYPE="NONSP"
	fi
fi

if [[ $APPLIANCETYPE0 == "QP-20-00" ]]; then
	#if [[ -f /opt/CPsmo-R81.10/bin/asg ]] || [[ -f /opt/CPsmo-R81.20/bin/asg ]]; then
	if [[ $IS_SCALABLE_PLATFORM -eq "1" ]]; then
		APPLIANCETYPE="MAESTRO"
	else
		APPLIANCETYPE="NONSP"
	fi
fi

if [[ $APPLIANCETYPE0 == "G-72" ]] || [[ $APPLIANCETYPE0 == "PD-10-00" ]] || [[ $APPLIANCETYPE0 == "VMware" ]]; then
	APPLIANCETYPE="NONSP"
fi

if [[ $APPLIANCETYPE0 == "ST-4150-00" ]] || [[ $APPLIANCETYPE0 == "ST-6000-XL" ]]; then
	APPLIANCETYPE="SM"
fi

if [[ $APPLIANCETYPE0 == "RH-20-00" ]]; then
	APPLIANCETYPE="NONSP"
fi


if [[ $APPLIANCETYPE == "NONSP" ]] || [[ $APPLIANCETYPE == "SP" ]] || [[ $APPLIANCETYPE == "MAESTRO" ]]; then
	if [[ $FCPENABLED == "0" ]]; then
		CLUSTERNAME=$(head -1 $FWDIR/state/local/FW1/local.ft | awk '{print $13}')
		CLUSTERMEMBERS=$(cat $FWDIR/state/local/FW1/local.ft | grep "cluster_members_ips" -A 3 | grep "host" | awk '{print $4}' | sort | uniq)
		CLUSTERMEMBERS1=$(cat $FWDIR/state/local/FW1/local.ft | grep "cluster_members_ips" -A 3 | grep "host" | awk '{print $4}' | sort | uniq | tr '\n' ' ')
		CLUSTERMEMBEROTHER=$(cat $FWDIR/state/local/FW1/local.ft | grep "cluster_members_ips" -A 3 | grep "host" | awk '{print $4}' | sort | uniq | grep -iv "$HOSTNAME" | head -1)
		CMAVER=$(head -1 $FWDIR/state/local/FW1/local.ft | awk -F "/" '{print $3}' | awk -F "-" '{print $2}')
		if [[ $BLABENABLED == "1" ]]; then
			CMANAME=$(head -1 $FWDIR/state/local/FW1/local.ft | awk '{print $2}' | awk -F "/" '{print $5}')
		else
			CMANAME=$(head -1 $FWDIR/state/local/FW1/local.ft | awk '{print $2}' | awk -F "/" '{print $5}' | awk -F "_" '{print $2}')
		fi
		if [[ $CMANAME == "" ]]; then
			CMANAME=$(cat $FWDIR/conf/masters | grep -A1 "Policy" | tail -1)
		fi
	fi
	
	#if [[ -f /opt/CPsuite-R76/fw1/bin/asg ]] || [[ -f /opt/CPsmo-R80.30/bin/asg ]] || [[ -f /opt/CPsmo-R80.20/bin/asg ]] || [[ -f /opt/CPsmo-R81.10/bin/asg ]] || [[ -f /opt/CPsmo-R81.20/bin/asg ]]; then
	if [[ $IS_SCALABLE_PLATFORM -eq "1" ]]; then
		TEMPFILE_GLOBAL=temp.file
		g_all echo "Test" > $TEMPFILE_GLOBAL
		CHASSISQTY=$(cat $TEMPFILE_GLOBAL | grep -v "Test" | awk -F "_" '{print $1}' | sort -n | uniq | wc -l)
		LOCALSGM=$(hostname | rev | cut -c -4 | rev | sed 's/-/_/g')
		LOCALSGM1=$(echo $LOCALSGM | sed s/.//3)
		LOCALCHASSIS=$(hostname | rev | cut -c -4 | rev | cut -c 1)
		LOCALCHASSIS1=$(hostname | rev | cut -c -4 | rev | cut -c 1-2 | tr '-' '_')
		ALLSGM=$(cat $TEMPFILE_GLOBAL | grep -v Test | tr ':' ' ')
		ALLLOCALSGM=$(cat $TEMPFILE_GLOBAL | grep -v Test | tr ':' ' ' | grep "$LOCALCHASSIS1")
		ALLLOCALSGMCSV=$(cat $TEMPFILE_GLOBAL | grep -v Test | tr ':' ' ' | grep "$LOCALCHASSIS1" | tr '\n' ',')
		ALLSGMSINGLELINE=$(cat $TEMPFILE_GLOBAL | grep -v Test | tr ':' ' ' | tr '\n' ' ')
		ALLSGMEXCEPTSMOLIST=$(cat $TEMPFILE_GLOBAL | grep -v Test | grep -v "$LOCALSGM" | tr ':' ' ' | sed -e 's/[[:space:]]*$//')
		ALLSGMEXCEPTSMOCOMMALIST=$(cat $TEMPFILE_GLOBAL | grep -v Test | grep -v "$LOCALSGM" | tr ':' ' ' | sed -e 's/[[:space:]]*$//' | tr '\n' ' ' | tr ' ' ',' | rev | cut -c 2- | rev)
		ALLSGMQTY=$(cat $TEMPFILE_GLOBAL  | grep -v Test | tr ':' ' ' | wc -l)
		if [[ $FCPENABLED == "1" ]]; then
			ACTIVESGMQTY=$(( ALLSGMQTY / 1 ))
		elif [[ $APPLIANCETYPE == "MAESTRO" ]]; then
			ACTIVESGMQTY=$(( ALLSGMQTY / 1 ))
		else
			ACTIVESGMQTY=$(( ALLSGMQTY / 2 ))
		fi
		
		LOCALSMO=$(asg stat -i tasks 2>&1 | grep "SMO" | grep -v "Local host is not a FireWall-1 module" | grep "local" | wc -l)
		if [[ $CHASSISQTY == "1" ]]; then
			ACTIVECHASSIS="1"
			ACTIVECHASSIS1="1_"
			ALLSGMSACTIVECHASSISCSV=$(cat $TEMPFILE_GLOBAL | grep -v Test | tr -d ':' | grep "$ACTIVECHASSIS1" | tr '\n' ',' | rev | cut -c 2- | rev)
		else
			# if [[ -f /opt/CPsmo-R80.20/bin/asg ]] || [[ -f /opt/CPsmo-R81.10/bin/asg ]]; then
				CHASSIS1STATUS=$(asg stat -v  | grep -A1 "Chassis 1" | grep -A1 "SGM ID" | tail -1 | awk '{print $2}')
				CHASSIS2STATUS=$(asg stat -v  | grep -A1 "Chassis 1" | grep -A1 "SGM ID" | tail -1 | awk '{print $3}')
				if [[ $CHASSIS1STATUS == "ACTIVE" ]]; then
					ACTIVECHASSIS="1"
					ACTIVECHASSIS1=$(echo "$ACTIVECHASSIS _" | tr -d ' ')
					ALLSGMSACTIVECHASSISCSV=$(cat $TEMPFILE_GLOBAL | grep -v Test | tr -d ':' | grep "$ACTIVECHASSIS1" | tr '\n' ',' | rev | cut -c 2- | rev)
				elif [[ $CHASSIS2STATUS == "ACTIVE" ]]; then
					ACTIVECHASSIS="2"
					ACTIVECHASSIS1=$(echo "$ACTIVECHASSIS _" | tr -d ' ')
					ALLSGMSACTIVECHASSISCSV=$(cat $TEMPFILE_GLOBAL | grep -v Test | tr -d ':' | grep "$ACTIVECHASSIS1" | tr '\n' ',' | rev | cut -c 2- | rev)
				fi
			# else
				# ACTIVECHASSIS=$(asg stat -v | grep ACTIVE | head -1 | awk '{print $3}')
				# ACTIVECHASSIS1=$(echo "$ACTIVECHASSIS _" | tr -d ' ')
				# ALLSGMSACTIVECHASSISCSV=$(cat $TEMPFILE_GLOBAL | grep -v Test | tr -d ':' | grep "$ACTIVECHASSIS1" | tr '\n' ',' | rev | cut -c 2- | rev)
			# fi
		fi
		LOCALPORTRANGESTART=$(cat /proc/sys/net/ipv4/ip_local_port_range | awk '{print $1}' | tr -d ' ')
		LOCALPORTRANGEEND=$(cat /proc/sys/net/ipv4/ip_local_port_range | awk '{print $2}' | tr -d ' ')
		rm $TEMPFILE_GLOBAL
	fi
	
	VSXENABLED="0"
	IDSENABLED=$(hostname | grep "IDS" | wc -l)
	#Type 1 is resource, type 2 is resource and routing
	MDPSENABLED=$(cat /config/active | grep "mdps:mgmt:resource t" | wc -l)
	if [[ $MDPSENABLED == "1" ]]; then
		# MDPSROUTINGENABLED=$(clish -c "show configuration mdps" | grep "mgmt plane ON" | wc -l)
		MDPSROUTINGENABLED=$(cat /config/active | grep "mdps:mgmt:plane t" | wc -l)
		if [[ $MDPSROUTINGENABLED == "1" ]]; then
			MDPSENABLED="2"
		fi
	fi
fi

if [[ $APPLIANCETYPE = "SM" ]]; then
	MGMTTYPEMDS=$(echo $HOSTNAME | grep "cpm\|CPM" | wc -l)
	MGMTTYPEMLM=$(echo $HOSTNAME | grep "cpl\|CPL" | wc -l)
	if [[ $MGMTTYPEMDS == "1" ]]; then
		MGMTTYPE="MDS"
	elif [[ $MGMTTYPEMLM == "1" ]]; then
		MGMTTYPE="MLM"
	else
		MGMTTYPE="NONE"
	fi
	MGMTPRIMARY=$(cpprod_util FwIsPrimary)
fi


DATE=$(date +"%d-%b-%Y %H:%M %Z")
if [[ ! $SYSARG4 ]]; then
	EPOCH=$(date +'%s')
else
	EPOCH=$SYSARG4
fi
EPOCHMINUS3600=$(echo $EPOCH - 3600 | bc)
SCRIPTDIR=/home/admin
LOGGER="/usr/bin/logger -p local5.notice"
SNMP_VER_CONFIG=$(cat /config/active | grep "snmp:version" | awk '{print $NF}')
if [[ $SNMP_VER_CONFIG == "v1/v2/v3" ]]; then
	SNMP_VER="2c"
	SNMPCOMMUNITY=$(cat /config/active | grep "snmp:community" | grep -v "snmp:trap_rcv" | awk '{print $1}' | awk -F ":" '{print $NF}')
	if [[ $MDPSENABLED == "2" ]]; then
		SNMPCOMMUNITYDPLANE=$(echo $SNMPCOMMUNITY"_dplane")
	fi
# elif [[ $SNMP_VER_CONFIG == "v3-Only" ]]; then
	# SNMP_VER="3"
	# SNMP_USER="fw_health_check"
	# SNMP_AUTH="fw_health_check"
	# SNMP_AUTH_HASH="SHA256"
	# SNMP_PRIVACY="fw_health_check"
	# SNMP_PRIVACY_HASH="AES"
fi
PWD=$(pwd)
SCRIPT=$(basename $BASH_SOURCE)
SCRIPTFULL=$(echo $SCRIPTDIR/$SCRIPT)
SCRIPTVERSION="1"
SCRIPTHASH=$(md5sum $SCRIPTFULL | cut -c1-4)
#if [[ -f /opt/CPsuite-R76/fw1/bin/asg ]] || [[ -f /opt/CPsmo-R80.30/bin/asg ]] || [[ -f /opt/CPsmo-R80.20/bin/asg ]] || [[ -f /opt/CPsmo-R81.10/bin/asg ]] || [[ -f /opt/CPsmo-R81.10/bin/asg ]]; then
if [[ $IS_SCALABLE_PLATFORM -eq "1" ]]; then
	SCRIPTHASH=$(md5sum /home/admin/$SCRIPT |cut -c1-4)
fi
HISTORYLOGPREAMBLE="$HOSTNAME - $SCRIPTHASH#$SCRIPTVERSION - $EPOCH"
TEMPDIR=/var/log/tmp
if [[ ! -d $TEMPDIR ]]; then
	mkdir -p $TEMPDIR
fi
RUNLOG=$TEMPDIR/${SCRIPT}_${EPOCH}.log
HISTORYLOG=/var/log/gateway_health.log
SYSLOG_FILE=$TEMPDIR/${SCRIPT}.syslog.${EPOCH}.log
RUNLOGTAR=/var/log/${SCRIPT}.tar
PIDLOCK=$TEMPDIR/$SCRIPT.lock
LASTRUNHISTORYLOGOUTPUT=$TEMPDIR/$SCRIPT.previous
if [[ ! -e $LASTRUNHISTORYLOGOUTPUT ]]; then
	touch $LASTRUNHISTORYLOGOUTPUT
fi
CURRENTRUNHISTORYLOGOUTPUT=$TEMPDIR/$SCRIPT.current
LASTRUNSUCCESSFILE=$TEMPDIR/$SCRIPT.lastsuccess
LASTRUNSUCCESSSTATUS=$(tail -1 $LASTRUNSUCCESSFILE)
LASTRUNSUCCESSEPOCH=$(head -1 $LASTRUNSUCCESSFILE | awk '{print $1}')
if [[ ! -f $LASTRUNSUCCESSFILE ]]; then
	LASTRUNSUCCESSEPOCH=0
fi
LASTRUNEPOCH=$LASTRUNSUCCESSEPOCH
LASTRUNTIME=$(cat $HISTORYLOG | grep $LASTRUNEPOCH | grep "checkUltimateStatus_runTime" | awk -F " - " '{print $7}' | tail -1)
if [[ ! -e $HISTORYLOG ]] || [[ $LASTRUNSUCCESSEPOCH -eq "0" ]]; then
	LASTRUNEPOCH="$(( EPOCH - 1 ))"
	LASTRUNTIME=0
fi
LASTRUNSCRIPTHASH=$(tail -1 $LASTRUNHISTORYLOGOUTPUT | awk -F " - " '{print $2}' | cut -c-4)
SINCELASTRUN=$(( $EPOCH - $LASTRUNEPOCH ))
SHOWCONFIG="$TEMPDIR/$SCRIPT.showconfiguration"
if [[ $MDPSENABLED == "2" ]]; then
	echo "Enable MPLANE"
	. /etc/profile.d/mdpsenv.sh
	mplane
fi

CONNECTIONSOUTPUTFILERAW=$TEMPDIR/$SCRIPT.connections.raw.$EPOCH
CONNECTIONSOUTPUTFILE=$TEMPDIR/$SCRIPT.connections.$EPOCH
LASTRUNCONNECTIONSOUTPUTFILE=$TEMPDIR/$SCRIPT.connections.$LASTRUNEPOCH

if [[ $EVALDROPS == "1" ]]; then
	DROPSOUTPUTFILERAW=$TEMPDIR/$SCRIPT.dropsraw.$EPOCH
	DROPSOUTPUTFILEFORMATTED=$TEMPDIR/$SCRIPT.dropsformatted.$EPOCH
	DROPSOUTPUTFILE=$TEMPDIR/$SCRIPT.drops.$EPOCH
	DROPSFOUNDFILE=$TEMPDIR/$SCRIPT.dropsfound.$EPOCH
fi
UPTIME=$(cat /proc/uptime | awk -F "." '{print $1}')
UPTIME1=$(conv_time $UPTIME)
BACKUPLOCATION="/var/log/FWBACKUP"
BACKUPSCRIPT="/home/admin/fw_backup.sh"
BACKUPENABLED=$(crontab -l -u hpna | grep -v "#" | grep fw_backup.sh | wc -l)

if [[ ! $BACKUPENABLED -eq "1" ]]; then
	BACKUPENABLED=$(cat /config/active | grep "snapshot-scheduled:default_snap t" | wc -l)
fi

if [[ $IS_SCALABLE_PLATFORM_MHO -eq "0" ]] && [[ $LOCALSMO == "1" ]]; then
	SCRIPTSRUNNING=$(g_all "ps -ef | grep fw_health_check.sh | grep -v "grep" | grep -v "snmp" | grep -v "sub5monitoring"" | grep -v "_0")
	SCRIPTSRUNNINGQTY=$(g_all "ps -ef | grep fw_health_check.sh | grep -v "grep" | grep -v "snmp" | grep -v "sub5monitoring"" | grep "fw_health_check.sh" | wc -l)
	PIDLOCKPRESENT=$(g_all "ls -al /var/log/tmp/fw_health_check.sh.lock" | grep -v "_0\|_1\|_2" | grep -v "No such file" | wc -l)
else
	SCRIPTSRUNNING=$(ps -ef | grep $SCRIPT | grep -v "grep" | grep -v "snmp" | grep -v "sub5monitoring")
	SCRIPTSRUNNINGQTY=$(ps -ef | grep $SCRIPT | grep -v "grep" | grep -v "snmp" | grep -v "sub5monitoring" | wc -l)
fi
SELF_HEAL_ENABLED=$(ls -al /home/admin/self_heal_enabled 2>&1 | grep -v "No such" | wc -l)
SELF_HEAL_LOG=$TEMPDIR/self_heal_log
if [[ -e $SELF_HEAL_LOG ]]; then
	SELF_HEAL_LAST_ATTEMPT=$(cat $SELF_HEAL_LOG 2>&1 | grep -v "No such file" | grep -v "bypassed" | tail -1 | awk -F " - " '{print $3}')
	SELF_HEAL_LAST_ATTEMPT_PLUS=$(echo $SELF_HEAL_LAST_ATTEMPT + 3600 | bc)
	if [[ $EPOCH -lt $SELF_HEAL_LAST_ATTEMPT_PLUS ]]; then
		SELF_HEAL_CHRONIC="1"
	else
		SELF_HEAL_CHRONIC="0"
	fi
else
	SELF_HEAL_CHRONIC="0"
fi
IFZONE="/home/admin/if.zone"

if [[ $HOSTNAME == "IDSSYO61" ]]; then
	TASKSET_ORIG=$(taskset -c -p $$ | awk '{print $NF}')
	taskset -pc 4,23 $$
	TASKSET_CUR=$(taskset -c -p $$ | awk '{print $NF}')
fi
SYSLOG_SERVER=$(cat /config/active | grep "syslog:action:remote" | awk -F ":" '{print $4}' | awk '{print $1}' | sort -n | uniq | head -1)

}

###################################################################################################
checkStart(){
echo "START==checkStart" >>$RUNLOG
checkStart_fStart=$(date "+%s")


#DEFAULTS
checkStart_problem="0"
functionName=${FUNCNAME[0]}

#COLLECT OUTPUTS
cat $CURRENTRUNHISTORYLOGOUTPUT > $LASTRUNHISTORYLOGOUTPUT

if [[ $APPLIANCETYPE == "NONSP" ]]; then
	#checkClusterXL_state=$(snmp .1.3.6.1.4.1.2620.1.5.6)
	checkClusterXL_state=$(stattestget 1.3.6.1.4.1.2620.1.5.6)
fi


#Messages files since last run
# LASTRUNMESSAGES=""
# while IFS= read -r LINE; do
	# TIMESTAMP=$(echo "$LINE" | awk '{print $1, $2, $3}')
	# TIMESTAMP_EPOCH=$(convert_to_epoch "$TIMESTAMP")
	# if [[ $TIMESTAMP_EPOCH -gt $LASTRUNEPOCH ]]; then
		# LASTRUNMESSAGES+="$LINE"$'\n'
	# fi
# done < /var/log/messages

# #Accomodate for if messages rolled
# MESSAGES1DATE=$(stat -c %Y "/var/log/messages.1")
# if [[ $MESSAGES1DATE -gt $LASTRUNEPOCH ]]; then
# while IFS= read -r LINE; do
	# TIMESTAMP=$(echo "$LINE" | awk '{print $1, $2, $3}')
	# TIMESTAMP_EPOCH=$(convert_to_epoch "$TIMESTAMP")
	# if [[ $TIMESTAMP_EPOCH -gt $LASTRUNEPOCH ]]; then
		# LASTRUNMESSAGES+="$LINE"$'\n'
	# fi
# done < /var/log/messages.1
# fi

# LASTRUNMESSAGES=""
# LASTRUNMESSAGES=$(awk -v last_epoch="$LASTRUNEPOCH" '
# {
    # # Extract timestamp
    # timestamp = $1 " " $2 " " $3;
    # # Convert timestamp to epoch time
    # cmd = "date -d \"" timestamp "\" +%s";
    # cmd | getline epoch;
    # close(cmd);

    # # Check if the epoch is greater than the last run epoch
    # if (epoch > last_epoch) {
        # print $0;
    # }
# }' /var/log/messages)


# #Accomodate for if messages rolled
# LASTRUNMESSAGES=$(awk -v last_epoch="$LASTRUNEPOCH" '
# {
    # # Extract timestamp
    # timestamp = $1 " " $2 " " $3;
    # # Convert timestamp to epoch time
    # cmd = "date -d \"" timestamp "\" +%s";
    # cmd | getline epoch;
    # close(cmd);

    # # Check if the epoch is greater than the last run epoch
    # if (epoch > last_epoch) {
        # print $0;
    # }
# }' /var/log/messages.1)

#printf "%s\n" "$LASTRUNMESSAGES" > $TEMPDIR/$SCRIPT.$EPOCH.messages.lastrun



#LOG OUTPUTS
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkStart_taskset - ORIG=$TASKSET_ORIG CUR=$TASKSET_CUR" >>$HISTORYLOG


#RUN LOGIC
echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - -" >>$HISTORYLOG


#SYSLOG
if [[ $HOSTNAME == "IDSSYO61" ]]; then
	sendSyslog "$functionName" "PROBLEM" "checkStart_taskset" "ORIG=\"$TASKSET_ORIG\" CUR=\"$TASKSET_CUR\""
fi
if [[ $checkStart_problem == "1" ]]; then
	sendSyslog "$functionName" "PROBLEM" "checkStart_problemInfo" "VALUE=\"$checkStart_problemInfo\""
	#log "$functionName" "PROBLEM" "checkStart_problemInfo" "VALUE=\"$checkStart_problemInfo\""
else
	sendSyslog "$functionName" "WORKING" "checkStart_problemInfo" "VALUE=\"$checkStart_problemInfo\""
	#log "$functionName" "WORKING" "checkStart_problemInfo" "VALUE=\"$checkStart_problemInfo\""
fi



checkStart_fEnd=$(date "+%s")
checkStart_fRunTime=$(( checkStart_fEnd - checkStart_fStart ))
echo "checkStart_fRunTime $checkStart_fRunTime" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkStart_runTime - $checkStart_fRunTime" >>$HISTORYLOG
sendSyslog "$functionName" "WORKING" "checkStart_runTime" "VALUE=\"$checkStart_fRunTime\""
#log "$functionName" "WORKING" "checkStart_runTime" "VALUE=\"$checkStart_fRunTime\""
echo "checkStart_problem $checkStart_problem" >>$RUNLOG
echo "END==checkStart" >>$RUNLOG
}

###################################################################################################
checkSelf(){
echo "START==checkSelf" >>$RUNLOG


#DEFAULTS
checkSelf_fStart=$(date "+%s")
functionName=${FUNCNAME[0]}
checkSelf_warning="0"
checkSelf_problem="0"
checkSelf_workingInfo=""
checkSelf_warningInfo=""
checkSelf_problemInfo=""
checkSelf_scriptsRunningQty="0"
TEMPFILE=$TEMPDIR/$SCRIPT.$EPOCH.$functionName

#COLLECT OUTPUTS
cpinfo -y FW1 > $TEMPFILE 2>&1
checkSelf_scriptVersion=$SCRIPTHASH
checkSelf_scriptDate=$(stat $SCRIPTFULL | grep "Change" | awk '{print $2,$3}' | awk -F "." '{print $1}')
checkSelf_nestStatus=$NEST_ACCEPTED
checkSelf_selfHealEnabled=$SELF_HEAL_ENABLED
checkSelf_sub5monitoringEnabled=$(crontab -l -u hpna | grep "sub5monitoring" | grep -v "#" | wc -l)
checkSelf_uptime=$UPTIME1
checkSelf_load=$(uptime | awk -F "load average:" '{print $2}' | tr -d ' ')
checkSelf_scriptsRunningQty=$(ps -ef | grep $SCRIPT | grep -v "grep" | wc -l)
IFS=$'\n'
for LINE in `ps aux | grep $SCRIPT | grep -v "grep"` ; do
	PID=$(echo "$LINE" | awk '{print $2}')
	START=$(echo "$LINE" | awk '{print $9}')
	CPU=$(echo "$LINE" | awk '{print $3}')
	MEM=$(echo "$LINE" | awk '{print $4}')
	CMD=$(ps -o cmd -p $PID | grep -v CMD)
	STARTTIME=$(date --date="`ps -eo pid,lstart | awk -v p="$PID" '$1==p' | awk '{print $2,$3,$4,$5,$6}'`" +%s)
	STARTTIMESINCE=$(since_time_epoch $STARTTIME)
	checkSelf_scriptsRunningInfo="$checkSelf_scriptsRunningInfo [$CMD/$PID/$STARTTIME/$CPU/$MEM]"
	if [[ $STARTTIMESINCE -gt "3600" ]] && [[ $CMD != "" ]]; then
		kill -9 $PID
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - KILL ZOMBIE - [$CMD/$PID/$STARTTIME/$CPU/$MEM]" >>$HISTORYLOG
		IFS=$ORIGIFS
		sendSyslog "$functionName" "INFO" "checkSelf_scriptsRunningKill" "CMD=\"$CMD\" PID=\"$PID\" STARTTIME=\"$STARTTIME\" CPU=\"$CPU\" MEM=\"$MEM\""
		IFS=$'\n'
	fi
done
IFS=$ORIGIFS
checkSelf_tempDirFileQty=$(ls -al $TEMPDIR | wc -l)
checkSelf_tempDirFileSize=$(du -k $TEMPDIR | tail -1 | awk '{print $1}')
checkSelf_gatewayLogFileSize=$(ls -al $HISTORYLOG | awk '{print $5}')
checkSelf_runLogTarFileSize=$(ls -al $RUNLOGTAR | awk '{print $5}')
if [[ $MDPSENABLED -eq "2" ]]; then
	mplane > /dev/null 2>&1
fi
#checkSelf_localSnmpWorking=$(snmp .1.3.6.1.4.1.2620.1.6.1.0)
checkSelf_localSnmpWorking=$(stattestget 1.3.6.1.4.1.2620.1.6.1)

if [[ $SELF_HEAL_ENABLED -eq "1" ]]; then
	if [[ $checkSelf_localSnmpWorking == "SNMP_FAILED" ]] ; then
		FIX="SNMP not responding"
		COMMAND="tellpm process:snmpd;tellpm process:snmpd t"
		BEFORE_FIX=$(ps aux | grep "snmpd" | grep -v "grep" | tr ' ' '_')
		if [[ $SELF_HEAL_CHRONIC -eq "1" ]]; then
			COMMAND_EXECUTION="bypassed due to SELF_HEAL_CHRONIC"
			checkSelf_warningInfo="$checkSelf_warningInfo [Self Heal Bypassed due to Chronic issue - restart snmpd]"
		else
			COMMAND_EXECUTION=$(tellpm process:snmpd; tellpm process:snmpd t; sleep 30)
			checkSelf_workingInfo="$checkSelf_workingInfo [Self Heal - restart snmpd]"
		fi
		AFTER_FIX=$(ps aux | grep "snmpd" | grep -v "grep" | tr ' ' '_')
		COMMAND=$(echo $COMMAND | tr -d '"')

		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - SELF_HEAL - FIX=$FIX COMMAND=$COMMAND COMMAND_EXECUTION=$COMMAND_EXECUTION BEFORE_FIX=$BEFORE_FIX AFTER_FIX=$AFTER_FIX CRONIC=$SELF_HEAL_CHRONIC" >>$HISTORYLOG
		sendSyslog "$functionName" "INFO" "SELF_HEAL" "FIX=\"$FIX\" COMMAND=\"$COMMAND\" BEFORE_FIX=\"$BEFORE_FIX\" AFTER_FIX=\"$AFTER_FIX\" COMMAND_EXECUTION=\"$COMMAND_EXECUTION\" CRONIC=\"$SELF_HEAL_CHRONIC\""
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - SELF_HEAL - FIX=$FIX COMMAND=$COMMAND COMMAND_EXECUTION=$COMMAND_EXECUTION BEFORE_FIX=$BEFORE_FIX AFTER_FIX=$AFTER_FIX CRONIC=$SELF_HEAL_CHRONIC" >>$SELF_HEAL_LOG
	fi
fi


checkSelf_hwmodel0=$(/usr/sbin/dmidecode | grep Product | head -1 | awk '{print $3}')
checkSelf_hwmodel="unknown"
checkSelf_ipv6Enabled=$(cat /config/active | grep "ipv6 t" | wc -l)


if [[ $checkSelf_hwmodel0 == "MSN2740" ]]; then
	checkSelf_hwmodel="Check Point Maestro Orchestrator 170"
fi

if [[ $checkSelf_hwmodel0 == "MSN3700C" ]]; then
	checkSelf_hwmodel="Check Point Maestro Orchestrator 175"
fi

if [[ $checkSelf_hwmodel0 == "VMware" ]]; then
	checkSelf_hwmodel="VMware"
fi

if [[ $checkSelf_hwmodel0 == "MIC-5342" ]]; then
		checkSelf_chassisModel=$(asg stat | grep "System Status" | awk '{print $5}')
	if [[ $checkSelf_chassisModel == "64000" ]]; then
		checkSelf_hwmodel="Check Point 64000 SGM400"
	else
		checkSelf_hwmodel="Check Point Generic-SP SGM400"
	fi
fi

if [[ $checkSelf_hwmodel0 == "PD-10-00" ]]; then
	checkSelf_hwmodel="Check Point 23500"
fi

if [[ $checkSelf_hwmodel0 == "QL-25-00" ]] || [[ $APPLIANCETYPE0 == "QL-20-00" ]]; then
	if [[ $APPLIANCETYPE == "MAESTRO" ]]; then
		checkSelf_hwmodel="Check Point Maestro Security Group/16200"
	else
		checkSelf_hwmodel="Check Point 16200"
	fi
fi

if [[ $APPLIANCETYPE0 == "QP-20-00" ]]; then
	if [[ $APPLIANCETYPE == "MAESTRO" ]]; then
		checkSelf_hwmodel="Check Point Maestro Security Group/28600"
	else
		checkSelf_hwmodel="Check Point 28600"
	fi
fi

if [[ $checkSelf_hwmodel0 == "ST-4150-00" ]]; then
	checkSelf_hwmodel="Check Point Smart-1 5150"
fi	

if [[ $checkSelf_hwmodel0 == "ST-6000-XL" ]]; then
	checkSelf_hwmodel="Check Point Smart-1 6000"
fi	

if [[ $checkSelf_hwmodel0 == "PB-10-00" ]]; then
	checkSelf_hwmodel="Check Point 3200"
fi

if [[ $checkSelf_hwmodel0 == "RH-20-00" ]]; then
	checkSelf_hwmodel="Check Point 29200"
fi

if [[ $checkSelf_hwmodel == "Check Point 23500" ]]; then
	checkSelf_hwtype="NONSP"
	checkSelf_mac=$(/bin/cp-ifconfig.sh Mgmt | grep HWaddr | awk '{print $5}')
	checkSelf_majorVer=$(fw ver 2>&1 | grep -v cp.macro | cut -c 40- | awk {'print $1'})
	if [[ $checkSelf_majorVer == "R80.40" ]]; then
		checkSelf_minorVer=$(cat $TEMPFILE | grep HOTFIX_R80_40_JUMBO_HF_MAIN | awk '{print "JHF"$NF}')
		if [[ $checkSelf_minorVer == "JHF78" ]]; then
			PHFTAKE=$(cat $TEMPFILE | grep "HOTFIX_R80_40_JHF_T78_557_MAIN" | grep "Take" | awk '{print $NF}')
			if [[ -n $PHFTAKE ]]; then
				checkSelf_minorVer="$checkSelf_minorVer"_T"$PHFTAKE"
			fi
		fi
	else
		checkSelf_minorVer=$(cat $TEMPFILE | grep "HOTFIX_R80_40_JUMBO_HF_MAIN\|HOTFIX_R81_10_JUMBO_HF_MAIN\|HOTFIX_R81_20_JUMBO_HF_MAIN" | awk '{print "JHF"$NF}')
		if [[ $checkSelf_minorVer == "JHF45" ]]; then
			PHFTAKE=$(cat $TEMPFILE | grep "HOTFIX_R81_10_JHF_T45_487_MAIN" | grep "Take" | awk '{print $NF}')
			if [[ -n $PHFTAKE ]]; then
				checkSelf_minorVer="$checkSelf_minorVer"_T"$PHFTAKE"
			fi
		elif [[ $checkSelf_minorVer == "JHF130" ]]; then
			PHFTAKE=$(cat $TEMPFILE | grep "HOTFIX_R81_10_JHF_T130_348_MAIN" | grep "Take" | awk '{print $NF}')
			if [[ -n $PHFTAKE ]]; then
				checkSelf_minorVer="$checkSelf_minorVer"_T"$PHFTAKE"
			fi
		fi
	fi
	checkSelf_ha="1"
	#checkSelf_haInstalled=$(snmp .1.3.6.1.4.1.2620.1.5.2)
	checkSelf_haInstalled=$(stattestget 1.3.6.1.4.1.2620.1.5.2)
	checkSelf_haNotStarted=$(cphaprob stat | grep "HA module not started." | wc -l)
fi

if [[ $checkSelf_hwmodel == "Check Point Maestro Security Group/16200" ]]; then
	checkSelf_hwtype="MAESTRO"
	checkSelf_mac=$(/bin/cp-ifconfig.sh Mgmt | grep HWaddr | awk '{print $5}')
	checkSelf_majorVer=$(cat $FWDIR/boot/ha_boot.conf | grep release | awk '{print $NF}')
	checkSelf_minorVer=$(cat $TEMPFILE | grep "HOTFIX_R80_30SP_JHF_MAIN\|HOTFIX_R81_10_JUMBO_HF_MAIN\|HOTFIX_R81_20_JUMBO_HF_MAIN" | awk '{print "JHF"$NF}')
	if [[ $checkSelf_minorVer == "JHF45" ]]; then
		PHFTAKE=$(cat $TEMPFILE | grep "HOTFIX_R81_10_JHF_T45_487_MAIN" | grep "Take" | awk '{print $NF}')
		if [[ -n $PHFTAKE ]]; then
			checkSelf_minorVer="$checkSelf_minorVer"_T"$PHFTAKE"
		fi
	elif [[ $checkSelf_minorVer == "JHF130" ]]; then
		PHFTAKE=$(cat $TEMPFILE | grep "HOTFIX_R81_10_JHF_T130_348_MAIN" | grep "Take" | awk '{print $NF}')
		if [[ -n $PHFTAKE ]]; then
			checkSelf_minorVer="$checkSelf_minorVer"_T"$PHFTAKE"
		fi
	elif [[ $checkSelf_minorVer == "JHF95" ]]; then
		PHFTAKE=$(cat $TEMPFILE | grep "HOTFIX_R81_10_JHF_T95_623_MAIN" | grep "Take" | awk '{print $NF}')
		if [[ -n $PHFTAKE ]]; then
			checkSelf_minorVer="$checkSelf_minorVer"_T"$PHFTAKE"
		fi
	fi
	checkSelf_ha="1"
	#checkSelf_haInstalled=$(snmp .1.3.6.1.4.1.2620.1.5.2)
	checkSelf_haInstalled=$(stattestget 1.3.6.1.4.1.2620.1.5.2)
	checkSelf_haNotStarted=$(cphaprob stat | grep "HA module not started." | wc -l)
fi

if [[ $checkSelf_hwmodel == "Check Point Maestro Security Group/28600" ]]; then
	checkSelf_hwtype="MAESTRO"
	checkSelf_mac=$(/bin/cp-ifconfig.sh Mgmt | grep HWaddr | awk '{print $5}')
	checkSelf_majorVer=$(cat $FWDIR/boot/ha_boot.conf | grep release | awk '{print $NF}')
	checkSelf_minorVer=$(cat $TEMPFILE | grep "HOTFIX_R80_30SP_JHF_MAIN\|HOTFIX_R81_10_JUMBO_HF_MAIN\|HOTFIX_R81_20_JUMBO_HF_MAIN" | awk '{print "JHF"$NF}')
	if [[ $checkSelf_minorVer == "JHF45" ]]; then
		PHFTAKE=$(cat $TEMPFILE | grep "HOTFIX_R81_10_JHF_T45_487_MAIN" | grep "Take" | awk '{print $NF}')
		if [[ -n $PHFTAKE ]]; then
			checkSelf_minorVer="$checkSelf_minorVer"_T"$PHFTAKE"
		fi
	elif [[ $checkSelf_minorVer == "JHF130" ]]; then
		PHFTAKE=$(cat $TEMPFILE | grep "HOTFIX_R81_10_JHF_T130_348_MAIN" | grep "Take" | awk '{print $NF}')
		if [[ -n $PHFTAKE ]]; then
			checkSelf_minorVer="$checkSelf_minorVer"_T"$PHFTAKE"
		fi
	elif [[ $checkSelf_minorVer == "JHF95" ]]; then
		PHFTAKE=$(cat $TEMPFILE | grep "HOTFIX_R81_10_JHF_T95_623_MAIN" | grep "Take" | awk '{print $NF}')
		if [[ -n $PHFTAKE ]]; then
			checkSelf_minorVer="$checkSelf_minorVer"_T"$PHFTAKE"
		fi
	fi
	checkSelf_ha="1"
	#checkSelf_haInstalled=$(snmp .1.3.6.1.4.1.2620.1.5.2)
	checkSelf_haInstalled=$(stattestget 1.3.6.1.4.1.2620.1.5.2)
	checkSelf_haNotStarted=$(cphaprob stat | grep "HA module not started." | wc -l)
fi

if [[ $checkSelf_hwmodel == "Check Point 16200" ]] || [[ $checkSelf_hwmodel == "Check Point 3200" ]]; then
	checkSelf_hwtype="NONSP"
	checkSelf_mac=$(/bin/cp-ifconfig.sh Mgmt | grep "HWaddr" | awk '{print $5}')
	checkSelf_majorVer=$(cat $FWDIR/boot/ha_boot.conf 2>&1 | grep "release" | awk '{print $NF}')
	if [[ ! $checkSelf_majorVer ]]; then
		checkSelf_majorVer=$(fw ver | awk -F "version" '{print $NF}' | awk '{print $1}')
	fi
	checkSelf_minorVer=$(cat $TEMPFILE | grep "HOTFIX_R80_40_JUMBO_HF_MAIN\|HOTFIX_R81_10_JUMBO_HF_MAIN\|HOTFIX_R81_20_JUMBO_HF_MAIN" | awk '{print "JHF"$NF}')
	if [[ $checkSelf_minorVer == "JHF45" ]]; then
		PHFTAKE=$(cat $TEMPFILE | grep "HOTFIX_R81_10_JHF_T45_487_MAIN" | grep "Take" | awk '{print $NF}')
		if [[ -n $PHFTAKE ]]; then
			checkSelf_minorVer="$checkSelf_minorVer"_T"$PHFTAKE"
		fi
	elif [[ $checkSelf_minorVer == "JHF130" ]]; then
		PHFTAKE=$(cat $TEMPFILE | grep "HOTFIX_R81_10_JHF_T130_348_MAIN" | grep "Take" | awk '{print $NF}')
		if [[ -n $PHFTAKE ]]; then
			checkSelf_minorVer="$checkSelf_minorVer"_T"$PHFTAKE"
		fi
	fi
	checkSelf_ha="1"
	#checkSelf_haInstalled=$(snmp .1.3.6.1.4.1.2620.1.5.2)
	checkSelf_haInstalled=$(stattestget 1.3.6.1.4.1.2620.1.5.2)
	checkSelf_haNotStarted=$(cphaprob stat | grep "HA module not started." | wc -l)
fi

if [[ $checkSelf_hwmodel == "Check Point 28600" ]]; then
	checkSelf_hwtype="NONSP"
	checkSelf_mac=$(/bin/cp-ifconfig.sh Mgmt | grep "HWaddr" | awk '{print $5}')
	checkSelf_majorVer=$(cat $FWDIR/boot/ha_boot.conf 2>&1 | grep "release" | awk '{print $NF}')
	if [[ ! $checkSelf_majorVer ]]; then
		checkSelf_majorVer=$(fw ver | awk -F "version" '{print $NF}' | awk '{print $1}')
	fi
	checkSelf_minorVer=$(cat $TEMPFILE | grep "HOTFIX_R80_40_JUMBO_HF_MAIN\|HOTFIX_R81_10_JUMBO_HF_MAIN\|HOTFIX_R81_20_JUMBO_HF_MAIN" | awk '{print "take_"$NF}')
	checkSelf_ha="1"
	#checkSelf_haInstalled=$(snmp .1.3.6.1.4.1.2620.1.5.2)
	checkSelf_haInstalled=$(stattestget 1.3.6.1.4.1.2620.1.5.2)
	checkSelf_haNotStarted=$(cphaprob stat | grep "HA module not started." | wc -l)
fi

if [[ $checkSelf_hwmodel == "VMware" ]] ; then
	checkSelf_hwtype="VM"
	checkSelf_mac="N/A"
	checkSelf_majorVer=$(fw ver 2>&1 | grep -v cp.macro | cut -c 40- | awk {'print $1'})
	checkSelf_minorVer=$(cat $TEMPFILE | grep "HOTFIX_R80_40_JUMBO_HF_MAIN\|HOTFIX_R81_10_JUMBO_HF_MAIN\|HOTFIX_R81_20_JUMBO_HF_MAIN" | awk '{print "JHF"$NF}')
	#checkSelf_minorVer=$(grep -B1 "SU_Build_Take" $CPDIR/registry/HKLM_registry.data | grep -A1 JUMBO_HF_Bundle | grep SU_Build_Take | tr -dc "\n0-9" | sort -n | tail -1)
	if [[ $checkSelf_minorVer == "JHF130" ]]; then
		PHFTAKE=$(cat $TEMPFILE | grep "HOTFIX_R81_10_JHF_T130_348_MAIN" | grep "Take" | awk '{print $NF}')
		if [[ -n $PHFTAKE ]]; then
			checkSelf_minorVer="$checkSelf_minorVer"_T"$PHFTAKE"
		fi
	elif [[ $checkSelf_minorVer == "JHF78" ]]; then
		PHFTAKE=$(cat $TEMPFILE | grep "HOTFIX_R80_40_JHF_T78_557_MAIN" | grep "Take" | awk '{print $NF}')
		if [[ -n $PHFTAKE ]]; then
			checkSelf_minorVer="$checkSelf_minorVer"_T"$PHFTAKE"
		fi
	fi
	if [[ $APPLIANCETYPE == "SM" ]]; then
		checkSelf_ha="0"
		checkSelf_haInstalled="NA"
		checkSelf_haNotStarted="NA"
	else
		checkSelf_ha="1"
		#checkSelf_haInstalled=$(snmp .1.3.6.1.4.1.2620.1.5.2)
		checkSelf_haInstalled=$(stattestget 1.3.6.1.4.1.2620.1.5.2)
		checkSelf_haNotStarted=$(cphaprob stat | grep "HA module not started." | wc -l)
	fi
fi

if [[ $checkSelf_hwmodel == "Check Point Maestro Orchestrator 170" ]] || [[ $checkSelf_hwmodel == "Check Point Maestro Orchestrator 175" ]] ; then
	checkSelf_hwtype="MHO"
	#checkSelf_mac=$(/sbin/dmidecode | grep -A5 "Chassis Information" | grep "Serial Number" | awk '{print $NF}' | head -1)
	checkSelf_mac0=$(/sbin/dmidecode | grep UUID | awk -F "-" '{print $NF}' | awk '{gsub(/../,"&:"); sub(/:$/,"")}1')
	checkSelf_sn=$(/sbin/dmidecode | grep -A5 "Chassis Information" | grep "Serial Number" | awk '{print $NF}' | head -1)
	checkSelf_mac="$checkSelf_sn $checkSelf_mac0"
	checkSelf_majorVer=$(fw ver 2>&1 | grep -v cp.macro | cut -c 40- | awk {'print $1'})
	if [[ $checkSelf_majorVer == "R81.10" || $checkSelf_majorVer == "R81.20" ]]; then
		checkSelf_minorVer=$(cat $TEMPFILE | grep "HOTFIX_R81_10_JUMBO_HF_MAIN\|HOTFIX_R81_20_JUMBO_HF_MAIN" | awk '{print "JHF"$NF}')
		if [[ $checkSelf_minorVer == "JHF130" ]]; then
			cpinfo -y SMO > $TEMPFILE 2>&1
			PHFTAKE=$(cat $TEMPFILE | grep "HOTFIX_R81_10_JHF_T130_542_MAIN" | grep "Take" | awk '{print $NF}')
			if [[ -n $PHFTAKE ]]; then
				checkSelf_minorVer="$checkSelf_minorVer"_T"$PHFTAKE"
			fi
		elif [[ $checkSelf_minorVer == "JHF95" ]]; then
			PHFTAKE=$(cat $TEMPFILE | grep "HOTFIX_R81_10_JHF_T95_623_MAIN" | grep "Take" | awk '{print $NF}')
			if [[ -n $PHFTAKE ]]; then
				checkSelf_minorVer="$checkSelf_minorVer"_T"$PHFTAKE"
			fi
		fi
	else
		checkSelf_minorVer="NA"
	fi
	if [[ $checkSelf_minorVer == "" ]]; then
		checkSelf_minorVer="NA"
	fi
	checkSelf_ha="0"
	checkSelf_haInstalled="NA"
	checkSelf_haNotStarted="NA"
fi

if [[ $checkSelf_hwmodel == "Check Point 64000 SGM400" ]]; then
	checkSelf_hwtype="SP"
	checkSelf_snToCkCh1=$(gexec -a --vs 0 -b 1_01 -g0 -c 'snmpwalk -v 3 -l authNoPriv -u asg1 -A asg1asg1 -a MD5 198.51.100.33 .iso.3.6.1.4.1.16394.2.1.1.36.10' | grep "STRING" | awk -F "=" '{print $NF}' | tr -d '"' | awk '{print $NF}' | tr -d "/")
	checkSelf_snToCkCh2=$(gexec -a --vs 0 -b 2_01 -g0 -c 'snmpwalk -v 3 -l authNoPriv -u asg1 -A asg1asg1 -a MD5 198.51.100.33 .iso.3.6.1.4.1.16394.2.1.1.36.10' | grep "STRING" | awk -F "=" '{print $NF}' | tr -d '"' | awk '{print $NF}' | tr -d "/")
	checkSelf_mac=$(echo CH1 - $checkSelf_snToCkCh1 CH2 - $checkSelf_snToCkCh2)
	
	# if [[ -f /opt/CPsuite-R76/fw1/bin/asg ]]; then
		# checkSelf_majorVer=$(fw ver 2>&1 | grep -v cp.macro | cut -c 47- | awk {'print $1'})
		# checkSelf_minorVer=$(cat /etc/sysconfig/miniWrapperTake | awk '{print $2}')
	# else
		checkSelf_majorVer=$(fw ver 2>&1 | grep -v cp.macro | cut -c 40- | awk {'print $1'})
		if [[ $checkSelf_majorVer == "R81.10" || $checkSelf_majorVer == "R81.20" ]]; then
			checkSelf_minorVer=$(cat $TEMPFILE | grep "HOTFIX_R81_10_JUMBO_HF_MAIN\|HOTFIX_R81_20_JUMBO_HF_MAIN" | awk '{print "JHF"$NF}')
			if [[ $checkSelf_minorVer == "JHF130" ]]; then
				PHFTAKE=$(cat $TEMPFILE | grep "HOTFIX_R81_10_JHF_T130_348_MAIN" | awk '{print $NF}')
				if [[ -n $PHFTAKE ]]; then
					checkSelf_minorVer="$checkSelf_minorVer"_T"$PHFTAKE"
				fi
			elif [[ $checkSelf_minorVer == "JHF45" ]]; then
				PHFTAKE=$(cat $TEMPFILE | grep "HOTFIX_R81_10_JHF_MDPS_T45_MAIN" | awk '{print $NF}')
				if [[ -n $PHFTAKE ]]; then
					checkSelf_minorVer="$checkSelf_minorVer"_T"$PHFTAKE"
				fi
			fi
		else
			checkSelf_minorVer="n/a"
		fi
	# fi
	checkSelf_ha="0"
	checkSelf_haInstalled="NA"
	checkSelf_haNotStarted="NA"

fi

if [[ $checkSelf_hwmodel == "Check Point Smart-1 5150" ]]; then
	checkSelf_hwtype="SM"
	checkSelf_mac=$(/bin/cp-ifconfig.sh Mgmt 2>&1 | grep HWaddr | awk '{print $5}')
	if [[ $checkSelf_mac == "" ]]; then
		checkSelf_mac=$(/bin/cp-ifconfig.sh Mgmt1 2>&1 | grep HWaddr | awk '{print $5}')
	fi
	checkSelf_majorVer=$(fw ver 2>&1 | grep -v cp.macro | cut -c 40- | awk {'print $1'})
	checkSelf_minorVer=$(cat $TEMPFILE | grep "JUMBO_HF_MAIN" | awk '{print $NF}' | uniq | tail -1 | awk '{print "take_"$NF}')
	# checkSelf_ha="0"
	# checkSelf_haInstalled="NA"
	# checkSelf_haNotStarted="NA"
	checkSelf_minorVer=$(cat $TEMPFILE | grep "HOTFIX_R81_10_JUMBO_HF_MAIN\|HOTFIX_R81_20_JUMBO_HF_MAIN" | awk '{print "JHF"$NF}')
	if [[ $checkSelf_minorVer == "JHF45" ]]; then
		PHFTAKE=$(cat $TEMPFILE | grep "HOTFIX_R81_10_JHF_T45_487_MAIN" | awk '{print $NF}')
		if [[ -n $PHFTAKE ]]; then
			checkSelf_minorVer="$checkSelf_minorVer"_T"$PHFTAKE"
		fi
	elif [[ $checkSelf_minorVer == "JHF130" ]]; then
		PHFTAKE=$(cat $TEMPFILE | grep "HOTFIX_R81_10_JHF_T130_348_MAIN" | awk '{print $NF}')
		if [[ -n $PHFTAKE ]]; then
			checkSelf_minorVer="$checkSelf_minorVer"_T"$PHFTAKE"
		fi	
	fi	
fi

if [[ $checkSelf_hwmodel == "Check Point Smart-1 6000" ]]; then
	checkSelf_hwtype="SM"
	checkSelf_mac=$(/bin/cp-ifconfig.sh Mgmt 2>&1 | grep HWaddr | awk '{print $5}')
	if [[ $checkSelf_mac == "" ]]; then
		checkSelf_mac=$(/bin/cp-ifconfig.sh Mgmt1 2>&1 | grep HWaddr | awk '{print $5}')
	fi
	checkSelf_majorVer=$(fw ver 2>&1 | grep -v cp.macro | cut -c 40- | awk {'print $1'})
	# checkSelf_minorVer=$(cpinfo -y all 2>&1 | grep "JUMBO_HF_MAIN" | awk '{print $NF}' | uniq | tail -1 | awk '{print "take_"$NF}')
	# checkSelf_ha="0"
	# checkSelf_haInstalled="NA"
	# checkSelf_haNotStarted="NA"
	checkSelf_minorVer=$(cat $TEMPFILE | grep "HOTFIX_R81_10_JUMBO_HF_MAIN\|HOTFIX_R81_20_JUMBO_HF_MAIN" | awk '{print "JHF"$NF}')
	if [[ $checkSelf_minorVer == "JHF45" ]]; then
		PHFTAKE=$(cat $TEMPFILE | grep "HOTFIX_R81_10_JHF_T45_487_MAIN" | awk '{print $NF}')
		if [[ -n $PHFTAKE ]]; then
			checkSelf_minorVer="$checkSelf_minorVer"_T"$PHFTAKE"
		fi
	elif [[ $checkSelf_minorVer == "JHF130" ]]; then
		PHFTAKE=$(cat $TEMPFILE | grep "HOTFIX_R81_10_JHF_T130_348_MAIN" | awk '{print $NF}')
		if [[ -n $PHFTAKE ]]; then
			checkSelf_minorVer="$checkSelf_minorVer"_T"$PHFTAKE"
		fi	
	fi
	
	
fi

if [[ $checkSelf_hwmodel == "Check Point 29200" ]]; then
	checkSelf_hwtype="NONSP"
	checkSelf_mac=$(/bin/cp-ifconfig.sh Mgmt | grep "HWaddr" | awk '{print $5}')
	checkSelf_majorVer=$(fw ver 2>&1 | grep -v cp.macro | cut -c 40- | awk {'print $1'})
	checkSelf_minorVer=$(cat $TEMPFILE | grep "HOTFIX_R81_20_JUMBO_HF_MAIN" | awk '{print "JHF"$NF}')
	if [[ $checkSelf_minorVer == "JHF65" ]]; then
		PHFTAKE=$(cat $TEMPFILE | grep "HOTFIX_R81_10_JHF_T45_487_MAIN" | awk '{print $NF}')
		if [[ -n $PHFTAKE ]]; then
			checkSelf_minorVer="$checkSelf_minorVer"_T"$PHFTAKE"
		fi
	fi	
	checkSelf_ha="1"
	#checkSelf_haInstalled=$(snmp .1.3.6.1.4.1.2620.1.5.2)
	checkSelf_haInstalled=$(stattestget 1.3.6.1.4.1.2620.1.5.2)
	checkSelf_haNotStarted=$(cphaprob stat | grep "HA module not started." | wc -l)

fi


if [[ $APPLIANCETYPE == "MAESTRO-ORCHESTRATOR" ]]; then
	checkSelf_enabledBlades="mho"
elif [[ $APPLIANCETYPE == "SM" ]]; then
	checkSelf_enabledBlades="management"
else
	TEMPVAR_ENABLEDBLADES=$(enabled_blades)
	checkSelf_enabledBlades=$(printvar TEMPVAR_ENABLEDBLADES)
	if [[ $checkSelf_enabledBlades == "" ]]; then
		sleep 5
		TEMPVAR_ENABLEDBLADES=$(enabled_blades)
		checkSelf_enabledBlades=$(printvar TEMPVAR_ENABLEDBLADES)
		if [[ $checkSelf_enabledBlades == "" ]]; then
			checkSelf_enabledBlades="n/a"
		fi
	elif [[ $checkSelf_enabledBlades =~ "N/A" ]]; then
		checkSelf_enabledBlades="n/a - No SIC"
	fi
	checkSelf_bladeIps=$(printvar TEMPVAR_ENABLEDBLADES | grep "ips" | wc -l)
	checkSelf_bladeAppi=$(printvar TEMPVAR_ENABLEDBLADES | grep "appi" | wc -l)
	checkSelf_bladeAb=$(printvar TEMPVAR_ENABLEDBLADES | grep "anti_bot" | wc -l)
	checkSelf_bladeAv=$(printvar TEMPVAR_ENABLEDBLADES | grep "av" | wc -l)
	checkSelf_bladeUrlf=$(printvar TEMPVAR_ENABLEDBLADES | grep "urlf" | wc -l)
	checkSelf_bladeContentAwareness=$(printvar TEMPVAR_ENABLEDBLADES | grep "content_awareness" | wc -l)
	checkSelf_bladeTe=$(printvar TEMPVAR_ENABLEDBLADES | grep "ThreatEmulation" | wc -l)
	checkSelf_bladeTx=$(printvar TEMPVAR_ENABLEDBLADES | grep "Scrub" | wc -l)
fi

checkSelf_bonding=$(cat /config/active | grep "bonding:group" | grep " t" | awk -F ":" '{print $3}' | tr -d 't' | awk '{print $1}' | sort -n | uniq | wc -l)

if [[ $IDSENABLED == "1" ]]; then
	checkSelf_ipv6Configured="1"
else
	checkSelf_ipv6Configured=$(cat /config/active | grep "ip6addr" | grep " t" | grep -v "lo" | head -1 | wc -l)
fi

if [[ $checkSelf_hwtype == "SP" ]] && [[ $checkSelf_majorVer == "R81.10" || $checkSelf_majorVer == "R81.20" ]]; then
	if [[ $LOCALSMO == "1" ]]; then
		gexec -b 1_01 -c "ccutil ssm_exec 1 'show system uptime'" > $TEMPFILE
		dos2unix $TEMPFILE > /dev/null 2>&1
		checkSelf_ssmUptimeChassis1Ssm1=$(cat $TEMPFILE | awk -F "]" '{print $NF}' | grep "days" | tr -d '.')
		checkSelf_ssmUptimeChassis1Ssm1Error=$(cat $TEMPFILE | awk -F "]" '{print $NF}' | grep "Running db may be inconsistent")
		if [[ $checkSelf_ssmUptimeChassis1Ssm1Error == "" ]]; then
			checkSelf_ssmUptimeChassis1Ssm1Error="N/A"
		fi
		gexec -b 1_01 -c "ccutil ssm_exec 2 'show system uptime'" > $TEMPFILE
		dos2unix $TEMPFILE > /dev/null 2>&1
		checkSelf_ssmUptimeChassis1Ssm2=$(cat $TEMPFILE | awk -F "]" '{print $NF}' | grep "days" | tr -d '.')
		checkSelf_ssmUptimeChassis1Ssm2Error=$(cat $TEMPFILE | awk -F "]" '{print $NF}' | grep "Running db may be inconsistent")
		if [[ $checkSelf_ssmUptimeChassis1Ssm2Error == "" ]]; then
			checkSelf_ssmUptimeChassis1Ssm2Error="N/A"
		fi
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_ssmUptimeChassis1Ssm1 - $checkSelf_ssmUptimeChassis1Ssm1 ($checkSelf_ssmUptimeChassis1Ssm1Error)" >>$HISTORYLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_ssmUptimeChassis1Ssm2 - $checkSelf_ssmUptimeChassis1Ssm2 ($checkSelf_ssmUptimeChassis1Ssm2Error)" >>$HISTORYLOG
		sendSyslog "$functionName" "INFO" "checkSelf_ssmUptimeChassis1Ssm1" "VALUE=\"$checkSelf_ssmUptimeChassis1Ssm1\" ERROR=\"$checkSelf_ssmUptimeChassis1Ssm1Error\"" "SMO"
		sendSyslog "$functionName" "INFO" "checkSelf_ssmUptimeChassis1Ssm2" "VALUE=\"$checkSelf_ssmUptimeChassis1Ssm2\" ERROR=\"$checkSelf_ssmUptimeChassis1Ssm2Error\"" "SMO"

		gexec -b 2_01 -c "ccutil ssm_exec 1 'show system uptime'" > $TEMPFILE
		dos2unix $TEMPFILE > /dev/null 2>&1
		checkSelf_ssmUptimeChassis2Ssm1=$(cat $TEMPFILE | awk -F "]" '{print $NF}' | grep "days" | tr -d '.')
		checkSelf_ssmUptimeChassis2Ssm1Error=$(cat $TEMPFILE | awk -F "]" '{print $NF}' | grep "Running db may be inconsistent")
		if [[ $checkSelf_ssmUptimeChassis2Ssm1Error == "" ]]; then
			checkSelf_ssmUptimeChassis2Ssm1Error="N/A"
		fi
		gexec -b 2_01 -c "ccutil ssm_exec 2 'show system uptime'" > $TEMPFILE
		dos2unix $TEMPFILE > /dev/null 2>&1
		checkSelf_ssmUptimeChassis2Ssm2=$(cat $TEMPFILE | awk -F "]" '{print $NF}' | grep "days" | tr -d '.')
		checkSelf_ssmUptimeChassis2Ssm2Error=$(cat $TEMPFILE | awk -F "]" '{print $NF}' | grep "Running db may be inconsistent")
		if [[ $checkSelf_ssmUptimeChassis2Ssm2Error == "" ]]; then
			checkSelf_ssmUptimeChassis2Ssm2Error="N/A"
		fi
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_ssmUptimeChassis2Ssm1 - $checkSelf_ssmUptimeChassis2Ssm1 ($checkSelf_ssmUptimeChassis2Ssm1Error)" >>$HISTORYLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_ssmUptimeChassis2Ssm2 - $checkSelf_ssmUptimeChassis2Ssm2 ($checkSelf_ssmUptimeChassis2Ssm2Error)" >>$HISTORYLOG
		sendSyslog "$functionName" "INFO" "checkSelf_ssmUptimeChassis2Ssm1" "VALUE=\"$checkSelf_ssmUptimeChassis2Ssm1\" ERROR=\"$checkSelf_ssmUptimeChassis2Ssm1Error\"" "SMO"
		sendSyslog "$functionName" "INFO" "checkSelf_ssmUptimeChassis2Ssm2" "VALUE=\"$checkSelf_ssmUptimeChassis2Ssm2\" ERROR=\"$checkSelf_ssmUptimeChassis2Ssm2Error\"" "SMO"
	fi
fi



if [[ $MDPSENABLED == "0" ]]; then
	checkSelf_mdpsMode="Disabled"
	checkSelf_mdpsCpus="n/a"
fi
if [[ $MDPSENABLED == "1" ]]; then
	checkSelf_mdpsMode="Resource Only"
	checkSelf_mdpsInterface=$(cat /config/active | grep "mdps:interface:management" | awk '{print $NF}')
	checkSelf_mdpsCpus=$(cat /config/active | grep "mdps:resource:cpus" | awk '{print $NF}')
fi
if [[ $MDPSENABLED == "2" ]]; then
	checkSelf_mdpsMode="Resource and Routing"
	checkSelf_mdpsInterface=$(cat /config/active | grep "mdps:interface:management" | awk '{print $NF}')
	checkSelf_mdpsCpus=$(cat /config/active | grep "mdps:resource:cpus" | awk '{print $NF}')
fi

checkSelf_totalCpus=$(cat /proc/cpuinfo | grep "processor" | wc -l)



if [[ $APPLIANCETYPE == "SM" ]]; then
	checkSelf_instanceCoreXl="n/a"
else
	checkSelf_instanceCoreXl=$(cat $FWDIR/boot/boot.conf | grep "KERN_INSTANCE_NUM" | awk '{print $NF}')
fi

if [[ $checkSelf_ipv6Enabled == "1" ]]; then
	checkSelf_instanceCoreXl6=$(cat $FWDIR/boot/boot.conf | grep "KERN6_INSTANCE_NUM" | awk '{print $NF}')
elif [[ $APPLIANCETYPE == "SM" ]]; then
	checkSelf_instanceCoreXl6="n/a"
else
	checkSelf_instanceCoreXl6="0"
fi

if [[ $MDPSENABLED == "0" ]]; then
	checkSelf_activeMdps="0"
else
	checkSelf_activeMdps="$(( checkSelf_mdpsCpus * 2 ))"
fi

if [[ $APPLIANCETYPE == "SM" ]]; then
	checkSelf_activeFwd="0"
else
	checkSelf_activeFwd="1"
fi

if [[ $APPLIANCETYPE == "SM" ]]; then
	checkSelf_activeCorexl="0"
else
	checkSelf_activeCoreXl="$(( checkSelf_instanceCoreXl - checkSelf_activeMdps ))"
fi

if [[ $checkSelf_ipv6Enabled == "0" ]]; then
	checkSelf_activeCoreXl6="0"
else
	checkSelf_activeCoreXl6="$(( checkSelf_instanceCoreXl6 - checkSelf_activeMdps ))"
fi

if [[ $APPLIANCETYPE == "SM" ]]; then
	checkSelf_activeSnd="0"
else
	checkSelf_activeSnd="$(( $checkSelf_totalCpus - $checkSelf_activeCoreXl - $checkSelf_activeFwd - $checkSelf_activeMdps ))"
fi


if [[ -e $FWDIR/bin/dynamic_balancing ]]; then
	checkSelf_dynamicBalancing=$(dynamic_balancing -p | awk -F "Dynamic Balancing is currently " '{print $NF}')
else
	checkSelf_dynamicBalancing="n/a"
fi



#LOG OUTPUTS
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_mac - $checkSelf_mac" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_hwmodel - $checkSelf_hwmodel" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_hwmodel0 - $checkSelf_hwmodel0" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_scriptDate - $checkSelf_scriptDate" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_uptime - $checkSelf_uptime" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_nestStatus - $checkSelf_nestStatus" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_scriptsRunningQty - $checkSelf_scriptsRunningQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_scriptsRunningInfo - $checkSelf_scriptsRunningInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_tempDirFileQty - $checkSelf_tempDirFileQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_tempDirFileSize - $checkSelf_tempDirFileSize" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_gatewayLogFileSize - $checkSelf_gatewayLogFileSize" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_runLogTarFileSize - $checkSelf_runLogTarFileSize" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_majorVer - $checkSelf_majorVer" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_minorVer - $checkSelf_minorVer" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_ipv6Enabled - $checkSelf_ipv6Enabled" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_ipv6Configured - $checkSelf_ipv6Configured" >>$HISTORYLOG
if [[ $checkSelf_hwtype != "MHO" ]]; then
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_mdpsMode - $checkSelf_mdpsMode" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_mdpsInterface - $checkSelf_mdpsInterface" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_mdpsCpus - $checkSelf_mdpsCpus" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_instanceCoreXl - $checkSelf_instanceCoreXl" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_instanceCoreXl6 - $checkSelf_instanceCoreXl6" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_totalCpus - $checkSelf_totalCpus" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_activeMdps - $checkSelf_activeMdps" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_activeCoreXl - $checkSelf_activeCoreXl" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_activeCoreXl6 - $checkSelf_activeCoreXl6" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_activeSnd - $checkSelf_activeSnd" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_cmaName - $CMANAME" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_cmaVersion - $CMAVER" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_clusterName - $CLUSTERNAME" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_clusterMembers - $CLUSTERMEMBERS1" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_bladeAb - $checkSelf_bladeAb" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_bladeAv - $checkSelf_bladeAv" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_bladeAppi - $checkSelf_bladeAppi" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_bladeUrlf - $checkSelf_bladeUrlf" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_bladeIps - $checkSelf_bladeIps" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_bladeContentAwareness - $checkSelf_bladeContentAwareness" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_bladeTx - $checkSelf_bladeTx" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_bladeTe - $checkSelf_bladeTe" >>$HISTORYLOG
fi
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_enabledBlades - $checkSelf_enabledBlades" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_selfHealEnabled - $checkSelf_selfHealEnabled" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_sub5monitoringEnabled - $checkSelf_sub5monitoringEnabled" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_dynamicBalancing - $checkSelf_dynamicBalancing" >>$HISTORYLOG



if [[ $APPLIANCETYPE != "SM" ]] && [[ $APPLIANCETYPE != "MAESTRO-ORCHESTRATOR" ]]; then
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_management - CMA=$CMANAME VERSION=$CMAVER" >>$HISTORYLOG
fi

if [[ $IDSENABLED != "1" ]] && [[ $APPLIANCETYPE != "MAESTRO-ORCHESTRATOR" ]] && [[ $APPLIANCETYPE != "SM" ]]; then
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_cluster - CLUSTERNAME=$CLUSTERNAME MEMBERS=$CLUSTERMEMBERS1" >>$HISTORYLOG
	sendSyslog "$functionName" "INFO" "checkSelf_clusterName" "VALUE=\"$CLUSTERNAME\""
	if [[ $APPLIANCETYPE == "NONSP" ]]; then
		sendSyslog "$functionName" "INFO" "checkSelf_clusterMembers" "VALUE=\"$CLUSTERMEMBERS1\""
	fi
fi

if [[ $checkSelf_hwtype == "SP" || $checkSelf_hwtype == "MAESTRO" ]]; then
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - SMO - $LOCALSMO" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - ALL SGMS - $ALLSGMSINGLELINE" >>$HISTORYLOG
fi

#RUN LOGIC
echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - -" >>$HISTORYLOG

if [[ $checkSelf_haInstalled == "1" ]] && [[ $checkSelf_haNotStarted == "1" ]] ; then
	echo "Logic - HA installed but not started: $checkSelf_haInstalled $checkSelf_haNotStarted" >>$RUNLOG
    echo "$HISTORYLOGPREAMBLE - $functionName - INFO - HA Installed not Started - $checkSelf_haInstalled $checkSelf_haNotStarted" >>$HISTORYLOG
	sendSyslog "$functionName" "INFO" "checkSelf_haInstalledNotStarted" "VALUE=\"$checkSelf_haInstalled $checkSelf_haNotStarted\""
fi

if [[ $checkSelf_hwmodel == "unknown" ]] ; then
	echo "Logic - hwmodel unknown: $checkSelf_hwmodel" >>$RUNLOG
    echo "$HISTORYLOGPREAMBLE - $functionName - INFO - HW Model - $checkSelf_hwmodel ($checkSelf_hwmodel0)" >>$HISTORYLOG
	checkSelf_problem="1"
fi

if [[ $checkSelf_localSnmpWorking == "SVN Foundation" ]] ; then
	echo "Logic - local snmp not working: $checkSelf_localSnmpWorking" >>$RUNLOG
    echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Local SNMP - Failed $checkSelf_localSnmpWorking" >>$HISTORYLOG
	sendSyslog "$functionName" "INFO" "checkSelf_localSnmpWorking" "VALUE=\"$checkSelf_localSnmpWorking\""
else
	echo "Logic - local snmp not working: $checkSelf_localSnmpWorking" >>$RUNLOG
    echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Local SNMP - Failed $checkSelf_localSnmpWorking" >>$HISTORYLOG
	sendSyslog "$functionName" "INFO" "checkSelf_localSnmpWorking" "VALUE=\"$checkSelf_localSnmpWorking\""
	checkSelf_problem="1"
	checkSelf_problemInfo="Local SNMP check failed"
fi

#SYSLOG
if [[ $checkSelf_problem == "1" ]]; then
	sendSyslog "$functionName" "PROBLEM" "checkSelf_problemInfo" "VALUE=\"$checkSelf_problemInfo$checkSelf_warningInfo$checkSelf_workingInfo\""
elif [[ $checkSelf_warning == "1" ]]; then
	sendSyslog "$functionName" "WARNING" "checkSelf_warningInfo" "VALUE=\"$checkSelf_warningInfo$checkSelf_workingInfo\""	
else
	sendSyslog "$functionName" "WORKING" "checkSelf_workingInfo" "VALUE=\"$checkSelf_workingInfo\""
fi

if [[ $LOCALSMO == "1" ]] && [[ $APPLIANCETYPE == "SP" ]]; then
	sendSyslog "$functionName" "INFO" "checkSelf_nestStatus" "VALUE=\"$checkSelf_nestStatus\"" "SMO"
	sendSyslog "$functionName" "INFO" "checkSelf_scriptDate" "VALUE=\"$checkSelf_scriptDate\"" "SMO"
else
	sendSyslog "$functionName" "INFO" "checkSelf_nestStatus" "VALUE=\"$checkSelf_nestStatus\""
	sendSyslog "$functionName" "INFO" "checkSelf_scriptDate" "VALUE=\"$checkSelf_scriptDate\""
fi
sendSyslog "$functionName" "INFO" "checkSelf_uptime" "VALUE=\"$checkSelf_uptime\""
sendSyslog "$functionName" "INFO" "checkSelf_selfHealEnabled" "VALUE=\"$checkSelf_selfHealEnabled\""
sendSyslog "$functionName" "INFO" "checkSelf_sub5monitoringEnabled" "VALUE=\"$checkSelf_sub5monitoringEnabled\""
sendSyslog "$functionName" "INFO" "checkSelf_hwmodel" "VALUE=\"$checkSelf_hwmodel\""
if [[ $checkSelf_hwtype != "MHO" ]]; then
	sendSyslog "$functionName" "INFO" "checkSelf_instance" "HW=\"$checkSelf_hwmodel\" COREXL=\"$checkSelf_instanceCoreXl\" COREXL6=\"$checkSelf_instanceCoreXl6\""
	sendSyslog "$functionName" "INFO" "checkSelf_mdpsMode" "VALUE=\"$checkSelf_mdpsMode\" CPUS=\"$checkSelf_mdpsCpus\" INTERFACE=\"$checkSelf_mdpsInterface\""
	sendSyslog "$functionName" "INFO" "checkSelf_coreAssignment" "HW=\"$checkSelf_hwmodel\" SW=\"$checkSelf_majorVer $checkSelf_minorVer\" TOTAL_CORES=\"$checkSelf_totalCpus\" CLISH_MDPS=\"$checkSelf_mdpsCpus\" CPCONFIG_COREXL=\"$checkSelf_instanceCoreXl\" CPCONFIG_COREXL6=\"$checkSelf_instanceCoreXl6\" ACTIVE_FWD=\"$checkSelf_activeFwd\" ACTIVE_SND=\"$checkSelf_activeSnd\" ACTIVE_MDPS=\"$checkSelf_activeMdps\" ACTIVE_COREXL=\"$checkSelf_activeCoreXl\" ACTIVE_COREXL6=\"$checkSelf_activeCoreXl6\" DYNAMIC_BALANCING=\"$checkSelf_dynamicBalancing\""
fi
sendSyslog "$functionName" "INFO" "checkSelf_mac" "VALUE=\"$checkSelf_mac\""
sendSyslog "$functionName" "INFO" "checkSelf_hwtype" "VALUE=\"$checkSelf_hwtype\""
sendSyslog "$functionName" "INFO" "checkSelf_majorVer" "VALUE=\"$checkSelf_majorVer\""
sendSyslog "$functionName" "INFO" "checkSelf_minorVer" "VALUE=\"$checkSelf_minorVer\""
sendSyslog "$functionName" "INFO" "checkSelf_enabledBlades" "VALUE=\"$checkSelf_enabledBlades\""



if [[ $APPLIANCETYPE != "SM" ]] && [[ $APPLIANCETYPE != "MAESTRO-ORCHESTRATOR" ]]; then
	sendSyslog "$functionName" "INFO" "checkSelf_cmaName" "VALUE=\"$CMANAME\""
	sendSyslog "$functionName" "INFO" "checkSelf_cmaVersion" "VALUE=\"$CMAVER\""
	if [[ $checkSelf_haInstalled == "1" ]]; then
		sendSyslog "$functionName" "INFO" "checkSelf_clusterName" "VALUE=\"$CLUSTERNAME\""
	fi
fi

if [[ $checkSelf_haInstalled == "1" ]] && [[ $checkSelf_haNotStarted == "0" ]]; then
	if [[ $APPLIANCETYPE != "SP" ]] && [[ $APPLIANCETYPE != "MAESTRO" ]] && [[ $APPLIANCETYPE != "SM" ]] && [[ $APPLIANCETYPE != "MHO" ]]; then
		sendSyslog "$functionName" "INFO" "checkSelf_clusterMembers" "VALUE=\"$CLUSTERMEMBERS1\""
	fi
fi


if [[ $LOCALSMO == "1" ]] && [[ $APPLIANCETYPE == "SP" ]]; then
	sendSyslog "$functionName" "INFO" "checkSelf_hwmodel" "VALUE=\"$checkSelf_hwmodel\"" "SMO"
	sendSyslog "$functionName" "INFO" "checkSelf_majorVer" "VALUE=\"$checkSelf_majorVer\"" "SMO"
	sendSyslog "$functionName" "INFO" "checkSelf_minorVer" "VALUE=\"$checkSelf_minorVer\"" "SMO"
	sendSyslog "$functionName" "INFO" "checkSelf_sgmQty" "VALUE=\"$ALLSGMQTY\"" "SMO"
	sendSyslog "$functionName" "INFO" "checkSelf_sgms" "VALUE=\"$ALLSGMSINGLELINE\"" "SMO"
	sendSyslog "$functionName" "INFO" "checkSelf_enabledBlades" "VALUE=\"$checkSelf_enabledBlades\"" "SMO"
fi


#Cleanup
rm -f $TEMPFILE


checkSelf_fEnd=$(date "+%s")
checkSelf_fRunTime=$(( checkSelf_fEnd - checkSelf_fStart ))
echo "checkSelf_fRunTime $checkSelf_fRunTime" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_warning - $checkSelf_warning" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_problem - $checkSelf_problem" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_problemInfo - $checkSelf_problemInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_warningInfo - $checkSelf_warningInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_workingInfo - $checkSelf_workingInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSelf_runTime - $checkSelf_fRunTime" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkSelf_warning" "VALUE=\"$checkSelf_warning\""
sendSyslog "$functionName" "INFO" "checkSelf_problem" "VALUE=\"$checkSelf_problem\""
echo "checkSelf_problem $checkSelf_problem" >>$RUNLOG
echo "END==checkSelf" >>$RUNLOG
}

###################################################################################################
checkLogging(){
echo "START==checkLogging" >>$RUNLOG

#DEFAULTS
checkLogging_fStart=$(date "+%s")
functionName=${FUNCNAME[0]}
checkLogging_warning="0"
checkLogging_problem="0"
checkLogging_workingInfo=""
checkLogging_warningInfo=""
checkLogging_problemInfo=""
checkLogging_defaultFwlogSize="8348"
checkLogging_localLogRate="0"
TEMPFILE=$TEMPDIR/$SCRIPT.$functionName.$EPOCH
LOGTIME="10"
PTRSIZEPERLOG="8"

#COLLECT OUTPUTS
#checkLogging_overallStatus=$(snmp .1.3.6.1.4.1.2620.1.1.30.1)
checkLogging_overallStatus=$(stattestget 1.3.6.1.4.1.2620.1.1.30.1)
# 0=Working, 1=Partial, 2=NotActive

if [[ $checkSelf_majorVer == "R81.10" || $checkSelf_majorVer == "R81.20" ]]; then
	#checkLogging_clmConfiguredQty=$(snmp .1.3.6.1.4.1.2620.1.1.30.3.1.1 | sed 's/,$//' | tr ',' '\n' | wc -l)
	checkLogging_clmConfiguredQty=$(stattestget 1.3.6.1.4.1.2620.1.1.30.3.1.1 | wc -l)
	COUNTER="1"
	while [[ COUNTER -le $checkLogging_clmConfiguredQty ]]; do
		# SIMPLE_STATUS=$(snmp .1.3.6.1.4.1.2620.1.1.30.3.1.3.$COUNTER)
		# STATUS_DETAIL=$(snmp .1.3.6.1.4.1.2620.1.1.30.3.1.4.$COUNTER)
		# IP=$(snmp .1.3.6.1.4.1.2620.1.1.30.3.1.2.$COUNTER)
		# RATE=$(snmp .1.3.6.1.4.1.2620.1.1.30.3.1.5.$COUNTER)
		SIMPLE_STATUS=$(stattestget 1.3.6.1.4.1.2620.1.1.30.3.1.3.$COUNTER)
		STATUS_DETAIL=$(stattestget 1.3.6.1.4.1.2620.1.1.30.3.1.4.$COUNTER)
		IP=$(stattestget 1.3.6.1.4.1.2620.1.1.30.3.1.2.$COUNTER)
		RATE=$(stattestget 1.3.6.1.4.1.2620.1.1.30.3.1.5.$COUNTER)
		if [[ $STATUS_DETAIL =~ "Backup" ]]; then
			FUNCTIONAL_STATUS="Backup"
		else
			FUNCTIONAL_STATUS="Primary"
		fi
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_clmDetailStatus$COUNTER - $SIMPLE_STATUS" >>$HISTORYLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_clmDetailStatusDetail$COUNTER - $STATUS_DETAIL" >>$HISTORYLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_clmDetailIp$COUNTER - $IP" >>$HISTORYLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_clmDetailRate$COUNTER - $RATE" >>$HISTORYLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_clmDetailFunction$COUNTER - $FUNCTIONAL_STATUS" >>$HISTORYLOG
		sendSyslog "$functionName" "INFO" "checkLogging_clmDetail" "INSTANCE=\"$COUNTER\" SIMPLE_STATUS=\"$SIMPLE_STATUS\" IP=\"$IP\" STATUS_DETAIL=\"$STATUS_DETAIL\" RATE=\"$RATE\" FUNCTIONAL_STATUS=\"$FUNCTIONAL_STATUS\""
		let COUNTER=COUNTER+1
	done
fi




# checkLogging_primaryClmStatus=$(snmp .1.3.6.1.4.1.2620.1.1.30.3.1.3.1)
# checkLogging_primaryClmIp=$(snmp .1.3.6.1.4.1.2620.1.1.30.3.1.2.1)
checkLogging_primaryClmStatus=$(stattestget 1.3.6.1.4.1.2620.1.1.30.3.1.3.1)
checkLogging_primaryClmIp=$(stattestget 1.3.6.1.4.1.2620.1.1.30.3.1.2.1)
if [[ $checkLogging_primaryClmIp == *"No Such"* ]]; then
	checkLogging_primaryClmIp="N/A"
fi
# checkLogging_secondaryClmStatus=$(snmp .1.3.6.1.4.1.2620.1.1.30.3.1.3.2)
# checkLogging_secondaryClmIp=$(snmp .1.3.6.1.4.1.2620.1.1.30.3.1.2.2)
# checkLogging_handlingRate=$(snmp .1.3.6.1.4.1.2620.1.1.30.7)
checkLogging_secondaryClmStatus=$(stattestget 1.3.6.1.4.1.2620.1.1.30.3.1.3.2)
checkLogging_secondaryClmIp=$(stattestget 1.3.6.1.4.1.2620.1.1.30.3.1.2.2)
checkLogging_handlingRate=$(stattestget 1.3.6.1.4.1.2620.1.1.30.7)
if [[ $checkLogging_secondaryClmIp == *"No Such"* ]]; then
	checkLogging_secondaryClmIp="N/A"
fi
# checkLogging_primaryClmSendingRate=$(snmp 1.3.6.1.4.1.2620.1.1.30.3.1.5.1)
# checkLogging_secondaryClmSendingRate=$(snmp 1.3.6.1.4.1.2620.1.1.30.3.1.5.2)
# checkLogging_logHandlingRate=$(snmp 1.3.6.1.4.1.2620.1.1.30.7)
# checkLogging_localLoggingModeDescription=$(snmp 1.3.6.1.4.1.2620.1.1.30.4)
checkLogging_primaryClmSendingRate=$(stattestget 1.3.6.1.4.1.2620.1.1.30.3.1.5.1)
checkLogging_secondaryClmSendingRate=$(stattestget 1.3.6.1.4.1.2620.1.1.30.3.1.5.2)
checkLogging_logHandlingRate=$(stattestget 1.3.6.1.4.1.2620.1.1.30.7)
checkLogging_localLoggingModeDescription=$(stattestget 1.3.6.1.4.1.2620.1.1.30.4)
checkLogging_fwlogSize=$(ls -al $FWDIR/log/fw.log | awk '{print $5}')
checkLogging_fwlogLastEditDate=$(date -d "`stat -c %y "$FWDIR/log/fw.log"`" +"%s")
checkLogging_fwlogLastEditDiff="$(( EPOCH - checkLogging_fwlogLastEditDate ))"
if [[ $checkLogging_fwlogLastEditDiff -lt "0" ]]; then
	checkLogging_fwlogLastEditDiff="0"
fi
checkLogging_fwlogLastEditSince=$(conv_time $checkLogging_fwlogLastEditDiff)
checkLogging_totalLogSize=$(du -acb $FWDIR/log/*.log | tail -1 | awk '{print $1}')
checkLogging_totalAmwPcapQty=$(du -acb $FWDIR/tmp/amw/ | grep ".cap" | wc -l)
checkLogging_totalAmwPcapSize=$(du -acb $FWDIR/tmp/amw/ | tail -1 | awk '{print $1}')
checkLogging_logSwitchFwdTime=$(cpwd_admin list | grep FWD | awk '{print $5}' | awk -F ":" '{print $2}')
checkLogging_logSwitchSchedule=$(cat $FWDIR/conf/log_policy.C 2>&1 | grep -A2 ":log_switch_schedule" | grep "every_seconds" | awk '{print $NF}' | tr -d '()' | sort | uniq | tr '\n' ' ')
if [[ $checkLogging_logSwitchSchedule == "" ]]; then
	checkLogging_logSwitchSchedule=$(cat $FWDIR/conf/log_policy.C 2>&1 | grep -A2 ":log_switch_schedule" | grep "days_specification" | awk '{print $NF}' | tr -d '()' | sort | uniq | tr '\n' ' ')
fi
checkLogging_logForwardSchedule=$(cat $FWDIR/conf/log_policy.C 2>&1 | grep -A2 ":log_forward_schedule" | grep "every_seconds" | awk '{print $NF}' | tr -d '()' | sort | uniq | tr '\n' ' ')
if [[ $checkLogging_logForwardSchedule == "" ]]; then
	checkLogging_logForwardSchedule=$(cat $FWDIR/conf/log_policy.C 2>&1 | grep -A2 ":log_forward_schedule" | grep "days_specification" | awk '{print $NF}' | tr -d '()' | sort | uniq | tr '\n' ' ')
fi
checkLogging_logForwardTarget=$(cat $FWDIR/conf/log_policy.C 2>&1 | grep ":log_forward_target" | awk '{print $NF}' | tr -d '()' | sort | uniq | tr '\n' ' ')
checkLogging_logTcpState=$(cat $FWDIR/database/objects.C 2>&1 | grep ":include_tcp_state_information" | awk '{print $NF}' | tr -d '()' | sort | uniq | tr '\n' ' ')
checkLogging_cloudUnobfuscate=$(cat $FWDIR/conf/malware_config | grep "report_unobfuscate_all_user_fields" | awk -F "=" '{print $NF}')
checkLogging_emptyLogQty=$(find $FWDIR/log/ -name "*.log" -mtime -1000 -size -8349c | grep -v "fw.log" | awk -F "/" '{print $NF}' | awk -F "." '{print $1}' | wc -l)
checkLogging_localLogFile=$(find $FWDIR/log/*.log | grep -v "load_kern_params.log\|cpha_policy.log\|tracker.log\|archive_tool.log\|password_manager.log\|tp_conf.log\|fw_fast_accel.log\|cpha_policy.log" | wc -l)
checkLogging_localLogFileName=$(find $FWDIR/log/*.log | grep -v "load_kern_params.log\|cpha_policy.log\|tracker.log\|archive_tool.log\|password_manager.log\|tp_conf.log\|fw_fast_accel.log\|cpha_policy.log" | awk -F "/" '{print $NF}' | tr '\n' ' ')
if [[ $checkLogging_localLogFile -gt "0" ]]; then
	FETCHREMAININGSIZE="0"
	FETCHREMAININGOLDESTDATE=$EPOCH
	FETCHREMAININGOLDESTNAME="fw.log"
	FETCHREMAININGMISSINGPTRNAMES=""
	FETCHREMAININGMISSINGPTRQTY="0"
	IFS=$'\n'
	for LINE in `ls -al $FWDIR/log/*.log | grep -v "load_kern_params.log\|cpha_policy.log\|tracker.log\|archive_tool.log\|password_manager.log\|tp_conf.log\|fw_fast_accel.log\|cpha_policy.log"` ; do
		LINE2=$(echo "$LINE" | awk -F "/" {'print $NF}' | awk -F "." '{print $1".logptr"}')
		LINE3=$(echo "$LINE" | awk -F "/" {'print $NF}' | awk -F "." '{print $1".log"}')
		LOGSIZE=$(ls -al `echo "$LINE" | awk '{print $NF}'` | awk '{print $5}')
		if [[ $LOGSIZE -le "8384" ]]; then
			SIZE="0"
			DATE=$(date -d "`stat -c %y "$FWDIR/log/$LINE3"`" +"%s")
		else
			if [[ -f $FWDIR/log/$LINE2 ]]; then
				SIZE=$(ls -al $FWDIR/log/$LINE2 | awk '{print $5}')
				DATE=$(date -d "`stat -c %y "$FWDIR/log/$LINE2"`" +"%s")
			else
				SIZE="0"
				DATE=$(date -d "`stat -c %y "$FWDIR/log/$LINE3"`" +"%s")
			fi
		fi
		
		if [[ -f $FWDIR/log/$LINE2 ]]; then
			echo "nothing" >> /dev/null
		else
			if [[ $DATE -lt $EPOCHMINUS3600 ]]; then
				fw repairlog $FWDIR/log/$LINE3
				checkLogging_warningInfo="$checkLogging_warningInfo [Local Log File without PTR: `echo "$LINE" | awk -F "/" {'print $NF}'` $DATE - REPAIRED]"
				echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Repaired Log $FWDIR/log/$LINE $DATE" >>$HISTORYLOG
			
			else
				
				echo "$HISTORYLOGPREAMBLE - $functionName - INFO - fw repairlog $FWDIR/log/`echo "$LINE" | awk -F "/" {'print $NF}'`" >>$HISTORYLOG
				checkLogging_warning="1"
				checkLogging_warningInfo="$checkLogging_warningInfo [Local Log File without PTR: `echo "$LINE" | awk -F "/" {'print $NF}'`]"
				FETCHREMAININGMISSINGPTRNAMES="$FETCHREMAININGMISSINGPTRNAMES $LINE2"
				let FETCHREMAININGMISSINGPTRQTY=FETCHREMAININGMISSINGPTRQTY+1
			fi
		fi
		if [[ $DATE -lt $FETCHREMAININGOLDESTDATE ]]; then
			FETCHREMAININGOLDESTDATE=$DATE
			FETCHREMAININGOLDESTNAME=$(echo "$LINE" | awk -F "/" {'print $NF}')
		fi
		let FETCHREMAININGSIZE=FETCHREMAININGSIZE+SIZE
	done
	IFS=$ORIGIFS
else
	FETCHREMAININGOLDESTNAME=""
	FETCHREMAININGOLDESTDATE=""
fi
checkLogging_localLogFileOldestName=$FETCHREMAININGOLDESTNAME
checkLogging_localLogFileOldestDate=$FETCHREMAININGOLDESTDATE
checkLogging_localLogFileMissingPtrQty=$FETCHREMAININGMISSINGPTRQTY
checkLogging_localLogFileMissingPtrNames=$FETCHREMAININGMISSINGPTRNAMES

if [[ $FETCHREMAININGSIZE -gt "0" ]]; then
	checkLogging_localLogFileQty="$(( FETCHREMAININGSIZE / PTRSIZEPERLOG ))"
else
	checkLogging_localLogFileQty="0"
fi


#Clean up log files
for LINE in `find $FWDIR/log/ -depth -maxdepth 1 -mtime +3 | grep "logaccount_ptr\|logptr\|logLuuidDB\|loginitial_ptr" | awk -F "/" '{print $NF}' | awk -F "." '{print $1}' | sort | uniq` ; do
	LOG_EXIST=$(ls -al $FWDIR/log/$LINE.log 2>&1 | grep -v "No such file" | wc -l)
	if [[ $LOG_EXIST == "0" ]]; then
		for LINE2 in `find $FWDIR/log/$LINE* -depth -maxdepth 1 -mtime +3 | grep "logaccount_ptr\|logptr\|logLuuidDB\|loginitial_ptr"` ; do
			rm $LINE2
			echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Orphan Log Removed $LINE2" >> $HISTORYLOG
			sendSyslog "$functionName" "INFO" "checkLogging_orphanLogRemoved" "VALUE=\"$LINE2\""
		done
	fi
done



#Stale FWD Logging Sockets
checkLogging_socketRate="0"
checkLogging_socketBytesRate="0"
checkLogging_socketLastSnd="0"
IFS=$'\n'
for LINE in `/usr/bin/netstat -pan 2>&1 | grep ":257" | grep "ESTABLISHED" | grep -v "127.0.0.1" | tr ':' ' ' | tr '/' ' '` ; do
	SRCPORT=$(echo "$LINE" | awk '{print $5}')
	DSTIP=$(echo "$LINE" | awk '{print $6}')
	PID=$(echo "$LINE" | awk '{print $9}')
	#SS_OUTPUT=$(/sbin/ss -ni | grep -A1 ":257" | grep -A1 $SRCPORT)
	/sbin/ss -ni | grep -A1 ":257" | grep -A1 :$SRCPORT | grep -v "127.0.0.1" | awk '{ for (i = 1; i <= NF; i++) { split($i, arr, ":"); printf("%s:%s\n", arr[1], arr[2]); } }' > $TEMPFILE
	#SS_OUTPUT=$(cat $TEMPFILE | tr '\n' ' ')
	BYTESACK=$(cat $TEMPFILE | grep "bytes_acked:" | awk -F ":" '{print $2}' | paste -sd+ | bc)
	BYTESRCV=$(cat $TEMPFILE | grep "bytes_received:" | awk -F ":" '{print $2}' | paste -sd+ | bc)
	SEGSOUT=$(cat $TEMPFILE | grep "segs_out:" | awk -F ":" '{print $2}' | paste -sd+ | bc)
	SEGSIN=$(cat $TEMPFILE | grep "segs_in:" | awk -F ":" '{print $2}' | paste -sd+ | bc)
	LASTSND=$(cat $TEMPFILE | grep "lastsnd:" | awk -F ":" '{print $2}')
	LASTRCV=$(cat $TEMPFILE | grep "lastrcv:" | awk -F ":" '{print $2}')
	
	LASTRUNSEGSOUT=$(cat $LASTRUNHISTORYLOGOUTPUT | grep "checkLogging_socketDetails" | grep $DSTIP | grep $SRCPORT | awk -F "-" '{print $NF}' | awk '{print $6}' | awk -F "=" '{print $2}' | head -1)
	if [[ ! $LASTRUNSEGSOUT ]]; then
		LASTRUNSEGSOUTSECS="n/a"
		LASTRUNSEGSOUTDIFF="n/a"
		LASTRUNSEGSOUTRATE="0"
	else
		LASTRUNSEGSOUTSECS=$(( EPOCH - LASTRUNEPOCH ))
		LASTRUNSEGSOUTDIFF=$(( SEGSOUT - LASTRUNSEGSOUT ))
		LASTRUNSEGSOUTRATE=$(echo "$LASTRUNSEGSOUTDIFF / $LASTRUNSEGSOUTSECS" | bc)
	fi
	LASTRUNBYTESACK=$(cat $LASTRUNHISTORYLOGOUTPUT | grep "checkLogging_socketDetails" | grep $DSTIP | grep $SRCPORT | awk -F "-" '{print $NF}' | awk '{print $4}' | awk -F "=" '{print $2}' | head -1 )
	if [[ ! $LASTRUNBYTESACK ]]; then
		LASTRUNBYTESACKSECS="n/a"
		LASTRUNBYTESACKDIFF="n/a"
		LASTRUNBYTESACKRATE="0"
	else
		LASTRUNBYTESACKSECS=$(( EPOCH - LASTRUNEPOCH ))
		LASTRUNBYTESACKDIFF=$(( BYTESACK - LASTRUNBYTESACK ))
		LASTRUNBYTESACKRATE=$(echo "$LASTRUNBYTESACKDIFF / $LASTRUNBYTESACKSECS" | bc)
	fi
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_socketDetails - DSTIP=$DSTIP SRCPORT=$SRCPORT PID=$PID BYTESACK=$BYTESACK BYTESRCV=$BYTESRCV SEGSOUT=$SEGSOUT SEGSIN=$SEGSIN LASTSND=$LASTSND LASTRCV=$LASTRCV LASTRUNSEGSOUTDIFF=$LASTRUNSEGSOUTDIFF LASTRUNSEGSOUTSECS=$LASTRUNSEGSOUTSECS LASTRUNSEGSOUTRATE=$LASTRUNSEGSOUTRATE  LASTRUNSEGBYTESACKDIFF=$LASTRUNBYTESACKDIFF LASTRUNBYTESACKSECS=$LASTRUNBYTESACKSECS LASTRUNBYTESACKRATE=$LASTRUNBYTESACKRATE" >>$HISTORYLOG
	
	IFS=$ORIGIFS
	sendSyslog "$functionName" "INFO" "checkLogging_socketDetails" "DSTIP=\"$DSTIP\" SRCPORT=\"$SRCPORT\" PID=\"$PID\" BYTESACK=\"$BYTESACK\" BYTESRCV=\"$BYTESRCV\" SEGSOUT=\"$SEGSOUT\" SEGSIN=\"$SEGSIN\" LASTSND=\"$LASTSND\" LASTRCV=\"$LASTRCV\" LASTRUNSEGSOUTDIFF=\"$LASTRUNSEGSOUTDIFF\" LASTRUNSEGSOUTSECS=\"$LASTRUNSEGSOUTSECS\" LASTRUNSEGSOUTRATE=\"$LASTRUNSEGSOUTRATE\"  LASTRUNBYTESACKDIFF=\"$LASTRUNBYTESACKDIFF\" LASTRUNBYTESACKSECS=\"$LASTRUNBYTESACKSECS\" LASTRUNBYTESACKRATE=\"$LASTRUNBYTESACKRATE\""
	IFS=$'\n'
	let checkLogging_socketRate=checkLogging_socketRate+LASTRUNSEGSOUTRATE
	let checkLogging_socketBytesRate=checkLogging_socketBytesRate+LASTRUNBYTESACKRATE
	if [[ $checkLogging_socketLastSnd -gt "0" ]] && [[ $checkLogging_socketLastSnd -lt $LASTSND ]]; then
		let checkLogging_socketLastSnd=$LASTSND
	fi
done
IFS=$ORIGIFS



#RUN LOGIC
if [[ $checkLogging_overallStatus != "0" ]]; then
	echo "Logic - overallStatus: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Overall status - $checkLogging_overallStatus" >>$HISTORYLOG
else
	echo "Logic - overallStatus: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Overall status - $checkLogging_overallStatus" >>$HISTORYLOG
fi

if [[ $checkLogging_primaryClmStatus != "0" ]]; then
	echo "Logic - primaryClmStatus: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Primary CLM status - $checkLogging_primaryClmStatus" >>$HISTORYLOG
	checkLogging_problemInfo="$checkLogging_problemInfo [Primary CLM unreachable ($checkLogging_primaryClmIp)]"
else
	echo "Logic - primaryClmStatus: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Primary CLM status - $checkLogging_primaryClmStatus" >>$HISTORYLOG
fi

if [[ $checkLogging_secondaryClmStatus != "2" ]] && [[ $checkLogging_secondaryClmStatus != "0" ]]; then
	echo "Logic - secondaryClmStatus: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Secondary CLM status - $checkLogging_secondaryClmStatus" >>$HISTORYLOG
	checkLogging_problemInfo="$checkLogging_problemInfo [Secondary CLM unreachable ($checkLogging_secondaryClmIp)]"
else
	echo "Logic - secondaryClmStatus: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Secondary CLM status - $checkLogging_secondaryClmStatus" >>$HISTORYLOG
fi


if [[ $checkLogging_fwlogSize != $checkLogging_defaultFwlogSize ]] && [[ $checkLogging_fwlogLastEditDiff -lt $SINCELASTRUN ]]; then
	SIZE_BEFORE=$(ls -l $FWDIR/log/fw.logptr | awk '{print $5}')
		sleep $LOGTIME
	SIZE_AFTER=$(ls -l $FWDIR/log/fw.logptr | awk '{print $5}')
	RATE="$(( (SIZE_AFTER - SIZE_BEFORE) / (PTRSIZEPERLOG * LOGTIME) ))"
	if [[ $RATE -lt "1" ]]; then
		RATE="0"
	fi
	if [[ $RATE -gt "0" ]]; then
		checkLogging_localLogRate=$RATE
		checkLogging_warning="1"
		checkLogging_warningInfo="$checkLogging_warningInfo [Current Local Logging Rate: $RATE/sec]"
	else
		checkLogging_localLogRate=$RATE
	fi
fi



if [[ $checkLogging_fwlogSize != $checkLogging_defaultFwlogSize ]] && [[ $checkLogging_localLogRate -gt "0" ]]; then
	if [[ $checkLogging_fwlogLastEditDiff -lt $SINCELASTRUN ]]; then
		echo "Logic - fwlogSize: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - checkLogging_fwlogSize - $checkLogging_fwlogSize" >>$HISTORYLOG
		checkLogging_warning="1"
		if [[ $checkLogging_socketBytesRate -eq "0" ]]; then
			checkLogging_warningInfo="$checkLogging_warningInfo [Actively logging local, Log size: $checkLogging_totalLogSize Bytes, Last Write: $checkLogging_fwlogLastEditSince, Sockets Sent $checkLogging_socketBytesRate Bytes, Last Send $checkLogging_socketLastSnd ms]"
		else
			checkLogging_warningInfo="$checkLogging_warningInfo [Actively logging local, Log size: $checkLogging_totalLogSize Bytes, Last Write: $checkLogging_fwlogLastEditSince, Sockets Sent $checkLogging_socketBytesRate Bytes, Last Send $checkLogging_socketLastSnd ms]"
		fi
	else
		if [[ $checkLogging_totalLogSize -lt "250000000" ]]; then
			echo "Logic - fwlogSize: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_fwlogSize - $checkLogging_fwlogSize" >>$HISTORYLOG
			checkLogging_warningInfo="$checkLogging_warningInfo [Previously logged local, Log size: $checkLogging_totalLogSize Bytes, Last Write: $checkLogging_fwlogLastEditSince]"		
		else
			echo "Logic - fwlogSize: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - checkLogging_fwlogSize - $checkLogging_fwlogSize" >>$HISTORYLOG
			checkLogging_warning="1"
			checkLogging_warningInfo="$checkLogging_warningInfo [Previously logged local, Log size: $checkLogging_totalLogSize Bytes, Last Write: $checkLogging_fwlogLastEditSince]"		
		fi
	fi
else
	echo "Logic - fwlogSize: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkLogging_fwlogSize - $checkLogging_fwlogSize" >>$HISTORYLOG
fi


#LOG OUTPUTS
echo "checkLogging_overallStatus $checkLogging_overallStatus" >>$RUNLOG
echo "checkLogging_primaryClmStatus $checkLogging_primaryClmStatus" >>$RUNLOG
echo "checkLogging_primaryClmIp $checkLogging_primaryClmIp" >>$RUNLOG
echo "checkLogging_secondaryClmStatus $checkLogging_secondaryClmStatus" >>$RUNLOG
echo "checkLogging_secondaryClmIp $checkLogging_secondaryClmIp" >>$RUNLOG
echo "checkLogging_fwlogSize $checkLogging_fwlogSize" >>$RUNLOG
echo "checkLogging_fwlogLastEditDate $checkLogging_fwlogLastEditDate" >>$RUNLOG
echo "checkLogging_totalLogSize $checkLogging_totalLogSize" >>$RUNLOG
echo "checkLogging_handlingRate $checkLogging_handlingRate" >>$RUNLOG
echo "checkLogging_logSwitchSchedule $checkLogging_logSwitchSchedule" >>$RUNLOG
echo "checkLogging_logForwardSchedule $checkLogging_logForwardSchedule" >>$RUNLOG
echo "checkLogging_logForwardTarget $checkLogging_logForwardTarget" >>$RUNLOG
echo "checkLogging_logSwitchFwdTime $checkLogging_logSwitchFwdTime" >>$RUNLOG
echo "checkLogging_logTcpState $checkLogging_logTcpState" >>$RUNLOG
echo "checkLogging_cloudUnobfuscate $checkLogging_cloudUnobfuscate" >>$RUNLOG
echo "checkLogging_emptyLogQty $checkLogging_emptyLogQty" >>$RUNLOG
echo "checkLogging_localLogFileQty $checkLogging_localLogFileQty" >>$RUNLOG
echo "checkLogging_localLogFileName $checkLogging_localLogFileName" >>$RUNLOG
echo "checkLogging_localLogFileOldestName $checkLogging_localLogFileOldestName" >>$RUNLOG
echo "checkLogging_localLogFileOldestDate $checkLogging_localLogFileOldestDate" >>$RUNLOG
echo "checkLogging_localLogFileMissingPtrNames $checkLogging_localLogFileMissingPtrNames" >>$RUNLOG
echo "checkLogging_localLogFileMissingPtrQty $checkLogging_localLogFileMissingPtrQty" >>$RUNLOG


echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_overallStatus - $checkLogging_overallStatus" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_primaryClmStatus - $checkLogging_primaryClmStatus" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_primaryClmIp - $checkLogging_primaryClmIp" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_primaryClmSendingRate - $checkLogging_primaryClmSendingRate" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_secondaryClmStatus - $checkLogging_secondaryClmStatus" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_secondaryClmIp - $checkLogging_secondaryClmIp" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_secondaryClmSendingRate - $checkLogging_secondaryClmSendingRate" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_fwlogSize - $checkLogging_fwlogSize" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_fwlogLastEditDate - $checkLogging_fwlogLastEditDate" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_totalLogSize - $checkLogging_totalLogSize" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_handlingRate - $checkLogging_handlingRate" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_localLogRate - $checkLogging_localLogRate" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_logSwitchSchedule - $checkLogging_logSwitchSchedule" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_logForwardSchedule - $checkLogging_logForwardSchedule" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_logForwardTarget - $checkLogging_logForwardTarget" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_logSwitchFwdTime - $checkLogging_logSwitchFwdTime" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_logTcpState - $checkLogging_logTcpState" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_cloudUnobfuscate - $checkLogging_cloudUnobfuscate" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_emptyLogQty - $checkLogging_emptyLogQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_localLogFileQty - $checkLogging_localLogFileQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_localLogFileName - $checkLogging_localLogFileName" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_localLogFileOldestName - $checkLogging_localLogFileOldestName" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_localLogFileOldestDate - $checkLogging_localLogFileOldestDate" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_localLogFileMissingPtrNames - $checkLogging_localLogFileMissingPtrNames" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_localLogFileMissingPtrQty - $checkLogging_localLogFileMissingPtrQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_localLoggingModeDescription - $checkLogging_localLoggingModeDescription" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_logHandlingRate - $checkLogging_logHandlingRate" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_totalAmwPcapSize - $checkLogging_totalAmwPcapSize" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_totalAmwPcapQty - $checkLogging_totalAmwPcapQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_socketRate - $checkLogging_socketRate" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_socketBytesRate - $checkLogging_socketBytesRate" >>$HISTORYLOG


#SYSLOG
if [[ $checkLogging_problem == "1" ]]; then
	sendSyslog "$functionName" "PROBLEM" "checkLogging_problemInfo" "VALUE=\"$checkLogging_problemInfo $checkLogging_warningInfo $checkLogging_workingInfo\""
elif [[ $checkLogging_warning == "1" ]]; then
	sendSyslog "$functionName" "WARNING" "checkLogging_warningInfo" "VALUE=\"$checkLogging_warningInfo $checkLogging_workingInfo\""	
else
	sendSyslog "$functionName" "WORKING" "checkLogging_workingInfo" "VALUE=\"$checkLogging_workingInfo\""
fi

sendSyslog "$functionName" "INFO" "checkLogging_overallStatus" "VALUE=\"$checkLogging_overallStatus\""
sendSyslog "$functionName" "INFO" "checkLogging_primaryClmStatus" "VALUE=\"$checkLogging_primaryClmStatus\""
sendSyslog "$functionName" "INFO" "checkLogging_primaryClmIp" "VALUE=\"$checkLogging_primaryClmIp\""
sendSyslog "$functionName" "INFO" "checkLogging_secondaryClmStatus" "VALUE=\"$checkLogging_secondaryClmStatus\""
sendSyslog "$functionName" "INFO" "checkLogging_secondaryClmIp" "VALUE=\"$checkLogging_secondaryClmIp\""
sendSyslog "$functionName" "INFO" "checkLogging_fwlogSize" "VALUE=\"$checkLogging_fwlogSize\""
sendSyslog "$functionName" "INFO" "checkLogging_fwlogLastEditDate" "VALUE=\"$checkLogging_fwlogLastEditDate\""
sendSyslog "$functionName" "INFO" "checkLogging_totalLogSize" "VALUE=\"$checkLogging_totalLogSize\""
sendSyslog "$functionName" "INFO" "checkLogging_handlingRate" "VALUE=\"$checkLogging_handlingRate\""
sendSyslog "$functionName" "INFO" "checkLogging_localLogRate" "VALUE=\"$RATE\""
sendSyslog "$functionName" "INFO" "checkLogging_logSwitchSchedule" "VALUE=\"$checkLogging_logSwitchSchedule\""
sendSyslog "$functionName" "INFO" "checkLogging_logForwardSchedule" "VALUE=\"$checkLogging_logForwardSchedule\""
sendSyslog "$functionName" "INFO" "checkLogging_logForwardTarget" "VALUE=\"$checkLogging_logForwardTarget\""
sendSyslog "$functionName" "INFO" "checkLogging_logSwitchFwdTime" "VALUE=\"$checkLogging_logSwitchFwdTime\""
sendSyslog "$functionName" "INFO" "checkLogging_logTcpState" "VALUE=\"$checkLogging_logTcpState\""
sendSyslog "$functionName" "INFO" "checkLogging_cloudUnobfuscate" "VALUE=\"$checkLogging_cloudUnobfuscate\""
sendSyslog "$functionName" "INFO" "checkLogging_emptyLogQty" "VALUE=\"$checkLogging_emptyLogQty\""
sendSyslog "$functionName" "INFO" "checkLogging_localLogFileQty" "VALUE=\"$checkLogging_localLogFileQty\""
sendSyslog "$functionName" "INFO" "checkLogging_localLogFileName" "VALUE=\"$checkLogging_localLogFileName\""
sendSyslog "$functionName" "INFO" "checkLogging_localLogFileOldestName" "VALUE=\"$checkLogging_localLogFileOldestName\""
sendSyslog "$functionName" "INFO" "checkLogging_localLogFileOldestDate" "VALUE=\"$checkLogging_localLogFileOldestDate\""
sendSyslog "$functionName" "INFO" "checkLogging_localLogFileMissingPtrNames" "VALUE=\"$checkLogging_localLogFileMissingPtrNames\""
sendSyslog "$functionName" "INFO" "checkLogging_localLogFileMissingPtrQty" "VALUE=\"$checkLogging_localLogFileMissingPtrQty\""
sendSyslog "$functionName" "INFO" "checkLogging_logHandlingRate" "VALUE=\"$checkLogging_logHandlingRate\""
sendSyslog "$functionName" "INFO" "checkLogging_localLoggingModeDescription" "VALUE=\"$checkLogging_localLoggingModeDescription\""
sendSyslog "$functionName" "INFO" "checkLogging_primaryClmSendingRate" "VALUE=\"$checkLogging_primaryClmSendingRate\""
sendSyslog "$functionName" "INFO" "checkLogging_secondaryClmSendingRate" "VALUE=\"$checkLogging_secondaryClmSendingRate\""
sendSyslog "$functionName" "INFO" "checkLogging_totalAmwPcapSize" "VALUE=\"$checkLogging_totalAmwPcapSize\""
sendSyslog "$functionName" "INFO" "checkLogging_totalAmwPcapQty" "VALUE=\"$checkLogging_totalAmwPcapQty\""


#cleanUp
rm -f $TEMPFILE


checkLogging_fEnd=$(date "+%s")
checkLogging_fRunTime=$(( checkLogging_fEnd - checkLogging_fStart ))
echo "checkLogging_fRunTime $checkLogging_fRunTime" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_warning - $checkLogging_warning" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_problem - $checkLogging_problem" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_problemInfo - $checkLogging_problemInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_warningInfo - $checkLogging_warningInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_workingInfo - $checkLogging_workingInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLogging_runTime - $checkLogging_fRunTime" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkLogging_warning" "VALUE=\"$checkLogging_warning\""
sendSyslog "$functionName" "INFO" "checkLogging_problem" "VALUE=\"$checkLogging_problem\""
sendSyslog "$functionName" "INFO" "checkLogging_runTime" "VALUE=\"$checkLogging_fRunTime\""
sendSyslog "$functionName" "INFO" "checkLogging_problemInfo" "VALUE=\"$checkLogging_problemInfo\""
sendSyslog "$functionName" "INFO" "checkLogging_warningInfo" "VALUE=\"$checkLogging_warningInfo\""
sendSyslog "$functionName" "INFO" "checkLogging_workingInfo" "VALUE=\"$checkLogging_workingInfo\""
echo "checkLogging_warning $checkLogging_warning" >>$RUNLOG
echo "checkLogging_problem $checkLogging_problem" >>$RUNLOG
echo "END==checkLogging" >>$RUNLOG
}

###################################################################################################
checkLoggingSP(){
echo "START==checkLoggingSP" >>$RUNLOG

#DEFAULTS
checkLoggingSP_fStart=$(date "+%s")
functionName=${FUNCNAME[0]}
checkLoggingSP_warning="0"
checkLoggingSP_problem="0"
checkLoggingSP_workingInfo=""
checkLoggingSP_warningInfo=""
checkLoggingSP_problemInfo=""
checkLoggingSP_defaultFwlogSize="8348"
checkLoggingSP_localLogRate="0"
LOGTIME="10"
TEMPFILE=$TEMPDIR/$SCRIPT.$EPOCH.$functionName
PTRSIZEPERLOG="8"


#COLLECT OUTPUTS

# if [[ $checkSelf_majorVer == "R81.10" || $checkSelf_majorVer == "R81.20" ]]; then
	#checkLoggingSP_clmConfiguredQty=$(snmp .1.3.6.1.4.1.2620.1.1.30.3.1.1 | sed 's/,$//' | tr ',' '\n' | wc -l)
	checkLoggingSP_clmConfiguredQty=$(stattestget 1.3.6.1.4.1.2620.1.1.30.3.1.1 | wc -l)
	COUNTER="1"
	while [[ COUNTER -le $checkLoggingSP_clmConfiguredQty ]]; do
		# SIMPLE_STATUS=$(snmp .1.3.6.1.4.1.2620.1.1.30.3.1.3.$COUNTER)
		# STATUS_DETAIL=$(snmp .1.3.6.1.4.1.2620.1.1.30.3.1.4.$COUNTER)
		# IP=$(snmp .1.3.6.1.4.1.2620.1.1.30.3.1.2.$COUNTER)
		# RATE=$(snmp .1.3.6.1.4.1.2620.1.1.30.3.1.5.$COUNTER)
		SIMPLE_STATUS=$(stattestget 1.3.6.1.4.1.2620.1.1.30.3.1.3.$COUNTER)
		STATUS_DETAIL=$(stattestget 1.3.6.1.4.1.2620.1.1.30.3.1.4.$COUNTER)
		IP=$(stattestget 1.3.6.1.4.1.2620.1.1.30.3.1.2.$COUNTER)
		RATE=$(stattestget 1.3.6.1.4.1.2620.1.1.30.3.1.5.$COUNTER)
		if [[ $STATUS_DETAIL =~ "Backup" ]]; then
			FUNCTIONAL_STATUS="Backup"
		else
			FUNCTIONAL_STATUS="Primary"
		fi
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_clmDetailStatus$COUNTER - $SIMPLE_STATUS" >>$HISTORYLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_clmDetailStatusDetail$COUNTER - $STATUS_DETAIL" >>$HISTORYLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_clmDetailIp$COUNTER - $IP" >>$HISTORYLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_clmDetailRate$COUNTER - $RATE" >>$HISTORYLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_clmDetailFunction$COUNTER - $FUNCTIONAL_STATUS" >>$HISTORYLOG
		sendSyslog "$functionName" "INFO" "checkLoggingSP_clmDetail" "INSTANCE=\"$COUNTER\" SIMPLE_STATUS=\"$SIMPLE_STATUS\" IP=\"$IP\" STATUS_DETAIL=\"$STATUS_DETAIL\" RATE=\"$RATE\" FUNCTIONAL_STATUS=\"$FUNCTIONAL_STATUS\""
		let COUNTER=COUNTER+1
	done
	# checkLoggingSP_logHandlingRate=$(snmp 1.3.6.1.4.1.2620.1.1.30.7)
	# checkLoggingSP_localLoggingModeDescription=$(snmp 1.3.6.1.4.1.2620.1.1.30.4)
	checkLoggingSP_logHandlingRate=$(stattestget 1.3.6.1.4.1.2620.1.1.30.7)
	checkLoggingSP_localLoggingModeDescription=$(stattestget 1.3.6.1.4.1.2620.1.1.30.4)
# else

	# if [[ $checkSelf_hwtype == "MAESTRO" ]] && [[ $checkSelf_majorVer == "R80.30SP" ]]; then
		# if [[ -f $SMODIR/conf/asg_log_servers.conf ]]; then
			# checkLoggingSP_asgLogServersStatus=$(cat $SMODIR/conf/asg_log_servers.conf | grep "Status" | awk -F "=" '{print $2}')
		# else
			# checkLoggingSP_asgLogServersStatus="Disabled"
		# fi
	# else
		# if [[ -f $FWDIR/conf/asg_log_servers.conf ]]; then
			# checkLoggingSP_asgLogServersStatus=$(cat $FWDIR/conf/asg_log_servers.conf | grep "LogStatus" | awk -F "=" '{print $2}')
		# else
			# checkLoggingSP_asgLogServersStatus="Disabled"
		# fi
	# fi

	# if [[ -f $FWDIR/conf/distribution_config.json ]]; then
		# checkLoggingSP_logDistributionStatus=$(cat $FWDIR/conf/distribution_config.json | grep "log_enabled" | awk '{print $NF}' | tr -d ',')
		# checkLoggingSP_alertDistributionStatus=$(cat $FWDIR/conf/distribution_config.json | grep "alert_enabled" | awk '{print $NF}' | tr -d ',')
	# else
		# checkLoggingSP_logDistributionStatus="false"
		# checkLoggingSP_alertDistributionStatus="false"
	# fi


	# cpstat fw -f log_connection > $TEMPFILE
	# checkLoggingSP_overallStatus=$(cat $TEMPFILE | grep "Overall Status:" | awk '{print $NF}' | tr -d ' ')
	# # checkLoggingSP_primaryClmSendingRate=$(snmp 1.3.6.1.4.1.2620.1.1.30.3.1.5.1)
	# # checkLoggingSP_secondaryClmSendingRate=$(snmp 1.3.6.1.4.1.2620.1.1.30.3.1.5.1)
	# # checkLoggingSP_logHandlingRate=$(snmp 1.3.6.1.4.1.2620.1.1.30.7)
	# # checkLoggingSP_localLoggingModeDescription=$(snmp 1.3.6.1.4.1.2620.1.1.30.4)
	# checkLoggingSP_primaryClmSendingRate=$(stattestget 1.3.6.1.4.1.2620.1.1.30.3.1.5.1)
	# checkLoggingSP_secondaryClmSendingRate=$(stattestget 1.3.6.1.4.1.2620.1.1.30.3.1.5.1)
	# checkLoggingSP_logHandlingRate=$(stattestget 1.3.6.1.4.1.2620.1.1.30.7)
	# checkLoggingSP_localLoggingModeDescription=$(stattestget 1.3.6.1.4.1.2620.1.1.30.4)
	

	# if [[ $checkLoggingSP_asgLogServersStatus == "Enabled" ]]; then
		# checkLoggingSP_primaryClmStatus=$(cat $TEMPFILE | grep "Log-Server" | awk -F "|" '{print $3}' | head -1 | tr -d ' ' | paste -sd+ | bc)
		# checkLoggingSP_primaryClmIp=$(cat $TEMPFILE | grep "Log-Server" | awk -F "|" '{print $2}' | head -1 | tr '\n' ' ' | tr -d ' ')
		# checkLoggingSP_primaryClmRate=$(cat $TEMPFILE | grep "Log-Server" | awk -F "|" '{print $5}' | head -1 | tr -d ' ')
		# checkLoggingSP_secondaryClmStatus=$(cat $TEMPFILE | grep "Log-Server" | awk -F "|" '{print $2}' | tail -1 | tr '\n' ' ')
		# checkLoggingSP_secondaryClmIp=$(cat $TEMPFILE | grep "Log-Server" | awk -F "|" '{print $2}' | tail -1 | tr '\n' ' ' | tr -d ' ')
		# checkLoggingSP_secondaryClmRate=$(cat $TEMPFILE | grep "Log-Server" | awk -F "|" '{print $5}' | tail -1 | tr -d ' ')
	# else
		# checkLoggingSP_primaryClmStatus=$(cat $TEMPFILE | grep "Log-Server" | grep -v "Backup" | awk -F "|" '{print $3}' | tr -d ' ' | head -1)
		# checkLoggingSP_primaryClmIp=$(cat $TEMPFILE | grep "Log-Server" | grep -v "Backup" | awk -F "|" '{print $2}' | head -1 | tr -d ' ')
		# checkLoggingSP_primaryClmRate=$(cat $TEMPFILE | grep "Log-Server" | awk -F "|" '{print $5}' | head -1 | tr -d ' ')
		# checkLoggingSP_secondaryClmStatus=$(cat $TEMPFILE | grep "Log-Server" | grep "Backup" | awk -F "|" '{print $3}' | tr -d ' ' | head -2 | tail -1)
		# checkLoggingSP_secondaryClmIp=$(cat $TEMPFILE | grep "Log-Server" | grep "Backup" | awk -F "|" '{print $2}' | head -2 | tail -1 | tr -d ' ')
		# checkLoggingSP_secondaryClmRate=$(cat $TEMPFILE | grep "Log-Server" | awk -F "|" '{print $5}' | tail -1 | tr -d ' ')
	# fi



# fi




checkLoggingSP_fwlogSize=$(ls -al $FWDIR/log/fw.log | awk '{print $5}')
checkLoggingSP_fwlogLastEditDate=$(date -d "`stat -c %y "$FWDIR/log/fw.log"`" +"%s")
checkLoggingSP_fwlogLastEditDiff="$(( EPOCH - checkLoggingSP_fwlogLastEditDate ))"
if [[ $checkLoggingSP_fwlogLastEditDiff -lt "0" ]]; then
	checkLoggingSP_fwlogLastEditDiff="0"
fi
checkLoggingSP_fwlogLastEditSince=$(conv_time $checkLoggingSP_fwlogLastEditDiff)
checkLoggingSP_totalLogSize=$(du -acb $FWDIR/log/*.log | tail -1 | awk '{print $1}')
checkLoggingSP_emptyLogQty=$(find $FWDIR/log/ -name "*.log" -mtime -1000 -size -8349c | grep -v "fw.log" | awk -F "/" '{print $NF}' | awk -F "." '{print $1}' | wc -l)
checkLoggingSP_localLogFile=$(find $FWDIR/log/*.log | grep -v "load_kern_params.log\|cpha_policy.log\|tracker.log\|archive_tool.log\|password_manager.log\|fw_fast_accel.log" | wc -l)
checkLoggingSP_localLogFileName=$(find $FWDIR/log/*.log | grep -v "load_kern_params.log\|cpha_policy.log\|tracker.log\|archive_tool.log\|password_manager.log\|fw_fast_accel.log" | awk -F "/" '{print $NF}' | tr '\n' ' ')
if [[ $checkLoggingSP_localLogFile -gt "0" ]]; then
	FETCHREMAININGSIZE="0"
	FETCHREMAININGOLDESTDATE=$EPOCH
	FETCHREMAININGOLDESTNAME="fw.log"
	FETCHREMAININGMISSINGPTRNAMES=""
	FETCHREMAININGMISSINGPTRQTY="0"
	IFS=$'\n'
	for LINE in `ls -al $FWDIR/log/*.log | grep -v "load_kern_params.log\|cpha_policy.log\|tracker.log\|archive_tool.log\|password_manager.log\|fw_fast_accel.log"` ; do
		LINE2=$(echo "$LINE" | awk -F "/" {'print $NF}' | awk -F "." '{print $1".logptr"}')
		LINE3=$(echo "$LINE" | awk -F "/" {'print $NF}' | awk -F "." '{print $1".log"}')
		LOGSIZE=$(ls -al `echo "$LINE" | awk '{print $NF}'` | awk '{print $5}')
		if [[ $LOGSIZE -le "8384" ]]; then
			SIZE="0"
			DATE=$(date -d "`stat -c %y "$FWDIR/log/$LINE3"`" +"%s")
		else
			if [[ -f $FWDIR/log/$LINE2 ]]; then
				SIZE=$(ls -al $FWDIR/log/$LINE2 | awk '{print $5}')
				DATE=$(date -d "`stat -c %y "$FWDIR/log/$LINE2"`" +"%s")
			else
				SIZE="0"
				#DATE=$EPOCH
				DATE=$(date -d "`stat -c %y "$FWDIR/log/$LINE3"`" +"%s")
			fi
		fi
		
		if [[ -f $FWDIR/log/$LINE2 ]]; then
			echo "nothing" >> /dev/null
		else
			if [[ $DATE -lt $EPOCHMINUS3600 ]]; then
				fw repairlog $FWDIR/log/$LINE3
				checkLoggingSP_warningInfo="$checkLoggingSP_warningInfo [Local Log File without PTR: `echo "$LINE" | awk -F "/" {'print $NF}'` $DATE - REPAIRED]"
				echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Repaired Log $FWDIR/log/$LINE $DATE" >>$HISTORYLOG
			else
				echo "$HISTORYLOGPREAMBLE - $functionName - INFO - fw repairlog $FWDIR/log/$LINE" >>$HISTORYLOG
				checkLoggingSP_warning="1"
				checkLoggingSP_warningInfo="$checkLoggingSP_warningInfo [Local Log File without PTR: `echo "$LINE" | awk -F "/" {'print $NF}'` $DATE]"
				FETCHREMAININGMISSINGPTRNAMES="$FETCHREMAININGMISSINGPTRNAMES $LINE2"
				let FETCHREMAININGMISSINGPTRQTY=FETCHREMAININGMISSINGPTRQTY+1
			fi
		fi
		if [[ $DATE -lt $FETCHREMAININGOLDESTDATE ]]; then
			FETCHREMAININGOLDESTDATE=$DATE
			FETCHREMAININGOLDESTNAME=$(echo "$LINE" | awk -F "/" {'print $NF}')
		fi
		let FETCHREMAININGSIZE=FETCHREMAININGSIZE+SIZE
	done
	IFS=$ORIGIFS
else
	FETCHREMAININGOLDESTNAME=""
	FETCHREMAININGOLDESTDATE=""
fi
checkLoggingSP_localLogFileOldestName=$FETCHREMAININGOLDESTNAME
checkLoggingSP_localLogFileOldestDate=$FETCHREMAININGOLDESTDATE
checkLoggingSP_localLogFileMissingPtrQty=$FETCHREMAININGMISSINGPTRQTY
checkLoggingSP_localLogFileMissingPtrNames=$FETCHREMAININGMISSINGPTRNAMES


#Clean up log files
for LINE in `find $FWDIR/log/ -depth -maxdepth 1 -mtime +10 | grep "logaccount_ptr\|logptr\|logLuuidDB\|loginitial_ptr" | awk -F "/" '{print $NF}' | awk -F "." '{print $1}' | sort | uniq` ; do
	LOG_EXIST=$(ls -al $FWDIR/log/$LINE.log | wc -l)
	if [[ $LOG_EXIST == "0" ]]; then
		for LINE2 in `find $FWDIR/log/$LINE* -depth -maxdepth 1 -mtime +10 | grep "logaccount_ptr\|logptr\|logLuuidDB\|loginitial_ptr"` ; do
			rm $LINE2
			echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Orphan Log Removed $LINE2" >> $HISTORYLOG
			sendSyslog "$functionName" "INFO" "checkLoggingSP_orphanLogRemoved" "VALUE=\"$LINE2\""
		done
	fi
done


if [[ $FETCHREMAININGSIZE -gt "0" ]]; then
	checkLoggingSP_localLogFileQty="$(( FETCHREMAININGSIZE / PTRSIZEPERLOG ))"
else
	checkLoggingSP_localLogFileQty="0"
fi
checkLoggingSP_logSwitchSchedule=$(cat $FWDIR/conf/log_policy.C | grep -A2 ":log_switch_schedule" | grep "every_seconds" | awk '{print $NF}' | tr -d '()' | sort | uniq | tr '\n' ' ')
if [[ $checkLoggingSP_logSwitchSchedule == "" ]]; then
	checkLoggingSP_logSwitchSchedule=$(cat $FWDIR/conf/log_policy.C | grep -A2 ":log_switch_schedule" | grep "days_specification" | awk '{print $NF}' | tr -d '()' | sort | uniq | tr '\n' ' ')
fi
checkLoggingSP_logForwardSchedule=$(cat $FWDIR/conf/log_policy.C | grep -A2 ":log_forward_schedule" | grep "every_seconds" | awk '{print $NF}' | tr -d '()' | sort | uniq | tr '\n' ' ')
if [[ $checkLoggingSP_logForwardSchedule == "" ]]; then
	checkLoggingSP_logForwardSchedule=$(cat $FWDIR/conf/log_policy.C | grep -A2 ":log_forward_schedule" | grep "days_specification" | awk '{print $NF}' | tr -d '()' | sort | uniq | tr '\n' ' ')
fi
checkLoggingSP_logForwardTarget=$(cat $FWDIR/conf/log_policy.C | grep ":log_forward_target" | awk '{print $NF}' | tr -d '()' | sort | uniq | tr '\n' ' ')
checkLoggingSP_logSwitchFwdTime=$(cpwd_admin list | grep FWD | awk '{print $5}' | awk -F ":" '{print $2}')
checkLoggingSP_logTcpState=$(cat $FWDIR/database/objects.C | grep ":include_tcp_state_information" | awk '{print $NF}' | tr -d '()' | sort | uniq | tr '\n' ' ')
checkLoggingSP_cloudUnobfuscate=$(cat $FWDIR/conf/malware_config | grep "report_unobfuscate_all_user_fields" | awk -F "=" '{print $NF}')
checkLoggingSP_totalAmwPcapQty=$(du -acb $FWDIR/tmp/amw/ | grep ".cap" | wc -l)
checkLoggingSP_totalAmwPcapSize=$(du -acb $FWDIR/tmp/amw/ | tail -1 | awk '{print $1}')




#Stale FWD Logging Sockets
checkLoggingSP_socketRate="0"
checkLoggingSP_socketBytesRate="0"
IFS=$'\n'
for LINE in `/usr/bin/netstat -pan 2>&1 | grep ":257" | grep "ESTABLISHED" | grep -v "127.0.0.1" | tr ':' ' ' | tr '/' ' '` ; do
	SRCPORT=$(echo "$LINE" | awk '{print $5}')
	DSTIP=$(echo "$LINE" | awk '{print $6}')
	PID=$(echo "$LINE" | awk '{print $9}')
	#SS_OUTPUT=$(/sbin/ss -ni | grep -A1 ":257" | grep -A1 $SRCPORT)
	/sbin/ss -ni | grep -A1 ":257" | grep -A1 :$SRCPORT | awk '{ for (i = 1; i <= NF; i++) { split($i, arr, ":"); printf("%s:%s\n", arr[1], arr[2]); } }' > $TEMPFILE
	#SS_OUTPUT=$(cat $TEMPFILE | tr '\n' ' ')
	BYTESACK=$(cat $TEMPFILE | grep "bytes_acked:" | awk -F ":" '{print $2}' | paste -sd+ | bc)
	BYTESRCV=$(cat $TEMPFILE | grep "bytes_received:" | awk -F ":" '{print $2}' | paste -sd+ | bc)
	SEGSOUT=$(cat $TEMPFILE | grep "segs_out:" | awk -F ":" '{print $2}' | paste -sd+ | bc)
	SEGSIN=$(cat $TEMPFILE | grep "segs_in:" | awk -F ":" '{print $2}' | paste -sd+ | bc)
	LASTSND=$(cat $TEMPFILE | grep "lastsnd:" | awk -F ":" '{print $2}' | paste -sd+ | bc)
	LASTRCV=$(cat $TEMPFILE | grep "lastrcv:" | awk -F ":" '{print $2}' | paste -sd+ | bc)
	
	LASTRUNSEGSOUT=$(cat $LASTRUNHISTORYLOGOUTPUT | grep "checkLoggingSP_socketDetails" | grep $DSTIP | grep $SRCPORT | awk -F "-" '{print $NF}' | awk '{print $6}' | awk -F "=" '{print $2}' | paste -sd+ | bc)
	if [[ ! $LASTRUNSEGSOUT ]]; then
		LASTRUNSEGSOUTSECS="n/a"
		LASTRUNSEGSOUTDIFF="n/a"
		LASTRUNSEGSOUTRATE="0"
	else
		LASTRUNSEGSOUTSECS=$(( EPOCH - LASTRUNEPOCH ))
		LASTRUNSEGSOUTDIFF=$(( SEGSOUT - LASTRUNSEGSOUT ))
		LASTRUNSEGSOUTRATE=$(echo "$LASTRUNSEGSOUTDIFF / $LASTRUNSEGSOUTSECS" | bc)
	fi
	LASTRUNBYTESACK=$(cat $LASTRUNHISTORYLOGOUTPUT | grep "checkLoggingSP_socketDetails" | grep $DSTIP | grep $SRCPORT | awk -F "-" '{print $NF}' | awk '{print $4}' | awk -F "=" '{print $2}' | paste -sd+ | bc)
	if [[ ! $LASTRUNBYTESACK ]]; then
		LASTRUNBYTESACKSECS="n/a"
		LASTRUNBYTESACKDIFF="n/a"
		LASTRUNBYTESACKRATE="0"
	else
		LASTRUNBYTESACKSECS=$(( EPOCH - LASTRUNEPOCH ))
		LASTRUNBYTESACKDIFF=$(( BYTESACK - LASTRUNBYTESACK ))
		LASTRUNBYTESACKRATE=$(echo "$LASTRUNBYTESACKDIFF / $LASTRUNBYTESACKSECS" | bc)
	fi
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_socketDetails - DSTIP=$DSTIP SRCPORT=$SRCPORT PID=$PID BYTESACK=$BYTESACK BYTESRCV=$BYTESRCV SEGSOUT=$SEGSOUT SEGSIN=$SEGSIN LASTSND=$LASTSND LASTRCV=$LASTRCV LASTRUNSEGSOUTDIFF=$LASTRUNSEGSOUTDIFF LASTRUNSEGSOUTSECS=$LASTRUNSEGSOUTSECS LASTRUNSEGSOUTRATE=$LASTRUNSEGSOUTRATE  LASTRUNSEGBYTESACKDIFF=$LASTRUNBYTESACKDIFF LASTRUNBYTESACKSECS=$LASTRUNBYTESACKSECS LASTRUNBYTESACKRATE=$LASTRUNBYTESACKRATE" >>$HISTORYLOG
	
	IFS=$ORIGIFS
	sendSyslog "$functionName" "INFO" "checkLoggingSP_socketDetails" "DSTIP=\"$DSTIP\" SRCPORT=\"$SRCPORT\" PID=\"$PID\" BYTESACK=\"$BYTESACK\" BYTESRCV=\"$BYTESRCV\" SEGSOUT=\"$SEGSOUT\" SEGSIN=\"$SEGSIN\" LASTSND=\"$LASTSND\" LASTRCV=\"$LASTRCV\" LASTRUNSEGSOUTDIFF=\"$LASTRUNSEGSOUTDIFF\" LASTRUNSEGSOUTSECS=\"$LASTRUNSEGSOUTSECS\" LASTRUNSEGSOUTRATE=\"$LASTRUNSEGSOUTRATE\"  LASTRUNBYTESACKDIFF=\"$LASTRUNBYTESACKDIFF\" LASTRUNBYTESACKSECS=\"$LASTRUNBYTESACKSECS\" LASTRUNBYTESACKRATE=\"$LASTRUNBYTESACKRATE\""
	IFS=$'\n'
	let checkLoggingSP_socketRate=checkLoggingSP_socketRate+LASTRUNSEGSOUTRATE
	let checkLoggingSP_socketBytesRate=checkLoggingSP_socketBytesRate+LASTRUNBYTESACKRATE
done
IFS=$ORIGIFS






#LOG OUTPUTS
# if [[ $checkSelf_majorVer != "R81.10" || $checkSelf_majorVer != "R81.20" ]]; then
	# echo "checkLoggingSP_asgLogServersStatus $checkLoggingSP_asgLogServersStatus" >>$RUNLOG
	# echo "checkLoggingSP_logDistributionStatus $checkLoggingSP_logDistributionStatus" >>$RUNLOG
	# echo "checkLoggingSP_alertDistributionStatus $checkLoggingSP_alertDistributionStatus" >>$RUNLOG
	# echo "checkLoggingSP_overallStatus $checkLoggingSP_overallStatus" >>$RUNLOG
	# echo "checkLoggingSP_primaryClmStatus $checkLoggingSP_primaryClmStatus" >>$RUNLOG
	# echo "checkLoggingSP_primaryClmIp $checkLoggingSP_primaryClmIp" >>$RUNLOG
	# echo "checkLoggingSP_primaryClmRate $checkLoggingSP_primaryClmRate" >>$RUNLOG
	# echo "checkLoggingSP_secondaryClmStatus $checkLoggingSP_secondaryClmStatus" >>$RUNLOG
	# echo "checkLoggingSP_secondaryClmIp $checkLoggingSP_secondaryClmIp" >>$RUNLOG
	# echo "checkLoggingSP_secondaryClmRate $checkLoggingSP_secondaryClmRate" >>$RUNLOG
# fi
echo "checkLoggingSP_fwlogSize $checkLoggingSP_fwlogSize" >>$RUNLOG
echo "checkLoggingSP_totalLogSize $checkLoggingSP_totalLogSize" >>$RUNLOG
echo "checkLoggingSP_fwlogLastEditDate $checkLoggingSP_fwlogLastEditDate" >>$RUNLOG
echo "checkLoggingSP_logSwitchSchedule $checkLoggingSP_logSwitchSchedule" >>$RUNLOG
echo "checkLoggingSP_logSwitchFwdTime $checkLoggingSP_logSwitchFwdTime" >>$RUNLOG
echo "checkLoggingSP_logForwardTarget $checkLoggingSP_logForwardTarget" >>$RUNLOG
echo "checkLoggingSP_logTcpState $checkLoggingSP_logTcpState" >>$RUNLOG
echo "checkLoggingSP_cloudUnobfuscate $checkLoggingSP_cloudUnobfuscate" >>$RUNLOG
echo "checkLoggingSP_emptyLogQty $checkLoggingSP_emptyLogQty" >>$RUNLOG
echo "checkLoggingSP_localLogFileQty $checkLoggingSP_localLogFileQty" >>$RUNLOG
echo "checkLoggingSP_localLogFileName $checkLoggingSP_localLogFileName" >>$RUNLOG
echo "checkLoggingSP_localLogFileOldestName $checkLoggingSP_localLogFileOldestName" >>$RUNLOG
echo "checkLoggingSP_localLogFileOldestDate $checkLoggingSP_localLogFileOldestDate" >>$RUNLOG
echo "checkLoggingSP_localLogFileMissingPtrNames $checkLoggingSP_localLogFileMissingPtrNames" >>$RUNLOG
echo "checkLoggingSP_localLogFileMissingPtrQty $checkLoggingSP_localLogFileMissingPtrQty" >>$RUNLOG

# if [[ $checkSelf_majorVer != "R81.10" || $checkSelf_majorVer != "R81.20" ]]; then
	# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_asgLogServersStatus - $checkLoggingSP_asgLogServersStatus" >>$HISTORYLOG
	# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_logDistributionStatus - $checkLoggingSP_logDistributionStatus" >>$HISTORYLOG
	# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_alertDistributionStatus - $checkLoggingSP_alertDistributionStatus" >>$HISTORYLOG
	# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_overallStatus - $checkLoggingSP_overallStatus" >>$HISTORYLOG
	# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_primaryClmStatus - $checkLoggingSP_primaryClmStatus" >>$HISTORYLOG
	# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_primaryClmIp - $checkLoggingSP_primaryClmIp" >>$HISTORYLOG
	# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_primaryClmRate - $checkLoggingSP_primaryClmRate" >>$HISTORYLOG
	# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Secondary CLM Status - $checkLoggingSP_secondaryClmStatus" >>$HISTORYLOG
	# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Secondary CLM IP - $checkLoggingSP_secondaryClmIp" >>$HISTORYLOG
	# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_secondaryClmRate - $checkLoggingSP_secondaryClmRate" >>$HISTORYLOG
# fi
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_fwlogSize - $checkLoggingSP_fwlogSize" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_fwlogLastEditDate - $checkLoggingSP_fwlogLastEditDate" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_totalLogSize - $checkLoggingSP_totalLogSize" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_logSwitchSchedule - $checkLoggingSP_logSwitchSchedule" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_logSwitchFwdTime - $checkLoggingSP_logSwitchFwdTime" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_logForwardTarget - $checkLoggingSP_logForwardTarget" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_logTcpState - $checkLoggingSP_logTcpState" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_cloudUnobfuscate - $checkLoggingSP_cloudUnobfuscate" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_emptyLogQty - $checkLoggingSP_emptyLogQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_localLogFileQty $checkLoggingSP_localLogFileQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_localLogFileName $checkLoggingSP_localLogFileName" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_localLogFileOldestName $checkLoggingSP_localLogFileOldestName" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_localLogFileOldestDate $checkLoggingSP_localLogFileOldestDate" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_localLogFileMissingPtrNames $checkLoggingSP_localLogFileMissingPtrNames" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_localLogFileMissingPtrQty $checkLoggingSP_localLogFileMissingPtrQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_localLoggingModeDescription - $checkLoggingSP_localLoggingModeDescription" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_logHandlingRate - $checkLoggingSP_logHandlingRate" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_totalAmwPcapQty - $checkLoggingSP_totalAmwPcapQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_totalAmwPcapSize - $checkLoggingSP_totalAmwPcapSize" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_socketRate - $checkLoggingSP_socketRate" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_socketBytesRate - $checkLoggingSP_socketBytesRate" >>$HISTORYLOG


#RUN LOGIC
if [[ $checkLoggingSP_overallStatus != "0" ]]; then
		echo "Logic - overallStatus: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Overall status - $checkLoggingSP_overallStatus" >>$HISTORYLOG
else
		echo "Logic - overallStatus: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Overall status - $checkLoggingSP_overallStatus" >>$HISTORYLOG
fi
# if [[ $checkSelf_majorVer != "R81.10" || $checkSelf_majorVer != "R81.20" ]]; then
	# if [[ $checkLoggingSP_asgLogServersStatus == "Disabled" ]]; then
		# if [[ $checkLoggingSP_logDistributionStatus == "false" ]]; then
			# if [[ $checkLoggingSP_primaryClmStatus != "0" ]]; then
					# echo "Logic - primaryClmStatus: FAIL" >>$RUNLOG
					# echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Primary CLM status - $checkLoggingSP_primaryClmStatus" >>$HISTORYLOG
					# checkLoggingSP_warning="1"
					# checkLoggingSP_warningInfo="$checkLoggingSP_warningInfo [Primary CLM unreachable ($checkLoggingSP_primaryClmIp)]"
			# else
					# echo "Logic - primaryClmStatus: PASS" >>$RUNLOG
					# echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Primary CLM status - $checkLoggingSP_primaryClmStatus" >>$HISTORYLOG
			# fi

			# if [[ $checkLoggingSP_secondaryClmStatus != "2" ]] && [[ $checkLoggingSP_secondaryClmStatus != "0" ]]; then
					# echo "Logic - secondaryClmStatus: FAIL" >>$RUNLOG
					# echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Secondary CLM status - $checkLoggingSP_secondaryClmStatus" >>$HISTORYLOG
					# checkLoggingSP_warning="1"
					# checkLoggingSP_warningInfo="$checkLoggingSP_warningInfo [Secondary CLM unreachable ($checkLoggingSP_secondaryClmIp)]"
			# else
					# echo "Logic - secondaryClmStatus: PASS" >>$RUNLOG
					# echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Secondary CLM status - $checkLoggingSP_secondaryClmStatus" >>$HISTORYLOG
			# fi
		# fi
	# fi
# fi

if [[ $checkLoggingSP_fwlogSize != $checkLoggingSP_defaultFwlogSize ]] && [[ $checkLoggingSP_fwlogLastEditDiff -lt $SINCELASTRUN ]]; then
	SIZE_BEFORE=$(ls -l $FWDIR/log/fw.logptr | awk '{print $5}')
		sleep $LOGTIME
	SIZE_AFTER=$(ls -l $FWDIR/log/fw.logptr | awk '{print $5}')
	RATE="$(( (SIZE_AFTER - SIZE_BEFORE) / (PTRSIZEPERLOG * LOGTIME) ))"
	if [[ $RATE -lt "1" ]]; then
		RATE="0"
	fi
	if [[ $RATE -gt "0" ]]; then
		checkLoggingSP_localLogRate=$RATE
		checkLoggingSP_warning="1"
		checkLoggingSP_warningInfo="$checkLoggingSP_warningInfo [Current Local Logging Rate: $RATE/sec]"
	else
		checkLoggingSP_localLogRate=$RATE
	fi
fi
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_localLogRate - $RATE" >>$HISTORYLOG

if [[ $checkLoggingSP_fwlogSize != $checkLoggingSP_defaultFwlogSize ]] && [[ $checkLoggingSP_localLogRate -gt "0" ]]; then
	if [[ $checkLoggingSP_fwlogLastEditDiff -lt $SINCELASTRUN ]]; then
		echo "Logic - fwlogSize: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Logging local - $checkLoggingSP_fwlogSize" >>$HISTORYLOG
		checkLoggingSP_warning="1"
		if [[ $checkLoggingSP_socketBytesRate -eq "0" ]]; then
			checkLoggingSP_warningInfo="$checkLoggingSP_warningInfo [Actively logging local, Log size: $checkLoggingSP_totalLogSize Bytes, Last Write: $checkLoggingSP_fwlogLastEditSince, Sockets Sent $checkLoggingSP_socketBytesRate Bytes]"
		else
			checkLoggingSP_warningInfo="$checkLoggingSP_warningInfo [Actively logging local, Log size: $checkLoggingSP_totalLogSize Bytes, Last Write: $checkLoggingSP_fwlogLastEditSince, Sockets Sent $checkLoggingSP_socketBytesRate Bytes]"
		fi
		
		
		
		#checkLoggingSP_warning="$checkLoggingSP_warning [Actively logging local, Log size: $checkLoggingSP_totalLogSize Bytes, Last Write: $checkLoggingSP_fwlogLastEditSince]"
	else
		if [[ $checkLoggingSP_totalLogSize -lt "250000000" ]]; then
			echo "Logic - fwlogSize: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - Logging local - $checkLoggingSP_fwlogSize" >>$HISTORYLOG
			#checkLoggingSP_warning="1"
			checkLoggingSP_warningInfo="$checkLoggingSP_warningInfo [Previously logged local, Log size: $checkLoggingSP_totalLogSize Bytes, Last Write: $checkLoggingSP_fwlogLastEditSince]"
		else
			echo "Logic - fwlogSize: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - Logging local - $checkLoggingSP_fwlogSize" >>$HISTORYLOG
			checkLoggingSP_warning="1"
			checkLoggingSP_warningInfo="$checkLoggingSP_warningInfo [Previously logged local, Log size: $checkLoggingSP_totalLogSize Bytes, Last Write: $checkLoggingSP_fwlogLastEditSince]"
		fi
	fi
else
	echo "Logic - fwlogSize: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Logging local - $checkLoggingSP_fwlogSize" >>$HISTORYLOG
fi


#SYSLOG
# if [[ $checkSelf_majorVer != "R81.10" || $checkSelf_majorVer != "R81.20" ]]; then
	# sendSyslog "$functionName" "INFO" "checkLoggingSP_asgLogServersStatus" "VALUE=\"$checkLoggingSP_asgLogServersStatus\""
	# sendSyslog "$functionName" "INFO" "checkLoggingSP_overallStatus" "VALUE=\"$checkLoggingSP_overallStatus\""
	# sendSyslog "$functionName" "INFO" "checkLoggingSP_handlingRate" "VALUE=\"$checkLoggingSP_handlingRate\""
	# sendSyslog "$functionName" "INFO" "checkLoggingSP_primaryClm" "VALUE=\"$checkLoggingSP_primaryClmStatus\" IP=\"$checkLoggingSP_primaryClmIp\" RATE=\"$checkLoggingSP_primaryClmRate\""
	# sendSyslog "$functionName" "INFO" "checkLoggingSP_secondaryClm" "VALUE=\"$checkLoggingSP_secondaryClmStatus\" IP=\"$checkLoggingSP_secondaryClmIp\" RATE=\"$checkLoggingSP_secondaryClmRate\""
	# sendSyslog "$functionName" "INFO" "checkLoggingSP_primaryClmSendingRate" "VALUE=\"$checkLoggingSP_primaryClmSendingRate\""
	# sendSyslog "$functionName" "INFO" "checkLoggingSP_secondaryClmSendingRate" "VALUE=\"$checkLoggingSP_secondaryClmSendingRate\""
# fi
sendSyslog "$functionName" "INFO" "checkLoggingSP_fwlogSize" "VALUE=\"$checkLoggingSP_fwlogSize\""
sendSyslog "$functionName" "INFO" "checkLoggingSP_fwlogLastEditDate" "VALUE=\"$checkLoggingSP_fwlogLastEditDate\""
sendSyslog "$functionName" "INFO" "checkLoggingSP_totalLogSize" "VALUE=\"$checkLoggingSP_totalLogSize\""
sendSyslog "$functionName" "INFO" "checkLoggingSP_localLogRate" "VALUE=\"$RATE\""
sendSyslog "$functionName" "INFO" "checkLoggingSP_logSwitchSchedule" "VALUE=\"$checkLoggingSP_logSwitchSchedule\""
sendSyslog "$functionName" "INFO" "checkLoggingSP_logSwitchFwdTime" "VALUE=\"$checkLoggingSP_logSwitchFwdTime\""
sendSyslog "$functionName" "INFO" "checkLoggingSP_logForwardTarget" "VALUE=\"$checkLoggingSP_logForwardTarget\""
sendSyslog "$functionName" "INFO" "checkLoggingSP_logTcpState" "VALUE=\"$checkLoggingSP_logTcpState\""
sendSyslog "$functionName" "INFO" "checkLoggingSP_cloudUnobfuscate" "VALUE=\"$checkLoggingSP_cloudUnobfuscate\""
sendSyslog "$functionName" "INFO" "checkLoggingSP_emptyLogQty" "VALUE=\"$checkLoggingSP_emptyLogQty\""
sendSyslog "$functionName" "INFO" "checkLoggingSP_localLogFileQty" "VALUE=\"$checkLoggingSP_localLogFileQty\""
sendSyslog "$functionName" "INFO" "checkLoggingSP_localLogFileName" "VALUE=\"$checkLoggingSP_localLogFileName\""
sendSyslog "$functionName" "INFO" "checkLoggingSP_localLogFileOldestName" "VALUE=\"$checkLoggingSP_localLogFileOldestName\""
sendSyslog "$functionName" "INFO" "checkLoggingSP_localLogFileOldestDate" "VALUE=\"$checkLoggingSP_localLogFileOldestDate\""
sendSyslog "$functionName" "INFO" "checkLoggingSP_localLogFileMissingPtrNames" "VALUE=\"$checkLoggingSP_localLogFileMissingPtrNames\""
sendSyslog "$functionName" "INFO" "checkLoggingSP_localLogFileMissingPtrQty" "VALUE=\"$checkLoggingSP_localLogFileMissingPtrQty\""
sendSyslog "$functionName" "INFO" "checkLoggingSP_logHandlingRate" "VALUE=\"$checkLoggingSP_logHandlingRate\""
sendSyslog "$functionName" "INFO" "checkLoggingSP_localLoggingModeDescription" "VALUE=\"$checkLoggingSP_localLoggingModeDescription\""
sendSyslog "$functionName" "INFO" "checkLoggingSP_totalAmwPcapSize" "VALUE=\"$checkLoggingSP_secondaryClmSendingRate\""
sendSyslog "$functionName" "INFO" "checkLoggingSP_totalAmwPcapQty" "VALUE=\"$checkLoggingSP_totalAmwPcapQty\""


if [[ $checkLoggingSP_problem == "1" ]]; then
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "PROBLEM" "checkLoggingSP_problemInfo" "VALUE=\"$checkLoggingSP_problemInfo$checkLoggingSP_warningInfo$checkLoggingSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "PROBLEM" "checkLoggingSP_problemInfo" "VALUE=\"$checkLoggingSP_problemInfo$checkLoggingSP_warningInfo$checkLoggingSP_workingInfo\""
	fi
elif [[ $checkLoggingSP_warning == "1" ]]; then
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "WARNING" "checkLoggingSP_problemInfo" "VALUE=\"$checkLoggingSP_warningInfo$checkLoggingSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "WARNING" "checkLoggingSP_problemInfo" "VALUE=\"$checkLoggingSP_warningInfo$checkLoggingSP_workingInfo\""
	fi
else
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "WORKING" "checkLoggingSP_problemInfo" "VALUE=\"$checkLoggingSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "WORKING" "checkLoggingSP_problemInfo" "VALUE=\"$checkLoggingSP_workingInfo\""
	fi
fi

rm -f $TEMPFILE
	
checkLoggingSP_fEnd=$(date "+%s")
checkLoggingSP_fRunTime=$(( checkLoggingSP_fEnd - checkLoggingSP_fStart ))
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_warning - $checkLoggingSP_warning" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_problem - $checkLoggingSP_problem" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_problemInfo - $checkLoggingSP_problemInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_warningInfo - $checkLoggingSP_warningInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_workingInfo - $checkLoggingSP_workingInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSP_runTime - $checkLoggingSP_fRunTime" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkLoggingSP_warning" "VALUE=\"$checkLoggingSP_warning\""
sendSyslog "$functionName" "INFO" "checkLoggingSP_problem" "VALUE=\"$checkLoggingSP_problem\""
sendSyslog "$functionName" "INFO" "checkLoggingSP_problemInfo" "VALUE=\"$checkLoggingSP_problemInfo\""
sendSyslog "$functionName" "INFO" "checkLoggingSP_warningInfo" "VALUE=\"$checkLoggingSP_warningInfo\""
sendSyslog "$functionName" "INFO" "checkLoggingSP_workingInfo" "VALUE=\"$checkLoggingSP_workingInfo\""
sendSyslog "$functionName" "INFO" "checkLoggingSP_runTime" "VALUE=\"$checkLoggingSP_fRunTime\""


#SUMMARY
if [[ $checkLoggingSP_problem == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - checkLoggingSP - SUMMARY - PROBLEM - $checkLoggingSP_problemInfo$checkLoggingSP_warningInfo$checkLoggingSP_workingInfo" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - checkLoggingSP - LIMITEDSUMMARY - PROBLEM - $checkLoggingSP_problemInfo" >>$HISTORYLOG
elif [[ $checkLoggingSP_warning == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - checkLoggingSP - SUMMARY - WARNING - $checkLoggingSP_warningInfo$checkLoggingSP_workingInfo" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - checkLoggingSP - LIMITEDSUMMARY - WARNING - $checkLoggingSP_warningInfo" >>$HISTORYLOG
else
	echo "$HISTORYLOGPREAMBLE - checkLoggingSP - SUMMARY - WORKING - $checkLoggingSP_workingInfo" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - checkLoggingSP - LIMITEDSUMMARY - WORKING - $checkLoggingSP_workingInfo" >>$HISTORYLOG
fi

echo "checkLoggingSP_warning $checkLoggingSP_warning" >>$RUNLOG
echo "checkLoggingSP_problem $checkLoggingSP_problem" >>$RUNLOG
echo "END==checkLoggingSP" >>$RUNLOG
}

###################################################################################################
checkLoggingSM(){
echo "START==checkLoggingSM" >>$RUNLOG

#DEFAULTS
checkLoggingSM_fStart=$(date "+%s")
functionName=${FUNCNAME[0]}
checkLoggingSM_warning="0"
checkLoggingSM_problem="0"
checkLoggingSM_workingInfo=""
checkLoggingSM_warningInfo=""
checkLoggingSM_problemInfo=""
checkLoggingSM_totalRate="0"
checkLoggingSM_indexerTotalRate="0"
LOGTIME=5
TEMPFILE=$TEMPDIR/$SCRIPT.$EPOCH.$functionName
TEMPFILE_LOGEXPORT=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.logExportStatus
TEMPFILE_LOGEXPORT2=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.logExportStatus2
TEMPFILE_fetched=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.fetched
TEMPFILE_directory=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.directory
TEMPFILE_fetchremaining=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.fetchremaining
TEMPFILE_fetchremaining0=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.fetchremaining0
TEMPFILE_fetchremaining1=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.fetchremaining1
TEMPFILE_SS=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.ss
PTRSIZEPERLOG="8"


#COLLECT OUTPUTS
checkLoggingSM_indexerDiskSpace=$(du -k $RTDIR/log_indexes/ | tail -1 | awk '{print $1}')

IFS=$'\n'
for LINE in `ls -1 $MDSDIR/customers` ; do
	mdsenv $LINE > /dev/null 2>&1
	cpstat ls -f logging > $TEMPFILE
	cpstat ls -f indexer >> $TEMPFILE
	checkLoggingSM_logClmRateCurrent=$(cat $TEMPFILE | grep "Log Receive Rate:" | awk '{print $4}' | tr -d ' ')
	checkLoggingSM_logClmRatePeak=$(cat $TEMPFILE | grep "Log Receive Rate Peak:" | awk '{print $5}' | tr -d ' ')
	checkLoggingSM_logClmRateLast10Minutes=$(cat $TEMPFILE | grep "Log Receive Rate Last 10 Minutes:" | awk '{print $7}' | tr -d ' ')
	checkLoggingSM_logClmRateLastHour=$(cat $TEMPFILE | grep "Log Receive Rate Last Hour:" | awk '{print $6}' | tr -d ' ')
	checkLoggingSM_totalRate="$(( checkLoggingSM_totalRate + checkLoggingSM_logClmRateCurrent ))"
	
	checkLoggingSM_indexerClmRateCurrent=$(cat $TEMPFILE | grep "Read Logs Rate:" | awk '{print $4}' | tr -d ' ')
	checkLoggingSM_indexerClmRatePeak=$(cat $TEMPFILE | grep "Read Logs Rate Peak:" | awk '{print $5}' | tr -d ' ')
	checkLoggingSM_indexerClmRateLast10Minutes=$(cat $TEMPFILE | grep "Read Logs Rate  (10min):" | awk '{print $5}' | tr -d ' ')
	checkLoggingSM_indexerClmRateLastHour=$(cat $TEMPFILE | grep "Read Logs Rate  (60min):" | awk '{print $5}' | tr -d ' ')
	checkLoggingSM_indexerTotalRate="$(( checkLoggingSM_indexerTotalRate + checkLoggingSM_indexerClmRateCurrent ))"
	
	
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSM_logClmRateCurrent - $LINE $checkLoggingSM_logClmRateCurrent" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSM_logClmRatePeak - $LINE $checkLoggingSM_logClmRatePeak" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSM_logClmRateLast10Minutes - $LINE $checkLoggingSM_logClmRateLast10Minutes" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSM_logClmRateLastHour - $LINE $checkLoggingSM_logClmRateLastHour" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSM_indexerClmRateCurrent - $LINE $checkLoggingSM_indexerClmRateCurrent" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSM_indexerClmRatePeak - $LINE $checkLoggingSM_indexerClmRatePeak" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSM_indexerClmRateLast10Minutes - $LINE $checkLoggingSM_indexerClmRateLast10Minutes" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSM_indexerClmRateLastHour - $LINE $checkLoggingSM_indexerClmRateLastHour" >>$HISTORYLOG
	
	IFS=$ORIGIFS
	sendSyslog "$functionName" "INFO" "checkLoggingSM_logClmRateCurrent" "DOMAIN=\"$LINE\" VALUE=\"$checkLoggingSM_logClmRateCurrent\""
	IFS=$'\n'
	for GWNAME in `cat $TEMPFILE | grep "|" | grep -v "Name" | grep -v "Local Clients" | awk -F "|" '{print $2}' | tr -d ' ' | sort | uniq` ; do
		STATE=$(cat $TEMPFILE | grep "|" | grep -v "Name" | grep -v "Local Clients" | grep -w $GWNAME | awk -F "|" '{print $3}' | tr -d ' ' | head -1)
		LOGINTIME=$(cat $TEMPFILE | grep "|" | grep -v "Name" | grep -v "Local Clients" | grep -w $GWNAME | awk -F "|" '{print $4}' | head -1)
		RATE=$(cat $TEMPFILE | grep "|" | grep -v "Name" | grep -v "Local Clients" | grep -w $GWNAME | awk -F "|" '{print $5}' | tr -d ' ' | head -1)
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSM_logGatewayRate - $LINE $GWNAME $RATE" >>$HISTORYLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSM_logGatewayDetails - $LINE $GWNAME $STATE ($LOGINTIME)" >>$HISTORYLOG
		IFS=$ORIGIFS
		sendSyslog "$functionName" "INFO" "checkLoggingSM_logGatewayRate" "DOMAIN=\"$LINE\" GWNAME=\"$GWNAME\" VALUE=\"$RATE\""
		sendSyslog "$functionName" "INFO" "checkLoggingSM_logGatewayDetails" "DOMAIN=\"$LINE\" GWNAME=\"$GWNAME\" STATE=\"$STATE\" LOGINTIME=\"$LOGINTIME\""
		IFS=$'\n'
	done
	checkLoggingSM_logDiskSpace=$(du -k $FWDIR/log/ --exclude=blob | tail -1 | awk '{print $1}')
	checkLoggingSM_logAgeOldestName=$(ls -altr $FWDIR/log/ | grep -e "\.log$" | grep -v "cpha_policy\|load_kern_param" | head -1 | awk '{print $NF}' | awk -F "/" '{print $NF}')
	checkLoggingSM_logAgeOldestLastEditDate=$(date -d "`stat -c %y "$FWDIR/log/$checkLoggingSM_logAgeOldestName"`" +"%s")
	checkLoggingSM_logAgeOldestLastEditDateDiff="$(( EPOCH - checkLoggingSM_logAgeOldestLastEditDate ))"
	if [[ $checkLoggingSM_logAgeOldestLastEditDateDiff -lt "0" ]]; then
		checkLoggingSM_logAgeOldestLastEditDateDiff="0"
	fi
	checkLoggingSM_logAgeOldestLastEditDateSince=$(conv_time $checkLoggingSM_logAgeOldestLastEditDateDiff)
	checkLoggingSM_logAgeNewestName=$(ls -altr $FWDIR/log/ | grep -e "\.log$" | tail -1 | awk '{print $NF}' | awk -F "/" '{print $NF}')
	checkLoggingSM_logAgeNewestLastEditDate=$(date -d "`stat -c %y "$FWDIR/log/$checkLoggingSM_logAgeNewestName"`" +"%s")
	checkLoggingSM_logAgeNewestLastEditDateDiff="$(( EPOCH - checkLoggingSM_logAgeNewestLastEditDate ))"
	if [[ $checkLoggingSM_logAgeNewestLastEditDateDiff -lt "0" ]]; then
		checkLoggingSM_logAgeNewestLastEditDateDiff="0"
	fi
	checkLoggingSM_logAgeNewestLastEditDateSince=$(conv_time $checkLoggingSM_logAgeNewestLastEditDateDiff)
	checkLoggingSM_logQty=$(find $FWDIR/log/ -maxdepth 1 -name "*.log" -type f | wc -l)
	
	if [[ -d $FWDIR/log/packets_captures/ ]]; then
		checkLoggingSM_packetCapturesDiskSpace=$(du -k $FWDIR/log/packets_captures/ | tail -1 | awk '{print $1}')
		checkLoggingSM_packetCapturesQty=$(ls -al $FWDIR/log/packets_captures/*.capture | wc -l)
	else
		checkLoggingSM_packetCapturesDiskSpace="0"
		checkLoggingSM_packetCapturesQty="0"
	fi
	
	checkLoggingSM_emptyLogQty=$(find $FWDIR/log/ -maxdepth 1 -name "*.log" -mtime -1000 -size -8349c | grep -v "fw.log\|lock_dbs.log\|load_kern_params" | awk -F "/" '{print $NF}' | awk -F "." '{print $1}' | wc -l)
	
	if [[ $checkLoggingSM_emptyLogQty -gt "0" ]]; then
		for i in `find /var/log/mds_logs/$LINE/log/ -name "*.log" -mtime -1000 -size -8349c | grep -v "fw.log\|lock_dbs.log\|load_kern_params" | awk -F "." '{$NF=""}1' | tr -d ' '` ; do rm $i.log $i.logaccount_ptr $i.loginitial_ptr $i.logptr > /dev/null 2>&1 ; done
		checkLoggingSM_workingInfo="$checkLoggingSM_workingInfo [Removed $checkLoggingSM_emptyLogQty empty log files from $LINE]"
	fi
	
	
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSM_logDiskSpace - $LINE $checkLoggingSM_logDiskSpace" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSM_logQty - $LINE $checkLoggingSM_logQty" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSM_logAgeOldest - $LINE $checkLoggingSM_logAgeOldestName $checkLoggingSM_logAgeOldestLastEditDateSince" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSM_logAgeNewest - $LINE $checkLoggingSM_logAgeNewestName $checkLoggingSM_logAgeNewestLastEditDateSince" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSM_packetCapturesDiskSpace - $LINE $checkLoggingSM_packetCapturesDiskSpace" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSM_packetCapturesQty - $LINE $checkLoggingSM_packetCapturesQty" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSM_emptyLogQty - $LINE $checkLoggingSM_emptyLogQty" >>$HISTORYLOG
	
	IFS=$ORIGIFS
	sendSyslog "$functionName" "INFO" "checkLoggingSM_logClmRateCurrent" "DOMAIN=\"$LINE\" VALUE=\"$checkLoggingSM_logClmRateCurrent\""
	sendSyslog "$functionName" "INFO" "checkLoggingSM_logClmRatePeak" "DOMAIN=\"$LINE\" VALUE=\"$checkLoggingSM_logClmRatePeak\""
	sendSyslog "$functionName" "INFO" "checkLoggingSM_logClmRateLast10Minutes" "DOMAIN=\"$LINE\" VALUE=\"$checkLoggingSM_logClmRateLast10Minutes\""
	sendSyslog "$functionName" "INFO" "checkLoggingSM_logClmRateLastHour" "DOMAIN=\"$LINE\" VALUE=\"$checkLoggingSM_logClmRateLastHour\""
	sendSyslog "$functionName" "INFO" "checkLoggingSM_totalRate" "DOMAIN=\"$LINE\" VALUE=\"$checkLoggingSM_totalRate\""
	sendSyslog "$functionName" "INFO" "checkLoggingSM_indexerClmRateCurrent" "DOMAIN=\"$LINE\" VALUE=\"$checkLoggingSM_indexerClmRateCurrent\""
	sendSyslog "$functionName" "INFO" "checkLoggingSM_indexerClmRatePeak" "DOMAIN=\"$LINE\" VALUE=\"$checkLoggingSM_indexerClmRatePeak\""
	sendSyslog "$functionName" "INFO" "checkLoggingSM_indexerClmRateLast10Minutes" "DOMAIN=\"$LINE\" VALUE=\"$checkLoggingSM_indexerClmRateLast10Minutes\""
	sendSyslog "$functionName" "INFO" "checkLoggingSM_indexerClmRateLastHour" "DOMAIN=\"$LINE\" VALUE=\"$checkLoggingSM_indexerClmRateLastHour\""
	sendSyslog "$functionName" "INFO" "checkLoggingSM_indexerTotalRate" "DOMAIN=\"$LINE\" VALUE=\"$checkLoggingSM_indexerTotalRate\""
	sendSyslog "$functionName" "INFO" "checkLoggingSM_logDiskSpace" "DOMAIN=\"$LINE\" VALUE=\"$checkLoggingSM_logDiskSpace\""
	sendSyslog "$functionName" "INFO" "checkLoggingSM_logQty" "DOMAIN=\"$LINE\" VALUE=\"$checkLoggingSM_logQty\""
	sendSyslog "$functionName" "INFO" "checkLoggingSM_logAgeOldestName" "DOMAIN=\"$LINE\" VALUE=\"$checkLoggingSM_logAgeOldestName\""
	sendSyslog "$functionName" "INFO" "checkLoggingSM_logAgeNewdestName" "DOMAIN=\"$LINE\" VALUE=\"$checkLoggingSM_logAgeNewdestName\""
	sendSyslog "$functionName" "INFO" "checkLoggingSM_packetCapturesDiskSpace" "DOMAIN=\"$LINE\" VALUE=\"$checkLoggingSM_packetCapturesDiskSpace\""
	sendSyslog "$functionName" "INFO" "checkLoggingSM_packetCapturesQty" "DOMAIN=\"$LINE\" VALUE=\"$checkLoggingSM_packetCapturesQty\""
	sendSyslog "$functionName" "INFO" "checkLoggingSM_emptyLogQty" "DOMAIN=\"$LINE\" VALUE=\"$checkLoggingSM_emptyLogQty\""
	IFS=$'\n'
done
IFS=$ORIGIFS

checkLoggingSM_workingInfo="$checkLoggingSM_workingInfo [Total Rate: $checkLoggingSM_totalRate/sec]"
checkLoggingSM_workingInfo="$checkLoggingSM_workingInfo [Total Indexing Rate: $checkLoggingSM_indexerTotalRate/sec]"
rm $TEMPFILE 2>/dev/null
mdsenv > /dev/null 2>&1


cp_log_export status > $TEMPFILE_LOGEXPORT 2>&1
checkLoggingSM_logExportEnabled=$(cat $TEMPFILE_LOGEXPORT | grep "No log_exporter has been found" | wc -l)
checkLoggingSM_logExporterRateTotalSplunk="0"



if [[ $checkLoggingSM_logExportEnabled == "0" ]]; then
	checkLoggingSM_logExporterConfigured=$(cat $TEMPFILE_LOGEXPORT | grep "name" | wc -l)
	checkLoggingSM_logExporterRunning=$(cat $TEMPFILE_LOGEXPORT | grep "Running" | wc -l)

	IFS=$'\n'
	for LINE in `cat $TEMPFILE_LOGEXPORT | grep "name"` ; do
		NAME=$(echo "$LINE" | awk '{print $2}')
		DOMAIN=$(echo "$LINE" | awk '{print $NF}' | awk -F ":" '{print $NF}' | tr -d ' ')
		MDMNAME=$HOSTNAME
		if [[ $DOMAIN == "MDS" ]]; then
			CMACLMNAME="mds"
			RTPATH="/opt"
		else
			CMACLMNAME=$DOMAIN
			RTPATH="$MDSDIR/customers/$DOMAIN"
		fi
		if [[ $DOMAIN == "MDS" ]]; then
			DOMAINIP=$(mdsstat | grep "MDS" | awk -F "|" '{print $4}' | tr -d ' ')
		else
			DOMAINIP=$(mdsstat $CMACLMNAME | grep "CMA" | awk -F "|" '{print $4}' | tr -d ' ')
		fi
		#This could be better if the grep can be specific instead of  capturing multiple domains
		cp_log_export status name $NAME domain-server $CMACLMNAME > $TEMPFILE_LOGEXPORT2
		STATUS=$(cat $TEMPFILE_LOGEXPORT2 | grep "status" | awk '{print $2}')
		if [[ $STATUS == "Not" ]]; then
			STATUS="NotRunning"
		fi
		PID=$(cat $TEMPFILE_LOGEXPORT2 | grep "status" | awk '{print $NF}' | tr -d '()')
		LASTLOGREAD=$(cat $TEMPFILE_LOGEXPORT2 | grep "last log read at" | awk -F ": " '{print $NF}')
		SHOW=$(cp_log_export show name $NAME domain-server $CMACLMNAME | awk '{print $NF}')
		IPADDR=$(echo $SHOW | awk '{print $3}')
		PORT=$(echo $SHOW | awk '{print $4}')
		PROTO=$(echo $SHOW | awk '{print $5}')
		FORMAT=$(echo $SHOW | awk '{print $6}')
		READMODE=$(echo $SHOW | awk '{print $7}')
		NETSTAT=$(netstat -pan | grep $DOMAINIP | grep $IPADDR | grep ":$PORT" | wc -l)
		EXTRA_PIDS=$(netstat -pan | grep $DOMAINIP | grep $IPADDR | grep ":$PORT" | awk '{print $NF}' | awk -F "/" '{print $1}' | grep -v $PID | tr '\n' ' ')
		EXTRA_PIDS_EXIST=$(netstat -pan | grep $DOMAINIP | grep $IPADDR | grep ":$PORT" | awk '{print $NF}' | awk -F "/" '{print $1}' | grep -v $PID | tr '\n' ' ' | wc -l)
		if [[ $checkSelf_majorVer == "R81.10" || $checkSelf_majorVer == "R81.20" ]]; then
			NUMTHREADS=$(cat $RTPATH/CPrt-$checkSelf_majorVer/log_exporter/targets/$NAME/log_indexer_custom_settings.conf | grep "num_export_threads" | awk '{print $NF}' | tr -d '()')
			if [[ $NUMTHREADS == "" && $MGMTTYPE == "MDS" ]]; then
				NUMTHREADS="1"
			elif [[ $NUMTHREADS == "" && $MGMTTYPE == "MLM" ]]; then
				NUMTHREADS="12"
			fi
		else
			if [[ $MGMTTYPE == "MDS" ]]; then
				NUMTHREADS="1"
			elif [[ $MGMTTYPE == "MLM" ]]; then
				NUMTHREADS="12"
			fi
		fi
		LOOKBACK=$(cat $RTPATH/CPrt-$checkSelf_majorVer/log_exporter/targets/$NAME/targetConfiguration.xml |grep log_files | sed -e 's/.*<log_files>\(.*\)<\/log_files>.*/\1/')
		ATTACHMENT=$(cat $RTPATH/CPrt-$checkSelf_majorVer/log_exporter/targets/$NAME/targetConfiguration.xml |grep export_attachment_ids | sed -e 's/.*<export_attachment_ids>\(.*\)<\/export_attachment_ids>.*/\1/')
		DOMAINRATE=$(cat $HISTORYLOG | grep $EPOCH | grep checkLoggingSM_logClmRateCurrent | grep "$CMACLMNAME " | awk -F " - " '{print $NF}' | awk '{print $NF}')
		RATE=$(cat $RTPATH/CPrt-$checkSelf_majorVer/log_exporter/targets/$NAME/log/log_indexer.elg | grep "rate" | grep -v "adtlog" | grep -v "Offline" | tail -1 | awk '{print $9}' | awk -F "=" '{print $NF}')
		if [[ $RATE == "" ]]; then
			RATE=$(cat $RTPATH/CPrt-$checkSelf_majorVer/log_exporter/targets/$NAME/log/log_indexer.elg.1 | grep "rate" | grep -v "adtlog" | grep -v "Offline" | tail -1 | awk '{print $9}' | awk -F "=" '{print $NF}')
		fi
		SOCKETBLOCKEDQTY=$(cat $RTPATH/CPrt-$checkSelf_majorVer/log_exporter/targets/$NAME/log/log_indexer.elg.1 | grep "SyslogTCPSender" | grep "write-blocked" | wc -l)
		if [[ $SOCKETBLOCKEDQTY -gt "0" ]]; then
			SOCKETBLOCKEDSEC0=$(cat $RTPATH/CPrt-$checkSelf_majorVer/log_exporter/targets/$NAME/log/log_indexer.elg.1 | grep "SyslogTCPSender" | grep "write-blocked" | awk -F ":" '{print $NF}' | awk '{print $5}' | paste -sd+ | bc)
			SOCKETBLOCKEDSEC=$(echo $SOCKETBLOCKEDSEC0*1000 | bc)
			SOCKETBLOCKEDMIL=$(cat $RTPATH/CPrt-$checkSelf_majorVer/log_exporter/targets/$NAME/log/log_indexer.elg.1 | grep "SyslogTCPSender" | grep "write-blocked" | awk -F ":" '{print $NF}' | awk '{print $8}' | paste -sd+ | bc)
			SOCKETBLOCKED1=$(echo $SOCKETBLOCKEDSEC + $SOCKETBLOCKEDMIL | bc)
			SOCKETBLOCKED=$(echo $SOCKETBLOCKED1 / $SOCKETBLOCKEDQTY | bc)
		else
			SOCKETBLOCKED="0"
		fi
		cat $RTPATH/CPrt-$checkSelf_majorVer/log_exporter/targets/$NAME/data/FetchedFiles | awk '{print $5}' | grep -v "adtlog" | sed 1d > $TEMPFILE_fetched
		find $RTPATH/CPsuite-$checkSelf_majorVer/fw1/log/ -maxdepth 1 -name "*.log" -mtime -$LOOKBACK -size +8348c | awk -F "/" '{print $NF}' > $TEMPFILE_directory
		FETCHREMAINING="0"
		FETCHREMAININGNAMES=""
		FETCHREMAININGLOGFAILED="0"
		FETCHREMAININGLOGFAILEDNAMES=""
		FETCHREMAININGLOGTOOOLD="0"
		FETCHREMAININGLOGTOOOLDNAMES=""
		FETCHREMAININGSIZE="0"
		FETCHREMAININGMISSINGPTRQTY="0"
		FETCHREMAININGMISSINGPTRNAMES=""
		for LINE in `grep -Fvx -f $TEMPFILE_fetched $TEMPFILE_directory` ; do
			LOG_TOO_OLD=$(cat $RTPATH/CPrt-$checkSelf_majorVer/log_exporter/targets/$NAME/log/log_indexer.elg* | grep $LINE | grep "Too old - skipping" | wc -l)
			LOG_FAILED=$(cat $RTPATH/CPrt-$checkSelf_majorVer/log_exporter/targets/$NAME/log/log_indexer.elg* | grep $LINE | grep "failed to open" | grep -v "cpha_policy.log" | grep -v "load_kern_params" | wc -l)
			if [[ $LOG_TOO_OLD -eq "0" ]] && [[ $LOG_FAILED -eq "0" ]]; then
				LINE2=$(echo "$LINE" | awk -F "." '{print $1".logptr"}')
				if [[ -f $RTPATH/CPsuite-$checkSelf_majorVer/fw1/log/$LINE2 ]]; then
					SIZE=$(ls -al $RTPATH/CPsuite-$checkSelf_majorVer/fw1/log/$LINE2 | awk '{print $5}')
					let FETCHREMAININGSIZE=FETCHREMAININGSIZE+SIZE
					FIREWALL=$(echo "$LINE" | awk -F "__" '{print $1}')
					FIREWALLISLOCAL=$(echo $FIREWALL | grep "\-\|_\|fw.log" | wc -l)
					if [[ $FIREWALLISLOCAL -gt "0" ]]; then
						FIREWALL="NONSPECIFIC"
					fi
					echo "$FIREWALL $SIZE" >> $TEMPFILE_fetchremaining1
					let FETCHREMAINING=FETCHREMAINING+1
					FETCHREMAININGNAMES="$FETCHREMAININGNAMES $LINE"
				else
					let FETCHREMAININGMISSINGPTRQTY=FETCHREMAININGMISSINGPTRQTY+1
					FETCHREMAININGMISSINGPTRNAMES="$FETCHREMAININGMISSINGPTRNAMES $LINE"
				fi
			elif [[ $LOG_FAILED -ge "1" ]]; then
				let FETCHREMAININGLOGFAILED=FETCHREMAININGLOGFAILED+1
				FETCHREMAININGLOGFAILEDNAMES="$FETCHREMAININGLOGFAILEDNAMES $LINE"
				REPAIRED_ALREADY=$(cat $RTPATH/CPsuite-$checkSelf_majorVer/fw1/log/$SCRIPT.$functionName.repairlog | grep $LINE | wc -l)
				if [[ $REPAIRED_ALREADY -eq "0" ]]; then
					##SELF-HEAL
					fw repairlog $RTPATH/CPsuite-$checkSelf_majorVer/fw1/log/$LINE > /dev/null 2>&1
					echo "$EPOCH $DOMAIN $LINE" >> $RTPATH/CPsuite-$checkSelf_majorVer/fw1/log/$SCRIPT.$functionName.repairlog
					echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSM_logExporterRepairLog - DOMAIN=$DOMAIN LINE=$LINE" >>$HISTORYLOG
					checkLoggingSM_warningInfo="$checkLoggingSM_warningInfo [Repairing Log: $DOMAIN /$LINE]"
				else
					REPAIRED_LAST=$(cat $RTPATH/CPsuite-$checkSelf_majorVer/fw1/log/$SCRIPT.$functionName.repairlog | grep $LINE | tail -1 | awk '{print $1}')
					REPAIRED_ATTEMPTS=$(cat $RTPATH/CPsuite-$checkSelf_majorVer/fw1/log/$SCRIPT.$functionName.repairlog | grep $LINE | wc -l)
					EPOCHMINUS7200=$(echo $EPOCH - 7200 | bc)

					if [[ $SELF_HEAL_ENABLED -eq "1" ]]; then
						if [[ $REPAIRED_ATTEMPTS -gt "1" ]] && [[ $LINE != "" ]]; then
							FIX="Remove corrupt log file"
							COMMAND="rm $RTPATH/CPsuite-$checkSelf_majorVer/fw1/log/$LINE*"
							BEFORE_FIX=$(ls -al $RTPATH/CPsuite-$checkSelf_majorVer/fw1/log/$LINE*)
							if [[ $SELF_HEAL_CHRONIC -eq "1" ]]; then
								COMMAND_EXECUTION="bypassed due to SELF_HEAL_CHRONIC"
								checkLoggingSM_warningInfo="$checkLoggingSM_warningInfo [Self Heal Bypassed due to Chronic issue - Remove corrupt log file $DOMAIN /$LINE]"
							else
								COMMAND_EXECUTION=$(rm $RTPATH/CPsuite-$checkSelf_majorVer/fw1/log/$LINE*)
								checkLoggingSM_workingInfo="$checkLoggingSM_workingInfo [Self Heal - Remove corrupt log file $DOMAIN /$LINE]"
							fi
							AFTER_FIX=$(ls -al $RTPATH/CPsuite-$checkSelf_majorVer/fw1/log/$LINE*)
							
							
							
							echo "$HISTORYLOGPREAMBLE - $functionName - INFO - SELF_HEAL - FIX=$FIX COMMAND=$COMMAND COMMAND_EXECUTION=$COMMAND_EXECUTION BEFORE_FIX=$BEFORE_FIX AFTER_FIX=$AFTER_FIX" >>$HISTORYLOG
							sendSyslog "$functionName" "INFO" "SELF_HEAL" "FIX=\"$FIX\" COMMAND=\"$COMMAND\" BEFORE_FIX=\"$BEFORE_FIX\" AFTER_FIX=\"$AFTER_FIX\" COMMAND_EXECUTION=\"$COMMAND_EXECUTION\""
							echo "$HISTORYLOGPREAMBLE - $functionName - INFO - SELF_HEAL - FIX=$FIX COMMAND=$COMMAND COMMAND_EXECUTION=$COMMAND_EXECUTION BEFORE_FIX=$BEFORE_FIX AFTER_FIX=$AFTER_FIX CRONIC=$SELF_HEAL_CHRONIC" >>$SELF_HEAL_LOG
						
						elif [[ $REPAIRED_LAST -lt $EPOCHMINUS7200 ]]; then
							FIX="Repair corrupt log file"
							COMMAND="fw repairlog $RTPATH/CPsuite-$checkSelf_majorVer/fw1/log/$LINE"
							BEFORE_FIX=$(ls -al $RTPATH/CPsuite-$checkSelf_majorVer/fw1/log/$LINE)
							if [[ $SELF_HEAL_CHRONIC -eq "1" ]]; then
								COMMAND_EXECUTION=$(bypassed due to SELF_HEAL_CHRONIC)
							else
								COMMAND_EXECUTION=$(fw repairlog $RTPATH/CPsuite-$checkSelf_majorVer/fw1/log/$LINE)
							fi
							AFTER_FIX=$(ls -al $RTPATH/CPsuite-$checkSelf_majorVer/fw1/log/$LINE)
							
							checkLoggingSM_workingInfo="$checkLoggingSM_workingInfo [Self Heal - Remove corrupt log file $DOMAIN /$LINE]"
							
							echo "$HISTORYLOGPREAMBLE - $functionName - INFO - SELF_HEAL - FIX=$FIX COMMAND=$COMMAND COMMAND_EXECUTION=$COMMAND_EXECUTION BEFORE_FIX=$BEFORE_FIX AFTER_FIX=$AFTER_FIX" >>$HISTORYLOG
							sendSyslog "$functionName" "INFO" "SELF_HEAL" "FIX=\"$FIX\" COMMAND=\"$COMMAND\" BEFORE_FIX=\"$BEFORE_FIX\" AFTER_FIX=\"$AFTER_FIX\" COMMAND_EXECUTION=\"$COMMAND_EXECUTION\""
							echo "$HISTORYLOGPREAMBLE - $functionName - INFO - SELF_HEAL - FIX=$FIX COMMAND=$COMMAND COMMAND_EXECUTION=$COMMAND_EXECUTION BEFORE_FIX=$BEFORE_FIX AFTER_FIX=$AFTER_FIX CRONIC=$SELF_HEAL_CHRONIC" >>$SELF_HEAL_LOG
						
						fi
					fi
						
					
				fi
			else
				let FETCHREMAININGLOGTOOOLD=FETCHREMAININGLOGTOOOLD+1
				FETCHREMAININGLOGTOOOLDNAMES="$FETCHREMAININGLOGTOOOLDNAMES $LINE"
			fi
		done
		IFS=$ORIGIFS

		
		
		FETCHREMAININGQTY="$(( FETCHREMAININGSIZE / PTRSIZEPERLOG ))"
		
		
		if [[ $FETCHREMAINING -gt 0 ]]; then
			FETCHREMAININGOLDESTDATE=$EPOCH
			echo $FETCHREMAININGNAMES | tr ',' '\n' > $TEMPFILE_fetchremaining
			
			for LINE in `cat $TEMPFILE_fetchremaining`; do
				DATE=$(date -d "`stat -c %y "$RTPATH/CPsuite-$checkSelf_majorVer/fw1/log/$LINE"`" +"%s")
				if [[ $DATE -lt $FETCHREMAININGOLDESTDATE ]]; then
					FETCHREMAININGOLDESTDATE=$DATE
					FETCHREMAININGOLDESTNAME=$LINE
				fi
			done
			
			rm -f $TEMPFILE_fetchremaining
		else
			FETCHREMAININGOLDESTNAME=""
			FETCHREMAININGOLDESTDATE=""
		fi
		
		if [[ $FETCHREMAININGLOGFAILED -ge "1" ]]; then
			checkLoggingSM_warning="1"
			checkLoggingSM_warningInfo="$checkLoggingSM_warningInfo [Log Exporter failed to read log: $DOMAIN /$FETCHREMAININGLOGFAILEDNAMES]"
		fi
		
		if [[ $RATE == "" ]]; then
			RATE="0"
		fi
		if [[ $STATUS == "NotRunning" ]]; then
			RATE="0"
		fi
		if [[ $NETSTAT == "0" ]]; then
			RATE="0"
		fi
		if [[ $NAME == "SPLUNK" ]]; then
			let checkLoggingSM_logExporterRateTotalSplunk=$checkLoggingSM_logExporterRateTotalSplunk+$RATE
		fi
		
		if [[ $STATUS != "Running" ]]; then
			checkLoggingSM_problem="1"
			checkLoggingSM_problemInfo="$checkLoggingSM_problemInfo [Log Exporter Not Running: $NAME/$DOMAIN]"
			PROBLEM="YES"
		elif [[ $STATUS == "Running" ]] && [[ $PROTO == "tcp" ]] && [[ $NUMTHREADS -lt $NETSTAT ]]; then
			checkLoggingSM_warning="1"
			if [[ $EXTRA_PIDS_EXIST -gt "0" ]]; then
				checkLoggingSM_warningInfo="$checkLoggingSM_warningInfo [Log Exporter Extra Sockets: $NAME/$DOMAIN Configured: $NUMTHREADS Actual: $NETSTAT]"
			else
				checkLoggingSM_warningInfo="$checkLoggingSM_warningInfo [Log Exporter Extra Sockets: $NAME/$DOMAIN Configured: $NUMTHREADS Actual: $NETSTAT - Zombie PIDs running $EXTRA_PIDS]"
			fi
			PROBLEM="YES"
		elif [[ $STATUS == "Running" ]] && [[ $PROTO == "tcp" ]] && [[ $NUMTHREADS -gt $NETSTAT ]]; then
			checkLoggingSM_warning="1"
			checkLoggingSM_warningInfo="$checkLoggingSM_warningInfo [Log Exporter Not Enough Sockets: $NAME/$DOMAIN Configured: $NUMTHREADS Actual: $NETSTAT]"
			PROBLEM="YES"
		else
			PROBLEM="NO"
		fi
		
		if [[ $FETCHREMAINING -gt 0 ]] && [[ -f $TEMPFILE_fetchremaining1 ]]; then
			for LINE in `cat $TEMPFILE_fetchremaining1 | awk '{print $1}' | sort | uniq` ; do
				SIZE=$(cat $TEMPFILE_fetchremaining1 | grep $LINE | awk '{print $2}' | paste -sd+ | bc)
				QTY="$(( SIZE / PTRSIZEPERLOG ))"
				echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSM_logExporterFetchRemainingDetail - NAME=$NAME MDMNAME=$MDMNAME DOMAIN=$DOMAIN FIREWALL=$LINE QTY=$QTY" >>$HISTORYLOG
				IFS=$ORIGIFS
				sendSyslog "$functionName" "INFO" "checkLoggingSM_logExporterFetchRemainingDetail" "NAME=\"$NAME\" MDMNAME=\"$MDMNAME\" DOMAIN=\"$DOMAIN\" FIREWALL=\"$LINE\" QTY=\"$QTY\""
				IFS=$'\n'
			done
		fi
		
		
		VALUELENGTH=$(echo $FETCHREMAININGNAMES | wc | awk '{print $NF}' | tr -d ' ')
		if [[ $VALUELENGTH -ge "193" ]]; then
			VALUESHORT=$(echo $FETCHREMAININGNAMES | cut -c -193)
			FETCHREMAININGNAMES="$VALUESHORT...more\""
		else
			FETCHREMAININGNAMES=$FETCHREMAININGNAMES
		fi
		VALUELENGTH=$(echo $FETCHREMAININGLOGTOOOLDNAMES | wc | awk '{print $NF}' | tr -d ' ')
		if [[ $VALUELENGTH -ge "193" ]]; then
			VALUESHORT=$(echo $FETCHREMAININGLOGTOOOLDNAMES | cut -c -193)
			FETCHREMAININGLOGTOOOLDNAMES="$VALUESHORT...more\""
		else
			FETCHREMAININGLOGTOOOLDNAMES=$FETCHREMAININGLOGTOOOLDNAMES
		fi

		
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSM_logExporterDetail - NAME=$NAME MDMNAME=$MDMNAME DOMAIN=$DOMAIN DOMAINIP=$DOMAINIP STATUS=$STATUS PID=$PID LASTLOGREAD=$LASTLOGREAD IPADDR=$IPADDR PORT=$PORT PROTO=$PROTO FORMAT=$FORMAT READMODE=$READMODE NETSTAT=$NETSTAT NUMTHREADS=$NUMTHREADS ATTACHMENT=$ATTACHMENT LOOKBACK=$LOOKBACK FETCHREMAINING=$FETCHREMAINING FETCHREMAININGNAMES=$FETCHREMAININGNAMES FETCHREMAININGQTY=$FETCHREMAININGQTY FETCHREMAININGOLDESTNAME=$FETCHREMAININGOLDESTNAME FETCHREMAININGOLDESTDATE=$FETCHREMAININGOLDESTDATE FETCHREMAININGMISSINGPTRNAMES=$FETCHREMAININGMISSINGPTRNAMES FETCHREMAININGMISSINGPTRQTY=$FETCHREMAININGMISSINGPTRQTY PROBLEM=$PROBLEM DOMAINRATE=$DOMAINRATE RATE=$RATE SOCKETBLOCKED=$SOCKETBLOCKED SOCKETBLOCKEDQTY=$SOCKETBLOCKEDQTY FETCHREMAININGLOGTOOOLD=$FETCHREMAININGLOGTOOOLD FETCHREMAININGLOGTOOOLDNAMES=$FETCHREMAININGLOGTOOOLDNAMES FETCHREMAININGLOGFAILED=$FETCHREMAININGLOGFAILED FETCHREMAININGLOGFAILEDNAMES=$FETCHREMAININGLOGFAILEDNAMES" >>$HISTORYLOG
		IFS=$ORIGIFS
		sendSyslog "$functionName" "INFO" "checkLoggingSM_logExporterDetail" "NAME=\"$NAME\" MDMNAME=\"$MDMNAME\" DOMAIN=\"$DOMAIN\" DOMAINIP=\"$DOMAINIP\" PIDSTATUS=\"$STATUS\" PID=\"$PID\" LASTLOGREAD=\"$LASTLOGREAD\" IPADDR=\"$IPADDR\" PORT=\"$PORT\" PROTO=\"$PROTO\" FORMAT=\"$FORMAT\" READMODE=\"$READMODE\" NETSTAT=\"$NETSTAT\" NUMTHREADS=\"$NUMTHREADS\" ATTACHMENT=\"$ATTACHMENT\" LOOKBACK=\"$LOOKBACK\" FETCHREMAINING=\"$FETCHREMAINING\" FETCHREMAININGQTY=\"$FETCHREMAININGQTY\" FETCHREMAININGOLDESTDATE=\"$FETCHREMAININGOLDESTDATE\" FETCHREMAININGMISSINGPTRQTY=\"$FETCHREMAININGMISSINGPTRQTY\" PROBLEM=\"$PROBLEM\" DOMAINRATE=\"$DOMAINRATE\" RATE=\"$RATE\" SOCKETBLOCKED=\"$SOCKETBLOCKED\" SOCKETBLOCKEDQTY=\"$SOCKETBLOCKEDQTY\" FETCHREMAININGLOGTOOOLD=\"$FETCHREMAININGLOGTOOOLD\" FETCHREMAININGLOGTOOOLDNAMES=\"$FETCHREMAININGLOGTOOOLDNAMES\" FETCHREMAININGOLDESTNAME=\"$FETCHREMAININGOLDESTNAME\" FETCHREMAININGMISSINGPTRNAMES=\"$FETCHREMAININGMISSINGPTRNAMES\""
		IFS=$'\n'
		
		
		#Monitor socket with SS
		/sbin/ss -tipn | grep -A1 "ESTAB" | grep -A1 $DOMAINIP | grep -A1 $IPADDR | grep -A1 $PORT > $TEMPFILE_SS
		SS_HIGHPORT=$(cat $TEMPFILE_SS | grep "ESTAB" | awk '{print $4}' | awk -F ":" '{print $NF}' | tr '\n' ' ')
		SS_SEGSOUT=$(cat $TEMPFILE_SS | grep "segs_out" | awk '{print $8}' | awk -F ":" '{print $NF}' | paste -sd+ | bc)
		SS_SEGSIN=$(cat $TEMPFILE_SS | grep "segs_in" | awk '{print $9}' | awk -F ":" '{print $NF}' | paste -sd+ | bc)
		SS_LASTSND=$(cat $TEMPFILE_SS | grep "lastsnd" | awk '{print $12}' | awk -F ":" '{print $NF}' | sort -n | tail -1)
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSM_logExporterSsDetail - NAME=$NAME MDMNAME=$MDMNAME DOMAIN=$DOMAIN SS_HIGHPORT=$SS_HIGHPORT SS_SEGSOUT=$SS_SEGSOUT SS_SEGSIN=$SS_SEGSIN SS_LASTSND=$SS_LASTSND" >>$HISTORYLOG
		rm $TEMPFILE_SS
		
		
		
		rm -rf $TEMPFILE_LOGEXPORT2 $TEMPFILE_directory $TEMPFILE_fetched $TEMPFILE_fetchremaining1
	done
	IFS=$ORIGIFS
	checkLoggingSM_workingInfo="$checkLoggingSM_workingInfo [Total Export Rate (Splunk): $checkLoggingSM_logExporterRateTotalSplunk]"
fi
rm -rf $TEMPFILE_LOGEXPORT


if [[ $HOSTNAME == "CPMPOL14" ]]; then
	IFS=$'\n'
	for LINE in `ls -1 $MDSDIR/customers` ; do
		mdsenv $LINE > /dev/null 2>&1
		NAME="IDSBEL61"
		fw lslogs $NAME 2>&1 | grep -v "Size" > $TEMPFILE
		FAIL=$(cat $TEMPFILE | grep "Connection failed" | wc -l)
		if [[ $FAIL -gt "0" ]]; then
			for LINE in `cat $TEMPFILE` ; do
				SIZE=$(echo "$LINE" | awk '{print $1}' | tr -d [:space:])
				FILENAME=$(echo "$LINE" | awk '{print $2}' | tr -d [:space:])
				DATE=$(date -d `echo "$LINE" | awk '{print $2}' | tr -d [:space:] | awk -F "." '{print $1}'` +"%s")
				DATESINCEEPOCH=$(since_time_epoch $DATE)
				echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSM_remoteLogDetails - NAME=$NAME FILENAME=$FILENAME DATE=$DATE DATESINCEEPOCH=$DATESINCEEPOCH SIZE=$SIZE" >>$HISTORYLOG
			done
		fi
	done
	IFS=$ORIGIFS
	rm $TEMPFILE
fi





#LOG OUTPUTS
echo "checkLoggingSM_problemInfo $checkLoggingSM_problemInfo" >>$RUNLOG
echo "checkLoggingSM_totalRate $checkLoggingSM_totalRate" >>$RUNLOG
echo "checkLoggingSM_indexerTotalRate $checkLoggingSM_indexerTotalRate" >>$RUNLOG
echo "checkLoggingSM_logExportEnabled $checkLoggingSM_logExportEnabled" >>$RUNLOG
echo "checkLoggingSM_indexerDiskSpace $checkLoggingSM_indexerDiskSpace" >>$RUNLOG
if [[ $checkLoggingSM_logExportEnabled == "0" ]]; then
	echo "checkLoggingSM_logExporterConfigured $checkLoggingSM_logExporterConfigured" >>$RUNLOG
	echo "checkLoggingSM_logExporterRunning $checkLoggingSM_logExporterRunning" >>$RUNLOG
	echo "checkLoggingSM_logExporterRateTotalSplunk $checkLoggingSM_logExporterRateTotalSplunk" >>$RUNLOG
fi

echo "$HISTORYLOGPREAMBLE - $functionName - INFO - rate - $checkLoggingSM_problemInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - total rate - $checkLoggingSM_totalRate" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSM_indexerDiskSpace - $checkLoggingSM_indexerDiskSpace" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSM_indexerTotalRate - $checkLoggingSM_indexerTotalRate" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSM_logExportEnabled - $checkLoggingSM_logExportEnabled" >>$HISTORYLOG
if [[ $checkLoggingSM_logExportEnabled == "0" ]]; then
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSM_logExporterConfigured - $checkLoggingSM_logExporterConfigured" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSM_logExporterRunning - $checkLoggingSM_logExporterRunning" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSM_logExporterRateTotalSplunk - $checkLoggingSM_logExporterRateTotalSplunk" >>$HISTORYLOG
fi


#RUN LOGIC


#SYSLOG
if [[ $checkLoggingSM_problem == "1" ]]; then
	sendSyslog "$functionName" "PROBLEM" "checkLoggingSM_problemInfo" "VALUE=\"$checkLoggingSM_problemInfo $checkLoggingSM_warningInfo $checkLoggingSM_workingInfo\""
elif [[ $checkLoggingSM_warning == "1" ]]; then
	sendSyslog "$functionName" "WARNING" "checkLoggingSM_warningInfo" "VALUE=\"$checkLoggingSM_warningInfo $checkLoggingSM_workingInfo\""	
else
	sendSyslog "$functionName" "WORKING" "checkLoggingSM_workingInfo" "VALUE=\"$checkLoggingSM_workingInfo\""
fi

sendSyslog "$functionName" "PROBLEM" "checkLoggingSM_totalRate" "VALUE=\"$checkLoggingSM_totalRate\""
sendSyslog "$functionName" "PROBLEM" "checkLoggingSM_indexerTotalRate" "VALUE=\"$checkLoggingSM_indexerTotalRate\""
sendSyslog "$functionName" "PROBLEM" "checkLoggingSM_indexerDiskSpace" "VALUE=\"$checkLoggingSM_indexerDiskSpace\""
sendSyslog "$functionName" "PROBLEM" "checkLoggingSM_logExportEnabled" "VALUE=\"$checkLoggingSM_logExportEnabled\""
if [[ $checkLoggingSM_logExportEnabled == "0" ]]; then
	sendSyslog "$functionName" "PROBLEM" "checkLoggingSM_logExportConfigured" "VALUE=\"$checkLoggingSM_logExportConfigured\""
	sendSyslog "$functionName" "PROBLEM" "checkLoggingSM_logExportRunning" "VALUE=\"$checkLoggingSM_logExportRunning\""
	sendSyslog "$functionName" "PROBLEM" "checkLoggingSM_logExporterRateTotalSplunk" "VALUE=\"$checkLoggingSM_logExporterRateTotalSplunk\""
fi

checkLoggingSM_fEnd=$(date "+%s")
checkLoggingSM_fRunTime=$(( checkLoggingSM_fEnd - checkLoggingSM_fStart ))
echo "checkLoggingSM_fRunTime $checkLoggingSM_fRunTime" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSM_warning - $checkLoggingSM_warning" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSM_problem - $checkLoggingSM_problem" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSM_problemInfo - $checkLoggingSM_problemInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSM_warningInfo - $checkLoggingSM_warningInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSM_workingInfo - $checkLoggingSM_workingInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLoggingSM_runTime - $checkLoggingSM_fRunTime" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkLoggingSM_warning" "VALUE=\"$checkLoggingSM_warning\""
sendSyslog "$functionName" "INFO" "checkLoggingSM_problem" "VALUE=\"$checkLoggingSM_problem\""
sendSyslog "$functionName" "INFO" "checkLoggingSM_problemInfo" "VALUE=\"$checkLoggingSM_problemInfo\""
sendSyslog "$functionName" "INFO" "checkLoggingSM_warningInfo" "VALUE=\"$checkLoggingSM_warningInfo\""
sendSyslog "$functionName" "INFO" "checkLoggingSM_workingInfo" "VALUE=\"$checkLoggingSM_workingInfo\""
sendSyslog "$functionName" "INFO" "checkLoggingSM_runTime" "VALUE=\"$checkLoggingSM_fRunTime\""
echo "checkLoggingSM_problem $checkLoggingSM_problem" >>$RUNLOG
echo "END==checkLoggingSM" >>$RUNLOG
}

###################################################################################################
checkClusterXL() {
echo "START==checkClusterXL" >>$RUNLOG

#DEFAULTS
checkClusterXL_fStart=$(date "+%s")
functionName=${FUNCNAME[0]}
checkClusterXL_warning="0"
checkClusterXL_problem="0"
checkClusterXL_workingInfo=""
checkClusterXL_warningInfo=""
checkClusterXL_problemInfo=""

#COLLECT OUTPUTS
#checkClusterXL_overallStatus=$(snmp .1.3.6.1.4.1.2620.1.5.102)
checkClusterXL_overallStatus=$(stattestget 1.3.6.1.4.1.2620.1.5.102)
checkClusterXL_interfaceDown=$(cphaprob -a if | grep DOWN | wc -l)
#checkClusterXL_state=$(snmp .1.3.6.1.4.1.2620.1.5.6 | tr '[:upper:]' '[:lower:]')
checkClusterXL_state=$(stattestget 1.3.6.1.4.1.2620.1.5.6 | tr '[:upper:]' '[:lower:]')
# DISABLED AFTER CYBER FW MGMT LOCKDOWN
# if [[ $SNMP_VER == "2c" ]]; then
	# checkClusterXL_stateOtherMember=$(snmpwalk -r 1 -v2c -c $SNMPCOMMUNITY $CLUSTERMEMBEROTHER 1.3.6.1.4.1.2620.1.5.6.0 | sed 's/.*: //' | tr -d '"' | tr -d ' ' | tr '[:upper:]' '[:lower:]')
# elif [[ $SNMP_VER == "3" ]]; then
	# checkClusterXL_stateOtherMember=$(snmpwalk -r 1 -v $SNMP_VER -u $SNMP_USER -l authPriv -a $SNMP_AUTH_HASH -A $SNMP_AUTH -x $SNMP_PRIVACY_HASH -X $SNMP_PRIVACY $CLUSTERMEMBEROTHER 1.3.6.1.4.1.2620.1.5.6.0 | sed 's/.*: //' | tr -d '"' | tr -d ' ' | tr '[:upper:]' '[:lower:]')
# fi
#checkClusterXL_stateOtherMember=$(snmpwalk -r 1 -v2c -c $SNMPCOMMUNITY $CLUSTERMEMBEROTHER 1.3.6.1.4.1.2620.1.5.6.0 | sed 's/.*: //' | tr -d '"' | tr -d ' ' | tr '[:upper:]' '[:lower:]')
checkClusterXL_cphaprobStateOtherMember=$(cphaprob stat | grep "1 \|2 " | grep -v "local" | awk -F "%" '{print $NF}' | head -1 | awk '{print $1}' | tr -d ' ' | tr '[:upper:]' '[:lower:]')
checkClusterXL_stateOtherMember=$checkClusterXL_cphaprobStateOtherMember


#LOG OUTPUTS
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkClusterXL_overallStatus - $checkClusterXL_overallStatus" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkClusterXL_interfaceDown - $checkClusterXL_interfaceDown" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkClusterXL_state - $checkClusterXL_state" >>$HISTORYLOG
# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkClusterXL_lastChange - $checkClusterXL_lastChange" >>$HISTORYLOG
# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkClusterXL_lastChangeEpoch - $checkClusterXL_lastChangeEpoch" >>$HISTORYLOG
# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkClusterXL_lastChangeSinceEpoch - $checkClusterXL_lastChangeSinceEpoch" >>$HISTORYLOG
# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkClusterXL_lastChangeSince - $checkClusterXL_lastChangeSince" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkClusterXL_stateOtherMember - $checkClusterXL_stateOtherMember" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkClusterXL_cphaprobStateOtherMember - $checkClusterXL_cphaprobStateOtherMember" >>$HISTORYLOG



if [[ $checkClusterXL_overallStatus != "OK" ]] || [[ $checkClusterXL_interfaceDown -gt "0" ]]; then
	echo "Logic - overallStatus: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Overall status - $checkClusterXL_overallStatus" >>$HISTORYLOG
	checkClusterXL_problemInfo="$checkClusterXL_problemInfo [State: $checkClusterXL_state]"
	if [[ $checkSelf_majorVer == "R81.10" || $checkSelf_majorVer == "R81.20" ]]; then
		checkClusterXL_pnoteProblem=$(cphaprob -i list | grep "problem" -B 3 | grep "Device Name" | awk -F ": " '{print $2}' | sed '/^$/d' | tr '\n' ' ')
	else
		checkClusterXL_pnoteProblem=$(cphaprob -i list | grep problem -B 1 | grep -v problem | awk -F ": " '{print $2}' | sed '/^$/d' | tr '\n' ' ')
	fi
	if [[ $checkClusterXL_pnoteProblem == "" ]] && [[ $checkClusterXL_interfaceDown -gt "0" ]]; then
		checkClusterXL_pnoteProblem="NA"
	fi
	echo "checkClusterXL_pnoteProblem $checkClusterXL_pnoteProblem" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Cluster Problem PNOTE - $checkClusterXL_pnoteProblem" >>$HISTORYLOG
	checkClusterXL_problem="1"
	checkClusterXL_problemInfo="$checkClusterXL_problemInfo [PNote: $checkClusterXL_pnoteProblem]"		
	if [[ $checkClusterXL_pnoteProblem == "Interface Active Check" ]]; then
		checkClusterXL_pnoteProblemRequiredInterfaces=$(cphaprob -a if | grep "Required interfaces" | awk -F ": " '{print $2}')
		checkClusterXL_pnoteProblemUpInterfaces=$(cphaprob -a if | grep UP | wc -l)
		checkClusterXL_pnoteProblemUpInterfacesInfo=$(cphaprob -a if | grep UP | sed 's/ )/)/g' | awk '{print $1$7}' | tr '\n' ' ')
		checkClusterXL_pnoteProblemDownInterfacesInfo=$(cphaprob -a if | grep DOWN | sed 's/ )/)/g' | awk '{print $1$NF}'  | sed 's/multicast//g' | tr '\n' ' ')
		checkClusterXL_pnoteProblemDisconnectedInterfacesInfo=$(cphaprob -a if | grep Disconnected | awk '{print $1$7}' | tr '\n' ' ')
		echo "checkClusterXL_pnoteProblemRequiredInterfaces $checkClusterXL_pnoteProblemRequiredInterfaces" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Cluster Problem PNOTE Required Interfaces - $checkClusterXL_pnoteProblemRequiredInterfaces" >>$HISTORYLOG
		echo "checkClusterXL_pnoteProblemUpInterfaces $checkClusterXL_pnoteProblemUpInterfaces" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Cluster Problem PNOTE Up Interfaces - $checkClusterXL_pnoteProblemUpInterfaces $checkClusterXL_pnoteProblemUpInterfacesInfo" >>$HISTORYLOG
		echo "checkClusterXL_pnoteProblemDownInterfacesInfo $checkClusterXL_pnoteProblemDownInterfacesInfo" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Cluster Problem PNOTE Down Interfaces - $checkClusterXL_pnoteProblemDownInterfacesInfo" >>$HISTORYLOG
		echo "checkClusterXL_pnoteProblemDisconnectedInterfacesInfo $checkClusterXL_pnoteProblemDisconnectedInterfacesInfo" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Cluster Problem PNOTE Disconnected Interfaces - $checkClusterXL_pnoteProblemDisconnectedInterfacesInfo" >>$HISTORYLOG
		checkClusterXL_problemInfo="$checkClusterXL_problemInfo [State: $checkClusterXL_state, Last Change: $checkClusterXL_lastChangeSince ago]"
		checkClusterXL_problemInfo="$checkClusterXL_problemInfo [Interface Qty: Up:$checkClusterXL_pnoteProblemUpInterfaces/Req:$checkClusterXL_pnoteProblemRequiredInterfaces $checkClusterXL_pnoteProblemDownInterfacesInfo]"
	fi
	if [[ $checkClusterXL_pnoteProblem == "NA" ]]; then
		checkClusterXL_pnoteProblemDownInterfacesInfo=$(cphaprob -a if | grep DOWN | sed 's/ )/)/g' | awk '{print $1$NF}'  | sed 's/multicast//g' | tr '\n' ' ' | tr -d ')')
		echo "checkClusterXL_pnoteProblemDownInterfacesInfo $checkClusterXL_pnoteProblemDownInterfacesInfo" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Cluster Problem PNOTE Down Interfaces - $checkClusterXL_pnoteProblemDownInterfacesInfo" >>$HISTORYLOG
		checkClusterXL_problemInfo="$checkClusterXL_problemInfo [State: $checkClusterXL_state]"
		checkClusterXL_problemInfo="$checkClusterXL_problemInfo [DOWN Interface: $checkClusterXL_pnoteProblemDownInterfacesInfo]"
	fi
else
	echo "Logic - overallStatus: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Overall status - $checkClusterXL_overallStatus" >>$HISTORYLOG
	checkClusterXL_workingInfo="$checkClusterXL_workingInfo [State: $checkClusterXL_state]"
fi

if [[ $checkClusterXL_state ==  "ready" ]] || [[ $checkClusterXL_state ==  "down" ]] || [[ $checkClusterXL_state ==  "Active Attention" ]] || [[ $checkClusterXL_state ==  "activeattention" ]]; then
	echo "Logic - state: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - state - $checkClusterXL_state" >>$HISTORYLOG
	checkClusterXL_problem="1"
	checkClusterXL_problemInfo="$checkClusterXL_problemInfo [Problem State: $checkClusterXL_state]"
else
	echo "Logic - state: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - state - $checkClusterXL_state" >>$HISTORYLOG
fi

if [[ $checkClusterXL_stateOtherMember ==  "ready" ]] || [[ $checkClusterXL_stateOtherMember ==  "down" ]] || [[ $checkClusterXL_stateOtherMember ==  "activeattention" ]] || [[ $checkClusterXL_stateOtherMember == "clusterxlinactiveormachineisdown" ]]; then
	echo "Logic - state other member: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - state other member - $checkClusterXL_stateOtherMember" >>$HISTORYLOG
	checkClusterXL_problem="1"
	checkClusterXL_problemInfo="$checkClusterXL_problemInfo [Problem State (Other Member - $CLUSTERMEMBEROTHER): $checkClusterXL_stateOtherMember]"		
else
	echo "Logic - state other member: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - state other member - $checkClusterXL_stateOtherMember" >>$HISTORYLOG
fi

if [[ $checkClusterXL_stateOtherMember ==  $checkClusterXL_state ]]; then
	echo "Logic - state compare: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - state compare - $checkClusterXL_stateOtherMember" >>$HISTORYLOG
	checkClusterXL_problem="1"
	checkClusterXL_problemInfo="$checkClusterXL_problemInfo [Problem State Match (Local($HOSTNAME): $checkClusterXL_state Remote($CLUSTERMEMBEROTHER): $checkClusterXL_stateOtherMember)]"		
else
	echo "Logic - state compare: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - state compare - (Local($HOSTNAME): $checkClusterXL_state Remote($CLUSTERMEMBEROTHER): $checkClusterXL_stateOtherMember)" >>$HISTORYLOG
fi


#SYSLOG
if [[ $checkClusterXL_problem == "1" ]]; then
	sendSyslog "$functionName" "PROBLEM" "checkClusterXL_problemInfo" "VALUE=\"$checkClusterXL_problemInfo $checkClusterXL_warningInfo $checkClusterXL_workingInfo\""
elif [[ $checkClusterXL_warning == "1" ]]; then
	sendSyslog "$functionName" "WARNING" "checkClusterXL_warningInfo" "VALUE=\"$checkClusterXL_warningInfo $checkClusterXL_workingInfo\""	
else
	sendSyslog "$functionName" "WORKING" "checkClusterXL_workingInfo" "VALUE=\"$checkClusterXL_workingInfo\""
fi
sendSyslog "$functionName" "INFO" "checkClusterXL_overallStatus" "VALUE=\"$checkClusterXL_overallStatus\""
sendSyslog "$functionName" "INFO" "checkClusterXL_state" "VALUE=\"$checkClusterXL_state\""
# sendSyslog "$functionName" "INFO" "checkClusterXL_lastChangeEpoch" "VALUE=\"$checkClusterXL_lastChangeEpoch\""
sendSyslog "$functionName" "INFO" "checkClusterXL_stateOtherMember" "VALUE=\"$checkClusterXL_stateOtherMember\""
sendSyslog "$functionName" "INFO" "checkClusterXL_cphaprobStateOtherMember" "VALUE=\"$checkClusterXL_cphaprobStateOtherMember\""



checkClusterXL_fEnd=$(date "+%s")
checkClusterXL_fRunTime=$(( checkClusterXL_fEnd - checkClusterXL_fStart ))
echo "checkClusterXL_fRunTime $checkClusterXL_fRunTime" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkClusterXL_warning - $checkClusterXL_warning" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkClusterXL_problem - $checkClusterXL_problem" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkClusterXL_problemInfo - $checkClusterXL_problemInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkClusterXL_warningInfo - $checkClusterXL_warningInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkClusterXL_workingInfo - $checkClusterXL_workingInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkClusterXL_runTime - $checkClusterXL_fRunTime" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkClusterXL_warning" "VALUE=\"$checkClusterXL_warning\""
sendSyslog "$functionName" "INFO" "checkClusterXL_problem" "VALUE=\"$checkClusterXL_problem\""
sendSyslog "$functionName" "INFO" "checkClusterXL_problemInfo" "VALUE=\"$checkClusterXL_problemInfo\""
sendSyslog "$functionName" "INFO" "checkClusterXL_warningInfo" "VALUE=\"$checkClusterXL_warningInfo\""
sendSyslog "$functionName" "INFO" "checkClusterXL_workingInfo" "VALUE=\"$checkClusterXL_workingInfo\""
sendSyslog "$functionName" "INFO" "checkClusterXL_runTime" "VALUE=\"$checkClusterXL_fRunTime\""
echo "checkClusterXL_problem $checkClusterXL_problem" >>$RUNLOG
echo "END==checkClusterXL" >>$RUNLOG
}

###################################################################################################
checkClusterXLSP() {
echo "START==checkClusterXLSP" >>$RUNLOG

#DEFAULTS
checkClusterXLSP_fStart=$(date "+%s")
functionName=${FUNCNAME[0]}
checkClusterXLSP_warning="0"
checkClusterXLSP_problem="0"
checkClusterXLSP_workingInfo=""
checkClusterXLSP_warningInfo=""
checkClusterXLSP_problemInfo=""


#COLLECT OUTPUTS
checkClusterXLSP_stateCh1=$CHASSIS1STATUS
checkClusterXLSP_stateCh2=$CHASSIS2STATUS
checkClusterXLSP_previousStateEpoch=$(cat $LASTRUNHISTORYLOGOUTPUT | grep "checkClusterXLSP" | grep "INFO" | grep "State" | awk -F " - " '{print $3}')
checkClusterXLSP_previousStateCh1=$(cat $LASTRUNHISTORYLOGOUTPUT | grep "checkClusterXLSP" | grep "INFO" | grep "State" | awk -F " - " '{print $7}' | awk '{print $1}' | awk -F "=" '{print $2}')
checkClusterXLSP_previousStateCh2=$(cat $LASTRUNHISTORYLOGOUTPUT | grep "checkClusterXLSP" | grep "INFO" | grep "State" | awk -F " - " '{print $7}' | awk '{print $2}' | awk -F "=" '{print $2}')


#LOG OUTPUTS
echo "checkClusterXLSP_stateCh1 $checkClusterXLSP_stateCh1" >>$RUNLOG
echo "checkClusterXLSP_stateCh2 $checkClusterXLSP_stateCh2" >>$RUNLOG
echo "checkClusterXLSP_previousStateCh1 $checkClusterXLSP_previousStateCh1" >>$RUNLOG
echo "checkClusterXLSP_previousStateCh2 $checkClusterXLSP_previousStateCh2" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - State - Chassis1=$checkClusterXLSP_stateCh1 Chassis2=$checkClusterXLSP_stateCh2" >>$HISTORYLOG


#RUN LOGIC
if [[ $checkClusterXLSP_previousStateCh1 == "" || $checkClusterXLSP_previousStateCh2 == "" ]]; then
	checkClusterXLSP_problemInfo="[Previous status cannot be determined. Chassis1 - Current=$checkClusterXLSP_stateCh1 Previous=$checkClusterXLSP_previousStateCh1, Chassis2 - Current=$checkClusterXLSP_stateCh2 Previous=$checkClusterXLSP_previousStateCh2]"
elif [[ $checkClusterXLSP_stateCh1 != $checkClusterXLSP_previousStateCh1 ]] || [[ $checkClusterXLSP_stateCh2 != $checkClusterXLSP_previousStateCh2 ]]; then
	checkClusterXLSP_problem="1"
	checkClusterXLSP_problemInfo="[Status changed since last run ($checkClusterXLSP_previousStateEpoch): Chassis1 - Current=$checkClusterXLSP_stateCh1 Previous=$checkClusterXLSP_previousStateCh1, Chassis2 - Current=$checkClusterXLSP_stateCh2 Previous=$checkClusterXLSP_previousStateCh2]"
fi

if [[ $checkClusterXLSP_stateCh1 == "DOWN" ]] || [[ $checkClusterXLSP_stateCh2 == "DOWN" ]]; then
	echo "Logic - state: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - State - Chassis1=$checkClusterXLSP_stateCh1 Chassis2=$checkClusterXLSP_stateCh2" >>$HISTORYLOG
	checkClusterXLSP_problem="1"
	if [[ $checkClusterXLSP_stateCh1 == "DOWN" ]]; then
		checkClusterXLSP_problemInfo="$checkClusterXLSP_problemInfo [Chassis 1: DOWN]"
	fi
	if [[ $checkClusterXLSP_stateCh2 == "DOWN" ]]; then
		checkClusterXLSP_problemInfo="$checkClusterXLSP_problemInfo [Chassis 2: DOWN]"
	fi
else
	echo "Logic - state: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - State - Chassis1=$checkClusterXLSP_stateCh1 Chassis2=$checkClusterXLSP_stateCh2" >>$HISTORYLOG
	if [[ $LOCALCHASSIS == "1" ]]; then
		checkClusterXLSP_workingInfo="$checkClusterXLSP_workingInfo [Chassis $LOCALCHASSIS: $checkClusterXLSP_stateCh1]"
	fi
	if [[ $LOCALCHASSIS == "2" ]]; then
		checkClusterXLSP_workingInfo="$checkClusterXLSP_workingInfo [Chassis $LOCALCHASSIS: $checkClusterXLSP_stateCh2]"
	fi
fi

#SYSLOG
if [[ $checkClusterXLSP_problem == "1" ]]; then
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "PROBLEM" "checkClusterXLSP_problemInfo" "VALUE=\"$checkClusterXLSP_problemInfo $checkClusterXLSP_warningInfo $checkClusterXLSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "PROBLEM" "checkClusterXLSP_problemInfo" "VALUE=\"$checkClusterXLSP_problemInfo $checkClusterXLSP_warningInfo $checkClusterXLSP_workingInfo\""
	fi
elif [[ $checkClusterXLSP_warning == "1" ]]; then
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "WARNING" "checkClusterXLSP_problemInfo" "VALUE=\"$checkClusterXLSP_warningInfo $checkClusterXLSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "WARNING" "checkClusterXLSP_problemInfo" "VALUE=\"$checkClusterXLSP_warningInfo $checkClusterXLSP_workingInfo\""
	fi
else
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "WORKING" "checkClusterXLSP_problemInfo" "VALUE=\"$checkClusterXLSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "WORKING" "checkClusterXLSP_problemInfo" "VALUE=\"$checkClusterXLSP_workingInfo\""
	fi
fi


if [[ $LOCALSMO == "1" ]]; then
	sendSyslog "$functionName" "INFO" "checkClusterXLSP_stateCh1" "VALUE=\"$checkClusterXLSP_stateCh1\"" "SMO"
	sendSyslog "$functionName" "INFO" "checkClusterXLSP_stateCh2" "VALUE=\"$checkClusterXLSP_stateCh2\"" "SMO"
fi




checkClusterXLSP_fEnd=$(date "+%s")
checkClusterXLSP_fRunTime=$(( checkClusterXLSP_fEnd - checkClusterXLSP_fStart ))
echo "checkClusterXLSP_fRunTime $checkClusterXLSP_fRunTime" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkClusterXLSP_warning - $checkClusterXLSP_warning" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkClusterXLSP_problem - $checkClusterXLSP_problem" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkClusterXLSP_problemInfo - $checkClusterXLSP_problemInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkClusterXLSP_warningInfo - $checkClusterXLSP_warningInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkClusterXLSP_workingInfo - $checkClusterXLSP_workingInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkClusterXLSP_runTime - $checkClusterXLSP_fRunTime" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkClusterXLSP_warning" "VALUE=\"$checkClusterXLSP_warning\""
sendSyslog "$functionName" "INFO" "checkClusterXLSP_problem" "VALUE=\"$checkClusterXLSP_problem\""
sendSyslog "$functionName" "INFO" "checkClusterXLSP_problemInfo" "VALUE=\"$checkClusterXLSP_problemInfo\""
sendSyslog "$functionName" "INFO" "checkClusterXLSP_warningInfo" "VALUE=\"$checkClusterXLSP_warningInfo\""
sendSyslog "$functionName" "INFO" "checkClusterXLSP_workingInfo" "VALUE=\"$checkClusterXLSP_workingInfo\""
sendSyslog "$functionName" "INFO" "checkClusterXLSP_runTime" "VALUE=\"$checkClusterXLSP_fRunTime\""


	
#SUMMARY
if [[ $checkClusterXLSP_problem == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - checkClusterXLSP - SUMMARY - PROBLEM - $checkClusterXLSP_problemInfo $checkClusterXLSP_warningInfo $checkClusterXLSP_workingInfo" >>$HISTORYLOG
elif [[ $checkClusterXLSP_warning == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - checkClusterXLSP - SUMMARY - WARNING - $checkClusterXLSP_warningInfo $checkClusterXLSP_workingInfo" >>$HISTORYLOG
else
	echo "$HISTORYLOGPREAMBLE - checkClusterXLSP - SUMMARY - WORKING - $checkClusterXLSP_workingInfo" >>$HISTORYLOG
fi


echo "checkClusterXLSP_problem $checkClusterXLSP_problem" >>$RUNLOG
echo "END==checkClusterXLSP" >>$RUNLOG
}

###################################################################################################
checkPolicy() {
echo "START==checkPolicy" >>$RUNLOG

#DEFAULTS
checkPolicy_fStart=$(date "+%s")
checkPolicy_fStartMs=$(date +%s%3N)
functionName=${FUNCNAME[0]}
checkPolicy_warning="0"
checkPolicy_problem="0"
checkPolicy_workingInfo=""
checkPolicy_warningInfo=""
checkPolicy_problemInfo=""
TEMPFILE=$TEMPDIR/$SCRIPT.$functionName.$EPOCH
TEMPFILE_DYNAMICOBJECTS=$TEMPDIR/$SCRIPT.$functionName.$EPOCH.dynamicobjects

#COLLECT OUTPUTS
#checkPolicy_policyName=$(snmp .1.3.6.1.4.1.2620.1.1.25.1)
checkPolicy_policyName=$(stattestget 1.3.6.1.4.1.2620.1.1.25.1)
checkPolicy_policyRuleQty=$(cat $FWDIR/database/rules.C | grep -B 3 "security_rule"| grep "rule-" | awk -F "rule-" '{print $2}' | sort -n | uniq | tail -1)
#checkPolicy_policyLoadTime0=$(snmp .1.3.6.1.4.1.2620.1.1.25.2)
checkPolicy_policyLoadTime0=$(stattestget 1.3.6.1.4.1.2620.1.1.25.2)
checkPolicy_policyLoadTime=$(date -d "$checkPolicy_policyLoadTime0" +"%s")
checkPolicy_policyTimeSinceLoad0="$(( EPOCH - checkPolicy_policyLoadTime ))"
checkPolicy_policyTimeSinceLoad=$(conv_time $checkPolicy_policyTimeSinceLoad0)
checkPolicy_policyCompileDetails=$(head -1 $FWDIR/state/local/FW1/local.ft)
checkPolicy_policyCompileTime0=$(head -1 $FWDIR/state/local/FW1/local.ft | awk '{print $9" "$10}')
checkPolicy_policyCompileTime=$(date -d "$checkPolicy_policyCompileTime0" +"%s")
checkPolicy_policyTimeSinceCompile0="$(( EPOCH - checkPolicy_policyCompileTime ))"
checkPolicy_policyTimeSinceCompile=$(conv_time $checkPolicy_policyTimeSinceCompile0)
# checkPolicy_policyAccepted=$(snmp .1.3.6.1.4.1.2620.1.1.25.6)
# checkPolicy_policyDropped=$(snmp .1.3.6.1.4.1.2620.1.1.25.16)
# checkPolicy_policyRejected=$(snmp .1.3.6.1.4.1.2620.1.1.25.14)
checkPolicy_policyAccepted=$(stattestget 1.3.6.1.4.1.2620.1.1.25.6)
checkPolicy_policyDropped=$(stattestget 1.3.6.1.4.1.2620.1.1.25.16)
checkPolicy_policyRejected=$(stattestget 1.3.6.1.4.1.2620.1.1.25.14)
checkPolicy_dnsClish=$(cat /config/active | grep "resolv:resolver" | awk '{print $NF}' | sort -n | tr '\n' ' ')
if [[ $MDPSENABLED -eq "2" ]]; then
	dplane > /dev/null 2>&1
fi
IFS=$'\n'
for LINE in `fw tab -t webui_dns_servers | grep -v "webui_dns_servers" | grep -v "static\|localhost" | grep -v '^$' | sort -n` ; do
	LINE2=$(hex2dot `echo $LINE`)
	checkPolicy_dnsWebui="$checkPolicy_dnsWebui $LINE2"
done
IFS=$ORIGIFS	
checkPolicy_dnsClish=$(echo $checkPolicy_dnsClish | tr ' ' '\n' | sort -n | tr '\n' ' ' | sed 's/^[ \t]*//' | sed 's/[ \t]*$//')
checkPolicy_dnsWebui=$(echo $checkPolicy_dnsWebui | tr ' ' '\n' | sort -n | tr '\n' ' ' | sed 's/^[ \t]*//' | sed 's/[ \t]*$//')


if [[ $checkSelf_majorVer == "R80.40" ]]; then
	#SNMP Bug SR 6-0003269215
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_policyDropped $checkPolicy_policyDropped SNMP Bug SR 6-0003269215 setting 0" >>$HISTORYLOG
	checkPolicy_policyDropped="0"
fi
checkPolicy_ckpMutexQty=$(find $CPDIR/tmp/ -name CKP_mutex\* | wc -l)


if [[ $checkSelf_ipv6Enabled == "1" ]] && [[ $checkSelf_ipv6Configured != "0" ]]; then
	checkPolicy_policyIpv6Accepted="0"
	checkPolicy_policyIpv6Dropped="0"
	checkPolicy_policyIpv6Rejected="0"
fi

checkPolicy_ipsStatus=$(ips stat | grep "IPS Status" | awk '{print $NF}')
checkPolicy_ipsProfile=$(cat $FWDIR/state/local/AMW/local.set 2>&1 | grep -A15 malware_profiles | grep ":name" | awk '{print $2}' | tr -d '()')
checkPolicy_ipsVersion=$(ips stat | grep "IPS Update Version" | awk '{print $NF}')
checkPolicy_ipsBypassConfig=$(ips bypass stat | grep "IPS Bypass Under Load" | awk '{print $NF}')
checkPolicy_optimizedDropsEnabled=$(cat $FWDIR/state/local/FW1/local.set 2>&1 | grep -A2 "optimize_drops_support_enabled" | grep "val" | awk '{print $NF}' | tr -d '()')
#checkPolicy_corexlFullyUtilizedDrops=$(snmp .1.3.6.1.4.1.2620.1.1.25.26)
checkPolicy_corexlFullyUtilizedDrops=$(stattestget 1.3.6.1.4.1.2620.1.1.25.26)


if [[ $checkPolicy_ipsBypassConfig == "Disabled" ]]; then
	checkPolicy_ipsBypassActive="Disabled"
else
	checkPolicy_ipsBypassActive=$(ips bypass stat | grep "Currently in bypass" | awk '{print $NF}')
fi


#Check fwkern.conf
fStartMs=$(date +%s%3N)
if [[ $checkSelf_majorVer == "R81.20" ]] && [[ -f $FWDIR/modules/fwkern.conf ]]; then
	checkPolicy_fwkernLastEdit=$(date -d "`stat -c %y "$FWDIR/modules/fwkern.conf"`" +"%s")
	checkPolicy_fwkernLastEditDiff="$(( EPOCH - checkPolicy_fwkernLastEdit ))"
	if [[ $checkPolicy_fwkernLastEditDiff -lt "0" ]]; then
		checkPolicy_fwkernLastEditDiff="0"
	fi
	checkPolicy_fwkernLastEditSince=$(conv_time $checkPolicy_fwkernLastEditDiff)
	IFS=$'\n'
	for LINE in `cat $FWDIR/modules/fwkern.conf` ; do
		PARAMETER=$(echo "$LINE" | awk -F "=" '{print $1}' | tr -d ' ')
		VALUE=$(echo "$LINE" | awk -F "=" '{print $2}' | tr -d ' ' | tr -d "'" | tr -d '"')
		RUNNINGVALUE0=$(fw ctl get int $PARAMETER 2>&1 | grep "Get operation failed" | wc -l)
		if [[ $RUNNINGVALUE0 -eq "0" ]]; then
			RUNNINGVALUETYPE="INT"
		else
			RUNNINGVALUE0=$(fw ctl get int $PARAMETER -a 2>&1 | grep -v "Get failed" | grep "PPAK" | wc -l)
			if [[ $RUNNINGVALUE0 -eq "1" ]]; then
				RUNNINGVALUETYPE="INTSXL"
			else
				RUNNINGVALUE0=$(fw ctl get str $PARAMETER 2>&1 | grep "Get operation failed" | wc -l)
				if [[ $RUNNINGVALUE0 -eq "0" ]]; then
					RUNNINGVALUETYPE="STR"
				else
					RUNNINGVALUETYPE="UNKNOWN"
				fi
			fi
		fi
		if [[ $RUNNINGVALUETYPE == "INT" ]]; then
			RUNNINGVALUE=$(fw ctl get int $PARAMETER 2>&1 | grep -v "Get operation failed" | awk '{print $NF}' | head -1 | tr -d ' ')
		elif [[ $RUNNINGVALUETYPE == "INTSXL" ]]; then
			RUNNINGVALUE=$(fw ctl get int $PARAMETER -a 2>&1 | grep "PPAK" | awk '{print $NF}' | head -1 | tr -d ' ' | tr -d "'" | tr -d '"')
		elif [[ $RUNNINGVALUETYPE == "STR" ]]; then
			RUNNINGVALUE=$(fw ctl get str $PARAMETER 2>&1 | grep -v "Get operation failed" | awk '{print $NF}' | head -1 | tr -d ' ' | tr -d "'" | tr -d '"')
		else
			RUNNINGVALUE="unknown"
		fi			
		if [[ $VALUE != $RUNNINGVALUE ]]; then
			checkPolicy_problem="1"
			checkPolicy_problemInfo="$checkPolicy_problemInfo [FW Kernel Parameter Mismatch ($PARAMETER Configured: $VALUE Running: $RUNNINGVALUE]"
		fi
		echo "checkPolicy_fwkernRunning PARAMETER=$PARAMETER VALUE=$VALUE RUNNINGVALUE=$RUNNINGVALUE" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_fwkernRunning - PARAMETER=$PARAMETER VALUE=$VALUE RUNNINGVALUE=$RUNNINGVALUE" >>$HISTORYLOG
		IFS=$ORIGIFS
		sendSyslog "$functionName" "INFO" "checkPolicy_fwkernRunning" "PARAMETER=\"$PARAMETER\" VALUE=\"$VALUE\" RUNNINGVALUE=\"$RUNNINGVALUE\""
		IFS=$'\n'
	done
	IFS=$ORIGIFS
	echo "checkPolicy_fwkernLastEdit $checkPolicy_fwkernLastEdit ($checkPolicy_fwkernLastEditSince)" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_fwkernLastEdit - $checkPolicy_fwkernLastEdit ($checkPolicy_fwkernLastEditSince)" >>$HISTORYLOG
	sendSyslog "$functionName" "INFO" "checkPolicy_fwkernLastEdit" "VALUE=\"$checkPolicy_fwkernLastEdit\""
	sendSyslog "$functionName" "INFO" "checkPolicy_fwkernLastEditSince" "VALUE=\"$checkPolicy_fwkernLastEditSince\""
elif [[ -f $FWDIR/boot/modules/fwkern.conf ]]; then
	checkPolicy_fwkernLastEdit=$(date -d "`stat -c %y "$FWDIR/boot/modules/fwkern.conf"`" +"%s")
	checkPolicy_fwkernLastEditDiff="$(( EPOCH - checkPolicy_fwkernLastEdit ))"
	if [[ $checkPolicy_fwkernLastEditDiff -lt "0" ]]; then
		checkPolicy_fwkernLastEditDiff="0"
	fi
	checkPolicy_fwkernLastEditSince=$(conv_time $checkPolicy_fwkernLastEditDiff)
	IFS=$'\n'
	for LINE in `cat $FWDIR/boot/modules/fwkern.conf` ; do
		PARAMETER=$(echo "$LINE" | awk -F "=" '{print $1}' | tr -d ' ')
		VALUE=$(echo "$LINE" | awk -F "=" '{print $2}' | tr -d ' ' | tr -d "'" | tr -d '"')
		RUNNINGVALUE0=$(fw ctl get int $PARAMETER 2>&1 | grep "Get operation failed" | wc -l)
		if [[ $RUNNINGVALUE0 -eq "0" ]]; then
			RUNNINGVALUETYPE="INT"
		else
			RUNNINGVALUE0=$(fw ctl get int $PARAMETER -a 2>&1 | grep -v "Get failed" | grep "PPAK" | wc -l)
			if [[ $RUNNINGVALUE0 -eq "1" ]]; then
				RUNNINGVALUETYPE="INTSXL"
			else
				RUNNINGVALUE0=$(fw ctl get str $PARAMETER 2>&1 | grep "Get operation failed" | wc -l)
				if [[ $RUNNINGVALUE0 -eq "0" ]]; then
					RUNNINGVALUETYPE="STR"
				else
					RUNNINGVALUETYPE="UNKNOWN"
				fi
			fi
		fi
		if [[ $RUNNINGVALUETYPE == "INT" ]]; then
			RUNNINGVALUE=$(fw ctl get int $PARAMETER 2>&1 | grep -v "Get operation failed" | awk '{print $NF}' | head -1 | tr -d ' ')
		elif [[ $RUNNINGVALUETYPE == "INTSXL" ]]; then
			RUNNINGVALUE=$(fw ctl get int $PARAMETER -a 2>&1 | grep "PPAK" | awk '{print $NF}' | head -1 | tr -d ' ' | tr -d "'" | tr -d '"')
		elif [[ $RUNNINGVALUETYPE == "STR" ]]; then
			RUNNINGVALUE=$(fw ctl get str $PARAMETER 2>&1 | grep -v "Get operation failed" | awk '{print $NF}' | head -1 | tr -d ' ' | tr -d "'" | tr -d '"')
		else
			RUNNINGVALUE="unknown"
		fi			
		if [[ $VALUE != $RUNNINGVALUE ]]; then
			checkPolicy_problem="1"
			checkPolicy_problemInfo="$checkPolicy_problemInfo [FW Kernel Parameter Mismatch ($PARAMETER Configured: $VALUE Running: $RUNNINGVALUE]"
		fi
		echo "checkPolicy_fwkernRunning PARAMETER=$PARAMETER VALUE=$VALUE RUNNINGVALUE=$RUNNINGVALUE" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_fwkernRunning - PARAMETER=$PARAMETER VALUE=$VALUE RUNNINGVALUE=$RUNNINGVALUE" >>$HISTORYLOG
		IFS=$ORIGIFS
		sendSyslog "$functionName" "INFO" "checkPolicy_fwkernRunning" "PARAMETER=\"$PARAMETER\" VALUE=\"$VALUE\" RUNNINGVALUE=\"$RUNNINGVALUE\""
		IFS=$'\n'
	done
	IFS=$ORIGIFS
	echo "checkPolicy_fwkernLastEdit $checkPolicy_fwkernLastEdit ($checkPolicy_fwkernLastEditSince)" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_fwkernLastEdit - $checkPolicy_fwkernLastEdit ($checkPolicy_fwkernLastEditSince)" >>$HISTORYLOG
	sendSyslog "$functionName" "INFO" "checkPolicy_fwkernLastEdit" "VALUE=\"$checkPolicy_fwkernLastEdit\""
	sendSyslog "$functionName" "INFO" "checkPolicy_fwkernLastEditSince" "VALUE=\"$checkPolicy_fwkernLastEditSince\""
fi
fEndMs=$(date +%s%3N)
fTotalMs=$(( fEndMs - fStartMs ))
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_fTotalMs - $fTotalMs (fwkern.conf)" >>$HISTORYLOG

## Check simkern.conf SK43387
fStartMs=$(date +%s%3N)
if [[ -f $PPKDIR/conf/simkern.conf ]]; then
	checkPolicy_simkernLastEdit=$(date -d "`stat -c %y "$PPKDIR/boot/modules/simkern.conf"`" +"%s")
	checkPolicy_simkernLastEditDiff="$(( EPOCH - checkPolicy_simkernLastEdit ))"
	if [[ $checkPolicy_simkernLastEditDiff -lt "0" ]]; then
		checkPolicy_simkernLastEditDiff="0"
	fi
	checkPolicy_simkernLastEditSince=$(conv_time $checkPolicy_simkernLastEditDiff)
	IFS=$'\n'
	for LINE in `cat $PPKDIR/conf/simkern.conf | grep -v "#"` ; do
		PARAMETER=$(echo "$LINE" | awk -F "=" '{print $1}' | tr -d ' ')
		VALUE=$(echo "$LINE" | awk -F "=" '{print $2}' | tr -d ' ')
		RUNNINGVALUE=$(fw ctl get int $PARAMETER -a 2>&1 | grep "PPAK" | grep $PARAMETER | awk '{print $NF}' | head -1 | tr -d ' ')
		if [[ $VALUE != $RUNNINGVALUE ]]; then
			checkPolicy_problem="1"
			checkPolicy_problemInfo="$checkPolicy_problemInfo [SecureXL Kernel Parameter Mismatch ($PARAMETER Configured: $VALUE Running: $RUNNINGVALUE]"
		fi
		echo "checkPolicy_simkernRunning PARAMETER=$PARAMETER VALUE=$VALUE RUNNINGVALUE=$RUNNINGVALUE" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_simkernRunning - PARAMETER=$PARAMETER VALUE=$VALUE RUNNINGVALUE=$RUNNINGVALUE" >>$HISTORYLOG
		IFS=$ORIGIFS
		sendSyslog "$functionName" "INFO" "checkPolicy_simkernRunning" "PARAMETER=\"$PARAMETER\" VALUE=\"$VALUE\" RUNNINGVALUE=\"$RUNNINGVALUE\""
		IFS=$'\n'
	done
	IFS=$ORIGIFS
	echo "checkPolicy_simkernLastEdit $checkPolicy_simkernLastEdit ($checkPolicy_simkernLastEditSince)" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_simkernLastEdit - $checkPolicy_simkernLastEdit ($checkPolicy_simkernLastEditSince)" >>$HISTORYLOG
	sendSyslog "$functionName" "INFO" "checkPolicy_simkernLastEdit" "VALUE=\"$checkPolicy_simkernLastEdit\""
	sendSyslog "$functionName" "INFO" "checkPolicy_simkernLastEditSince" "VALUE=\"$checkPolicy_simkernLastEditSince\""
fi
fEndMs=$(date +%s%3N)
fTotalMs=$(( fEndMs - fStartMs ))
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_fTotalMs - $fTotalMs (simkern.conf)" >>$HISTORYLOG


#Updatable objects
fStartMs=$(date +%s%3N)
if [[ -f $FWDIR/state/local/FW1/local.updatable_obj ]]; then
	checkPolicy_updatableObjectEnabled=$(cat $FWDIR/state/local/FW1/local.updatable_obj | grep " : (" | wc -l)
else
	checkPolicy_updatableObjectEnabled="0"
fi
if [[ $checkPolicy_updatableObjectEnabled -gt "1" ]]; then
	checkPolicy_updatableObjectEnabled="1"
fi
if [[ $checkPolicy_updatableObjectEnabled -eq "1" ]]; then
	$FWDIR/bin/dynamic_objects -uo_show > $TEMPFILE_DYNAMICOBJECTS 2>&1
	IFS=$'\n'
	for LINE in `cat $TEMPFILE_DYNAMICOBJECTS | grep "object name : " | awk '{print $NF}'` ; do
		OBJECT_NAME=$(echo $LINE)
		START_LINE=$(awk -v target="$OBJECT_NAME" '$0 ~ target {print NR; exit}' "$TEMPFILE_DYNAMICOBJECTS")
		RANGE_QTY=$(sed -n "$START_LINE,/^$/p" "$TEMPFILE_DYNAMICOBJECTS" | grep "range" | wc -l)
		OBJECT_FILE_NAME=$(find $CPDIR/database/downloads/ONLINE_SERVICES/1.0/ -type f -exec grep -l "$OBJECT_NAME" {} + | xargs stat --format="%Y %n" | sort -n | tail -n 1 | cut -d ' ' -f 2-)
		OBJECT_FILE_DATE=$(find $CPDIR/database/downloads/ONLINE_SERVICES/1.0/ -type f -exec grep -l "$OBJECT_NAME" {} + | xargs stat --format="%Y" | sort -n | tail -n 1 | cut -d ' ' -f 2-)
		OBJECT_FILE_DATE_DIFF="$(( EPOCH - OBJECT_FILE_DATE ))"
		if [[ $OBJECT_FILE_DATE_DIFF -lt "0" ]]; then
			OBJECT_FILE_DATE_DIFF="0"
		fi
		OBJECT_FILE_DATE_SINCE=$(conv_time $OBJECT_FILE_DATE_DIFF)
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_updatableObjectDetails - OBJECT_NAME=$OBJECT_NAME RANGE_QTY=$RANGE_QTY OBJECT_FILE_NAME=$OBJECT_FILE_NAME OBJECT_FILE_DATE=$OBJECT_FILE_DATE OBJECT_FILE_DATE_SINCE=$OBJECT_FILE_DATE_SINCE" >>$HISTORYLOG
		IFS=$ORIGIFS
		sendSyslog "$functionName" "INFO" "checkPolicy_updatableObjectDetails" "OBJECT_NAME=\"$OBJECT_NAME\" RANGE_QTY=\"$RANGE_QTY\" OBJECT_FILE_NAME=\"$OBJECT_FILE_NAME\" OBJECT_FILE_DATE=\"$OBJECT_FILE_DATE\" OBJECT_FILE_DATE_SINCE=\"$OBJECT_FILE_DATE_SINCE\""
		IFS=$'\n'
	done
	IFS=$ORIGIFS
	checkPolicy_updatableObjNames=$(cat $TEMPFILE_DYNAMICOBJECTS | grep "object name : " | awk '{print $NF}' | sort -n | uniq | tr '\n' ' ')
fi
fEndMs=$(date +%s%3N)
fTotalMs=$(( fEndMs - fStartMs ))
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_fTotalMs - $fTotalMs (updatable objects)" >>$HISTORYLOG



# Geo Policy sk131852
fStartMs=$(date +%s%3N)
checkPolicy_geoEnabledLegacy=$(cat $FWDIR/state/local/FW1/local.set 2>&1 | grep -A2 "block_by_countries_protection" | grep "block_action" | grep "active" | grep -v "inactive" | wc -l)
checkPolicy_geoEnabled=$(cat $FWDIR/state/local/FW1/local.updatable_obj 2>&1 | grep "CP_GEO" | grep -v "name" | wc -l)
if [[ $checkPolicy_geoEnabled -gt "1" ]]; then
	checkPolicy_geoEnabled="1"
fi
if [[ $checkPolicy_geoEnabledLegacy -eq "1" ]]; then
	#curl -k https://sc1.checkpoint.com/freud/IpToCountry.csv.gz
	#curl -k https://sc1.checkpoint.com/freud2/IpToCountry.csv.gz
	if [[ -f $FWDIR/tmp/geo_location_tmp/updates/IpToCountry.csv ]]; then
		checkPolicy_geoDate=$(date -d "`stat -c %y "$FWDIR/tmp/geo_location_tmp/updates/IpToCountry.csv"`" +"%s")
		checkPolicy_geoMd5=$(md5sum $FWDIR/tmp/geo_location_tmp/updates/IpToCountry.csv | awk '{print $1}')
	else
		checkPolicy_geoDate=$(date -d "`stat -c %y "$FWDIR/conf/IpToCountry.csv"`" +"%s")
		checkPolicy_geoMd5=$(md5sum $FWDIR/conf/IpToCountry.csv | awk '{print $1}')
	fi
	checkPolicy_geoLegacyDateLastEditDiff="$(( EPOCH - checkPolicy_geoDate ))"
	if [[ $checkPolicy_geoDateLastEditDiff -lt "0" ]]; then
		checkPolicy_geoLegacyDateLastEditDiff="0"
	fi
	checkPolicy_geoLegacyDateLastEditSince=$(conv_time $checkPolicy_geoLegacyDateLastEditDiff)
	checkPolicy_geoLastUpdateTime="na"
	checkPolicy_geoLastUpdateReason="na"
	checkPolicy_geoLegacyCountryQty=$(cat $FWDIR/state/local/FW1/local.set 2>&1 | grep country_code | wc -l)
	checkPolicy_geoLegacyRangeQty=$(fw tab -t geolocation_block_static_table -s 2>&1 | grep geolocation_block_static_table | awk '{print $4}')
fi
if [[ $checkPolicy_geoEnabled -eq "1" ]]; then
	checkPolicy_geoLastRevision=$(cat $CPDIR/database/downloads/ONLINE_SERVICES/1.0/last_revision.xml | grep "Last_Revision" | tr -d 'a-z<>/A-Z_')
	checkPolicy_geoLastSuccess=$(cat $CPDIR/database/downloads/ONLINE_SERVICES/1.0/Update_Status.dat | grep "Success_Time" | awk -F "(" '{print $2}' | tr -d ')')
	checkPolicy_geoLastSuccessDiff="$(( EPOCH - checkPolicy_geoLastSuccess ))"
	if [[ $checkPolicy_geoLastSuccessDiff -lt "0" ]]; then
		checkPolicy_geoLastSuccessDiff="0"
	fi
	checkPolicy_geoLastSuccessSince=$(conv_time $checkPolicy_geoLastSuccessDiff)
	checkPolicy_geoLastUpdateTime=$(cat $CPDIR/database/downloads/ONLINE_SERVICES/1.0/Update_Status.dat | grep "Last_Update_Time" | awk -F "(" '{print $2}' | tr -d ')')
	checkPolicy_geoLastUpdateReason=$(cat $CPDIR/database/downloads/ONLINE_SERVICES/1.0/Update_Status.dat | grep "Last_Update_Reason" | awk -F "(" '{print $2}' | tr -d ')".')
	if [[ ! -e $TEMPFILE_DYNAMICOBJECTS ]]; then
		$FWDIR/bin/dynamic_objects -uo_show > $TEMPFILE_DYNAMICOBJECTS 2>&1
	fi
	checkPolicy_geoCountryQty=$(cat $TEMPFILE_DYNAMICOBJECTS | grep "GEO" | wc -l)
	checkPolicy_geoRangeQty=$(cat $TEMPFILE_DYNAMICOBJECTS | grep "range" | wc -l)
fi

if [[ $checkPolicy_geoEnabled -eq "1" ]]; then
	if [[ $checkPolicy_geoLastSuccessDiff -gt "691200" ]]; then
		if [[ $SELF_HEAL_ENABLED -eq "1" ]]; then
	
			FIX="Manual Download Updatable Objects"
			COMMAND="$CPDIR/bin/unified_dl UPDATE ONLINE_SERVICES"
			BEFORE_FIX=$(cat $CPDIR/database/downloads/ONLINE_SERVICES/1.0/last_revision.xml | grep "Last_Revision" | tr -d 'a-z<>/A-Z_')
			if [[ $SELF_HEAL_CHRONIC -eq "1" ]]; then
				COMMAND_EXECUTION="bypassed due to SELF_HEAL_CHRONIC"
				checkPolicy_warningInfo="$checkPolicy_warningInfo [Self Heal Bypassed due to Chronic Issue - Manual Download Updatable Objects]"
			else
				COMMAND_EXECUTION=$($CPDIR/bin/unified_dl UPDATE ONLINE_SERVICES 2>&1)
				checkPolicy_workingInfo="$checkPolicy_workingInfo [Self Heal - Manual Download Updatable Objects]"
			fi
			AFTER_FIX=$(cat $CPDIR/database/downloads/ONLINE_SERVICES/1.0/last_revision.xml | grep "Last_Revision" | tr -d 'a-z<>/A-Z_')
			COMMAND=$(echo $COMMAND | tr -d '"')
			COMMAND_EXECUTION=$(echo $COMMAND_EXECUTION | tr '\n' ' ')

			echo "$HISTORYLOGPREAMBLE - $functionName - INFO - SELF_HEAL - FIX=$FIX COMMAND=$COMMAND COMMAND_EXECUTION=$COMMAND_EXECUTION BEFORE_FIX=$BEFORE_FIX AFTER_FIX=$AFTER_FIX" >>$HISTORYLOG
			#IFS=$ORIGIFS
			sendSyslog "$functionName" "INFO" "SELF_HEAL" "FIX=\"$FIX\" COMMAND=\"$COMMAND\" BEFORE_FIX=\"$BEFORE_FIX\" AFTER_FIX=\"$AFTER_FIX\" COMMAND_EXECUTION=\"$COMMAND_EXECUTION\""
			#IFS=$'\n'
			echo "$HISTORYLOGPREAMBLE - $functionName - INFO - SELF_HEAL - FIX=$FIX COMMAND=$COMMAND COMMAND_EXECUTION=$COMMAND_EXECUTION BEFORE_FIX=$BEFORE_FIX AFTER_FIX=$AFTER_FIX" >>$SELF_HEAL_LOG
		fi
	fi
fi
fEndMs=$(date +%s%3N)
fTotalMs=$(( fEndMs - fStartMs ))
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_fTotalMs - $fTotalMs (geo policy)" >>$HISTORYLOG


#Proxy
fStartMs=$(date +%s%3N)
checkPolicy_proxyEnabled=$(cat $FWDIR/state/local/FW1/local.set | grep -A2 "use_proxy" | grep "val" | awk '{print $NF}' | tr -d '()' | head -1)
if [[ $checkPolicy_proxyEnabled == "true" ]]; then
	checkPolicy_proxyIp=$(cat $FWDIR/state/local/FW1/local.set | grep -A30 "use_proxy" | grep -A2 "proxy_address" | grep "val" | awk '{print $NF}' | tr -d '()' | head -1)
	checkPolicy_proxyPort=$(cat $FWDIR/state/local/FW1/local.set | grep -A30 "use_proxy" | grep -A2 "proxy_port" | grep "val" | awk '{print $NF}' | tr -d '()' | head -1)
else
	checkPolicy_proxyIp="n/a"
	checkPolicy_proxyPort="n/a"
fi

checkPolicy_cloudCheckDl3="0"
checkPolicy_cloudCheckUpdates="0"
checkPolicy_cloudCheckEntitlement="0"
checkPolicy_cloudContract="0"
checkPolicy_cloudLicense="0"
checkPolicy_cloudGlobalSign="0"
checkPolicy_cloudSc1="0"
checkPolicy_cloudCws="0"
checkPolicy_cloudTe="0"
checkPolicy_cloudTeadv="0"
checkPolicy_cloudThreatEmulation="0"

#DL3
URI="http://dl3.checkpoint.com/"
checkPolicy_cloudCheckDl3=$(curl_output $checkPolicy_proxyEnabled $checkPolicy_proxyIp $checkPolicy_proxyPort $URI | grep "302 Moved Temporarily" | wc -l)
#UPDATES
URI="https://updates.checkpoint.com/"
checkPolicy_cloudCheckUpdates=$(curl_output $checkPolicy_proxyEnabled $checkPolicy_proxyIp $checkPolicy_proxyPort $URI | grep "Page not found" | wc -l)
#ENTITLEMENT
URI="https://usercenter.checkpoint.com/"
checkPolicy_cloudCheckEntitlement=$(curl_output $checkPolicy_proxyEnabled $checkPolicy_proxyIp $checkPolicy_proxyPort $URI | grep "<html>" | wc -l)
#CONTRACT
URI="https://productcoverage.checkpoint.com/ProductCoverageService"
checkPolicy_cloudContract=$(curl_output $checkPolicy_proxyEnabled $checkPolicy_proxyIp $checkPolicy_proxyPort $URI | grep "HTTP/1.1 405" | wc -l)
#LICENSE
URI="https://productservices.checkpoint.com"
checkPolicy_cloudLicense=$(curl_output $checkPolicy_proxyEnabled $checkPolicy_proxyIp $checkPolicy_proxyPort $URI | grep "<html>\|403 Forbidden" | wc -l)
#CRL-GLOBALSIGN
URI="http://crl.globalsign.com/"
checkPolicy_cloudGlobalSign=$(curl_output $checkPolicy_proxyEnabled $checkPolicy_proxyIp $checkPolicy_proxyPort $URI | grep "<html>" | wc -l)

if [[ $checkPolicy_geoEnabledLegacy == "1" ]]; then
	#SC1
	URI="https://sc1.checkpoint.com/"
	checkPolicy_cloudSc1=$(curl_output $checkPolicy_proxyEnabled $checkPolicy_proxyIp $checkPolicy_proxyPort $URI | grep "<html>" | wc -l)
fi

if [[ $checkSelf_bladeAb -eq "1" ]]; then
	#CWS
	URI="http://cws.checkpoint.com/Malware/SystemStatus/type/short"
	checkPolicy_cloudCws=$(curl_output $checkPolicy_proxyEnabled $checkPolicy_proxyIp $checkPolicy_proxyPort $URI | grep "allSystemsOK" | wc -l)
fi

if [[ $checkSelf_bladeTe -eq "1" ]] || [[ $checkSelf_bladeTx -eq "1" ]]; then
	
	#TE
	URI="https://te.checkpoint.com/tecloud/Ping"
	checkPolicy_cloudTe=$(curl_output $checkPolicy_proxyEnabled $checkPolicy_proxyIp $checkPolicy_proxyPort $URI | grep "Pong" | wc -l)

	#TEADV
	URI="http://teadv.checkpoint.com/version.txt"
	checkPolicy_cloudTeadv=$(curl_output $checkPolicy_proxyEnabled $checkPolicy_proxyIp $checkPolicy_proxyPort $URI | grep "202" | grep -v "<" | wc -l)
	
	#THREAT-EMULATION
	URI="https://threat-emulation.checkpoint.com/tecloud/Ping"
	checkPolicy_cloudThreatEmulation=$(curl_output $checkPolicy_proxyEnabled $checkPolicy_proxyIp $checkPolicy_proxyPort $URI | grep "Pong" | wc -l)
	
fi
fEndMs=$(date +%s%3N)
fTotalMs=$(( fEndMs - fStartMs ))
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_fTotalMs - $fTotalMs (proxy)" >>$HISTORYLOG

if [[ $MDPSENABLED -eq "2" ]]; then
	mplane > /dev/null 2>&1
fi

if [[ $checkSelf_bladeAppi -eq "1" ]]; then
	# checkPolicy_appiUpdateStatus=$(snmp 1.3.6.1.4.1.2620.1.39.2.1)
	# checkPolicy_appiUpdateDescription=$(snmp 1.3.6.1.4.1.2620.1.39.2.2)
	# checkPolicy_appiNextUpdateDescription=$(snmp 1.3.6.1.4.1.2620.1.39.2.3)
	# checkPolicy_appiDbVersion=$(snmp 1.3.6.1.4.1.2620.1.39.2.4)
	checkPolicy_appiUpdateStatus=$(stattestget 1.3.6.1.4.1.2620.1.39.2.1)
	checkPolicy_appiUpdateDescription=$(stattestget 1.3.6.1.4.1.2620.1.39.2.2)
	checkPolicy_appiNextUpdateDescription=$(stattestget 1.3.6.1.4.1.2620.1.39.2.3)
	checkPolicy_appiDbVersion=$(stattestget 1.3.6.1.4.1.2620.1.39.2.4)
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_appiUpdateStatus - $checkPolicy_appiUpdateStatus" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_appiUpdateDescription - $checkPolicy_appiUpdateDescription" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_appiNextUpdateDescription - $checkPolicy_appiNextUpdateDescription" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_appiDbVersion - $checkPolicy_appiDbVersion" >>$HISTORYLOG
	sendSyslog "$functionName" "INFO" "checkPolicy_abVersionDetails" "update_status=\"$checkPolicy_abUpdateStatus\" update_description=\"$checkPolicy_appiUpdateDescription\" next_update_description=\"$checkPolicy_appiNextUpdateDescription\" db_version=\"$checkPolicy_appiDbVersion\""

fi

if [[ $checkSelf_bladeAb -eq "1" ]]; then
	# checkPolicy_abUpdateStatus=$(snmp 1.3.6.1.4.1.2620.1.46.1.1)
	# checkPolicy_abUpdateDescription=$(snmp 1.3.6.1.4.1.2620.1.46.1.2)
	# checkPolicy_abNextUpdateDescription=$(snmp 1.3.6.1.4.1.2620.1.46.1.3)
	# checkPolicy_abDbVersion=$(snmp 1.3.6.1.4.1.2620.1.46.1.4)
	checkPolicy_abUpdateStatus=$(stattestget 1.3.6.1.4.1.2620.1.46.1.1)
	checkPolicy_abUpdateDescription=$(stattestget 1.3.6.1.4.1.2620.1.46.1.2)
	checkPolicy_abNextUpdateDescription=$(stattestget 1.3.6.1.4.1.2620.1.46.1.3)
	checkPolicy_abDbVersion=$(stattestget 1.3.6.1.4.1.2620.1.46.1.4)
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_abUpdateStatus - $checkPolicy_abUpdateStatus" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_abUpdateDescription - $checkPolicy_abUpdateDescription" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_abNextUpdateDescription - $checkPolicy_abNextUpdateDescription" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_abDbVersion - $checkPolicy_abDbVersion" >>$HISTORYLOG
	sendSyslog "$functionName" "INFO" "checkPolicy_abVersionDetails" "update_status=\"$checkPolicy_abUpdateStatus\" update_description=\"$checkPolicy_abUpdateDescription\" next_update_description=\"$checkPolicy_abNextUpdateDescription\" db_version=\"$checkPolicy_abDbVersion\""
fi

if [[ $checkSelf_bladeAv -eq "1" ]]; then
	# checkPolicy_avUpdateStatus=$(snmp 1.3.6.1.4.1.2620.1.46.5.1)	
	# checkPolicy_avUpdateDescription=$(snmp 1.3.6.1.4.1.2620.1.46.5.2)
	# checkPolicy_avNextUpdateDescription=$(snmp 1.3.6.1.4.1.2620.1.46.5.3)
	# checkPolicy_avDbVersion=$(snmp 1.3.6.1.4.1.2620.1.46.5.4)
	checkPolicy_avUpdateStatus=$(stattestget 1.3.6.1.4.1.2620.1.46.5.1)	
	checkPolicy_avUpdateDescription=$(stattestget 1.3.6.1.4.1.2620.1.46.5.2)
	checkPolicy_avNextUpdateDescription=$(stattestget 1.3.6.1.4.1.2620.1.46.5.3)
	checkPolicy_avDbVersion=$(stattestget 1.3.6.1.4.1.2620.1.46.5.4)
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_avUpdateStatus - $checkPolicy_avUpdateStatus" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_avUpdateDescription - $checkPolicy_avUpdateDescription" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_avNextUpdateDescription - $checkPolicy_avNextUpdateDescription" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_avDbVersion - $checkPolicy_avDbVersion" >>$HISTORYLOG
	sendSyslog "$functionName" "INFO" "checkPolicy_abVersionDetails" "update_status=\"$checkPolicy_avUpdateStatus\" update_description=\"$checkPolicy_avUpdateDescription\" next_update_description=\"$checkPolicy_avNextUpdateDescription\" db_version=\"$checkPolicy_avDbVersion\""
fi

if [[ $checkSelf_bladeUrlf -eq "1" ]]; then
	# checkPolicy_urlfUpdateStatus=$(snmp 1.3.6.1.4.1.2620.1.43.2.1)	
	# checkPolicy_urlfUpdateDescription=$(snmp 1.3.6.1.4.1.2620.1.43.2.2)
	# checkPolicy_urlfNextUpdateDescription=$(snmp 1.3.6.1.4.1.2620.1.43.2.3)
	# checkPolicy_urlfDbVersion=$(snmp 1.3.6.1.4.1.2620.1.43.2.4)
	checkPolicy_urlfUpdateStatus=$(stattestget 1.3.6.1.4.1.2620.1.43.2.1)	
	checkPolicy_urlfUpdateDescription=$(stattestget 1.3.6.1.4.1.2620.1.43.2.2)
	checkPolicy_urlfNextUpdateDescription=$(stattestget 1.3.6.1.4.1.2620.1.43.2.3)
	checkPolicy_urlfDbVersion=$(stattestget 1.3.6.1.4.1.2620.1.43.2.4)
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_urlfUpdateStatus - $checkPolicy_urlfUpdateStatus" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_urlfUpdateDescription - $checkPolicy_urlfUpdateDescription" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_urlfNextUpdateDescription - $checkPolicy_urlfNextUpdateDescription" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_urlfDbVersion - $checkPolicy_urlfDbVersion" >>$HISTORYLOG
	sendSyslog "$functionName" "INFO" "checkPolicy_urlfVersionDetails" "update_status=\"$checkPolicy_urlfUpdateStatus\" update_description=\"$checkPolicy_urlfUpdateDescription\" next_update_description=\"$checkPolicy_urlfNextUpdateDescription\" db_version=\"$checkPolicy_urlfDbVersion\""
fi

if [[ $checkSelf_bladeTe -eq "1" ]]; then
	# checkPolicy_teUpdateStatus=$(snmp  .1.3.6.1.4.1.2620.1.49.16)	
	# checkPolicy_teUpdateDescription=$(snmp  .1.3.6.1.4.1.2620.1.49.17)
		checkPolicy_teUpdateStatus=$(stattestget 1.3.6.1.4.1.2620.1.49.16)	
	checkPolicy_teUpdateDescription=$(stattestget 1.3.6.1.4.1.2620.1.49.17)
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_teUpdateStatus - $checkPolicy_teUpdateStatus" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_teUpdateDescription - $checkPolicy_teUpdateDescription" >>$HISTORYLOG
	sendSyslog "$functionName" "INFO" "checkPolicy_teVersionDetails" "update_status=\"$checkPolicy_teUpdateStatus\" update_description=\"$checkPolicy_teUpdateDescription\""
fi



#Threat Feeds
fStartMs=$(date +%s%3N)
if [[ $checkSelf_bladeAb -eq "1" ]] && [[ $checkSelf_bladeAv -eq "1" ]]; then
	if [[ -e $FWDIR/state/local/AMW/local.IntelligenceFeed ]]; then
		POLICY_LOCALINTELLIGENCEFEED=$(cat $FWDIR/state/local/AMW/local.IntelligenceFeed)
		checkPolicy_threatFeedQty=$(printvar POLICY_LOCALINTELLIGENCEFEED | grep ": (" | wc -l)
	else
		checkPolicy_threatFeedQty="0"
	fi
	if [[ $checkSelf_majorVer == "R81.10" || $checkSelf_majorVer == "R81.20" ]] && [[ $checkPolicy_threatFeedQty -gt "0" ]]; then
		checkPolicy_threatFeedInterval=$(cat $FWDIR/conf/ioc_feeder.conf | grep "interval" | awk '{print $2}' | tr -d '",')
		IFS=$'\n'
		for LINE in `printvar POLICY_LOCALINTELLIGENCEFEED | grep ": ("` ; do
			NAME=$(echo "$LINE" | awk -F "(" '{print $2}')
			RESOURCE=$(printvar POLICY_LOCALINTELLIGENCEFEED | grep -A35 $LINE | grep "resource" | awk '{print $2}' | tr -d '()"')
			ACTION=$(printvar POLICY_LOCALINTELLIGENCEFEED | grep -A35 $LINE | grep -A2 "action" | grep "Name" | awk '{print $2}' | tr -d '()"')
			ACTIVE=$(printvar POLICY_LOCALINTELLIGENCEFEED | grep -A35 $LINE | grep ":active" | awk '{print $2}' | tr -d '()"')
			INPUTNAME=$(cat $FWDIR/conf/ioc_feeder.conf 2>&1 | grep $NAME | grep "input_name" | grep "input_name" | awk '{print $2}' | tr -d '",')
			if [[ -e $FWDIR/external_ioc/$NAME/$INPUTNAME ]]; then
				FILELINES=$(cat $FWDIR/external_ioc/$NAME/$INPUTNAME | wc -l)
				FILEDATE=$(stat -c %Z $FWDIR/external_ioc/$NAME/$INPUTNAME)
				FILEDATESINCE=$(since_time_epoch $FILEDATE)
			else
				FILELINES="n/a"
				FILEDATE="n/a"
				FILEDATESINCE="n/a"
			fi
			echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_threatFeedDetail - NAME=$NAME RESOURCE=$RESOURCE ACTION=$ACTION ACTIVE=$ACTIVE FILELINES=$FILELINES FILEDATE=$FILEDATE FILEDATESINCE=$FILEDATESINCE" >>$HISTORYLOG
			IFS=$ORIGIFS
			sendSyslog "$functionName" "INFO" "checkPolicy_threatFeedDetail" "NAME=\"$NAME\" RESOURCE=\"$RESOURCE\" ACTION=\"$ACTION\" ACTIVE=\"$ACTIVE\" FILELINES=\"$FILELINES\" FILEDATE=\"$FILEDATE\" FILEDATESINCE=\"$FILEDATESINCE\" INTERVAL=\"$checkPolicy_threatFeedInterval\""
			IFS=$'\n'
		done
	IFS=$ORIGIFS
	fi
else
	checkPolicy_threatFeedQty="n/a"
fi
fEndMs=$(date +%s%3N)
fTotalMs=$(( fEndMs - fStartMs ))
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_fTotalMs - $fTotalMs (threat feeds)" >>$HISTORYLOG



#Domain Objects
fStartMs=$(date +%s%3N)
if [[ -f $FWDIR/state/local/FW1/local.domain ]]; then
	checkPolicy_domainObjectEnabled="1"
else
	checkPolicy_domainObjectEnabled="0"
fi
if [[ checkPolicy_domainObjectEnabled -eq "1" ]]; then
	RESOLVED_IP_FAIL="0"
	IN_USE_COUNTER="0"
	checkPolicy_domainObjectQty=$(cat $FWDIR/state/local/FW1/local.domain | grep " : (" | wc -l)
	IFS=$'\n'
	for LINE in `cat $FWDIR/state/local/FW1/local.domain | grep " : ("` ; do
		RULE_NUM="NA"
		NAME=$(echo "$LINE" | awk -F "(" '{print $2}')
		NAME0=$(echo $NAME | sed 's/^\.//')
		RESOLVED_IP=$(domains_tool -d $NAME0 | grep -oP '\b(?:\d{1,3}\.){3}\d{1,3}\b' | sort -n | tr '\n' ',' | sed 's/,$//')
		IN_USE=$(cat $FWDIR/state/local/FW1/local.set $FWDIR/state/local/FW1/local.appfw_misc | grep $NAME | wc -l)
		
		# if [[ $IN_USE -ge "1" ]]; then
			# IN_USE="YES"
		# elif [[ $IN_USE -eq "0" ]] && [[ $RESOLVED_IP != "" ]]; then
			# IN_USE="LIKELY"
		# else
			# IN_USE="NO"
		# fi
		# if [[ $IN_USE == "YES" ]] || [[ $IN_USE == "LIKELY" ]]; then
			# RULE_NUM_SET=$(awk -v search="$NAME" '{line[NR]=$0} $0 ~ search {for (i=NR-1;i>0;i--) {if (line[i] ~ ": \\(rule-") {print line[i]; break}}}' $FWDIR/state/local/FW1/local.set | awk -F "-" '{print $NF}')
			# if [[ $RULE_NUM_SET == "" ]]; then
				# RULE_NUM="NETWORK $RULE_NUM_SET"
			# fi
			# RULE_NUM_APP=$(awk -v search="$NAME" '{line[NR]=$0} $0 ~ search {for (i=NR-1;i>0;i--) {if (line[i] ~ ":[0-9]+ \\(") {print line[i]; break}}}' $FWDIR/state/local/FW1/local.appfw_misc | wc -l)
			# if [[ $RULE_NUM_APP -gt "0" ]]; then
				# RULE_NUM_APP=$(awk -v search="$NAME" '{line[NR]=$0} $0 ~ search {for (i=NR-1;i>0;i--) {if (line[i] ~ ":[0-9]+ \\(") {print line[i]; break}}}' $FWDIR/state/local/FW1/local.appfw_misc | awk '{print $1}' | tr -d ':')
				# if [[ -n $RULE_NUM_APP ]]; then
					# RULE_NUM="$RULE_NUM APPCTL $RULE_NUM_APP"
				# fi
			# fi
			# let IN_USE_COUNTER=$IN_USE_COUNTER+1
		# else
			# RULE_NUM="NA"
		# fi
		# if [[ $IN_USE == "YES" ]] && [[ $RESOLVED_IP = "" ]]; then
			# let RESOLVED_IP_FAIL=$RESOLVED_IP_FAIL+1
		# fi
		
		
		
		if [[ $IN_USE -ge "1" ]]; then
			IN_USE="YES"
			RULE_NUM_SET=$(awk -v search="$NAME" '{line[NR]=$0} $0 ~ search {for (i=NR-1;i>0;i--) {if (line[i] ~ ": \\(rule-") {print line[i]; break}}}' $FWDIR/state/local/FW1/local.set | awk -F "-" '{print $NF}')
			if [[ $RULE_NUM_SET != "" ]]; then
				RULE_NUM="ACCESS $RULE_NUM_SET"
			else
				RULE_NUM="ACCESS NA"
			fi
			RULE_NUM_APP=$(awk -v search="$NAME" '{line[NR]=$0} $0 ~ search {for (i=NR-1;i>0;i--) {if (line[i] ~ ":[0-9]+ \\(") {print line[i]; break}}}' $FWDIR/state/local/FW1/local.appfw_misc | awk '{print $1}' | tr -d ':')
			if [[ $RULE_NUM_APP != "" ]]; then
				if [[ $RULE_NUM_APP != "" ]]; then
					RULE_NUM="$RULE_NUM APPCTL $RULE_NUM_APP"
				else
					RULE_NUM="$RULE_NUM APPCTL NA"
				fi
			fi
			let IN_USE_COUNTER=$IN_USE_COUNTER+1
		elif [[ $IN_USE -eq "0" ]] && [[ $RESOLVED_IP != "" ]]; then
			IN_USE="LIKELY"
			RULE_NUM_SET=$(awk -v search="$NAME" '{line[NR]=$0} $0 ~ search {for (i=NR-1;i>0;i--) {if (line[i] ~ ": \\(rule-") {print line[i]; break}}}' $FWDIR/state/local/FW1/local.set | awk -F "-" '{print $NF}')
			if [[ $RULE_NUM_SET != "" ]]; then
				RULE_NUM="ACCESS $RULE_NUM_SET"
			else
				RULE_NUM="ACCESS NA"
			fi
			RULE_NUM_APP=$(awk -v search="$NAME" '{line[NR]=$0} $0 ~ search {for (i=NR-1;i>0;i--) {if (line[i] ~ ":[0-9]+ \\(") {print line[i]; break}}}' $FWDIR/state/local/FW1/local.appfw_misc | awk '{print $1}' | tr -d ':')
			if [[ $RULE_NUM_APP != "" ]]; then
				RULE_NUM="$RULE_NUM APPCTL $RULE_NUM_APP"
			else
				RULE_NUM="$RULE_NUM APPCTL NA"
			fi
			
			let IN_USE_COUNTER=$IN_USE_COUNTER+1
		else
			IN_USE="NO"
		fi


		if [[ $IN_USE == "YES" || $IN_USE == "LIKELY" ]] && [[ $RESOLVED_IP = "" ]]; then
			let RESOLVED_IP_FAIL=$RESOLVED_IP_FAIL+1
		fi

		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_domainObjectDetail - NAME=$NAME IN_USE=$IN_USE RULE_NUM=$RULE_NUM RESOLVED_IP=$RESOLVED_IP" >>$HISTORYLOG
		IFS=$ORIGIFS
		sendSyslog "$functionName" "INFO" "checkPolicy_domainObjectDetail" "NAME=\"$NAME\" IN_USE=\"$IN_USE\" RULE_NUM=\"$RULE_NUM\" RESOLVED_IP=\"$RESOLVED_IP\""
		IFS=$'\n'
		
	done
	IFS=$ORIGIFS	
fi

if [[ $RESOLVED_IP_FAIL -gt "0" ]]; then
	checkPolicy_workingInfo="$checkPolicy_workingInfo [Domain Object In-Use DNS Resolution $RESOLVED_IP_FAIL of $IN_USE_COUNTER Failed]"
fi

fEndMs=$(date +%s%3N)
fTotalMs=$(( fEndMs - fStartMs ))
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_fTotalMs - $fTotalMs (domain objects)" >>$HISTORYLOG



# SSL Inspection Trusted CA
checkPolicy_sslTrustedCaUpdateLatest=$(cat $FWDIR/state/local/FW1/local.ssl_inspection | grep "trusted_ca_update_latest" | awk '{print $NF}' | tr -d '()')
checkPolicy_sslTrustedCaIssuedByUniqQty=$(cat $FWDIR/state/local/FW1/local.ssl_inspection | grep "issued_by" | sort | uniq | wc -l)
checkPolicy_sslTrustedCaIssuedByQty=$(cat $FWDIR/state/local/FW1/local.ssl_inspection | grep "issued_by" | wc -l)
checkPolicy_sslTrustedCaIssuedToUniqQty=$(cat $FWDIR/state/local/FW1/local.ssl_inspection | grep "issued_to" | sort | uniq | wc -l)
checkPolicy_sslTrustedCaIssuedToQty=$(cat $FWDIR/state/local/FW1/local.ssl_inspection | grep "issued_to" | wc -l)
checkPolicy_sslTrustedCaAddedByUserQty=$(cat $FWDIR/state/local/FW1/local.ssl_inspection | grep "added_by" | grep "User" | wc -l)
checkPolicy_sslTrustedCaAddedByCheckPointQty=$(cat $FWDIR/state/local/FW1/local.ssl_inspection | grep "added_by" | grep "Check Point" | wc -l)


# #Check Base Rules
# awk '/^$/ && inside == 0 { inside = 1; next } /: \("Base Rule - Firewall Access"/ && inside == 1 { print; inside = 2; next } inside == 2 && /^$/ { exit } inside == 2 { print }' $FWDIR/state/local/FW1/local.rule > $TEMPFILE
# NAME=$(cat $TEMPFILE | grep "name:" | tail -1 | awk -F '"' '{print $2}')
# RULE_NUM=$(cat $TEMPFILE | grep "rule_num:" | awk -F '[(|)]' '{print $2}')
# IFS=$'\n'
# COUNTER="0"
# for SRCS in `cat $TEMPFILE | awk '/:srcs \(/,/^\s*\)/ && !/:srcs \($/' | sed '1d;$d'` ; do
	# SRC_NUM=$(echo $SRCS | awk '{print $1}' | tr -cd '[:alnum:]-')
	# SRC_UUID=$(echo $SRCS | awk '{print $2}' | tr -cd '[:alnum:]-')
	# let COUNTER=$COUNTER+1
# done
# IFS=$ORIGIFS
# rm $TEMPFILE



#LOG OUTPUTS
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_policyName - $checkPolicy_policyName" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_policyRuleQty - $checkPolicy_policyRuleQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_policyLoadTime - $checkPolicy_policyLoadTime" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_policyCompileTime - $checkPolicy_policyCompileTime" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_policyTimeSinceLoad0 - $checkPolicy_policyTimeSinceLoad0" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_policyTimeSinceLoad - $checkPolicy_policyTimeSinceLoad" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_policyTimeSinceCompile0 - $checkPolicy_policyTimeSinceCompile0" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_policyTimeSinceCompile - $checkPolicy_policyTimeSinceCompile" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_policyAccepted - $checkPolicy_policyAccepted" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_policyDropped - $checkPolicy_policyDropped" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_policyRejected - $checkPolicy_policyRejected" >>$HISTORYLOG
if [[ $checkSelf_ipv6Enabled == "1" ]] && [[ $checkSelf_ipv6Configured != "0" ]]; then
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_policyIpv6Accepted - $checkPolicy_policyIpv6Accepted" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_policyIpv6Dropped - $checkPolicy_policyIpv6Dropped" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_policyIpv6Rejected - $checkPolicy_policyIpv6Rejected" >>$HISTORYLOG
fi
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_ipsStatus - $checkPolicy_ipsStatus" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_ipsProfile - $checkPolicy_ipsProfile" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_ipsVersion - $checkPolicy_ipsVersion" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_ipsBypassConfig - $checkPolicy_ipsBypassConfig" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_ipsBypassActive - $checkPolicy_ipsBypassActive" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_corexlFullyUtilizedDrops - $checkPolicy_corexlFullyUtilizedDrops" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_geoEnabledLegacy - $checkPolicy_geoEnabledLegacy" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_geoEnabled - $checkPolicy_geoEnabled" >>$HISTORYLOG
if [[ $checkPolicy_geoEnabledLegacy == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_geoDate - $checkPolicy_geoDate" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_geoLegacyDateLastEditSince - $checkPolicy_geoLegacyDateLastEditSince" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_geoLegacyCountryQty - $checkPolicy_geoLegacyCountryQty" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_geoLegacyRangeQty - $checkPolicy_geoLegacyRangeQty" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_cloudSc1 - $checkPolicy_cloudSc1" >>$HISTORYLOG
fi
if [[ $checkPolicy_geoEnabled == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_geoLastRevision - $checkPolicy_geoLastRevision" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_geoLastSuccess - $checkPolicy_geoLastSuccess" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_geoLastSuccessDiff - $checkPolicy_geoLastSuccessDiff" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_geoLastSuccessSince - $checkPolicy_geoLastSuccessSince" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_geoLastUpdateTime - $checkPolicy_geoLastUpdateTime" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_geoLastUpdateReason - $checkPolicy_geoLastUpdateReason" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_geoCountryQty - $checkPolicy_geoCountryQty" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_geoRangeQty - $checkPolicy_geoRangeQty" >>$HISTORYLOG
fi
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_proxyEnabled - $checkPolicy_proxyEnabled" >>$HISTORYLOG
if [[ $checkPolicy_proxyEnabled == "true" ]]; then
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_proxyIp - $checkPolicy_proxyIp" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_proxyPort - $checkPolicy_proxyPort" >>$HISTORYLOG
fi
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_cloudCheckDl3 - $checkPolicy_cloudCheckDl3" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_cloudCheckUpdates - $checkPolicy_cloudCheckUpdates" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_cloudCheckEntitlement - $checkPolicy_cloudCheckEntitlement" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_cloudContract - $checkPolicy_cloudContract" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_cloudLicense - $checkPolicy_cloudLicense" >>$HISTORYLOG
#echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_cloudCrl - $checkPolicy_cloudCrl" >>$HISTORYLOG
if [[ $checkSelf_bladeAb -eq "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_cloudCws - $checkPolicy_cloudCws" >>$HISTORYLOG
fi
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_cloudGlobalSign - $checkPolicy_cloudGlobalSign" >>$HISTORYLOG
if [[ $checkSelf_bladeTe -eq "1" ]] || [[ $checkSelf_bladeTx -eq "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_cloudTe - $checkPolicy_cloudTe" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_cloudTeadv - $checkPolicy_cloudTeadv" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_cloudThreatEmulation - $checkPolicy_cloudThreatEmulation" >>$HISTORYLOG
fi
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_ckpMutexQty - $checkPolicy_ckpMutexQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_updatableObjNames - $checkPolicy_updatableObjNames" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_threatFeedQty - $checkPolicy_threatFeedQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_threatFeedInterval - $checkPolicy_threatFeedInterval" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_domainObjectEnabled - $checkPolicy_domainObjectEnabled" >>$HISTORYLOG
if [[ $checkPolicy_domainObjectEnabled -eq "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_domainObjectQty - $checkPolicy_domainObjectQty" >>$HISTORYLOG
fi
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_sslTrustedCaUpdateLatest - $checkPolicy_sslTrustedCaUpdateLatest" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_sslTrustedCaIssuedByUniqQty - $checkPolicy_sslTrustedCaIssuedByUniqQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_sslTrustedCaIssuedByQty - $checkPolicy_sslTrustedCaIssuedByQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_sslTrustedCaIssuedToUniqQty - $checkPolicy_sslTrustedCaIssuedToUniqQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_sslTrustedCaIssuedToQty - $checkPolicy_sslTrustedCaIssuedToQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_sslTrustedCaAddedByUserQty - $checkPolicy_sslTrustedCaAddedByUserQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_sslTrustedCaAddedByCheckPointQty - $checkPolicy_sslTrustedCaAddedByCheckPointQty" >>$HISTORYLOG



#RUN LOGIC

LASTRUNACCEPTED=$(cat $CURRENTRUNHISTORYLOGOUTPUT | grep "checkPolicy_policyAccepted" | head -1 | awk -F " - " '{print $7}' | tr -dc '0-9')
if [[ $LASTRUNACCEPTED == "" ]]; then
	LASTRUNACCEPTED=$ACCEPTED
fi
LASTRUNDROPPED=$(cat $CURRENTRUNHISTORYLOGOUTPUT | grep "checkPolicy_policyDropped" | head -1 | awk -F " - " '{print $7}' | tr -dc '0-9')
if [[ $LASTRUNDROPPED == "" ]]; then
	LASTRUNDROPPED=$DROPPED
fi		
LASTRUNREJECTED=$(cat $CURRENTRUNHISTORYLOGOUTPUT | grep "checkPolicy_policyRejected" | head -1 | awk -F " - " '{print $7}' | tr -dc '0-9')
if [[ $LASTRUNREJECTED == "" ]]; then
	LASTRUNREJECTED=$REJECTED
fi	
LASTRUNLINECOUNTERS="LASTRUN ACCEPTED=$LASTRUNACCEPTED DROPPED=$LASTRUNDROPPED REJECTED=$LASTRUNREJECTED"

if [[ $checkPolicy_policyAccepted -le $LASTRUNACCEPTED ]]; then
	LASTRUNACCEPTED="0"
fi
if [[ $checkPolicy_policyDropped -le $LASTRUNDROPPED ]]; then
	LASTRUNDROPPED="0"
fi
if [[ $checkPolicy_policyRejected -le $LASTRUNREJECTED ]]; then
	LASTRUNREJECTED="0"
fi

LASTRUNDIFFACCEPTED="$(( checkPolicy_policyAccepted - LASTRUNACCEPTED ))"
LASTRUNDIFFDROPPED="$(( checkPolicy_policyDropped - LASTRUNDROPPED ))"
LASTRUNDIFFREJECTED="$(( checkPolicy_policyRejected - LASTRUNREJECTED ))"
LASTRUNLINEDIFFCOUNTERS="DIFF ACCEPTED=$LASTRUNDIFFACCEPTED DROPPED=$LASTRUNDIFFDROPPED REJECTED=$LASTRUNDIFFREJECTED"

RATEACCEPTED="$(( (checkPolicy_policyAccepted - LASTRUNACCEPTED) / SINCELASTRUN ))"
RATEDROPPED="$(( (checkPolicy_policyDropped - LASTRUNDROPPED) / SINCELASTRUN ))"
RATEREJECTED="$(( (checkPolicy_policyRejected - LASTRUNREJECTED) / SINCELASTRUN ))"
RATECOUNTERS="RATE ACCEPTED=$RATEACCEPTED DROPPED=$RATEDROPPED REJECTED=$RATEREJECTED"

if [[ $RATEDROPPED -lt 0 ]]; then
	checkPolicy_policyDroppedRate="0"
else
	checkPolicy_policyDroppedRate=$RATEDROPPED
fi



#PENDING SOLUTION - RFE
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_policyAcceptedLastrun - $LASTRUNACCEPTED" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_policyDroppedLastrun - $LASTRUNDROPPED" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_policyRejectLastrun - $LASTRUNREJECTED" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_policyAcceptedDiff - $LASTRUNDIFFACCEPTED" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_policyDroppedDiff - $LASTRUNDIFFDROPPED" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_policyRejectDiff - $LASTRUNDIFFREJECTED" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_policyAcceptedRate - $RATEACCEPTED" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_policyDroppedRate - $RATEDROPPED" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_policyRejectedRate - $RATEREJECTED" >>$HISTORYLOG

if [[ $checkSelf_ipv6Enabled == "1" ]] && [[ $checkSelf_ipv6Configured != "0" ]]; then
	
	LASTRUNACCEPTEDIPV6=$(cat $CURRENTRUNHISTORYLOGOUTPUT | grep "checkPolicy_policyIpv6Accepted" | head -1 | awk -F " - " '{print $7}' | tr -dc '0-9')
	if [[ $LASTRUNACCEPTEDIPV6 == "" ]]; then
			LASTRUNACCEPTEDIPV6=$ACCEPTEDIPV6
	fi	
	LASTRUNDROPPEDIPV6=$(cat $CURRENTRUNHISTORYLOGOUTPUT | grep "checkPolicy_policyIpv6Dropped" | head -1 | awk -F " - " '{print $7}' | tr -dc '0-9')
	if [[ $LASTRUNDROPPEDIPV6 == "" ]]; then
			LASTRUNDROPPEDIPV6=$DROPPEDIPV6
	fi	
	LASTRUNREJECTEDIPV6=$(cat $CURRENTRUNHISTORYLOGOUTPUT | grep "checkPolicy_policyIpv6Rejected" | head -1 | awk -F " - " '{print $7}' | tr -dc '0-9')
	if [[ $LASTRUNREJECTEDIPV6 == "" ]]; then
			LASTRUNREJECTEDIPV6=$REJECTEDIPV6
	fi	
	LASTRUNLINECOUNTERSIPV6="LASTRUNIPV6 ACCEPTEDIPV6=$LASTRUNACCEPTEDIPV6 DROPPEDIPV6=$LASTRUNDROPPEDIPV6 REJECTEDIPV6=$LASTRUNREJECTEDIPV6"

	if [[ $checkPolicy_policyIpv6Accepted -le $LASTRUNACCEPTEDIPV6 ]]; then
		LASTRUNACCEPTEDIPV6="0"
	fi
	if [[ $checkPolicy_policyIpv6Dropped -le $LASTRUNDROPPEDIPV6 ]]; then
		LASTRUNDROPPEDIPV6="0"
	fi
	if [[ $checkPolicy_policyIpv6Rejected -le $LASTRUNREJECTEDIPV6 ]]; then
		LASTRUNREJECTEDIPV6="0"
	fi

	LASTRUNDIFFACCEPTEDIPV6="$(( checkPolicy_policyIpv6Accepted - LASTRUNACCEPTEDIPV6 ))"
	LASTRUNDIFFDROPPEDIPV6="$(( checkPolicy_policyIpv6Dropped - LASTRUNDROPPEDIPV6 ))"
	LASTRUNDIFFREJECTEDIPV6="$(( checkPolicy_policyIpv6Rejected - LASTRUNREJECTEDIPV6 ))"
	LASTRUNLINEDIFFCOUNTERSIPV6="DIFFIPV6 ACCEPTEDIPV6=$LASTRUNDIFFACCEPTEDIPV6 DROPPEDIPV6=$LASTRUNDIFFDROPPEDIPV6 REJECTEDIPV6=$LASTRUNDIFFREJECTEDIPV6"
	
	RATEACCEPTEDIPV6="$(( (checkPolicy_policyIpv6Accepted - LASTRUNACCEPTEDIPV6) / SINCELASTRUN ))"
	RATEDROPPEDIPV6="$(( (checkPolicy_policyIpv6Dropped - LASTRUNDROPPEDIPV6) / SINCELASTRUN ))"
	RATEREJECTEDIPV6="$(( (checkPolicy_policyIpv6Rejected - LASTRUNREJECTEDIPV6) / SINCELASTRUN ))"
	RATECOUNTERSIPV6="RATEIPV6 ACCEPTEDIPV6=$RATEACCEPTEDIPV6 DROPPEDIPV6=$RATEDROPPEDIPV6 REJECTEDIPV6=$RATEREJECTEDIPV6"
	
	# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_lastrunCountersIpv6 $LASTRUNLINECOUNTERSIPV6" >>$HISTORYLOG
	# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_diffCountersIpv6 $LASTRUNLINEDIFFCOUNTERSIPV6" >>$HISTORYLOG
	# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_rateCountersIpv6 $RATECOUNTERSIPV6" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_policyAcceptedLastrunIpv6 - $LASTRUNACCEPTEDIPV6" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_policyDroppedLastrunIpv6 - $LASTRUNDROPPEDIPV6" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_policyRejectLastrunIpv6 - $LASTRUNREJECTEDIPV6" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_policyAcceptedDiffIpv6 - $LASTRUNDIFFACCEPTEDIPV6" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_policyDroppedDiffIpv6 - $LASTRUNDIFFDROPPEDIPV6" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_policyRejectDiffIpv6 - $LASTRUNDIFFREJECTEDIPV6" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_policyAcceptedRateIpv6 - $RATEDROPPEDIPV6" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_policyDroppedRateIpv6 - $RATEDROPPEDIPV6" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_policyRejectedRateIpv6 - $RATEDROPPEDIPV6" >>$HISTORYLOG
fi	
	

if [[ $checkPolicy_policyName == "" ]] || [[ $checkPolicy_policyName == "InitialPolicy" ]] || [[ $checkPolicy_policyName == "defaultfilter" ]]; then
	echo "Logic - policyName: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Policy name - $checkPolicy_policyName" >>$HISTORYLOG
	checkPolicy_problem="1"
	checkPolicy_problemInfo="$checkPolicy_problemInfo [Policy Not Loaded]"
else
	echo "Logic - policyName: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Policy name - $checkPolicy_policyName" >>$HISTORYLOG
	checkPolicy_workingInfo="$checkPolicy_workingInfo [Name: $checkPolicy_policyName, Rules: $checkPolicy_policyRuleQty, Last Change: $checkPolicy_policyTimeSinceCompile ago]"
fi

if [[ $checkPolicy_ipsBypassConfig == "Enabled" && $checkPolicy_ipsBypassActive != "No" ]]; then
	checkPolicy_problemInfo="$checkPolicy_problemInfo [IPS Bypass: On]"
fi


if [[ $checkPolicy_geoEnabledLegacy == "1" ]]; then
	if [[ $checkPolicy_geoLegacyDateLastEditDiff -gt "2592000" ]]; then
		if [[ $checkPolicy_geoMd5 == "d3dd4e3df9ae369afb6e2a2dbb41b482" ]]; then
			#checkPolicy_problem="1"
			#Check Point bug under SR 6-0001878388
			checkPolicy_problemInfo="$checkPolicy_problemInfo [GeoIP Database using legacy due to SR 6-0001878388: $checkPolicy_geoLegacyDateLastEditSince]"
		else
			checkPolicy_problem="1"
			checkPolicy_problemInfo="$checkPolicy_problemInfo [GeoIP Database old: $checkPolicy_geoLegacyDateLastEditSince]"
		fi
	fi
fi

if [[ $checkPolicy_geoEnabled -eq "1" ]]; then
	if [[ $checkPolicy_geoLastSuccessDiff -gt "691200" ]]; then
		checkPolicy_problem="1"
		checkPolicy_problemInfo="$checkPolicy_problemInfo [GeoIP Database old: $checkPolicy_geoLastSuccessSince]"
	fi
fi

if [[ $checkPolicy_cloudCheckDl3 -eq "0" ]]; then
	echo "Logic - cloud: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - checkPolicy_cloudCheckDetails - DL3=$checkPolicy_cloudCheckDl3" >>$HISTORYLOG
	checkPolicy_warning="1"
	checkPolicy_warningInfo="$checkPolicy_warningInfo [Cloud Service Check Failed (DL3)]"
else
	echo "Logic - cloud: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkPolicy_cloudCheckDetails - DL3=$checkPolicy_cloudCheckDl3" >>$HISTORYLOG
fi

if [[ $checkPolicy_cloudCheckUpdates -eq "0" ]]; then
	echo "Logic - cloud: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - checkPolicy_cloudCheckDetails - UPDATES=$checkPolicy_cloudCheckUpdates" >>$HISTORYLOG
	checkPolicy_warning="1"
	checkPolicy_warningInfo="$checkPolicy_warningInfo [Cloud Service Check Failed (UPDATES)]"
else
	echo "Logic - cloud: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkPolicy_cloudCheckDetails - UPDATES=$checkPolicy_cloudCheckUpdates" >>$HISTORYLOG
fi

if [[ $checkPolicy_cloudCheckEntitlement -eq "0" ]]; then
	echo "Logic - cloud: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - checkPolicy_cloudCheckDetails - ENTITLEMENT=$checkPolicy_cloudCheckEntitlement" >>$HISTORYLOG
	checkPolicy_warning="1"
	checkPolicy_warningInfo="$checkPolicy_warningInfo [Cloud Service Check Failed (ENTITLEMENT)]"
else
	echo "Logic - cloud: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkPolicy_cloudCheckDetails - ENTITLEMENT=$checkPolicy_cloudCheckEntitlement" >>$HISTORYLOG
fi

if [[ $checkPolicy_cloudContract -eq "0" ]]; then
	echo "Logic - cloud: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - checkPolicy_cloudCheckDetails - CONTRACT=$checkPolicy_cloudContract" >>$HISTORYLOG
	checkPolicy_warning="1"
	checkPolicy_warningInfo="$checkPolicy_warningInfo [Cloud Service Check Failed (CONTRACT)]"
else
	echo "Logic - cloud: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkPolicy_cloudCheckDetails - CONTRACT=$checkPolicy_cloudContract" >>$HISTORYLOG
fi

if [[ $checkPolicy_cloudLicense -eq "0" ]]; then
	echo "Logic - cloud: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - checkPolicy_cloudCheckDetails - LICENSE=$checkPolicy_cloudLicense" >>$HISTORYLOG
	checkPolicy_warning="1"
	checkPolicy_warningInfo="$checkPolicy_warningInfo [Cloud Service Check Failed (LICENSE)]"
else
	echo "Logic - cloud: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkPolicy_cloudCheckDetails - LICENSE=$checkPolicy_cloudLicense" >>$HISTORYLOG
fi

if [[ $checkPolicy_geoEnabledLegacy == "1" ]]; then
	if [[ $checkPolicy_cloudSc1 != "1" ]] ; then
		echo "Logic - cloud: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - checkPolicy_cloudCheckDetails - SC1=$checkPolicy_cloudSc1" >>$HISTORYLOG
		checkPolicy_warning="1"
		checkPolicy_warningInfo="$checkPolicy_warningInfo [Cloud Service Check Failed (SC1)]"
	else
		echo "Logic - cloud: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkPolicy_cloudCheckDetails - SC1=$checkPolicy_cloudSc1" >>$HISTORYLOG
	fi
fi

if [[ $checkSelf_bladeAb -eq "1" ]]; then
	if [[ $checkPolicy_cloudCws != "1" ]] ; then
		echo "Logic - cloud: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - checkPolicy_cloudCheckDetails - CWS=$checkPolicy_cloudCws" >>$HISTORYLOG
		checkPolicy_warning="1"
		checkPolicy_warningInfo="$checkPolicy_warningInfo [Cloud Service Check Failed (CWS)]"
	else
		echo "Logic - cloud: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkPolicy_cloudCheckDetails - CWS=$checkPolicy_cloudCws" >>$HISTORYLOG
	fi
fi

if [[ $checkPolicy_cloudGlobalSign -eq "0" ]]; then
	echo "Logic - cloud: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - checkPolicy_cloudCheckDetails - CRL-GlobalSign=$checkPolicy_cloudGlobalSign" >>$HISTORYLOG
	checkPolicy_warning="1"
	checkPolicy_warningInfo="$checkPolicy_warningInfo [Cloud Service Check Failed (CRL-GlobalSign)]"
else
	echo "Logic - cloud: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkPolicy_cloudCheckDetails - CRL-GlobalSign=$checkPolicy_cloudGlobalSign" >>$HISTORYLOG
fi

if [[ $checkSelf_bladeTe -eq "1" ]] || [[ $checkSelf_bladeTx -eq "1" ]]; then
	if [[ $checkPolicy_cloudTe != "1" ]] ; then
		echo "Logic - cloud: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - checkPolicy_cloudTe - TE=$checkPolicy_cloudTe" >>$HISTORYLOG
		checkPolicy_warning="1"
		checkPolicy_warningInfo="$checkPolicy_warningInfo [Cloud Service Check Failed (TE)]"
	else
		echo "Logic - cloud: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkPolicy_cloudTe - TE=$checkPolicy_cloudTe" >>$HISTORYLOG
	fi
	if [[ $checkPolicy_cloudTeadv != "1" ]] ; then
		echo "Logic - cloud: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - checkPolicy_cloudTeadv - TEADV=$checkPolicy_cloudTeadv" >>$HISTORYLOG
		checkPolicy_warning="1"
		checkPolicy_warningInfo="$checkPolicy_warningInfo [Cloud Service Check Failed (TEADV)]"
	else
		echo "Logic - cloud: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkPolicy_cloudTeadv - TEADV=$checkPolicy_cloudTeadv" >>$HISTORYLOG
	fi
	if [[ $checkPolicy_cloudThreatEmulation != "1" ]] ; then
		echo "Logic - cloud: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - checkPolicy_cloudThreatEmulation - THREATEMULATION=$checkPolicy_cloudThreatEmulation" >>$HISTORYLOG
		checkPolicy_warning="1"
		checkPolicy_warningInfo="$checkPolicy_warningInfo [Cloud Service Check Failed (THREATEMULATION)]"
	else
		echo "Logic - cloud: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkPolicy_cloudThreatEmulation - THREATEMULATION=$checkPolicy_cloudThreatEmulation" >>$HISTORYLOG
	fi
fi

if [[ $checkPolicy_ckpMutexQty -gt "500000" ]]; then
	echo "Logic - Mutex files: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - checkPolicy_ckpMutexQty - $checkPolicy_ckpMutexQty" >>$HISTORYLOG
	checkPolicy_warning="1"
	checkPolicy_warningInfo="$checkPolicy_warningInfo [Mutex File Qty $checkPolicy_ckpMutexQty, snapshots might be effected. CP bug 6-0003115409]"
else
	echo "Logic - Mutex files: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkPolicy_ckpMutexQty - $checkPolicy_ckpMutexQty" >>$HISTORYLOG
fi

if [[ $checkSelf_majorVer == "R81.10" ]] && [[ $checkPolicy_dnsClish != $checkPolicy_dnsWebui ]]; then
	echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - checkPolicy_dns - CLISH=$checkPolicy_dnsClish KERNEL=$checkPolicy_dnsWebui" >>$HISTORYLOG
	checkPolicy_warning="1"
	checkPolicy_warningInfo="$checkPolicy_warningInfo [DNS Server not loaded (CLISH=$checkPolicy_dnsClish KERNEL=$checkPolicy_dnsWebui)]"
else
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkPolicy_dns - CLISH=$checkPolicy_dnsClish KERNEL=$checkPolicy_dnsWebui" >>$HISTORYLOG
fi

#SYSLOG
if [[ $checkPolicy_problem == "1" ]]; then
	sendSyslog "$functionName" "PROBLEM" "checkPolicy_problemInfo" "VALUE=\"$checkPolicy_problemInfo $checkPolicy_warningInfo $checkPolicy_workingInfo\""
elif [[ $checkPolicy_warning == "1" ]]; then
	sendSyslog "$functionName" "WARNING" "checkPolicy_warningInfo" "VALUE=\"$checkPolicy_warningInfo $checkPolicy_workingInfo\""	
else
	sendSyslog "$functionName" "WORKING" "checkPolicy_workingInfo" "VALUE=\"$checkPolicy_workingInfo\""
fi
sendSyslog "$functionName" "INFO" "checkPolicy_policyDetails" "POLICYNAME=\"$checkPolicy_policyName\" COMPILETIME=\"$checkPolicy_policyCompileTime\" LOADTIME=\"$checkPolicy_policyLoadTime\" RULEQTY=\"$checkPolicy_policyRuleQty\" DOMAIN=\"$CMANAME\""
sendSyslog "$functionName" "INFO" "checkPolicy_policyName" "VALUE=\"$checkPolicy_policyName\""
sendSyslog "$functionName" "INFO" "checkPolicy_policyRuleQty" "VALUE=\"$checkPolicy_policyRuleQty\""
sendSyslog "$functionName" "INFO" "checkPolicy_policyLoadTime" "VALUE=\"$checkPolicy_policyLoadTime\""
sendSyslog "$functionName" "INFO" "checkPolicy_policyCompileDetails" "VALUE=\"$checkPolicy_policyCompileDetails\""
sendSyslog "$functionName" "INFO" "checkPolicy_policyCompileTime" "VALUE=\"$checkPolicy_policyCompileTime\""
sendSyslog "$functionName" "INFO" "checkPolicy_counters" "ACCEPTED=\"$checkPolicy_policyAccepted\" DROPPED=\"$checkPolicy_policyDropped\" REJECTED=\"$checkPolicy_policyRejected\""
sendSyslog "$functionName" "INFO" "checkPolicy_countersRate" "ACCEPTED=\"$RATEACCEPTED\" DROPPED=\"$RATEDROPPED\" REJECTED=\"$RATEREJECTED\""
sendSyslog "$functionName" "INFO" "checkPolicy_policyDroppedRate" "VALUE=\"$checkPolicy_policyDroppedRate\""
if [[ $checkSelf_ipv6Enabled == "1" ]] && [[ $checkSelf_ipv6Configured != "0" ]]; then
	sendSyslog "$functionName" "INFO" "checkPolicy_countersIpv6" "ACCEPTED=\"$checkPolicy_policyIpv6Accepted\" DROPPED=\"$checkPolicy_policyIpv6Dropped\" REJECTED=\"$checkPolicy_policyIpv6Rejected\""
	sendSyslog "$functionName" "INFO" "checkPolicy_countersRateIpv6" "RATE ACCEPTED=\"$RATEACCEPTEDIPV6\" DROPPED=\"$RATEDROPPEDIPV6\" REJECTED=\"$RATEREJECTEDIPV6\""
fi
sendSyslog "$functionName" "INFO" "checkPolicy_ipsStatus" "VALUE=\"$checkPolicy_ipsStatus\""
sendSyslog "$functionName" "INFO" "checkPolicy_ipsProfile" "VALUE=\"$checkPolicy_ipsProfile\""
sendSyslog "$functionName" "INFO" "checkPolicy_ipsVersion" "VALUE=\"$checkPolicy_ipsVersion\""
sendSyslog "$functionName" "INFO" "checkPolicy_ipsBypassConfig" "VALUE=\"$checkPolicy_ipsBypassConfig\""
sendSyslog "$functionName" "INFO" "checkPolicy_ipsBypassActive" "VALUE=\"$checkPolicy_ipsBypassActive\""
sendSyslog "$functionName" "INFO" "checkPolicy_corexlFullyUtilizedDrops" "VALUE=\"$checkPolicy_corexlFullyUtilizedDrops\""
sendSyslog "$functionName" "INFO" "checkPolicy_geoEnabledLegacy" "VALUE=\"$checkPolicy_geoEnabledLegacy\""
sendSyslog "$functionName" "INFO" "checkPolicy_geoEnabled" "VALUE=\"$checkPolicy_geoEnabled\""
if [[ $checkPolicy_geoEnabledLegacy == "1" ]]; then
	sendSyslog "$functionName" "INFO" "checkPolicy_geoDate" "VALUE=\"$checkPolicy_geoDate\""
	sendSyslog "$functionName" "INFO" "checkPolicy_geoLegacyDateLastEditSince" "VALUE=\"$checkPolicy_geoLegacyDateLastEditSince\""
	sendSyslog "$functionName" "INFO" "checkPolicy_geoMd5" "VALUE=\"$checkPolicy_geoMd5\""
	sendSyslog "$functionName" "INFO" "checkPolicy_cloudSc1" "VALUE=\"$checkPolicy_cloudSc1\""
	sendSyslog "$functionName" "INFO" "checkPolicy_geoDetails" "TYPE="IP_LIST" ENABLED=\"$checkPolicy_geoEnabledLegacy\" LASTREVISION=\"$checkPolicy_geoDate\" LASTSUCCESS=\"$checkPolicy_geoDate\" LASTSUCCESSDIFF=\"$checkPolicy_geoLegacyDateLastEditDiff\" LASTSUCCESSSINCE=\"$checkPolicy_geoLegacyDateLastEditSince\" LASTUPDATETIME=\"$checkPolicy_geoLastUpdateTime\" LASTUPDATEREASON=\"$checkPolicy_geoLastUpdateReason\" COUNTRYQTY=\"$checkPolicy_geoLegacyCountryQty\" RANGEQTY=\"$checkPolicy_geoLegacyRangeQty\""
fi
if [[ $checkPolicy_geoEnabled == "1" ]]; then
	sendSyslog "$functionName" "INFO" "checkPolicy_geoDetails" "TYPE="UPDATABLE_OBJ" ENABLED=\"$checkPolicy_geoEnabled\" LASTREVISION=\"$checkPolicy_geoLastRevision\" LASTSUCCESS=\"$checkPolicy_geoLastSuccess\" LASTSUCCESSDIFF=\"$checkPolicy_geoLastSuccessDiff\" LASTSUCCESSSINCE=\"$checkPolicy_geoLastSuccessSince\" LASTUPDATETIME=\"$checkPolicy_geoLastUpdateTime\" LASTUPDATEREASON=\"$checkPolicy_geoLastUpdateReason\" COUNTRYQTY=\"$checkPolicy_geoCountryQty\" RANGEQTY=\"$checkPolicy_geoRangeQty\""
fi
sendSyslog "$functionName" "INFO" "checkPolicy_proxy" "VALUE=\"$checkPolicy_proxyEnabled\" IP=\"$checkPolicy_proxyIp\" PORT=\"$checkPolicy_proxyPort\""
sendSyslog "$functionName" "INFO" "checkPolicy_cloudCheckDl3" "VALUE=\"$checkPolicy_cloudCheckDl3\""
sendSyslog "$functionName" "INFO" "checkPolicy_cloudCheckUpdates" "VALUE=\"$checkPolicy_cloudCheckUpdates\""
sendSyslog "$functionName" "INFO" "checkPolicy_cloudCheckEntitlement" "VALUE=\"$checkPolicy_cloudCheckEntitlement\""
sendSyslog "$functionName" "INFO" "checkPolicy_cloudContract" "VALUE=\"$checkPolicy_cloudContract\""
sendSyslog "$functionName" "INFO" "checkPolicy_cloudLicense" "VALUE=\"$checkPolicy_cloudLicense\""
# sendSyslog "$functionName" "INFO" "checkPolicy_cloudCrl" "VALUE=\"$checkPolicy_cloudCrl\""
if [[ $checkSelf_bladeAb -eq "1" ]]; then
	sendSyslog "$functionName" "INFO" "checkPolicy_cloudCws" "VALUE=\"$checkPolicy_cloudCws\""
fi
sendSyslog "$functionName" "INFO" "checkPolicy_cloudGlobalSign" "VALUE=\"$checkPolicy_cloudGlobalSign\""
if [[ $checkSelf_bladeTe -eq "1" ]] || [[ $checkSelf_bladeTx -eq "1" ]]; then
	sendSyslog "$functionName" "INFO" "checkPolicy_cloudTe" "VALUE=\"$checkPolicy_cloudTe\""
	sendSyslog "$functionName" "INFO" "checkPolicy_cloudTeadv" "VALUE=\"$checkPolicy_cloudTeadv\""
	sendSyslog "$functionName" "INFO" "checkPolicy_cloudThreatEmulation" "VALUE=\"$checkPolicy_cloudThreatEmulation\""
fi
sendSyslog "$functionName" "INFO" "checkPolicy_ckpMutexQty" "VALUE=\"$checkPolicy_ckpMutexQty\""
sendSyslog "$functionName" "INFO" "checkPolicy_updatableObjNames" "VALUE=\"$checkPolicy_updatableObjNames\""
sendSyslog "$functionName" "INFO" "checkPolicy_threatFeedQty" "VALUE=\"$checkPolicy_threatFeedQty\""
sendSyslog "$functionName" "INFO" "checkPolicy_threatFeedInterval" "VALUE=\"$checkPolicy_threatFeedInterval\""
sendSyslog "$functionName" "INFO" "checkPolicy_domainObjectEnabled" "VALUE=\"$checkPolicy_domainObjectEnabled\""
if [[ $checkPolicy_domainObjectEnabled -eq "1" ]]; then
	sendSyslog "$functionName" "INFO" "checkPolicy_domainObjectQty" "VALUE=\"$checkPolicy_domainObjectQty\""
fi
sendSyslog "$functionName" "INFO" "checkPolicy_sslTrustedCaDetails" "UPDATE_LATEST=\"$checkPolicy_sslTrustedCaUpdateLatest\" ISSUED_TO_UNIQ_QTY=\"$checkPolicy_sslTrustedCaIssuedToUniqQty\" ISSUED_BY_UNIQ_QTY=\"$checkPolicy_sslTrustedCaIssuedByUniqQty\" ISSUED_TO_QTY=\"$checkPolicy_sslTrustedCaIssuedToQty\" ISSUED_BY_QTY=\"$checkPolicy_sslTrustedCaIssuedByQty\" ADDED_BY_CHECKPOINT_QTY=\"$checkPolicy_sslTrustedCaAddedByCheckPointQty\" ADDED_BY_USER_QTY=\"$checkPolicy_sslTrustedCaAddedByUserQty\""
sendSyslog "$functionName" "INFO" "checkPolicy_dnsDetails" "CLISH=\"$checkPolicy_dnsClish\" KERNEL=\"$checkPolicy_dnsWebui\""



#Cleanup
rm -f $TEMPFILE_DYNAMICOBJECTS


checkPolicy_fEnd=$(date "+%s")
checkPolicy_fEndMs=$(date +%s%3N)
checkPolicy_fRunTime=$(( checkPolicy_fEnd - checkPolicy_fStart ))
checkPolicy_fRunTimeMs=$(( checkPolicy_fEndMs - checkPolicy_fStartMs ))
echo "checkPolicy_fRunTime $checkPolicy_fRunTime" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_warning - $checkPolicy_warning" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_problem - $checkPolicy_problem" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_problemInfo - $checkPolicy_problemInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_warningInfo - $checkPolicy_warningInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_workingInfo - $checkPolicy_workingInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_runTime - $checkPolicy_fRunTime" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_fRunTimeMs - $checkPolicy_fRunTimeMs" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkPolicy_warning" "VALUE=\"$checkPolicy_warning\""
sendSyslog "$functionName" "INFO" "checkPolicy_problem" "VALUE=\"$checkPolicy_problem\""
sendSyslog "$functionName" "INFO" "checkPolicy_problemInfo" "VALUE=\"$checkPolicy_problemInfo\""
sendSyslog "$functionName" "INFO" "checkPolicy_warningInfo" "VALUE=\"$checkPolicy_warningInfo\""
sendSyslog "$functionName" "INFO" "checkPolicy_workingInfo" "VALUE=\"$checkPolicy_workingInfo\""
sendSyslog "$functionName" "INFO" "checkPolicy_runTime" "VALUE=\"$checkPolicy_fRunTime\""
echo "checkPolicy_problem $checkPolicy_problem" >>$RUNLOG
echo "END==checkPolicy" >>$RUNLOG
}

###################################################################################################
checkPolicySP() {
echo "START==checkPolicySP" >>$RUNLOG

#DEFAULTS
checkPolicySP_fStart=$(date "+%s")
functionName=${FUNCNAME[0]}
checkPolicySP_warning="0"
checkPolicySP_problem="0"
checkPolicySP_workingInfo=""
checkPolicySP_warningInfo=""
checkPolicySP_problemInfo=""
TEMPFILE=$TEMPDIR/$SCRIPT.$EPOCH.$functionName
TEMPFILE_DYNAMICOBJECTS=$TEMPDIR/$SCRIPT.$functionName.$EPOCH.dynamicobjects

#COLLECT OUTPUTS
#checkPolicySP_policyName=$(snmp .1.3.6.1.4.1.2620.1.1.25.1.0)
checkPolicySP_policyName=$(stattestget 1.3.6.1.4.1.2620.1.1.25.1)
checkPolicySP_policyRuleQty=$(cat $FWDIR/database/rules.C | grep -B 3 "security_rule"| grep "rule-" | awk -F "rule-" '{print $2}' | sort -n | uniq | tail -1)
#checkPolicySP_policyLoadTime0=$(snmp .1.3.6.1.4.1.2620.1.1.25.2)
checkPolicySP_policyLoadTime0=$(stattestget 1.3.6.1.4.1.2620.1.1.25.2)
checkPolicySP_policyLoadTime=$(date -d "$checkPolicySP_policyLoadTime0" +"%s")
checkPolicySP_policyTimeSinceLoad0="$(( EPOCH - checkPolicySP_policyLoadTime ))"
checkPolicySP_policyTimeSinceLoad=$(conv_time $checkPolicySP_policyTimeSinceLoad0)
checkPolicySP_policyCompileDetails=$(head -1 $FWDIR/state/local/FW1/local.ft)
checkPolicySP_policyCompileTime0=$(head -1 $FWDIR/state/local/FW1/local.ft | awk '{print $9" "$10}')
checkPolicySP_policyCompileTime=$(date -d "$checkPolicySP_policyCompileTime0" +"%s")
checkPolicySP_policyTimeSinceCompile0="$(( EPOCH - checkPolicySP_policyCompileTime ))"
checkPolicySP_policyTimeSinceCompile=$(conv_time $checkPolicySP_policyTimeSinceCompile0)
checkPolicySP_dnsClish=$(cat /config/active | grep "resolv:resolver" | awk '{print $NF}' | sort -n | tr '\n' ' ')
IFS=$'\n'
for LINE in `fw tab -t webui_dns_servers | grep ";" | awk -F ";" '{print $1}' | sort -n` ; do
	LINE2=$(hex2dot `echo $LINE`)
	checkPolicySP_dnsWebui="$checkPolicySP_dnsWebui $LINE2"
done
checkPolicySP_dnsClish=$(echo $checkPolicySP_dnsClish | tr ' ' '\n' | sort -n | tr '\n' ' ' | sed 's/^[ \t]*//' | sed 's/[ \t]*$//')
checkPolicySP_dnsWebui=$(echo $checkPolicySP_dnsWebui | tr ' ' '\n' | sort -n | tr '\n' ' ' | sed 's/^[ \t]*//' | sed 's/[ \t]*$//')

IFS=$ORIGIFS
if [[ $LOCALSMO == "1" ]]; then
	checkPolicySP_policyAccepted=$(g_all "cpstat fw -f policy" | grep "Total accepted packets" | awk '{print $NF}' | paste -sd+ | bc)
	checkPolicySP_policyDropped=$(g_all "cpstat fw -f policy" | grep "Total dropped packets" | awk '{print $NF}' | paste -sd+ | bc)
	checkPolicySP_policyRejected=$(g_all "cpstat fw -f policy" | grep "Total rejected packets" | awk '{print $NF}' | paste -sd+ | bc)
	checkPolicySP_policyIpsDropped="0"

	
	if [[ $checkSelf_ipv6Enabled == "1" ]] && [[ $checkSelf_ipv6Configured != "0" ]]; then
		checkPolicySP_policyIpv6Accepted="0"
		checkPolicySP_policyIpv6Dropped="0"
		checkPolicySP_policyIpv6Rejected="0"
	fi
	
	LASTRUNDROPPED=$(cat $CURRENTRUNHISTORYLOGOUTPUT | grep checkPolicySP_policyDropped | grep -v "checkPolicySP_policyDroppedRate" | awk -F " - " '{print $7}' | head -1)
	if [[ $LASTRUNDROPPED == "" ]]; then
		LASTRUNDROPPED=$checkPolicySP_policyDropped
	fi
	
	if [[ $RATEDROPPED -lt 0 ]]; then
		checkPolicySP_policyDroppedRate="0"
	else
		checkPolicySP_policyDroppedRate=$RATEDROPPED
	fi


fi
checkPolicySP_ipsStatus=$(ips stat | grep "IPS Status" | awk '{print $NF}')
checkPolicySP_ipsProfile=$(cat $FWDIR/state/local/AMW/local.set | grep -A15 malware_profiles | grep ":name" | awk '{print $2}' | tr -d '()')
checkPolicySP_ckpMutexQty=$(find $CPDIR/tmp/ -name CKP_mutex\* | wc -l)
checkPolicySP_ipsVersion=$(ips stat | grep "IPS Update Version" | awk '{print $NF}')
checkPolicySP_ipsBypassActive=$(ips bypass stat | grep "Currently under load" | awk '{print $NF}')
checkPolicySP_ipsBypassConfig=$(ips bypass stat | grep "IPS Bypass Under Load" | awk '{print $NF}')
checkPolicySP_ipsBypassTrack="n/a"
#checkPolicySP_corexlFullyUtilizedDrops=$(snmp .1.3.6.1.4.1.2620.1.1.25.26)
checkPolicySP_corexlFullyUtilizedDrops=$(stattestget 1.3.6.1.4.1.2620.1.1.25.26)

if [[ -f $FWDIR/state/local/FW1/local.updatable_obj ]]; then
	checkPolicySP_updatableObjectEnabled=$(cat $FWDIR/state/local/FW1/local.updatable_obj | grep " : (" | wc -l)
else
	checkPolicySP_updatableObjectEnabled="0"
fi
if [[ $checkPolicySP_updatableObjectEnabled -gt "1" ]]; then
	checkPolicySP_updatableObjectEnabled="1"
fi
if [[ $checkPolicySP_updatableObjectEnabled -eq "1" ]]; then
	$FWDIR/bin/dynamic_objects -uo_show > $TEMPFILE_DYNAMICOBJECTS 2>&1
	for LINE in `$FWDIR/bin/dynamic_objects -uo_show | grep "object name : " | awk '{print $NF}'` ; do
		OBJECT_NAME=$(echo $LINE)
		START_LINE=$(awk -v target="$OBJECT_NAME" '$0 ~ target {print NR; exit}' "$TEMPFILE_DYNAMICOBJECTS")
		RANGE_QTY=$(sed -n "$START_LINE,/^$/p" "$TEMPFILE_DYNAMICOBJECTS" | grep "range" | wc -l)
		OBJECT_FILE_NAME=$(find $CPDIR/database/downloads/ONLINE_SERVICES/1.0/ -type f -exec grep -l "$OBJECT_NAME" {} + | xargs stat --format="%Y %n" | sort -n | tail -n 1 | cut -d ' ' -f 2-)
		OBJECT_FILE_DATE=$(find $CPDIR/database/downloads/ONLINE_SERVICES/1.0/ -type f -exec grep -l "$OBJECT_NAME" {} + | xargs stat --format="%Y" | sort -n | tail -n 1 | cut -d ' ' -f 2-)
		OBJECT_FILE_DATE_DIFF="$(( EPOCH - OBJECT_FILE_DATE ))"
		if [[ $OBJECT_FILE_DATE_DIFF -lt "0" ]]; then
			OBJECT_FILE_DATE_DIFF="0"
		fi
		OBJECT_FILE_DATE_SINCE=$(conv_time $OBJECT_FILE_DATE_DIFF)
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_updatableObjectDetails - OBJECT_NAME=$OBJECT_NAME RANGE_QTY=$RANGE_QTY OBJECT_FILE_NAME=$OBJECT_FILE_NAME OBJECT_FILE_DATE=$OBJECT_FILE_DATE OBJECT_FILE_DATE_SINCE=$OBJECT_FILE_DATE_SINCE" >>$HISTORYLOG
		sendSyslog "$functionName" "INFO" "checkPolicySP_updatableObjectDetails" "OBJECT_NAME=\"$OBJECT_NAME\" RANGE_QTY=\"$RANGE_QTY\" OBJECT_FILE_NAME=\"$OBJECT_FILE_NAME\" OBJECT_FILE_DATE=\"$OBJECT_FILE_DATE\" OBJECT_FILE_DATE_SINCE=\"$OBJECT_FILE_DATE_SINCE\""
	done
	rm -f $TEMPFILE_DYNAMICOBJECTS
fi



checkPolicySP_geoEnabledLegacy=$(cat $FWDIR/state/local/FW1/local.set 2>&1 | grep -A2 "block_by_countries_protection" | grep "block_action" | grep "active" | grep -v "inactive" | wc -l)
#sk131852 
checkPolicySP_geoEnabled=$(cat $FWDIR/state/local/FW1/local.updatable_obj 2>&1 | grep "CP_GEO" | grep -v "name" | wc -l)
if [[ $checkPolicySP_geoEnabled -gt "1" ]]; then
		checkPolicySP_geoEnabled="1"
fi
if [[ $checkPolicySP_geoEnabledLegacy -eq "1" ]]; then
	#curl -k https://sc1.checkpoint.com/freud/IpToCountry.csv.gz
	#curl -k https://sc1.checkpoint.com/freud2/IpToCountry.csv.gz
	if [[ -f $FWDIR/tmp/geo_location_tmp/updates/IpToCountry.csv ]]; then
		checkPolicySP_geoDate=$(date -d "`stat -c %y "$FWDIR/tmp/geo_location_tmp/updates/IpToCountry.csv"`" +"%s")
		checkPolicySP_geoMd5=$(md5sum $FWDIR/tmp/geo_location_tmp/updates/IpToCountry.csv | awk '{print $1}')
	else
		checkPolicySP_geoDate=$(date -d "`stat -c %y "$FWDIR/conf/IpToCountry.csv"`" +"%s")
		checkPolicySP_geoMd5=$(md5sum $FWDIR/conf/IpToCountry.csv | awk '{print $1}')
	fi
	checkPolicySP_geoLegacyDateLastEditDiff="$(( EPOCH - checkPolicySP_geoDate ))"
	if [[ $checkPolicySP_geoDateLastEditDiff -lt "0" ]]; then
		checkPolicySP_geoLegacyDateLastEditDiff="0"
	fi
	checkPolicySP_geoLegacyDateLastEditSince=$(conv_time $checkPolicySP_geoLegacyDateLastEditDiff)
	checkPolicySP_geoLastUpdateTime="na"
	checkPolicySP_geoLastUpdateReason="na"
	checkPolicySP_geoLegacyCountryQty=$(cat $FWDIR/state/local/FW1/local.set 2>&1 | grep country_code | wc -l)
	checkPolicySP_geoLegacyRangeQty=$(fw tab -t geolocation_block_static_table -s 2>&1 | grep geolocation_block_static_table | awk '{print $4}')
fi
if [[ $checkPolicySP_geoEnabled -eq "1" ]]; then
	checkPolicySP_geoLastRevision=$(cat $CPDIR/database/downloads/ONLINE_SERVICES/1.0/last_revision.xml | grep "Last_Revision" | tr -d 'a-z<>/A-Z_')
	checkPolicySP_geoLastSuccess=$(cat $CPDIR/database/downloads/ONLINE_SERVICES/1.0/Update_Status.dat | grep "Success_Time" | awk -F "(" '{print $2}' | tr -d ')')
	checkPolicySP_geoLastSuccessDiff="$(( EPOCH - checkPolicySP_geoLastSuccess ))"
	if [[ $checkPolicySP_geoLastSuccessDiff -lt "0" ]]; then
		checkPolicySP_geoLastSuccessDiff="0"
	fi
	checkPolicySP_geoLastSuccessSince=$(conv_time $checkPolicySP_geoLastSuccessDiff)
	checkPolicySP_geoLastUpdateTime=$(cat $CPDIR/database/downloads/ONLINE_SERVICES/1.0/Update_Status.dat | grep "Last_Update_Time" | awk -F "(" '{print $2}' | tr -d ')')
	checkPolicySP_geoLastUpdateReason=$(cat $CPDIR/database/downloads/ONLINE_SERVICES/1.0/Update_Status.dat | grep "Last_Update_Reason" | awk -F "(" '{print $2}' | tr -d ')".')
	checkPolicySP_geoCountryQty=$($FWDIR/bin/dynamic_objects -uo_show | grep "GEO" | wc -l)
	checkPolicySP_geoRangeQty=$($FWDIR/bin/dynamic_objects -uo_show | grep "range" | wc -l)
fi

if [[ $checkPolicySP_geoEnabled -eq "1" ]]; then
	if [[ $checkPolicySP_geoLastSuccessDiff -gt "691200" ]]; then
		if [[ $SELF_HEAL_ENABLED -eq "1" ]]; then
	
			FIX="Manual Download Updatable Objects"
			COMMAND="$CPDIR/bin/unified_dl UPDATE ONLINE_SERVICES"
			BEFORE_FIX=$(cat $CPDIR/database/downloads/ONLINE_SERVICES/1.0/last_revision.xml | grep "Last_Revision" | tr -d 'a-z<>/A-Z_')
			if [[ $SELF_HEAL_CHRONIC -eq "1" ]]; then
				COMMAND_EXECUTION="bypassed due to SELF_HEAL_CHRONIC"
				checkPolicySP_warningInfo="$checkPolicySP_warningInfo [Self Heal Bypassed due to Chronic Issue - Manual Download Updatable Objects]"
			else
				COMMAND_EXECUTION=$($CPDIR/bin/unified_dl UPDATE ONLINE_SERVICES 2>&1)
				checkPolicySP_workingInfo="$checkPolicySP_workingInfo [Self Heal - Manual Download Updatable Objects]"
			fi
			AFTER_FIX=$(cat $CPDIR/database/downloads/ONLINE_SERVICES/1.0/last_revision.xml | grep "Last_Revision" | tr -d 'a-z<>/A-Z_')
			COMMAND=$(echo $COMMAND | tr -d '"')
			COMMAND_EXECUTION=$(echo $COMMAND_EXECUTION | tr '\n' ' ')

			echo "$HISTORYLOGPREAMBLE - $functionName - INFO - SELF_HEAL - FIX=$FIX COMMAND=$COMMAND COMMAND_EXECUTION=$COMMAND_EXECUTION BEFORE_FIX=$BEFORE_FIX AFTER_FIX=$AFTER_FIX" >>$HISTORYLOG
			#IFS=$ORIGIFS
			sendSyslog "$functionName" "INFO" "SELF_HEAL" "FIX=\"$FIX\" COMMAND=\"$COMMAND\" BEFORE_FIX=\"$BEFORE_FIX\" AFTER_FIX=\"$AFTER_FIX\" COMMAND_EXECUTION=\"$COMMAND_EXECUTION\""
			#IFS=$'\n'
			echo "$HISTORYLOGPREAMBLE - $functionName - INFO - SELF_HEAL - FIX=$FIX COMMAND=$COMMAND COMMAND_EXECUTION=$COMMAND_EXECUTION BEFORE_FIX=$BEFORE_FIX AFTER_FIX=$AFTER_FIX" >>$SELF_HEAL_LOG
		fi
	fi
fi

checkPolicySP_updatableObjNames=$($FWDIR/bin/dynamic_objects -uo_show | grep "object name : " | awk '{print $NF}' | sort -n | uniq | tr '\n' ' ')


if [[ -f $FWDIR/conf/f2fq.conf ]]; then
	checkPolicySP_f2fqEnabled=$(cat $FWDIR/conf/f2fq.conf | grep "enabled" | grep -v "#" | awk '{print $NF}')
	checkPolicySP_f2fqEnforced=$(cat $FWDIR/conf/f2fq.conf | grep "enforce" | grep -v "#" | awk '{print $NF}')
	checkPolicySP_f2fqLoadThreshold=$(cat $FWDIR/conf/f2fq.conf | grep "load_threshold" | grep -v "#" | awk '{print $NF}')
else
	checkPolicySP_f2fqEnabled="n/a"
	checkPolicySP_f2fqEnforced="n/a"
	checkPolicySP_f2fqLoadThreshold="n/a"
fi


if [[ -f $FWDIR/boot/modules/fwkern.conf ]]; then
	checkPolicySP_fwkernLastEdit=$(date -d "`stat -c %y "$FWDIR/boot/modules/fwkern.conf"`" +"%s")
	checkPolicySP_fwkernLastEditDiff="$(( EPOCH - checkPolicySP_fwkernLastEdit ))"
	if [[ $checkPolicySP_fwkernLastEditDiff -lt "0" ]]; then
		checkPolicySP_fwkernLastEditDiff="0"
	fi
	checkPolicySP_fwkernLastEditSince=$(conv_time $checkPolicySP_fwkernLastEditDiff)
	IFS=$'\n'
	for LINE in `cat $FWDIR/boot/modules/fwkern.conf` ; do
		PARAMETER=$(echo "$LINE" | awk -F "=" '{print $1}' | tr -d ' ')
		VALUE=$(echo "$LINE" | awk -F "=" '{print $2}' | tr -d ' ' | tr -d "'" | tr -d '"')
		RUNNINGVALUE0=$(fw ctl get int $PARAMETER 2>&1 | grep "Get operation failed" | wc -l)
		if [[ $RUNNINGVALUE0 -eq "0" ]]; then
			RUNNINGVALUETYPE="INT"
		else
			RUNNINGVALUE0=$(fw ctl get int $PARAMETER -a 2>&1 | grep -v "Get failed" | grep "PPAK" | wc -l)
			if [[ $RUNNINGVALUE0 -eq "1" ]]; then
				RUNNINGVALUETYPE="INTSXL"
			else
				RUNNINGVALUE0=$(fw ctl get str $PARAMETER 2>&1 | grep "Get operation failed" | wc -l)
				if [[ $RUNNINGVALUE0 -eq "0" ]]; then
					RUNNINGVALUETYPE="STR"
				else
					RUNNINGVALUETYPE="UNKNOWN"
				fi
			fi
		fi
		if [[ $RUNNINGVALUETYPE == "INT" ]]; then
			RUNNINGVALUE=$(fw ctl get int $PARAMETER | awk '{print $NF}' | head -1 | tr -d ' ')
		elif [[ $RUNNINGVALUETYPE == "INTSXL" ]]; then
			RUNNINGVALUE=$(fw ctl get int $PARAMETER -a 2>&1 | grep "PPAK" | awk '{print $NF}' | head -1 | tr -d ' ' | tr -d "'" | tr -d '"')
		elif [[ $RUNNINGVALUETYPE == "STR" ]]; then
			RUNNINGVALUE=$(fw ctl get str $PARAMETER | awk '{print $NF}' | head -1 | tr -d ' ' | tr -d "'" | tr -d '"')
		else
			RUNNINGVALUE="unknown"
		fi

		if [[ $VALUE != $RUNNINGVALUE ]]; then
			checkPolicySP_problem="1"
			checkPolicySP_problemInfo="$checkPolicySP_problemInfo [FW Kernel Parameter Mismatch ($PARAMETER Configured: $VALUE Running: $RUNNINGVALUE]"
		fi
		echo "checkPolicySP_fwkernRunning PARAMETER=$PARAMETER VALUE=$VALUE RUNNINGVALUE=$RUNNINGVALUE" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_fwkernRunning - PARAMETER=$PARAMETER VALUE=$VALUE RUNNINGVALUE=$RUNNINGVALUE" >>$HISTORYLOG
		IFS=$ORIGIFS
		sendSyslog "$functionName" "INFO" "checkPolicySP_fwkernRunning" "PARAMETER=\"$PARAMETER\" VALUE=\"$VALUE\" RUNNINGVALUE=\"$RUNNINGVALUE\""
		IFS=$'\n'
	done
	IFS=$ORIGIFS
	echo "checkPolicySP_fwkernLastEdit $checkPolicySP_fwkernLastEdit ($checkPolicySP_fwkernLastEditSince)" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_fwkernLastEdit - $checkPolicySP_fwkernLastEdit ($checkPolicySP_fwkernLastEditSince)" >>$HISTORYLOG
	sendSyslog "$functionName" "INFO" "checkPolicySP_fwkernLastEdit" "VALUE=\"$checkPolicySP_fwkernLastEdit\""
	sendSyslog "$functionName" "INFO" "checkPolicySP_fwkernLastEditSince" "VALUE=\"$checkPolicySP_fwkernLastEditSince\""
fi

if [[ -f $PPKDIR/conf/simkern.conf ]]; then
	checkPolicySP_simkernLastEdit=$(date -d "`stat -c %y "$PPKDIR/conf/simkern.conf"`" +"%s")
	checkPolicySP_simkernLastEditDiff="$(( EPOCH - checkPolicySP_simkernLastEdit ))"
	if [[ $checkPolicySP_simkernLastEditDiff -lt "0" ]]; then
		checkPolicySP_simkernLastEditDiff="0"
	fi
	checkPolicySP_simkernLastEditSince=$(conv_time $checkPolicySP_simkernLastEditDiff)
	IFS=$'\n'
	for LINE in `cat $PPKDIR/conf/simkern.conf | grep -v "#"` ; do
		PARAMETER=$(echo "$LINE" | awk -F "=" '{print $1}' | tr -d ' ')
		VALUE=$(echo "$LINE" | awk -F "=" '{print $2}' | tr -d ' ')
		RUNNINGVALUE=$(fw ctl get int $PARAMETER -a 2>&1 | grep "PPAK" | grep $PARAMETER | awk '{print $NF}' | head -1 | tr -d ' ')
		if [[ $VALUE != $RUNNINGVALUE ]]; then
			checkPolicySP_problem="1"
			checkPolicySP_problemInfo="$checkPolicySP_problemInfo [SecureXL Kernel Parameter Mismatch ($PARAMETER Configured: $VALUE Running: $RUNNINGVALUE]"
		fi
		echo "checkPolicySP_simkernRunning PARAMETER=$PARAMETER VALUE=$VALUE RUNNINGVALUE=$RUNNINGVALUE" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_simkernRunning - PARAMETER=$PARAMETER VALUE=$VALUE RUNNINGVALUE=$RUNNINGVALUE" >>$HISTORYLOG
		IFS=$ORIGIFS
		sendSyslog "$functionName" "INFO" "checkPolicySP_simkernRunning" "PARAMETER=\"$PARAMETER\" VALUE=\"$VALUE\" RUNNINGVALUE=\"$RUNNINGVALUE\""
		IFS=$'\n'
	done
	IFS=$ORIGIFS
	echo "checkPolicySP_simkernLastEdit $checkPolicySP_simkernLastEdit ($checkPolicySP_simkernLastEditSince)" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_simkernLastEdit - $checkPolicySP_simkernLastEdit ($checkPolicySP_simkernLastEditSince)" >>$HISTORYLOG
	sendSyslog "$functionName" "INFO" "checkPolicySP_simkernLastEdit" "VALUE=\"$checkPolicySP_simkernLastEdit\""
	sendSyslog "$functionName" "INFO" "checkPolicySP_simkernLastEditSince" "VALUE=\"$checkPolicySP_simkernLastEditSince\""
fi



checkPolicySP_proxyEnabled=$(cat $FWDIR/state/local/FW1/local.set | grep -A2 "use_proxy" | grep "val" | awk '{print $NF}' | tr -d '()')
if [[ $checkPolicySP_proxyEnabled == "true" ]]; then
	checkPolicySP_proxyIp=$(cat $FWDIR/state/local/FW1/local.set | grep -A30 "use_proxy" | grep -A2 "proxy_address" | grep "val" | awk '{print $NF}' | tr -d '()')
	checkPolicySP_proxyPort=$(cat $FWDIR/state/local/FW1/local.set | grep -A30 "use_proxy" | grep -A2 "proxy_port" | grep "val" | awk '{print $NF}' | tr -d '()')
	#checkPolicySP_proxyForwardingValue=$(cat $FWDIR/boot/modules/fwkern.conf | grep "mgmt_forwarding_tcp_ports_list_string" | awk -F "=" '{print $NF}' | tr -d '"' | tr -d "'" | tr -d ' ')
	checkPolicySP_proxyForwardingValue=$(fw ctl get str mgmt_forwarding_tcp_ports_list_string 2>&1 | grep "mgmt_forwarding_tcp_ports_list_string" | awk '{print $NF}' | tr -d '"' | tr -d "'" | tr -d ' ')
	if [[ $checkPolicySP_proxyForwardingValue == $checkPolicySP_proxyPort ]]; then
		checkPolicySP_proxyForwardingSet="1"
	else
		checkPolicySP_proxyForwardingSet="0"
	fi
else
	checkPolicySP_proxyIp="n/a"
	checkPolicySP_proxyPort="n/a"
	checkPolicySP_proxyForwardingSet="0"
fi
#checkPolicySP_cloudCrl="0"
checkPolicySP_cloudCheckDl3="0"
checkPolicySP_cloudCheckUpdates="0"
checkPolicySP_cloudCheckEntitlement="0"
checkPolicySP_cloudContract="0"
checkPolicySP_cloudLicense="0"
checkPolicySP_cloudGlobalSign="0"
checkPolicySP_cloudSc1="0"
checkPolicySP_cloudCws="0"
checkPolicySP_cloudTe="0"
checkPolicySP_cloudTeadv="0"
checkPolicySP_cloudThreatEmulation="0"


if [[ $LOCALSMO == "1" ]] || [[ $checkPolicySP_proxyForwardingSet == "1" ]]; then

	# #CRL
	# URI="http://crl.godaddy.com/"
	# checkPolicySP_cloudCrl=$(curl_output $checkPolicySP_proxyEnabled $checkPolicySP_proxyIp $checkPolicySP_proxyPort $URI | grep "<html>" | wc -l)
	#DL3
	URI="http://dl3.checkpoint.com/"
	checkPolicySP_cloudCheckDl3=$(curl_output $checkPolicySP_proxyEnabled $checkPolicySP_proxyIp $checkPolicySP_proxyPort $URI | grep "302 Moved Temporarily" | wc -l)
	#SR 6-0003560653
	#UPDATES
	URI="https://updates.checkpoint.com/"
	checkPolicySP_cloudCheckUpdates=$(curl_output $checkPolicySP_proxyEnabled $checkPolicySP_proxyIp $checkPolicySP_proxyPort $URI | grep "Page not found" | wc -l)
	#ENTITLEMENT
	URI="https://usercenter.checkpoint.com/"
	checkPolicySP_cloudCheckEntitlement=$(curl_output $checkPolicySP_proxyEnabled $checkPolicySP_proxyIp $checkPolicySP_proxyPort $URI | grep "<html>" | wc -l)
	#LICENSE
	URI="https://productservices.checkpoint.com"
	checkPolicySP_cloudLicense=$(curl_output $checkPolicySP_proxyEnabled $checkPolicySP_proxyIp $checkPolicySP_proxyPort $URI | grep "<html>\|403 Forbidden" | wc -l)
	#CONTRACT
	URI="https://productcoverage.checkpoint.com/ProductCoverageService"
	checkPolicySP_cloudContract=$(curl_output $checkPolicySP_proxyEnabled $checkPolicySP_proxyIp $checkPolicySP_proxyPort $URI | grep "HTTP/1.0 200 Connection established\|HTTP/1.1 405" | wc -l)
	if [[ $checkPolicySP_geoEnabledLegacy == "1" ]]; then
		#SC1
		URI="https://sc1.checkpoint.com/"
		checkPolicySP_cloudSc1=$(curl_output $checkPolicySP_proxyEnabled $checkPolicySP_proxyIp $checkPolicySP_proxyPort $URI | grep "<html>" | wc -l)
	fi

	#CRL-GLOBALSIGN
	URI="http://crl.globalsign.com/"
	checkPolicySP_cloudGlobalSign=$(curl_output $checkPolicySP_proxyEnabled $checkPolicySP_proxyIp $checkPolicySP_proxyPort $URI | grep "<html>" | wc -l)



	if [[ $checkSelf_bladeAb == "1" ]]; then
		#CWS
		URI="http://cws.checkpoint.com/Malware/SystemStatus/type/short"
		checkPolicySP_cloudCws=$(curl_output $checkPolicySP_proxyEnabled $checkPolicySP_proxyIp $checkPolicySP_proxyPort $URI | grep "allSystemsOK" | wc -l)
	fi

	if [[ $checkSelf_bladeTe -eq "1" ]] || [[ $checkSelf_bladeTx -eq "1" ]]; then
		
		#TE
		URI="https://te.checkpoint.com/tecloud/Ping"
		checkPolicySP_cloudTe=$(curl_output $checkPolicySP_proxyEnabled $checkPolicySP_proxyIp $checkPolicySP_proxyPort $URI | grep "Pong" | wc -l)

		#TEADV
		URI="http://teadv.checkpoint.com/version.txt"
		checkPolicySP_cloudTeadv=$(curl_output $checkPolicySP_proxyEnabled $checkPolicySP_proxyIp $checkPolicySP_proxyPort $URI | grep "202" | grep -v "<" | wc -l)
		
		#THREAT-EMULATION
		URI="https://threat-emulation.checkpoint.com/tecloud/Ping"
		checkPolicySP_cloudThreatEmulation=$(curl_output $checkPolicySP_proxyEnabled $checkPolicySP_proxyIp $checkPolicySP_proxyPort $URI | grep "Pong" | wc -l)
		
	fi

fi

if [[ $checkSelf_bladeAppi -eq "1" ]]; then
	# checkPolicySP_appiUpdateStatus=$(snmp 1.3.6.1.4.1.2620.1.39.2.1)
	# checkPolicySP_appiUpdateDescription=$(snmp 1.3.6.1.4.1.2620.1.39.2.2)
	# checkPolicySP_appiNextUpdateDescription=$(snmp 1.3.6.1.4.1.2620.1.39.2.3)
	# checkPolicySP_appiDbVersion=$(snmp 1.3.6.1.4.1.2620.1.39.2.4)
	checkPolicySP_appiUpdateStatus=$(stattestget 1.3.6.1.4.1.2620.1.39.2.1)
	checkPolicySP_appiUpdateDescription=$(stattestget 1.3.6.1.4.1.2620.1.39.2.2)
	checkPolicySP_appiNextUpdateDescription=$(stattestget 1.3.6.1.4.1.2620.1.39.2.3)
	checkPolicySP_appiDbVersion=$(stattestget 1.3.6.1.4.1.2620.1.39.2.4)
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_appiUpdateStatus - $checkPolicySP_appiUpdateStatus" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_appiUpdateDescription - $checkPolicySP_appiUpdateDescription" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_appiNextUpdateDescription - $checkPolicySP_appiNextUpdateDescription" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_appiDbVersion - $checkPolicySP_appiDbVersion" >>$HISTORYLOG
	sendSyslog "$functionName" "INFO" "checkPolicySP_abVersionDetails" "update_status=\"$checkPolicySP_abUpdateStatus\" update_description=\"$checkPolicySP_appiUpdateDescription\" next_update_description=\"$checkPolicySP_appiNextUpdateDescription\" db_version=\"$checkPolicySP_appiDbVersion\""

fi

if [[ $checkSelf_bladeAb -eq "1" ]]; then
	# checkPolicySP_abUpdateStatus=$(snmp 1.3.6.1.4.1.2620.1.46.1.1)
	# checkPolicySP_abUpdateDescription=$(snmp 1.3.6.1.4.1.2620.1.46.1.2)
	# checkPolicySP_abNextUpdateDescription=$(snmp 1.3.6.1.4.1.2620.1.46.1.3)
	# checkPolicySP_abDbVersion=$(snmp 1.3.6.1.4.1.2620.1.46.1.4)
	checkPolicySP_abUpdateStatus=$(stattestget 1.3.6.1.4.1.2620.1.46.1.1)
	checkPolicySP_abUpdateDescription=$(stattestget 1.3.6.1.4.1.2620.1.46.1.2)
	checkPolicySP_abNextUpdateDescription=$(stattestget 1.3.6.1.4.1.2620.1.46.1.3)
	checkPolicySP_abDbVersion=$(stattestget 1.3.6.1.4.1.2620.1.46.1.4)
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_abUpdateStatus - $checkPolicySP_abUpdateStatus" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_abUpdateDescription - $checkPolicySP_abUpdateDescription" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_abNextUpdateDescription - $checkPolicySP_abNextUpdateDescription" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_abDbVersion - $checkPolicySP_abDbVersion" >>$HISTORYLOG
	sendSyslog "$functionName" "INFO" "checkPolicySP_abVersionDetails" "update_status=\"$checkPolicySP_abUpdateStatus\" update_description=\"$checkPolicySP_abUpdateDescription\" next_update_description=\"$checkPolicySP_abNextUpdateDescription\" db_version=\"$checkPolicySP_abDbVersion\""
fi

if [[ $checkSelf_bladeAv -eq "1" ]]; then
	# checkPolicySP_avUpdateStatus=$(snmp 1.3.6.1.4.1.2620.1.46.5.1)	
	# checkPolicySP_avUpdateDescription=$(snmp 1.3.6.1.4.1.2620.1.46.5.2)
	# checkPolicySP_avNextUpdateDescription=$(snmp 1.3.6.1.4.1.2620.1.46.5.3)
	# checkPolicySP_avDbVersion=$(snmp 1.3.6.1.4.1.2620.1.46.5.4)
	checkPolicySP_avUpdateStatus=$(stattestget 1.3.6.1.4.1.2620.1.46.5.1)	
	checkPolicySP_avUpdateDescription=$(stattestget 1.3.6.1.4.1.2620.1.46.5.2)
	checkPolicySP_avNextUpdateDescription=$(stattestget 1.3.6.1.4.1.2620.1.46.5.3)
	checkPolicySP_avDbVersion=$(stattestget 1.3.6.1.4.1.2620.1.46.5.4)
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_avUpdateStatus - $checkPolicySP_avUpdateStatus" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_avUpdateDescription - $checkPolicySP_avUpdateDescription" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_avNextUpdateDescription - $checkPolicySP_avNextUpdateDescription" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_avDbVersion - $checkPolicySP_avDbVersion" >>$HISTORYLOG
	sendSyslog "$functionName" "INFO" "checkPolicySP_abVersionDetails" "update_status=\"$checkPolicySP_avUpdateStatus\" update_description=\"$checkPolicySP_avUpdateDescription\" next_update_description=\"$checkPolicySP_avNextUpdateDescription\" db_version=\"$checkPolicySP_avDbVersion\""
fi

if [[ $checkSelf_bladeUrlf -eq "1" ]]; then
	# checkPolicySP_urlfUpdateStatus=$(snmp 1.3.6.1.4.1.2620.1.43.2.1)	
	# checkPolicySP_urlfUpdateDescription=$(snmp 1.3.6.1.4.1.2620.1.43.2.2)
	# checkPolicySP_urlfNextUpdateDescription=$(snmp 1.3.6.1.4.1.2620.1.43.2.3)
	# checkPolicySP_urlfDbVersion=$(snmp 1.3.6.1.4.1.2620.1.43.2.4)
	checkPolicySP_urlfUpdateStatus=$(stattestget 1.3.6.1.4.1.2620.1.43.2.1)	
	checkPolicySP_urlfUpdateDescription=$(stattestget 1.3.6.1.4.1.2620.1.43.2.2)
	checkPolicySP_urlfNextUpdateDescription=$(stattestget 1.3.6.1.4.1.2620.1.43.2.3)
	checkPolicySP_urlfDbVersion=$(stattestget 1.3.6.1.4.1.2620.1.43.2.4)
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_urlfUpdateStatus - $checkPolicySP_urlfUpdateStatus" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_urlfUpdateDescription - $checkPolicySP_urlfUpdateDescription" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_urlfNextUpdateDescription - $checkPolicySP_urlfNextUpdateDescription" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_urlfDbVersion - $checkPolicySP_urlfDbVersion" >>$HISTORYLOG
	sendSyslog "$functionName" "INFO" "checkPolicySP_urlfVersionDetails" "update_status=\"$checkPolicySP_urlfUpdateStatus\" update_description=\"$checkPolicySP_urlfUpdateDescription\" next_update_description=\"$checkPolicySP_urlfNextUpdateDescription\" db_version=\"$checkPolicySP_urlfDbVersion\""
fi

if [[ $checkSelf_bladeTe -eq "1" ]]; then
	# checkPolicySP_teUpdateStatus=$(snmp  .1.3.6.1.4.1.2620.1.49.16)	
	# checkPolicySP_teUpdateDescription=$(snmp  .1.3.6.1.4.1.2620.1.49.17)
	checkPolicySP_teUpdateStatus=$(stattestget 1.3.6.1.4.1.2620.1.49.16)	
	checkPolicySP_teUpdateDescription=$(stattestget 1.3.6.1.4.1.2620.1.49.17)
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_teUpdateStatus - $checkPolicySP_teUpdateStatus" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_teUpdateDescription - $checkPolicySP_teUpdateDescription" >>$HISTORYLOG
	sendSyslog "$functionName" "INFO" "checkPolicySP_teVersionDetails" "update_status=\"$checkPolicySP_teUpdateStatus\" update_description=\"$checkPolicySP_teUpdateDescription\""
fi


#Threat Feeds
if [[ $checkSelf_bladeAb -eq "1" ]] && [[ $checkSelf_bladeAv -eq "1" ]]; then
	if [[ -e $FWDIR/state/local/AMW/local.IntelligenceFeed ]]; then
		checkPolicySP_threatFeedQty=$(cat $FWDIR/state/local/AMW/local.IntelligenceFeed | grep ": (" | wc -l)
	else
		checkPolicySP_threatFeedQty="0"
	fi
	if [[ $checkPolicySP_threatFeedQty -gt "0" ]]; then
		checkPolicySP_threatFeedInterval=$(cat $FWDIR/conf/ioc_feeder.conf | grep "interval" | awk '{print $2}' | tr -d '",')
		IFS=$'\n'
		for LINE in `cat $FWDIR/state/local/AMW/local.IntelligenceFeed | grep ": ("` ; do
			NAME=$(echo "$LINE" | awk -F "(" '{print $2}')
			RESOURCE=$(cat $FWDIR/state/local/AMW/local.IntelligenceFeed | grep -A35 $LINE | grep "resource" | awk '{print $2}' | tr -d '()"')
			ACTION=$(cat $FWDIR/state/local/AMW/local.IntelligenceFeed | grep -A35 $LINE | grep -A2 "action" | grep "Name" | awk '{print $2}' | tr -d '()"')
			ACTIVE=$(cat $FWDIR/state/local/AMW/local.IntelligenceFeed | grep -A35 $LINE | grep ":active" | awk '{print $2}' | tr -d '()"')
			INPUTNAME=$(cat $FWDIR/conf/ioc_feeder.conf 2>&1 | grep $NAME | grep "input_name" | grep "input_name" | awk '{print $2}' | tr -d '",')
			if [[ -e $FWDIR/external_ioc/$NAME/$INPUTNAME ]]; then
				FILELINES=$(cat $FWDIR/external_ioc/$NAME/$INPUTNAME | wc -l)
				FILEDATE=$(stat -c %Z $FWDIR/external_ioc/$NAME/$INPUTNAME)
				FILEDATESINCE=$(since_time_epoch $FILEDATE)
			else
				FILELINES="n/a"
				FILEDATE="n/a"
				FILEDATESINCE="n/a"
			fi
			echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_threatFeedDetail - NAME=$NAME RESOURCE=$RESOURCE ACTION=$ACTION ACTIVE=$ACTIVE FILELINES=$FILELINES FILEDATE=$FILEDATE FILEDATESINCE=$FILEDATESINCE" >>$HISTORYLOG
			IFS=$ORIGIFS
			sendSyslog "$functionName" "INFO" "checkPolicySP_threatFeedDetail" "NAME=\"$NAME\" RESOURCE=\"$RESOURCE\" ACTION=\"$ACTION\" ACTIVE=\"$ACTIVE\" FILELINES=\"$FILELINES\" FILEDATE=\"$FILEDATE\" FILEDATESINCE=\"$FILEDATESINCE\" INTERVAL=\"$checkPolicySP_threatFeedInterval\""
			IFS=$'\n'
		done
	IFS=$ORIGIFS
	fi
fi


#Domain Objects
fStartMs=$(date +%s%3N)
if [[ -f $FWDIR/state/local/FW1/local.domain ]]; then
	checkPolicySP_domainObjectEnabled="1"
else
	checkPolicySP_domainObjectEnabled="0"
fi
if [[ checkPolicySP_domainObjectEnabled -eq "1" ]]; then
	RESOLVED_IP_FAIL="0"
	IN_USE_COUNTER="0"
	checkPolicySP_domainObjectQty=$(cat $FWDIR/state/local/FW1/local.domain | grep " : (" | wc -l)
	IFS=$'\n'
	for LINE in `cat $FWDIR/state/local/FW1/local.domain | grep " : ("` ; do
		NAME=$(echo "$LINE" | awk -F "(" '{print $2}')
		NAME0=$(echo $NAME | sed 's/^\.//')
		RESOLVED_IP=$(domains_tool -d $NAME0 | grep -oP '\b(?:\d{1,3}\.){3}\d{1,3}\b' | sort -n | tr '\n' ',' | sed 's/,$//')
		IN_USE=$(cat $FWDIR/state/local/FW1/local.set $FWDIR/state/local/FW1/local.appfw_misc | grep $NAME | wc -l)
		
		if [[ $IN_USE -ge "1" ]]; then
			IN_USE="YES"
			#RULE_NUM_SET=$(awk -v search="$NAME" '{line[NR]=$0} $0 ~ search {for (i=NR-1;i>0;i--) {if (line[i] ~ ": \\(rule-") {print line[i]; break}}}' $FWDIR/state/local/FW1/local.set | awk -F "-" '{print $NF}')
			RULE_NUM_SET=$(cat $FWDIR/state/local/FW1/local.set | grep -A1000 "$NAME" | grep -m1 "unified_rulenum" | tr -dc "[0-9]")
			if [[ $RULE_NUM_SET != "" ]]; then
				RULE_NUM="ACCESS $RULE_NUM_SET"
			else
				RULE_NUM="ACCESS NA"
			fi
			RULE_NUM_APP=$(awk -v search="$NAME" '{line[NR]=$0} $0 ~ search {for (i=NR-1;i>0;i--) {if (line[i] ~ ":[0-9]+ \\(") {print line[i]; break}}}' $FWDIR/state/local/FW1/local.appfw_misc | awk '{print $1}' | tr -d ':')
			if [[ $RULE_NUM_APP != "" ]]; then
				if [[ $RULE_NUM_APP != "" ]]; then
					RULE_NUM="$RULE_NUM APPCTL $RULE_NUM_APP"
				else
					RULE_NUM="$RULE_NUM APPCTL NA"
				fi
			fi
			let IN_USE_COUNTER=$IN_USE_COUNTER+1
		elif [[ $IN_USE -eq "0" ]] && [[ $RESOLVED_IP != "" ]]; then
			IN_USE="LIKELY"
			#RULE_NUM_SET=$(awk -v search="$NAME" '{line[NR]=$0} $0 ~ search {for (i=NR-1;i>0;i--) {if (line[i] ~ ": \\(rule-") {print line[i]; break}}}' $FWDIR/state/local/FW1/local.set | awk -F "-" '{print $NF}')
			RULE_NUM_SET=$(cat $FWDIR/state/local/FW1/local.set | grep -A1000 "$NAME" | grep -m1 "unified_rulenum" | tr -dc "[0-9]")
			if [[ $RULE_NUM_SET != "" ]]; then
				RULE_NUM="ACCESS $RULE_NUM_SET"
			else
				RULE_NUM="ACCESS NA"
			fi
			RULE_NUM_APP=$(awk -v search="$NAME" '{line[NR]=$0} $0 ~ search {for (i=NR-1;i>0;i--) {if (line[i] ~ ":[0-9]+ \\(") {print line[i]; break}}}' $FWDIR/state/local/FW1/local.appfw_misc | awk '{print $1}' | tr -d ':')
			if [[ $RULE_NUM_APP != "" ]]; then
				RULE_NUM="$RULE_NUM APPCTL $RULE_NUM_APP"
			else
				RULE_NUM="$RULE_NUM APPCTL NA"
			fi
			
			let IN_USE_COUNTER=$IN_USE_COUNTER+1
		else
			IN_USE="NO"
		fi


		if [[ $IN_USE == "YES" || $IN_USE == "LIKELY" ]] && [[ $RESOLVED_IP = "" ]]; then
			let RESOLVED_IP_FAIL=$RESOLVED_IP_FAIL+1
		fi
		
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_domainObjectDetail - NAME=$NAME IN_USE=$IN_USE RULE_NUM=$RULE_NUM RESOLVED_IP=$RESOLVED_IP" >>$HISTORYLOG
		IFS=$ORIGIFS
		sendSyslog "$functionName" "INFO" "checkPolicySP_domainObjectDetail" "NAME=\"$NAME\" IN_USE=\"$IN_USE\" RULE_NUM=\"$RULE_NUM\" RESOLVED_IP=\"$RESOLVED_IP\""
		IFS=$'\n'
		
	done
	IFS=$ORIGIFS

fi

if [[ $RESOLVED_IP_FAIL -gt "0" ]]; then
	checkPolicySP_workingInfo="$checkPolicySP_workingInfo [Domain Object In-Use DNS Resolution $RESOLVED_IP_FAIL of $IN_USE_COUNTER Failed]"
fi

fEndMs=$(date +%s%3N)
fTotalMs=$(( fEndMs - fStartMs ))
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_fTotalMs - $fTotalMs (domain objects)" >>$HISTORYLOG


# SSL Inspection
checkPolicySP_sslTrustedCaUpdateLatest=$(cat $FWDIR/state/local/FW1/local.ssl_inspection | grep "trusted_ca_update_latest" | awk '{print $NF}' | tr -d '()')
checkPolicySP_sslTrustedCaIssuedByUniqQty=$(cat $FWDIR/state/local/FW1/local.ssl_inspection | grep "issued_by" | sort | uniq | wc -l)
checkPolicySP_sslTrustedCaIssuedByQty=$(cat $FWDIR/state/local/FW1/local.ssl_inspection | grep "issued_by" | wc -l)
checkPolicySP_sslTrustedCaIssuedToUniqQty=$(cat $FWDIR/state/local/FW1/local.ssl_inspection | grep "issued_to" | sort | uniq | wc -l)
checkPolicySP_sslTrustedCaIssuedToQty=$(cat $FWDIR/state/local/FW1/local.ssl_inspection | grep "issued_to" | wc -l)
checkPolicySP_sslTrustedCaAddedByUserQty=$(cat $FWDIR/state/local/FW1/local.ssl_inspection | grep "added_by" | grep "User" | wc -l)
checkPolicySP_sslTrustedCaAddedByCheckPointQty=$(cat $FWDIR/state/local/FW1/local.ssl_inspection | grep "added_by" | grep "Check Point" | wc -l)






#LOG OUTPUTS
echo "checkPolicySP_policyName $checkPolicySP_policyName" >>$RUNLOG
echo "checkPolicySP_policyRuleQty $checkPolicySP_policyRuleQty" >>$RUNLOG
echo "checkPolicySP_policyLoadTime0 $checkPolicySP_policyLoadTime0" >>$RUNLOG
echo "checkPolicySP_policyLoadTime $checkPolicySP_policyLoadTime" >>$RUNLOG
echo "checkPolicySP_policyCompileDetails $checkPolicySP_policyCompileDetails" >>$RUNLOG
echo "checkPolicySP_policyCompileTime $checkPolicySP_policyCompileTime" >>$RUNLOG
echo "checkPolicySP_ipsStatus $checkPolicySP_ipsStatus" >>$RUNLOG
echo "checkPolicySP_ipsProfile $checkPolicySP_ipsProfile" >>$RUNLOG
echo "checkPolicySP_ipsVersion $checkPolicySP_ipsVersion" >>$RUNLOG
echo "checkPolicySP_ipsBypassConfig $checkPolicySP_ipsBypassConfig" >>$RUNLOG
echo "checkPolicySP_ipsBypassActive $checkPolicySP_ipsBypassActive" >>$RUNLOG
echo "checkPolicySP_geoDate $checkPolicySP_geoEnabled" >>$RUNLOG
if [[ $checkPolicySP_geoEnabledLegacy == "1" ]]; then
	echo "checkPolicySP_geoDate $checkPolicySP_geoDate" >>$RUNLOG
	echo "checkPolicySP_geoLegacyDateLastEditSince $checkPolicySP_geoLegacyDateLastEditSince" >>$RUNLOG
	echo "checkPolicySP_geoMd5 $checkPolicySP_geoMd5" >>$RUNLOG
fi
echo "checkPolicySP_f2fqEnabled $checkPolicySP_f2fqEnabled" >>$RUNLOG
echo "checkPolicySP_f2fqEnforced $checkPolicySP_f2fqEnforced" >>$RUNLOG
echo "checkPolicySP_f2fqLoadThreshold $checkPolicySP_f2fqLoadThreshold" >>$RUNLOG
echo "checkPolicySP_ckpMutexQty $checkPolicySP_ckpMutexQty" >>$RUNLOG


if [[ $LOCALSMO == "1" ]]; then
	echo "checkPolicySP_policyAccepted $checkPolicySP_policyAccepted" >>$RUNLOG
	echo "checkPolicySP_policyDropped $checkPolicySP_policyDropped" >>$RUNLOG
	echo "checkPolicySP_policyRejected $checkPolicySP_policyRejected" >>$RUNLOG
	echo "checkPolicySP_policyDroppedRate $checkPolicySP_policyDroppedRate" >>$RUNLOG
	echo "checkPolicySP_policyIpsDropped $checkPolicySP_policyIpsDropped" >>$RUNLOG
	echo "checkPolicySP_policyIpsDroppedRate $checkPolicySP_policyIpsDroppedRate" >>$RUNLOG

	if [[ $checkSelf_ipv6Enabled == "1" ]] && [[ $checkSelf_ipv6Configured != "0" ]]; then
		echo "checkPolicySP_policyIpv6Accepted $checkPolicySP_policyIpv6Accepted" >>$RUNLOG
		echo "checkPolicySP_policyIpv6Dropped $checkPolicySP_policyIpv6Dropped" >>$RUNLOG
		echo "checkPolicySP_policyIpv6Rejected $checkPolicySP_policyIpv6Rejected" >>$RUNLOG
	fi
	echo "checkPolicySP_proxyEnabled $checkPolicySP_proxyEnabled" >>$RUNLOG
	if [[ $checkPolicySP_proxyEnabled == "true" ]]; then
		echo "checkPolicySP_proxyIp $checkPolicySP_proxyIp" >>$RUNLOG
		echo "checkPolicySP_proxyPort $checkPolicySP_proxyPort" >>$RUNLOG
	fi
	echo "checkPolicySP_cloudCheckDl3 $checkPolicySP_cloudCheckDl3" >>$RUNLOG
	echo "checkPolicySP_cloudCheckUpdates $checkPolicySP_cloudCheckUpdates" >>$RUNLOG
	echo "checkPolicySP_cloudCheckEntitlement $checkPolicySP_cloudCheckEntitlement" >>$RUNLOG
	echo "checkPolicySP_cloudLicense $checkPolicySP_cloudLicense" >>$RUNLOG
	echo "checkPolicySP_cloudContract $checkPolicySP_cloudContract" >>$RUNLOG
	if [[ $checkPolicySP_geoEnabledLegacy == "1" ]]; then
		echo "checkPolicySP_cloudSc1 $checkPolicySP_cloudSc1" >>$RUNLOG
	fi

	if [[ $checkSelf_bladeAb == "1" ]]; then
		echo "checkPolicySP_cloudCws $checkPolicySP_cloudCws" >>$RUNLOG
	fi
	echo "checkPolicySP_cloudGlobalSign $checkPolicySP_cloudGlobalSign" >>$RUNLOG
fi


echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Name - $checkPolicySP_policyName" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Rule Qty - $checkPolicySP_policyRuleQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Load Time - $checkPolicySP_policyLoadTime" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Compile Time - $checkPolicySP_policyCompileTime" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Time Since Load - $checkPolicySP_policyTimeSinceLoad ($checkPolicySP_policyTimeSinceLoad0)" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Time Since Compile - $checkPolicySP_policyTimeSinceCompile ($checkPolicySP_policyTimeSinceCompile0)" >>$HISTORYLOG

echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_ipsStatus - $checkPolicySP_ipsStatus" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_ipsProfile - $checkPolicySP_ipsProfile" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_ipsVersion - $checkPolicySP_ipsVersion" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_ipsBypassConfig - $checkPolicySP_ipsBypassConfig" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_ipsBypassTrack - $checkPolicySP_ipsBypassTrack" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_ipsBypassActive - $checkPolicySP_ipsBypassActive" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_corexlFullyUtilizedDrops - $checkPolicySP_corexlFullyUtilizedDrops" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_geoEnabledLegacy - $checkPolicySP_geoEnabledLegacy" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_geoEnabled - $checkPolicySP_geoEnabled" >>$HISTORYLOG
if [[ $checkPolicySP_geoEnabledLegacy == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_geoDate - $checkPolicySP_geoDate" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_geoLegacyDateLastEditSince - $checkPolicySP_geoLegacyDateLastEditSince" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_geoMd5 - $checkPolicySP_geoMd5" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_geoLegacyCountryQty - $checkPolicySP_geoLegacyCountryQty" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_geoLegacyRangeQty - $checkPolicySP_geoLegacyRangeQty" >>$HISTORYLOG
fi
if [[ $checkPolicySP_geoEnabled == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_geoLastRevision - $checkPolicySP_geoLastRevision" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_geoLastSuccess - $checkPolicySP_geoLastSuccess" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_geoLastSuccessDiff - $checkPolicySP_geoLastSuccessDiff" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_geoLastSuccessSince - $checkPolicySP_geoLastSuccessSince" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_geoLastUpdateTime - $checkPolicySP_geoLastUpdateTime" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_geoLastUpdateReason - $checkPolicySP_geoLastUpdateReason" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_geoCountryQty - $checkPolicySP_geoCountryQty" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_geoRangeQty - $checkPolicySP_geoRangeQty" >>$HISTORYLOG
fi
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_f2fqEnabled - $checkPolicySP_f2fqEnabled" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_f2fqEnforced - $checkPolicySP_f2fqEnforced" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_f2fqLoadThreshold - $checkPolicySP_f2fqLoadThreshold" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_ckpMutexQty - $checkPolicySP_ckpMutexQty" >>$HISTORYLOG

if [[ $LOCALSMO == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Policy Counters - ACCEPTED=$checkPolicySP_policyAccepted DROPPED=$checkPolicySP_policyDropped REJECTED=$checkPolicySP_policyRejected " >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_policyDropped - $checkPolicySP_policyDropped" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_policyDroppedRate - $checkPolicySP_policyDroppedRate" >>$HISTORYLOG
fi
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_proxyEnabled - $checkPolicySP_proxyEnabled" >>$HISTORYLOG
if [[ $checkPolicySP_proxyEnabled == "true" ]]; then
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_proxyIp - $checkPolicySP_proxyIp" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_proxyPort - $checkPolicySP_proxyPort" >>$HISTORYLOG
fi
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_cloudCheckDl3 - $checkPolicySP_cloudCheckDl3" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_cloudCheckUpdates - $checkPolicySP_cloudCheckUpdates" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_cloudCheckEntitlement - $checkPolicySP_cloudCheckEntitlement" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_cloudLicense - $checkPolicySP_cloudLicense" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_cloudContract - $checkPolicySP_cloudContract" >>$HISTORYLOG
if [[ $checkPolicySP_geoEnabledLegacy == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_cloudSc1 - $checkPolicySP_cloudSc1" >>$HISTORYLOG
fi
# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_cloudCrl - $checkPolicySP_cloudCrl" >>$HISTORYLOG

if [[ $checkSelf_bladeAb == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_cloudCws - $checkPolicySP_cloudCws" >>$HISTORYLOG
fi
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_cloudGlobalSign - $checkPolicySP_cloudGlobalSign" >>$HISTORYLOG
if [[ $checkSelf_bladeTe -eq "1" ]] || [[ $checkSelf_bladeTx -eq "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_cloudTe - $checkPolicySP_cloudTe" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_cloudTeadv - $checkPolicySP_cloudTeadv" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_cloudThreatEmulation - $checkPolicySP_cloudThreatEmulation" >>$HISTORYLOG
fi
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_updatableObjNames - $checkPolicySP_updatableObjNames" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_threatFeedQty - $checkPolicySP_threatFeedQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_threatFeedInterval - $checkPolicySP_threatFeedInterval" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_domainObjectEnabled - $checkPolicySP_domainObjectEnabled" >>$HISTORYLOG
if [[ $checkPolicySP_domainObjectEnabled -eq "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_domainObjectQty - $checkPolicySP_domainObjectQty" >>$HISTORYLOG
fi
if [[ $checkSelf_ipv6Enabled == "1" ]] && [[ $checkSelf_ipv6Configured != "0" ]]; then
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Policy Counters IPv6 - ACCEPTED=$checkPolicySP_policyIpv6Accepted DROPPED=$checkPolicySP_policyIpv6Dropped REJECTED=$checkPolicySP_policyIpv6Rejected" >>$HISTORYLOG
fi
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_sslTrustedCaUpdateLatest - $checkPolicySP_sslTrustedCaUpdateLatest" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_sslTrustedCaIssuedByUniqQty - $checkPolicySP_sslTrustedCaIssuedByUniqQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_sslTrustedCaIssuedByQty - $checkPolicySP_sslTrustedCaIssuedByQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_sslTrustedCaIssuedToUniqQty - $checkPolicySP_sslTrustedCaIssuedToUniqQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_sslTrustedCaIssuedToQty - $checkPolicySP_sslTrustedCaIssuedToQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_sslTrustedCaAddedByUserQty - $checkPolicySP_sslTrustedCaAddedByUserQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_sslTrustedCaAddedByCheckPointQty - $checkPolicySP_sslTrustedCaAddedByCheckPointQty" >>$HISTORYLOG



#RUN LOGIC

LASTRUNACCEPTED=$(cat $CURRENTRUNHISTORYLOGOUTPUT | grep checkPolicySP | grep INFO | grep "Policy Counters" | grep -v "IPv6" | head -1 | awk '{print $14}' |sed 's/[^=]*=//' | tr -dc '0-9')
if [[ $LASTRUNACCEPTED == "" ]]; then
	LASTRUNACCEPTED=$ACCEPTED
fi
LASTRUNDROPPED=$(cat $CURRENTRUNHISTORYLOGOUTPUT | grep checkPolicySP | grep INFO | grep "Policy Counters" | grep -v "IPv6" | head -1 | awk '{print $15}' |sed 's/[^=]*=//' | tr -dc '0-9')
if [[ $LASTRUNDROPPED == "" ]]; then
	LASTRUNDROPPED=$DROPPED
fi		
LASTRUNREJECTED=$(cat $CURRENTRUNHISTORYLOGOUTPUT | grep checkPolicySP | grep INFO | grep "Policy Counters" | grep -v "IPv6" | head -1 | awk '{print $16}' |sed 's/[^=]*=//' | tr -dc '0-9')
if [[ $LASTRUNREJECTED == "" ]]; then
	LASTRUNREJECTED=$REJECTED
fi	
LASTRUNLINECOUNTERS="LASTRUN ACCEPTED=$LASTRUNACCEPTED DROPPED=$LASTRUNDROPPED REJECTED=$LASTRUNREJECTED"

if [[ $checkPolicySP_policyAccepted -le $LASTRUNACCEPTED ]]; then
	LASTRUNACCEPTED="0"
fi
if [[ $checkPolicySP_policyDropped -le $LASTRUNDROPPED ]]; then
	LASTRUNDROPPED="0"
fi
if [[ $checkPolicySP_policyRejected -le $LASTRUNREJECTED ]]; then
	LASTRUNREJECTED="0"
fi

LASTRUNDIFFACCEPTED="$(( checkPolicySP_policyAccepted - LASTRUNACCEPTED ))"
LASTRUNDIFFDROPPED="$(( checkPolicySP_policyDropped - LASTRUNDROPPED ))"
LASTRUNDIFFREJECTED="$(( checkPolicySP_policyRejected - LASTRUNREJECTED ))"
LASTRUNLINEDIFFCOUNTERS="DIFF ACCEPTED=$LASTRUNDIFFACCEPTED DROPPED=$LASTRUNDIFFDROPPED REJECTED=$LASTRUNDIFFREJECTED"

RATEACCEPTED="$(( (checkPolicySP_policyAccepted - LASTRUNACCEPTED) / SINCELASTRUN ))"
RATEDROPPED="$(( (checkPolicySP_policyDropped - LASTRUNDROPPED) / SINCELASTRUN ))"
RATEREJECTED="$(( (checkPolicySP_policyRejected - LASTRUNREJECTED) / SINCELASTRUN ))"
RATECOUNTERS="RATE ACCEPTED=$RATEACCEPTED DROPPED=$RATEDROPPED REJECTED=$RATEREJECTED"

echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_lastrunCounters $LASTRUNLINECOUNTERS" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_diffCounters $LASTRUNLINEDIFFCOUNTERS" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_rateCounters $RATECOUNTERS" >>$HISTORYLOG

if [[ $checkSelf_ipv6Enabled == "1" ]] && [[ $checkSelf_ipv6Configured != "0" ]]; then
	
	LASTRUNACCEPTEDIPV6=$(cat $CURRENTRUNHISTORYLOGOUTPUT | grep checkPolicySP | grep INFO | grep "Policy Counters IPv6" | head -1 | awk '{print $15}' |sed 's/[^=]*=//' | tr -dc '0-9')
	if [[ $LASTRUNACCEPTEDIPV6 == "" ]]; then
			LASTRUNACCEPTEDIPV6=$ACCEPTEDIPV6
	fi	
	LASTRUNDROPPEDIPV6=$(cat $CURRENTRUNHISTORYLOGOUTPUT | grep checkPolicySP | grep INFO | grep "Policy Counters IPv6" | head -1 | awk '{print $16}' |sed 's/[^=]*=//' | tr -dc '0-9')
	if [[ $LASTRUNDROPPEDIPV6 == "" ]]; then
			LASTRUNDROPPEDIPV6=$DROPPEDIPV6
	fi	
	LASTRUNREJECTEDIPV6=$(cat $CURRENTRUNHISTORYLOGOUTPUT | grep checkPolicySP | grep INFO | grep "Policy Counters IPv6" | head -1 | awk '{print $17}' |sed 's/[^=]*=//' | tr -dc '0-9')
	if [[ $LASTRUNREJECTEDIPV6 == "" ]]; then
			LASTRUNREJECTEDIPV6=$REJECTEDIPV6
	fi	
	LASTRUNLINECOUNTERSIPV6="LASTRUNIPV6 ACCEPTEDIPV6=$LASTRUNACCEPTEDIPV6 DROPPEDIPV6=$LASTRUNDROPPEDIPV6 REJECTEDIPV6=$LASTRUNREJECTEDIPV6"


	LASTRUNDIFFACCEPTEDIPV6="$(( checkPolicySP_policyIpv6Accepted - LASTRUNACCEPTEDIPV6 ))"
	LASTRUNDIFFDROPPEDIPV6="$(( checkPolicySP_policyIpv6Dropped - LASTRUNDROPPEDIPV6 ))"
	LASTRUNDIFFREJECTEDIPV6="$(( checkPolicySP_policyIpv6Rejected - LASTRUNREJECTEDIPV6 ))"
	LASTRUNLINEDIFFCOUNTERSIPV6="DIFFIPV6 ACCEPTEDIPV6=$LASTRUNDIFFACCEPTEDIPV6 DROPPEDIPV6=$LASTRUNDIFFDROPPEDIPV6 REJECTEDIPV6=$LASTRUNDIFFREJECTEDIPV6"
	
	RATEACCEPTEDIPV6="$(( (checkPolicySP_policyIpv6Accepted - LASTRUNACCEPTEDIPV6) / SINCELASTRUN ))"
	RATEDROPPEDIPV6="$(( (checkPolicySP_policyIpv6Dropped - LASTRUNDROPPEDIPV6) / SINCELASTRUN ))"
	RATEREJECTEDIPV6="$(( (checkPolicySP_policyIpv6Rejected - LASTRUNREJECTEDIPV6) / SINCELASTRUN ))"
	RATECOUNTERSIPV6="RATEIPV6 ACCEPTEDIPV6=$RATEACCEPTEDIPV6 DROPPEDIPV6=$RATEDROPPEDIPV6 REJECTEDIPV6=$RATEREJECTEDIPV6"
	
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_lastrunCountersIpv6 $LASTRUNLINECOUNTERSIPV6" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_diffCountersIpv6 $LASTRUNLINEDIFFCOUNTERSIPV6" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_rateCountersIpv6 $RATECOUNTERSIPV6" >>$HISTORYLOG
fi	
	

if [[ $checkPolicySP_policyName == "" ]] || [[ $checkPolicySP_policyName == "InitialPolicy" ]] || [[ $checkPolicySP_policyName == "defaultfilter" ]]; then
        echo "Logic - policyName: FAIL" >>$RUNLOG
        echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Policy name - $checkPolicySP_policyName" >>$HISTORYLOG
        checkPolicySP_problem="1"
		checkPolicySP_problemInfo="$checkPolicySP_problemInfo [Name: $checkPolicySP_policyName, Rules: $checkPolicySP_policyRuleQty, Last Change: $checkPolicySP_policyTimeSinceCompile ago]"
else
        echo "Logic - policyName: PASS" >>$RUNLOG
        echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Policy name - $checkPolicySP_policyName" >>$HISTORYLOG
		checkPolicySP_workingInfo="$checkPolicySP_workingInfo [Name: $checkPolicySP_policyName, Rules: $checkPolicySP_policyRuleQty, Last Change: $checkPolicySP_policyTimeSinceCompile ago]"
		
fi


if [[ $checkPolicySP_ipsBypassConfig == "Enabled" && $checkPolicySP_ipsBypassActive == "Yes" ]]; then
	checkPolicySP_warningInfo="$checkPolicySP_warningInfo [IPS Bypass: On]"
fi

if [[ $checkPolicySP_geoEnabledLegacy == "1" ]]; then
	if [[ $checkPolicySP_geoLegacyDateLastEditDiff -gt "2592000" ]]; then
		if [[ $checkPolicySP_geoMd5 == "d3dd4e3df9ae369afb6e2a2dbb41b482" ]]; then
			#checkPolicySP_problem="1"
			#Check Point bug under SR 6-0001878388
			checkPolicySP_problemInfo="$checkPolicySP_problemInfo [GeoIP Database using legacy due to SR 6-0001878388: $checkPolicySP_geoLegacyDateLastEditSince]"
		else
			checkPolicySP_problem="1"
			checkPolicySP_problemInfo="$checkPolicySP_problemInfo [GeoIP Database old: $checkPolicySP_geoLegacyDateLastEditSince]"
		fi
	fi
fi

if [[ $checkPolicySP_geoEnabled -eq "1" ]]; then
	if [[ $checkPolicySP_geoLastSuccessDiff -gt "691200" ]]; then
		checkPolicySP_problem="1"
		checkPolicySP_problemInfo="$checkPolicySP_problemInfo [GeoIP Database old: $checkPolicySP_geoLastSuccessSince]"
	fi
fi

if [[ $LOCALSMO == "1" ]] || [[ $checkPolicySP_proxyForwardingSet == "1" ]]; then

	if [[ $checkPolicySP_cloudCheckDl3 -eq "0" ]]; then
		echo "Logic - cloud: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - checkPolicySP_cloudCheckDetails - DL3=$checkPolicySP_cloudCheckDl3" >>$HISTORYLOG
		checkPolicySP_warning="1"
		checkPolicySP_warningInfo="$checkPolicySP_warningInfo [Cloud Service Check Failed (DL3)]"
	else
		echo "Logic - cloud: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkPolicySP_cloudCheckDetails - DL3=$checkPolicySP_cloudCheckDl3" >>$HISTORYLOG
	fi

	
	if [[ $checkPolicySP_cloudCheckUpdates -eq "0" ]]; then
		echo "Logic - cloud: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - checkPolicySP_cloudCheckDetails - UPDATES=$checkPolicySP_cloudCheckUpdates" >>$HISTORYLOG
		checkPolicySP_warning="1"
		checkPolicySP_warningInfo="$checkPolicySP_warningInfo [Cloud Service Check Failed (UPDATES)]"
	else
		echo "Logic - cloud: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkPolicySP_cloudCheckDetails - UPDATES=$checkPolicySP_cloudCheckUpdates" >>$HISTORYLOG
	fi
	if [[ $checkPolicySP_cloudCheckEntitlement -eq "0" ]]; then
		echo "Logic - cloud: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - checkPolicySP_cloudCheckDetails - ENTITLEMENT=$checkPolicySP_cloudCheckEntitlement" >>$HISTORYLOG
		checkPolicySP_warning="1"
		checkPolicySP_warningInfo="$checkPolicySP_warningInfo [Cloud Service Check Failed (ENTITLEMENT)]"
	else
		echo "Logic - cloud: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkPolicySP_cloudCheckDetails - ENTITLEMENT=$checkPolicySP_cloudCheckEntitlement" >>$HISTORYLOG
	fi
	if [[ $checkPolicySP_cloudLicense -eq "0" ]]; then
		echo "Logic - cloud: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - checkPolicySP_cloudCheckDetails - LICENSE=$checkPolicySP_cloudLicense" >>$HISTORYLOG
		checkPolicySP_warning="1"
		checkPolicySP_warningInfo="$checkPolicySP_warningInfo [Cloud Service Check Failed (LICENSE)]"
	else
		echo "Logic - cloud: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkPolicySP_cloudCheckDetails - LICENSE=$checkPolicySP_cloudLicense" >>$HISTORYLOG
	fi
	if [[ $checkPolicySP_cloudContract -eq "0" ]]; then
		echo "Logic - cloud: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - checkPolicySP_cloudCheckDetails - CONTRACT=$checkPolicySP_cloudContract" >>$HISTORYLOG
		checkPolicySP_warning="1"
		checkPolicySP_warningInfo="$checkPolicySP_warningInfo [Cloud Service Check Failed (CONTRACT)]"
	else
		echo "Logic - cloud: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkPolicySP_cloudCheckDetails - CONTRACT=$checkPolicySP_cloudContract" >>$HISTORYLOG
	fi
	if [[ $checkPolicySP_geoEnabledLegacy == "1" ]]; then
		if [[ $checkPolicySP_cloudSc1 != "1" ]] ; then
			echo "Logic - cloud: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - checkPolicySP_cloudSc1 - SC1=$checkPolicySP_cloudSc1" >>$HISTORYLOG
			checkPolicySP_warning="1"
			checkPolicySP_warningInfo="$checkPolicySP_warningInfo [Cloud Service Check Failed (SC1)]"
		else
			echo "Logic - cloud: PASS" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkPolicySP_cloudSc1 - SC1=$checkPolicySP_cloudSc1" >>$HISTORYLOG
		fi
	fi

	if [[ $checkSelf_bladeAb == "1" ]]; then
		if [[ $checkPolicySP_cloudCws != "1" ]] ; then
			echo "Logic - cloud: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - checkPolicySP_cloudCheckDetails - CWS=$checkPolicySP_cloudCws" >>$HISTORYLOG
			checkPolicySP_warning="1"
			checkPolicySP_warningInfo="$checkPolicySP_warningInfo [Cloud Service Check Failed (CWS)]"
		else
			echo "Logic - cloud: PASS" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkPolicySP_cloudCheckDetails - CWS=$checkPolicySP_cloudCws" >>$HISTORYLOG
		fi
	fi

	if [[ $checkPolicySP_cloudGlobalSign -eq "0" ]]; then
		echo "Logic - cloud: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - checkPolicySP_cloudCheckDetails - CRL-GlobalSign=$checkPolicySP_cloudGlobalSign" >>$HISTORYLOG
		checkPolicySP_warning="1"
		checkPolicySP_warningInfo="$checkPolicySP_warningInfo [Cloud Service Check Failed (CRL-GlobalSign)]"
	else
		echo "Logic - cloud: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkPolicySP_cloudCheckDetails - CRL-GlobalSign=$checkPolicySP_cloudGlobalSign" >>$HISTORYLOG
	fi
		
	if [[ $checkSelf_bladeTe -eq "1" ]] || [[ $checkSelf_bladeTx -eq "1" ]]; then
		if [[ $checkPolicySP_cloudTe != "1" ]] ; then
			echo "Logic - cloud: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - checkPolicySP_cloudCheckDetails - TE=$checkPolicySP_cloudTe" >>$HISTORYLOG
			checkPolicySP_warning="1"
			checkPolicySP_warningInfo="$checkPolicySP_warningInfo [Cloud Service Check Failed (TE)]"
		else
			echo "Logic - cloud: PASS" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkPolicySP_cloudCheckDetails - TE=$checkPolicySP_cloudTe" >>$HISTORYLOG
		fi
		if [[ $checkPolicySP_cloudTeadv != "1" ]] ; then
			echo "Logic - cloud: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - checkPolicySP_cloudCheckDetails - TEADV=$checkPolicySP_cloudTeadv" >>$HISTORYLOG
			checkPolicySP_warning="1"
			checkPolicySP_warningInfo="$checkPolicySP_warningInfo [Cloud Service Check Failed (TEADV)]"
		else
			echo "Logic - cloud: PASS" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkPolicySP_cloudCheckDetails - TEADV=$checkPolicySP_cloudTeadv" >>$HISTORYLOG
		fi
		if [[ $checkPolicySP_cloudThreatEmulation != "1" ]] ; then
			echo "Logic - cloud: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - checkPolicySP_cloudCheckDetails - THREATEMULATION=$checkPolicySP_cloudThreatEmulation" >>$HISTORYLOG
			checkPolicySP_warning="1"
			checkPolicySP_warningInfo="$checkPolicySP_warningInfo [Cloud Service Check Failed (THREATEMULATION)]"
		else
			echo "Logic - cloud: PASS" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkPolicySP_cloudCheckDetails - THREATEMULATION=$checkPolicySP_cloudThreatEmulation" >>$HISTORYLOG
		fi
	fi

else
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkPolicySP_cloudCheckDetails - Proxy enabled but mgmt_forwarding_tcp_ports_list_string not configured - Bypass Check" >>$HISTORYLOG
	checkPolicySP_workingInfo="$checkPolicySP_workingInfo [Cloud Service Check Bypassed]"
fi
if [[ $checkPolicySP_dnsClish != $checkPolicySP_dnsWebui ]]; then
	echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - checkPolicySP_dns - CLISH=$checkPolicySP_dnsClish KERNEL=$checkPolicySP_dnsWebui" >>$HISTORYLOG
	checkPolicySP_warning="1"
	checkPolicySP_warningInfo="$checkPolicySP_warningInfo [DNS Server not loaded (CLISH=$checkPolicySP_dnsClish KERNEL=$checkPolicySP_dnsWebui)]"
else
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkPolicySP_dns - CLISH=$checkPolicySP_dnsClish KERNEL=$checkPolicySP_dnsWebui" >>$HISTORYLOG
fi



#SYSLOG
if [[ $checkPolicySP_problem == "1" ]]; then
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "PROBLEM" "checkPolicySP_problemInfo" "VALUE=\"$checkPolicySP_problemInfo $checkPolicySP_warningInfo $checkPolicySP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "PROBLEM" "checkPolicySP_problemInfo" "VALUE=\"$checkPolicySP_problemInfo $checkPolicySP_warningInfo $checkPolicySP_workingInfo\""
	fi
elif [[ $checkPolicySP_warning == "1" ]]; then
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "WARNING" "checkPolicySP_problemInfo" "VALUE=\"$checkPolicySP_warningInfo $checkPolicySP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "WARNING" "checkPolicySP_problemInfo" "VALUE=\"$checkPolicySP_warningInfo $checkPolicySP_workingInfo\""
	fi
else
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "WORKING" "checkPolicySP_problemInfo" "VALUE=\"$checkPolicySP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "WORKING" "checkPolicySP_problemInfo" "VALUE=\"$checkPolicySP_workingInfo\""
	fi
fi

if [[ $LOCALSMO == "1" ]]; then
	sendSyslog "$functionName" "INFO" "checkPolicySP_policyDetails" "POLICYNAME=\"$checkPolicySP_policyName\" COMPILETIME=\"$checkPolicySP_policyCompileTime\" LOADTIME=\"$checkPolicySP_policyLoadTime\" RULEQTY=\"$checkPolicySP_policyRuleQty\" DOMAIN=\"$CMANAME\"" "SMO"
	sendSyslog "$functionName" "INFO" "checkPolicySP_policyName" "VALUE=\"$checkPolicySP_policyName\"" "SMO"
	sendSyslog "$functionName" "INFO" "checkPolicySP_policyRuleQty" "VALUE=\"$checkPolicySP_policyRuleQty\"" "SMO"
	sendSyslog "$functionName" "INFO" "checkPolicySP_policyLoadTime" "VALUE=\"$checkPolicySP_policyLoadTime\"" "SMO"
	sendSyslog "$functionName" "INFO" "checkPolicySP_policyCompileDetails" "VALUE=\"$checkPolicySP_policyCompileDetails\"" "SMO"
	sendSyslog "$functionName" "INFO" "checkPolicySP_policyCompileTime" "VALUE=\"$checkPolicySP_policyCompileTime\"" "SMO"
	sendSyslog "$functionName" "INFO" "checkPolicySP_policyDroppedRate" "VALUE=\"$checkPolicySP_policyDroppedRate\"" "SMO"
	sendSyslog "$functionName" "INFO" "checkPolicySP_policyDroppedRate" "VALUE=\"$checkPolicySP_policyDroppedRate\"" "SMO"
fi
sendSyslog "$functionName" "INFO" "checkPolicySP_ipsVersion" "VALUE=\"$checkPolicySP_ipsVersion\""
sendSyslog "$functionName" "INFO" "checkPolicySP_ipsStatus" "VALUE=\"$checkPolicySP_ipsStatus\""
sendSyslog "$functionName" "INFO" "checkPolicySP_ipsProfile" "VALUE=\"$checkPolicySP_ipsProfile\""
sendSyslog "$functionName" "INFO" "checkPolicySP_ipsBypassConfig" "VALUE=\"$checkPolicySP_ipsBypassConfig\""
sendSyslog "$functionName" "INFO" "checkPolicySP_ipsBypassTrack" "VALUE=\"$checkPolicySP_ipsBypassTrack\""
sendSyslog "$functionName" "INFO" "checkPolicySP_ipsBypassActive" "VALUE=\"$checkPolicySP_ipsBypassActive\""
sendSyslog "$functionName" "INFO" "checkPolicySP_corexlFullyUtilizedDrops" "VALUE=\"$checkPolicySP_corexlFullyUtilizedDrops\""
sendSyslog "$functionName" "INFO" "checkPolicySP_geoEnabled" "VALUE=\"$checkPolicySP_geoEnabled\""
if [[ $checkPolicySP_geoEnabledLegacy == "1" ]]; then
	sendSyslog "$functionName" "INFO" "checkPolicySP_geoDate" "VALUE=\"$checkPolicySP_geoDate\""
	sendSyslog "$functionName" "INFO" "checkPolicySP_geoLegacyDateLastEditSince" "VALUE=\"$checkPolicySP_geoLegacyDateLastEditSince\""
	sendSyslog "$functionName" "INFO" "checkPolicySP_geoMd5" "VALUE=\"$checkPolicySP_geoMd5\""
	sendSyslog "$functionName" "INFO" "checkPolicySP_cloudSc1" "VALUE=\"$checkPolicySP_cloudSc1\""
	sendSyslog "$functionName" "INFO" "checkPolicySP_geoDetails" "TYPE="IP_LIST" ENABLED=\"$checkPolicySP_geoEnabledLegacy\" LASTREVISION=\"$checkPolicySP_geoDate\" LASTSUCCESS=\"$checkPolicySP_geoDate\" LASTSUCCESSDIFF=\"$checkPolicySP_geoLegacyDateLastEditDiff\" LASTSUCCESSSINCE=\"$checkPolicySP_geoLegacyDateLastEditSince\" LASTUPDATETIME=\"$checkPolicySP_geoLastUpdateTime\" LASTUPDATEREASON=\"$checkPolicySP_geoLastUpdateReason\" COUNTRYQTY=\"$checkPolicySP_geoLegacyCountryQty\" RANGEQTY=\"$checkPolicySP_geoLegacyRangeQty\""
fi
if [[ $checkPolicySP_geoEnabled == "1" ]]; then
	sendSyslog "$functionName" "INFO" "checkPolicySP_geoDetails" "TYPE="UPDATABLE_OBJ" ENABLED=\"$checkPolicySP_geoEnabled\" LASTREVISION=\"$checkPolicySP_geoLastRevision\" LASTSUCCESS=\"$checkPolicySP_geoLastSuccess\" LASTSUCCESSDIFF=\"$checkPolicySP_geoLastSuccessDiff\" LASTSUCCESSSINCE=\"$checkPolicySP_geoLastSuccessSince\" LASTUPDATETIME=\"$checkPolicySP_geoLastUpdateTime\" LASTUPDATEREASON=\"$checkPolicySP_geoLastUpdateReason\" COUNTRYQTY=\"$checkPolicySP_geoCountryQty\" RANGEQTY=\"$checkPolicySP_geoRangeQty\""
fi
sendSyslog "$functionName" "INFO" "checkPolicySP_proxy" "VALUE=\"$checkPolicySP_proxyEnabled\" IP=\"$checkPolicySP_proxyIp\" PORT=\"$checkPolicySP_proxyPort\""
sendSyslog "$functionName" "INFO" "checkPolicySP_cloudCheckDl3" "VALUE=\"$checkPolicySP_cloudCheckDl3\""
sendSyslog "$functionName" "INFO" "checkPolicySP_cloudCheckUpdates" "VALUE=\"$checkPolicySP_cloudCheckUpdates\""
sendSyslog "$functionName" "INFO" "checkPolicySP_cloudCheckEntitlement" "VALUE=\"$checkPolicySP_cloudCheckEntitlement\""
sendSyslog "$functionName" "INFO" "checkPolicySP_cloudLicense" "VALUE=\"$checkPolicySP_cloudLicense\""
sendSyslog "$functionName" "INFO" "checkPolicySP_cloudContract" "VALUE=\"$checkPolicySP_cloudContract\""
sendSyslog "$functionName" "INFO" "checkPolicySP_cloudSc1" "VALUE=\"$checkPolicySP_cloudSc1\""
if [[ $checkSelf_bladeAb == "1" ]]; then
	sendSyslog "$functionName" "INFO" "checkPolicySP_cloudCws" "VALUE=\"$checkPolicySP_cloudCws\""
	sendSyslog "$functionName" "INFO" "checkPolicySP_abStatus" "VALUE=\"$checkPolicySP_abStatus\""
	sendSyslog "$functionName" "INFO" "checkPolicySP_abVersion" "VALUE=\"$checkPolicySP_abVersion\""
fi
sendSyslog "$functionName" "INFO" "checkPolicySP_cloudGlobalSign" "VALUE=\"$checkPolicySP_cloudGlobalSign\""
if [[ $checkSelf_bladeTe -eq "1" ]] || [[ $checkSelf_bladeTx -eq "1" ]]; then
	sendSyslog "$functionName" "INFO" "checkPolicySP_cloudTe" "VALUE=\"$checkPolicySP_cloudTe\""
	sendSyslog "$functionName" "INFO" "checkPolicySP_cloudTeadv" "VALUE=\"$checkPolicySP_cloudTeadv\""
	sendSyslog "$functionName" "INFO" "checkPolicySP_cloudThreatEmulation" "VALUE=\"$checkPolicySP_cloudThreatEmulation\""
fi
sendSyslog "$functionName" "INFO" "checkPolicySP_counters" "ACCEPTED=\"$checkPolicySP_policyAccepted\" DROPPED=\"$checkPolicySP_policyDropped\" REJECTED=\"$checkPolicySP_policyRejected\""
sendSyslog "$functionName" "INFO" "checkPolicySP_countersRate" "ACCEPTED=\"$RATEACCEPTED\" DROPPED=\"$RATEDROPPED\" REJECTED=\"$RATEREJECTED\""
sendSyslog "$functionName" "INFO" "checkPolicySP_f2fqEnabled" "VALUE=\"$checkPolicySP_f2fqEnabled\""
sendSyslog "$functionName" "INFO" "checkPolicySP_f2fqEnforced" "VALUE=\"$checkPolicySP_f2fqEnforced\""
sendSyslog "$functionName" "INFO" "checkPolicySP_f2fqLoadThreshold" "VALUE=\"$checkPolicySP_f2fqLoadThreshold\""
sendSyslog "$functionName" "INFO" "checkPolicySP_ckpMutexQty" "VALUE=\"$checkPolicySP_ckpMutexQty\""
if [[ $checkSelf_ipv6Enabled == "1" ]] && [[ $checkSelf_ipv6Configured != "0" ]]; then
	sendSyslog "$functionName" "INFO" "checkPolicySP_countersIpv6" "ACCEPTED=\"$RATEACCEPTED\" DROPPED=\"$RATEDROPPED\" REJECTED=\"$RATEREJECTED\""
	sendSyslog "$functionName" "INFO" "checkPolicySP_countersRateIpv6" "ACCEPTED=\"$RATEACCEPTEDIPV6\" DROPPED=\"$RATEDROPPEDIPV6\" REJECTED=\"$RATEREJECTEDIPV6\""
fi
sendSyslog "$functionName" "INFO" "checkPolicySP_updatableObjNames" "VALUE=\"$checkPolicySP_updatableObjNames\""
sendSyslog "$functionName" "INFO" "checkPolicySP_threatFeedQty" "VALUE=\"$checkPolicySP_threatFeedQty\""
sendSyslog "$functionName" "INFO" "checkPolicySP_threatFeedInterval" "VALUE=\"$checkPolicySP_threatFeedInterval\""
sendSyslog "$functionName" "INFO" "checkPolicySP_domainObjectEnabled" "VALUE=\"$checkPolicySP_domainObjectEnabled\""
if [[ $checkPolicySP_domainObjectEnabled -eq "1" ]]; then
	sendSyslog "$functionName" "INFO" "checkPolicySP_domainObjectQty" "VALUE=\"$checkPolicySP_domainObjectQty\""
fi
sendSyslog "$functionName" "INFO" "checkPolicySP_sslTrustedCaDetails" "UPDATE_LATEST=\"$checkPolicySP_sslTrustedCaUpdateLatest\" ISSUED_TO_UNIQ_QTY=\"$checkPolicySP_sslTrustedCaIssuedToUniqQty\" ISSUED_BY_UNIQ_QTY=\"$checkPolicySP_sslTrustedCaIssuedByUniqQty\" ISSUED_TO_QTY=\"$checkPolicySP_sslTrustedCaIssuedToQty\" ISSUED_BY_QTY=\"$checkPolicySP_sslTrustedCaIssuedByQty\" ADDED_BY_CHECKPOINT_QTY=\"$checkPolicySP_sslTrustedCaAddedByCheckPointQty\" ADDED_BY_USER_QTY=\"$checkPolicySP_sslTrustedCaAddedByUserQty\""
sendSyslog "$functionName" "INFO" "checkPolicySP_dnsDetails" "CLISH=\"$checkPolicySP_dnsClish\" KERNEL=\"$checkPolicySP_dnsWebui\""


	
checkPolicySP_fEnd=$(date "+%s")
checkPolicySP_fRunTime=$(( checkPolicySP_fEnd - checkPolicySP_fStart ))
echo "checkPolicySP_fRunTime $checkPolicySP_fRunTime" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_warning - $checkPolicySP_warning" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_problem - $checkPolicySP_problem" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_problemInfo - $checkPolicySP_problemInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_warningInfo - $checkPolicySP_warningInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_workingInfo - $checkPolicySP_workingInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySP_runTime - $checkPolicySP_fRunTime" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkPolicySP_warning" "VALUE=\"$checkPolicySP_warning\""
sendSyslog "$functionName" "INFO" "checkPolicySP_problem" "VALUE=\"$checkPolicySP_problem\""
sendSyslog "$functionName" "INFO" "checkPolicySP_problemInfo" "VALUE=\"$checkPolicySP_problemInfo\""
sendSyslog "$functionName" "INFO" "checkPolicySP_warningInfo" "VALUE=\"$checkPolicySP_warningInfo\""
sendSyslog "$functionName" "INFO" "checkPolicySP_workingInfo" "VALUE=\"$checkPolicySP_workingInfo\""
sendSyslog "$functionName" "INFO" "checkPolicySP_runTime" "VALUE=\"$checkPolicySP_fRunTime\""

#SUMMARY
if [[ $checkPolicySP_problem == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - checkPolicySP - SUMMARY - PROBLEM - $checkPolicySP_problemInfo $checkPolicySP_warningInfo $checkPolicySP_workingInfo" >>$HISTORYLOG
elif [[ $checkPolicySP_warning == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - checkPolicySP - SUMMARY - WARNING - $checkPolicySP_warningInfo $checkPolicySP_workingInfo" >>$HISTORYLOG
else
	echo "$HISTORYLOGPREAMBLE - checkPolicySP - SUMMARY - WORKING - $checkPolicySP_workingInfo" >>$HISTORYLOG
fi

echo "checkPolicySP_problem $checkPolicySP_problem" >>$RUNLOG
echo "END==checkPolicySP" >>$RUNLOG
}

###################################################################################################
checkPolicySM() {
echo "START==checkPolicySM" >>$RUNLOG

#DEFAULTS
checkPolicySM_fStart=$(date "+%s")
functionName=${FUNCNAME[0]}
checkPolicySM_warning="0"
checkPolicySM_problem="0"
checkPolicySM_workingInfo=""
checkPolicySM_warningInfo=""
checkPolicySM_problemInfo=""


#COLLECT OUTPUTS

#Check Cloud Connectivity
###Main
#checkPolicySM_proxyEnabled=$(cat $SHOWCONFIG | grep "set proxy address" | wc -l)
checkPolicySM_proxyEnabled=$(cat /config/active | grep "proxy:ip-address" | wc -l)
if [[ $checkPolicySM_proxyEnabled == "1" ]]; then
	checkPolicySM_proxyEnabled="true"
	checkPolicySM_proxyIp=$(cat /config/active | grep "proxy:ip-address" | awk '{print $NF}')
	checkPolicySM_proxyPort=$(cat /config/active | grep "proxy:port" | awk '{print $NF}')
else
	checkPolicySM_proxyEnabled="false"
	checkPolicySM_proxyIp="n/a"
	checkPolicySM_proxyPort="n/a"
fi

checkPolicySM_cloudCrl="0"
checkPolicySM_cloudCheckDl3="0"
checkPolicySM_cloudCheckUpdates="0"
checkPolicySM_cloudCheckEntitlement="0"
checkPolicySM_cloudContract="0"
checkPolicySM_cloudLicense="0"
checkPolicySM_cloudGlobalSign="0"


#CRL
URI="http://crl.godaddy.com/"
checkPolicySM_cloudCrl=$(curl_output $checkPolicySM_proxyEnabled $checkPolicySM_proxyIp $checkPolicySM_proxyPort $URI | grep "<html>" | wc -l)
#DL3
URI="http://dl3.checkpoint.com/"
checkPolicySM_cloudCheckDl3=$(curl_output $checkPolicySM_proxyEnabled $checkPolicySM_proxyIp $checkPolicySM_proxyPort $URI | grep "302 Moved Temporarily" | wc -l)
#UPDATES
URI="https://updates.checkpoint.com/"
checkPolicySM_cloudCheckUpdates=$(curl_output $checkPolicySM_proxyEnabled $checkPolicySM_proxyIp $checkPolicySM_proxyPort $URI | grep "Page not found" | wc -l)
#ENTITLEMENT
URI="https://usercenter.checkpoint.com/"
checkPolicySM_cloudCheckEntitlement=$(curl_output $checkPolicySM_proxyEnabled $checkPolicySM_proxyIp $checkPolicySM_proxyPort $URI | grep "<html>" | wc -l)
#CONTRACT
URI="https://productcoverage.checkpoint.com/ProductCoverageService"
checkPolicySM_cloudContract=$(curl_output $checkPolicySM_proxyEnabled $checkPolicySM_proxyIp $checkPolicySM_proxyPort $URI | grep "HTTP/1.1 405" | wc -l)
#LICENSE
URI="https://productservices.checkpoint.com"
checkPolicySM_cloudLicense=$(curl_output $checkPolicySM_proxyEnabled $checkPolicySM_proxyIp $checkPolicySM_proxyPort $URI | grep "<html>\|403 Forbidden" | wc -l)
#CRL-GLOBALSIGN
URI="http://crl.globalsign.com/"
checkPolicySM_cloudGlobalSign=$(curl_output $checkPolicySM_proxyEnabled $checkPolicySM_proxyIp $checkPolicySM_proxyPort $URI | grep "<html>" | wc -l)

#no auto db update until R81.10 until JHF61 6-0003645415 PRJ-36199
checkPolicySM_geoDateRtdir=$(date -d "`stat -c %y "$RTDIR/conf/ip2country.csv"`" +"%s")
checkPolicySM_geoDateRtdirDiff="$(( EPOCH - checkPolicySM_geoDateRtdir ))"
if [[ $checkPolicySM_geoDateRtdirDiff -lt "0" ]]; then
	checkPolicySM_geoDateRtdirDiff="0"
fi
checkPolicySM_geoDateRtdirSince=$(conv_time $checkPolicySM_geoDateRtdirDiff)
checkPolicySM_geoDateIndexerdir=$(date -d "`stat -c %y "$INDEXERDIR/conf/ip2country.csv"`" +"%s")
checkPolicySM_geoDateIndexerdirDiff="$(( EPOCH - checkPolicySM_geoDateIndexerdir ))"
if [[ $checkPolicySM_geoDateIndexerdirDiff -lt "0" ]]; then
	checkPolicySM_geoDateIndexerdirDiff="0"
fi
checkPolicySM_geoDateIndexerdirSince=$(conv_time $checkPolicySM_geoDateIndexerdirDiff)
let EPOCHMINUS30DAYS=EPOCH-2592000

#LOG OUTPUTS
echo "checkPolicySM_proxyEnabled $checkPolicySM_proxyEnabled" >>$RUNLOG
echo "checkPolicySM_proxyIp $checkPolicySM_proxyIp" >>$RUNLOG
echo "checkPolicySM_proxyPort $checkPolicySM_proxyPort" >>$RUNLOG
echo "checkPolicySM_cloudCheckDl3 $checkPolicySM_cloudCheckDl3" >>$RUNLOG
echo "checkPolicySM_cloudCheckUpdates $checkPolicySM_cloudCheckUpdates" >>$RUNLOG
echo "checkPolicySM_cloudCheckEntitlement $checkPolicySM_cloudCheckEntitlement" >>$RUNLOG
echo "checkPolicySM_cloudContract $checkPolicySM_cloudContract" >>$RUNLOG
echo "checkPolicySM_cloudLicense $checkPolicySM_cloudLicense" >>$RUNLOG
echo "checkPolicySM_cloudCrl $checkPolicySM_cloudCrl" >>$RUNLOG
echo "checkPolicySM_cloudGlobalSign $checkPolicySM_cloudGlobalSign" >>$RUNLOG

echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySM_proxyEnabled - $checkPolicySM_proxyEnabled" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySM_proxyIp - $checkPolicySM_proxyIp" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySM_proxyPort - $checkPolicySM_proxyPort" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySM_cloudCheckDl3 - $checkPolicySM_cloudCheckDl3" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySM_cloudCheckUpdates - $checkPolicySM_cloudCheckUpdates" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySM_cloudCheckEntitlement - $checkPolicySM_cloudCheckEntitlement" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySM_cloudContract - $checkPolicySM_cloudContract" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySM_cloudLicense - $checkPolicySM_cloudLicense" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySM_cloudCrl - $checkPolicySM_cloudCrl" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySM_cloudGlobalSign - $checkPolicySM_cloudGlobalSign" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySM_geoDateRtdir - $checkPolicySM_geoDateRtdir ($checkPolicySM_geoDateRtdirSince)" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySM_geoDateIndexerdir - $checkPolicySM_geoDateIndexerdir ($checkPolicySM_geoDateIndexerdirSince)" >>$HISTORYLOG




#RUN LOGIC
if [[ $checkPolicySM_cloudCheckDl3 -eq "0" ]]; then
	echo "Logic - cloud: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySM_cloudCheckDetails - DL3=$checkPolicySM_cloudCheckDl3" >>$HISTORYLOG
	checkPolicySM_warning="1"
	checkPolicySM_warningInfo="$checkPolicySM_warningInfo [Cloud Service Check Failed (DL3)]"
else
	echo "Logic - cloud: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkPolicySM_cloudCheckDetails - DL3=$checkPolicySM_cloudCheckDl3" >>$HISTORYLOG
fi

if [[ $checkPolicySM_cloudCheckUpdates -eq "0" ]]; then
	echo "Logic - cloud: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySM_cloudCheckDetails - UPDATES=$checkPolicySM_cloudCheckUpdates" >>$HISTORYLOG
	checkPolicySM_warning="1"
	checkPolicySM_warningInfo="$checkPolicySM_warningInfo [Cloud Service Check Failed (UPDATES)]"
else
	echo "Logic - cloud: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkPolicySM_cloudCheckDetails - UPDATES=$checkPolicySM_cloudCheckUpdates" >>$HISTORYLOG
fi

if [[ $checkPolicySM_cloudCheckEntitlement -eq "0" ]]; then
	echo "Logic - cloud: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySM_cloudCheckDetails - ENTITLEMENT=$checkPolicySM_cloudCheckEntitlement" >>$HISTORYLOG
	checkPolicySM_warning="1"
	checkPolicySM_warningInfo="$checkPolicySM_warningInfo [Cloud Service Check Failed (ENTITLEMENT)]"
else
	echo "Logic - cloud: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkPolicySM_cloudCheckDetails - ENTITLEMENT=$checkPolicySM_cloudCheckEntitlement" >>$HISTORYLOG
fi

if [[ $checkPolicySM_cloudContract -eq "0" ]]; then
	echo "Logic - cloud: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySM_cloudCheckDetails - CONTRACT=$checkPolicySM_cloudContract" >>$HISTORYLOG
	checkPolicySM_warning="1"
	checkPolicySM_warningInfo="$checkPolicySM_warningInfo [Cloud Service Check Failed (CONTRACT)]"
else
	echo "Logic - cloud: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkPolicySM_cloudCheckDetails - CONTRACT=$checkPolicySM_cloudContract" >>$HISTORYLOG
fi

if [[ $checkPolicySM_cloudLicense -eq "0" ]]; then
	echo "Logic - cloud: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySM_cloudCheckDetails - LICENSE=$checkPolicySM_cloudLicense" >>$HISTORYLOG
	checkPolicySM_warning="1"
	checkPolicySM_warningInfo="$checkPolicySM_warningInfo [Cloud Service Check Failed (LICENSE)]"
else
	echo "Logic - cloud: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkPolicySM_cloudCheckDetails - LICENSE=$checkPolicySM_cloudLicense" >>$HISTORYLOG
fi

if [[ $checkPolicySM_cloudCrl -eq "0" ]]; then
	echo "Logic - cloud: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySM_cloudCheckDetails - CRL=$checkPolicySM_cloudCrl" >>$HISTORYLOG
	checkPolicySM_warning="1"
	checkPolicySM_warningInfo="$checkPolicySM_warningInfo [Cloud Service Check Failed (CRL)]"
else
	echo "Logic - cloud: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkPolicySM_cloudCheckDetails - CRL=$checkPolicySM_cloudCrl" >>$HISTORYLOG
fi

if [[ $checkPolicySM_cloudGlobalSign -eq "0" ]]; then
	echo "Logic - cloud: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySM_cloudCheckDetails - CRL-GlobalSign=$checkPolicySM_cloudGlobalSign" >>$HISTORYLOG
	checkPolicySM_warning="1"
	checkPolicySM_warningInfo="$checkPolicySM_warningInfo [Cloud Service Check Failed (CRL-GlobalSign)]"
else
	echo "Logic - cloud: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkPolicySM_cloudCheckDetails - CRL-GlobalSign=$checkPolicySM_cloudGlobalSign" >>$HISTORYLOG
fi

if [[ $checkPolicySM_geoDateRtdir -lt $EPOCHMINUS30DAYS ]]; then
	echo "Logic - cloud: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySM_geoDateRtdir - CURRENT=$checkPolicySM_geoDateRtdir" >>$HISTORYLOG
	checkPolicySM_workingInfo="$checkPolicySM_workingInfo [GeoIP DB Out-of-Date RTDIR sk120261 ($checkPolicySM_geoDateRtdirSince)]"
fi

if [[ $checkPolicySM_geoDateIndexerdir -lt $EPOCHMINUS30DAYS ]]; then
	echo "Logic - cloud: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySM_geoDateIndexerdir - CURRENT=$checkPolicySM_geoDateIndexerdir" >>$HISTORYLOG
	checkPolicySM_workingInfo="$checkPolicySM_workingInfo [GeoIP DB Out-of-Date INDEXERDIR sk120261 ($checkPolicySM_geoDateIndexerdirSince)]"
fi

#SYSLOG
if [[ $checkPolicySM_problem == "1" ]]; then
	sendSyslog "$functionName" "PROBLEM" "checkPolicySM_problemInfo" "VALUE=\"$checkPolicySM_problemInfo $checkPolicySM_warningInfo $checkPolicySM_workingInfo\""
elif [[ $checkPolicySM_warning == "1" ]]; then
	sendSyslog "$functionName" "WARNING" "checkPolicySM_warningInfo" "VALUE=\"$checkPolicySM_warningInfo $checkPolicySM_workingInfo\""	
else
	sendSyslog "$functionName" "WORKING" "checkPolicySM_workingInfo" "VALUE=\"$checkPolicySM_workingInfo\""
fi
sendSyslog "$functionName" "INFO" "checkPolicySM_proxy" "VALUE=\"$checkPolicySM_proxyEnabled\" IP=\"$checkPolicySM_proxyIp\" PORT=\"$checkPolicySM_proxyPort\""
sendSyslog "$functionName" "INFO" "checkPolicySM_cloudCheckDl3" "VALUE=\"$checkPolicySM_cloudCheckDl3\""
sendSyslog "$functionName" "INFO" "checkPolicySM_cloudCheckUpdates" "VALUE=\"$checkPolicySM_cloudCheckUpdates\""
sendSyslog "$functionName" "INFO" "checkPolicySM_cloudCheckEntitlement" "VALUE=\"$checkPolicySM_cloudCheckEntitlement\""
sendSyslog "$functionName" "INFO" "checkPolicySM_cloudContract" "VALUE=\"$checkPolicySM_cloudContract\""
sendSyslog "$functionName" "INFO" "checkPolicySM_cloudLicense" "VALUE=\"$checkPolicySM_cloudLicense\""
sendSyslog "$functionName" "INFO" "checkPolicySM_cloudCrl" "VALUE=\"$checkPolicySM_cloudCrl\""
sendSyslog "$functionName" "INFO" "checkPolicySM_cloudGlobalSign" "VALUE=\"$checkPolicySM_cloudGlobalSign\""
sendSyslog "$functionName" "INFO" "checkPolicySM_geoDateRtdir" "VALUE=\"$checkPolicySM_geoDateRtdir\""
sendSyslog "$functionName" "INFO" "checkPolicySM_geoDateIndexerdir" "VALUE=\"$checkPolicySM_geoDateIndexerdir\""


checkPolicySM_fEnd=$(date "+%s")
checkPolicySM_fRunTime=$(( checkPolicySM_fEnd - checkPolicySM_fStart ))
echo "checkPolicySM_fRunTime $checkPolicySM_fRunTime" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySM_warning - $checkPolicySM_warning" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySM_problem - $checkPolicySM_problem" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySM_problemInfo - $checkPolicySM_problemInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySM_warningInfo - $checkPolicySM_warningInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySM_workingInfo - $checkPolicySM_workingInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicySM_runTime - $checkPolicySM_fRunTime" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkPolicySM_warning" "VALUE=\"$checkPolicySM_warning\""
sendSyslog "$functionName" "INFO" "checkPolicySM_problem" "VALUE=\"$checkPolicySM_problem\""
sendSyslog "$functionName" "INFO" "checkPolicySM_problemInfo" "VALUE=\"$checkPolicySM_problemInfo\""
sendSyslog "$functionName" "INFO" "checkPolicySM_warningInfo" "VALUE=\"$checkPolicySM_warningInfo\""
sendSyslog "$functionName" "INFO" "checkPolicySM_workingInfo" "VALUE=\"$checkPolicySM_workingInfo\""
sendSyslog "$functionName" "INFO" "checkPolicySM_runTime" "VALUE=\"$checkPolicySM_fRunTime\""
echo "checkPolicySM_problem $checkPolicySM_problem" >>$RUNLOG
echo "END==checkPolicySM" >>$RUNLOG
}

###################################################################################################
checkConnections() {
echo "START==checkConnections" >>$RUNLOG

#DEFAULTS
checkConnections_fStart=$(date "+%s")
functionName=${FUNCNAME[0]}
checkConnections_warning="0"
checkConnections_problem="0"
checkConnections_workingInfo=""
checkConnections_warningInfo=""
checkConnections_problemInfo=""
TEMPFILE=$TEMPDIR/$SCRIPT.$functionName.$EPOCH
VSXSTAT2=$TEMPDIR/$SCRIPT.$functionName.$EPOCH.vsxstat2
TEMPFILE_PSTAT=$TEMPDIR/$SCRIPT.$functionName.$EPOCH.pstat

#COLLECT OUTPUTS
# checkConnections_current=$(snmp .1.3.6.1.4.1.2620.1.1.25.3)
# checkConnections_peak=$(snmp .1.3.6.1.4.1.2620.1.1.25.4)
# checkConnections_limit=$(snmp .1.3.6.1.4.1.2620.1.1.25.10)
checkConnections_current=$(stattestget 1.3.6.1.4.1.2620.1.1.25.3)
checkConnections_peak=$(stattestget 1.3.6.1.4.1.2620.1.1.25.4)
checkConnections_limit=$(stattestget 1.3.6.1.4.1.2620.1.1.25.10)

if [[ $checkSelf_ipv6Enabled == "1" ]] && [[ $checkSelf_ipv6Configured != "0" ]]; then
	checkConnections_currentIpv6=$(fw6 tab -t connections -s 2>&1 | tail -1 | awk '{print $4}')
	if [[ $checkConnections_currentIpv6 == "table" ]]; then
		checkConnections_currentIpv6="0"
	fi
	checkConnections_peakIpv6=$(fw6 tab -t connections -s 2>&1 | tail -1 | awk '{print $5}')
		if [[ $checkConnections_currentIpv6 == "status" ]]; then
		checkConnections_peakIpv6="0"
	fi
fi

fw ctl pstat -m > $TEMPFILE_PSTAT 2>&1
VS=$(cat $TEMPFILE_PSTAT | grep "VS" | head -1 | awk '{print $2}')
TOTALVALUE="0"
TOTALRATE="0"
IFS=$'\n'
for LINE in `cat $TEMPFILE_PSTAT | sed -n '/fwmultik enqueue fail stats/,/^$/p' | grep -v "fwmultik enqueue fail stats"` ; do
	REASON=$(echo "$LINE" | awk -F ":" '{print $1}' | rev | awk '{$1=$1};1' | rev | tr -d '()' | tr ' ' '_')
	VALUE=$(echo "$LINE" | awk '{print $NF}')
	LASTRUNVALUE=$(cat $CURRENTRUNHISTORYLOGOUTPUT | grep "checkConnections_pstatFwmultikEnqueueFail" | grep "VS=$VS" | grep -w "$REASON" | awk -F " - " '{print $7}' | awk '{print $2}' | awk -F "=" '{print $2}' | head -1)
	if [[ $LASTRUNVALUE == "" ]]; then
		LASTRUNVALUE=$VALUE
	fi
	LASTRUNVALUEDIFF="$(( VALUE - LASTRUNVALUE ))"
	LASTRUNVALUERATE="$(( LASTRUNVALUEDIFF / SINCELASTRUN ))"
	let TOTALVALUE=$TOTALVALUE+$VALUE
	let TOTALRATE=$TOTALRATE+$LASTRUNVALUERATE
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnections_pstatFwmultikEnqueueFail - VS=$VS REASON=$REASON VALUE=$VALUE RATE=$LASTRUNVALUERATE" >>$HISTORYLOG
	IFS=$ORIGIFS
	sendSyslog "$functionName" "INFO" "checkConnections_pstatFwmultikEnqueueFail" "VS=\"$VS\" REASON=\"$REASON\" VALUE=\"$VALUE\" RATE=\"$LASTRUNVALUERATE\""
	IFS=$'\n'
done
IFS=$ORIGIFS
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnections_pstatFwmultikEnqueueFailTotal - VS=$VS VALUE=$TOTALVALUE RATE=$TOTALRATE" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkConnections_pstatFwmultikEnqueueFailTotal" "VS=\"$VS\" VALUE=\"$TOTALVALUE\" RATE=\"$TOTALRATE\""


##SR  6-0003737107 for the problem with this OID
# checkConnections_rate=$(snmp .1.3.6.1.4.1.2620.1.1.26.11.6)
# checkConnections_fragFragments=$(snmp .1.3.6.1.4.1.2620.1.1.26.6.1)
# checkConnections_fragPackets=$(snmp .1.3.6.1.4.1.2620.1.1.26.6.3)
# checkConnections_fragExpired=$(snmp .1.3.6.1.4.1.2620.1.1.26.6.2)
checkConnections_rate=$(stattestget 1.3.6.1.4.1.2620.1.1.26.11.6)
checkConnections_fragFragments=$(stattestget 1.3.6.1.4.1.2620.1.1.26.6.1)
checkConnections_fragPackets=$(stattestget 1.3.6.1.4.1.2620.1.1.26.6.3)
checkConnections_fragExpired=$(stattestget 1.3.6.1.4.1.2620.1.1.26.6.2)

#LOG OUTPUTS
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnections_current - $checkConnections_current" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnections_peak - $checkConnections_peak" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnections_limit - $checkConnections_limit" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnections_rate - $checkConnections_rate" >>$HISTORYLOG
if [[ $checkSelf_ipv6Enabled == "1" ]] && [[ $checkSelf_ipv6Configured != "0" ]]; then
	echo "checkConnections_currentIpv6 $checkConnections_currentIpv6" >>$RUNLOG
	echo "checkConnections_peakIpv6 $checkConnections_peakIpv6" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - CurrentIpv6 - $checkConnections_currentIpv6" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - PeakIpv6 - $checkConnections_peakIpv6" >>$HISTORYLOG
fi
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnections_fragFragments - $checkConnections_fragFragments" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnections_fragPackets - $checkConnections_fragPackets" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnections_fragExpired - $checkConnections_fragExpired" >>$HISTORYLOG

#RUN LOGIC
LASTRUNFRAGFRAGMENTS=$(cat $CURRENTRUNHISTORYLOGOUTPUT | grep "checkConnections" | grep "INFO" | grep "checkConnections_fragFragments" | awk -F " - " '{print $7}' | head -1)
if [[ $LASTRUNFRAGFRAGMENTS == "" ]]; then
	LASTRUNFRAGFRAGMENTS=$checkConnections_fragFragments
fi
LASTRUNFRAGPACKETS=$(cat $CURRENTRUNHISTORYLOGOUTPUT | grep "checkConnections" | grep "INFO" | grep "checkConnections_fragPackets" | awk -F " - " '{print $7}' | head -1)
if [[ $LASTRUNFRAGPACKETS == "" ]]; then
	LASTRUNFRAGPACKETS=$checkConnections_fragPackets
fi		
LASTRUNFRAGEXPIRED=$(cat $CURRENTRUNHISTORYLOGOUTPUT | grep "checkConnections" | grep "INFO" | grep "checkConnections_fragExpired" | awk -F " - " '{print $7}' | head -1)
if [[ $LASTRUNFRAGEXPIRED == "" ]]; then
	LASTRUNFRAGEXPIRED=$checkConnections_fragExpired
fi	

LASTRUNLINECOUNTERS="LASTRUN FRAGMENTS=$LASTRUNFRAGFRAGMENTS PACKETS=$LASTRUNFRAGPACKETS EXPIRED=$LASTRUNFRAGEXPIRED"


LASTRUNFRAGFRAGMENTSDIFF="$(( checkConnections_fragFragments - LASTRUNFRAGFRAGMENTS ))"
LASTRUNFRAGPACKETSDIFF="$(( checkConnections_fragPackets - LASTRUNFRAGPACKETS ))"
LASTRUNFRAGEXPIREDDIFF="$(( checkConnections_fragExpired - LASTRUNFRAGEXPIRED ))"
LASTRUNFRAGEXPIREDDIFFCOUNTERS="DIFF FRAGMENTS=$LASTRUNFRAGFRAGMENTSDIFF PACKETS=$LASTRUNFRAGPACKETSDIFF EXPIRED=$LASTRUNFRAGEXPIREDDIFF"

RATEFRAGFRAGMENTS="$(( LASTRUNFRAGFRAGMENTSDIFF / SINCELASTRUN ))"
RATEFRAGPACKETS="$(( LASTRUNFRAGPACKETSDIFF / SINCELASTRUN ))"
RATEEXPIRED="$(( LASTRUNFRAGEXPIREDDIFF / SINCELASTRUN ))"
RATEFRAGCOUNTERS="RATE FRAGMENTS=$RATEFRAGFRAGMENTS PACKETS=$RATEFRAGPACKETS EXPIRED=$RATEEXPIRED"

echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnections_frag $LASTRUNLINECOUNTERS" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnections_frag $LASTRUNFRAGEXPIREDDIFFCOUNTERS" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnections_frag $RATEFRAGCOUNTERS" >>$HISTORYLOG
checkConnections_fragFragmentsRate=$RATEFRAGFRAGMENTS
checkConnections_fragPacketsRate=$RATEFRAGPACKETS
checkConnections_fragExpiredRate=$RATEEXPIRED



if [[ $checkConnections_current == "" ]] ; then
        echo "Logic - current: FAIL" >>$RUNLOG
        echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Current - $checkConnections_current" >>$HISTORYLOG
        checkConnections_problem="1"
		checkConnections_problemInfo="$checkConnections_problemInfo [Cannot determine current connections] [Current: $checkConnections_current, Peak: $checkConnections_peak, Rate: $checkConnections_rate]"
else
        echo "Logic - current: PASS" >>$RUNLOG
        echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Current - $checkConnections_current" >>$HISTORYLOG
		checkConnections_workingInfo="$checkConnections_workingInfo [Current: $checkConnections_current, Peak: $checkConnections_peak, Rate: $checkConnections_rate]"
fi
if [[ $checkSelf_ipv6Enabled == "1" ]] && [[ $checkSelf_ipv6Configured != "0" ]]; then
	if [[ $checkConnections_currentIpv6 == "" ]] ; then
			echo "Logic - currentIpv6: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - CurrentIpv6 - $checkConnections_currentIpv6" >>$HISTORYLOG
			checkConnections_problem="1"
			checkConnections_problemInfo="$checkConnections_problemInfo [Current IPv6: $checkConnections_currentIpv6, Peak: $checkConnections_peakIpv6]"
	else
			echo "Logic - currentIpv6: PASS" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - CurrentIpv6 - $checkConnections_currentIpv6" >>$HISTORYLOG
			checkConnections_workingInfo="$checkConnections_workingInfo [Current IPv6: $checkConnections_currentIpv6, Peak: $checkConnections_peakIpv6]"
	fi
fi


#SYSLOG
if [[ $checkConnections_problem == "1" ]]; then
	sendSyslog "$functionName" "PROBLEM" "checkConnections_problemInfo" "VALUE=\"$checkConnections_problemInfo $checkConnections_warningInfo $checkConnections_workingInfo\""
elif [[ $checkConnections_warning == "1" ]]; then
	sendSyslog "$functionName" "WARNING" "checkConnections_warningInfo" "VALUE=\"$checkConnections_warningInfo $checkConnections_workingInfo\""	
else
	sendSyslog "$functionName" "WORKING" "checkConnections_workingInfo" "VALUE=\"$checkConnections_workingInfo\""
fi

sendSyslog "$functionName" "INFO" "checkConnections_rate" "VALUE=\"$checkConnections_rate\""
sendSyslog "$functionName" "INFO" "checkConnections_current" "VALUE=\"$checkConnections_current\""
sendSyslog "$functionName" "INFO" "checkConnections_peak" "VALUE=\"$checkConnections_peak\""
sendSyslog "$functionName" "INFO" "checkConnections_fragFragmentsRate" "VALUE=\"$checkConnections_fragFragmentsRate\""
sendSyslog "$functionName" "INFO" "checkConnections_fragPacketsRate" "VALUE=\"$checkConnections_fragPacketsRate\""
sendSyslog "$functionName" "INFO" "checkConnections_fragExpiredRate" "VALUE=\"$checkConnections_fragExpiredRate\""
sendSyslog "$functionName" "INFO" "checkConnections_topProtocols" "QTY=\"$checkConnections_topProtocolsQty\" PCT=\"$checkConnections_topProtocolsPct\" PROTOCOLS=\"$checkConnections_topProtocols\""
sendSyslog "$functionName" "INFO" "checkConnections_topComponents" "VALUE=\"$checkConnections_topComponents\""
sendSyslog "$functionName" "INFO" "checkConnections_packetRate" "VALUE=\"$checkConnections_packetRate\""
sendSyslog "$functionName" "INFO" "checkConnections_packetThroughput" "VALUE=\"$checkConnections_packetThroughput\""
sendSyslog "$functionName" "INFO" "checkConnections_connsFromTemplatesPct" "VALUE=\"$checkConnections_connsFromTemplatesPct\""
if [[ $checkSelf_ipv6Enabled == "1" ]] && [[ $checkSelf_ipv6Configured != "0" ]]; then
	sendSyslog "$functionName" "INFO" "checkConnections_currentIpv6" "VALUE=\"$checkConnections_currentIpv6\""
	sendSyslog "$functionName" "INFO" "checkConnections_peakIpv6" "VALUE=\"$checkConnections_peakIpv6\""
fi


#CLEANUP
rm $TEMPFILE $TEMPFILE_PSTAT > /dev/null 2>&1

checkConnections_fEnd=$(date "+%s")
checkConnections_fRunTime=$(( checkConnections_fEnd - checkConnections_fStart ))
echo "checkConnections_fRunTime $checkConnections_fRunTime" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnections_warning - $checkConnections_warning" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnections_problem - $checkConnections_problem" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnections_problemInfo - $checkConnections_problemInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnections_warningInfo - $checkConnections_warningInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnections_workingInfo - $checkConnections_workingInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnections_runTime - $checkConnections_fRunTime" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkConnections_warning" "VALUE=\"$checkConnections_warning\""
sendSyslog "$functionName" "INFO" "checkConnections_problem" "VALUE=\"$checkConnections_problem\""
sendSyslog "$functionName" "INFO" "checkConnections_problemInfo" "VALUE=\"$checkConnections_problemInfo\""
sendSyslog "$functionName" "INFO" "checkConnections_warningInfo" "VALUE=\"$checkConnections_warningInfo\""
sendSyslog "$functionName" "INFO" "checkConnections_workingInfo" "VALUE=\"$checkConnections_workingInfo\""
sendSyslog "$functionName" "INFO" "checkConnections_runTime" "VALUE=\"$checkConnections_fRunTime\""
echo "checkConnections_problem $checkConnections_problem" >>$RUNLOG
echo "END==checkConnections" >>$RUNLOG
}

###################################################################################################
checkConnectionsSP() {
echo "START==checkConnectionsSP" >>$RUNLOG

#DEFAULTS
checkConnectionsSP_fStart=$(date "+%s")
functionName=${FUNCNAME[0]}
checkConnectionsSP_warning="0"
checkConnectionsSP_problem="0"
checkConnectionsSP_workingInfo=""
checkConnectionsSP_warningInfo=""
checkConnectionsSP_problemInfo=""
TEMPFILE=$TEMPDIR/$SCRIPT.$functionName
TEMPFILE_gallenqueue=$TEMPDIR/$SCRIPT.$functionName.gallenqueue
VSXSTAT2=$TEMPDIR/$SCRIPT.$functionName.$EPOCH.vsxstat2
TEMPFILE_profile0=$TEMPDIR/$SCRIPT.$functionName.profile0
TEMPFILE_profile=$TEMPDIR/$SCRIPT.$functionName.$EPOCH.profile
TEMPFILE_PSTAT=$TEMPDIR/$SCRIPT.$functionName.$EPOCH.pstat

#COLLECT OUTPUTS
# checkConnectionsSP_current=$(snmp .1.3.6.1.4.1.2620.1.1.25.3)
# checkConnectionsSP_peak=$(snmp .1.3.6.1.4.1.2620.1.1.25.4)
checkConnectionsSP_current=$(stattestget 1.3.6.1.4.1.2620.1.1.25.3)
checkConnectionsSP_peak=$(stattestget 1.3.6.1.4.1.2620.1.1.25.4)
if [[ $checkSelf_ipv6Enabled == "1" ]] && [[ $checkSelf_ipv6Configured != "0" ]]; then
	checkConnectionsSP_currentIpv6=$(fw6 tab -t connections -s | tail -1 | awk '{print $4}')
	checkConnectionsSP_peakIpv6=$(fw6 tab -t connections -s | tail -1 | awk '{print $5}')
fi
# checkConnectionsSP_limit=$(snmp .1.3.6.1.4.1.2620.1.1.25.10)
# checkConnectionsSP_fragFragments=$(snmp .1.3.6.1.4.1.2620.1.1.26.6.1)
# checkConnectionsSP_fragPackets=$(snmp .1.3.6.1.4.1.2620.1.1.26.6.3)
# checkConnectionsSP_fragExpired=$(snmp .1.3.6.1.4.1.2620.1.1.26.6.2)
checkConnectionsSP_limit=$(stattestget 1.3.6.1.4.1.2620.1.1.25.10)
checkConnectionsSP_fragFragments=$(stattestget 1.3.6.1.4.1.2620.1.1.26.6.1)
checkConnectionsSP_fragPackets=$(stattestget 1.3.6.1.4.1.2620.1.1.26.6.3)
checkConnectionsSP_fragExpired=$(stattestget 1.3.6.1.4.1.2620.1.1.26.6.2)

LASTRUNFRAGFRAGMENTS=$(cat $CURRENTRUNHISTORYLOGOUTPUT | grep "checkConnectionsSP" | grep "INFO" | grep "checkConnectionsSP_fragFragments" | awk -F " - " '{print $7}' | head -1)
if [[ $LASTRUNFRAGFRAGMENTS == "" ]]; then
	LASTRUNFRAGFRAGMENTS=$checkConnectionsSP_fragFragments
fi
LASTRUNFRAGPACKETS=$(cat $CURRENTRUNHISTORYLOGOUTPUT | grep "checkConnectionsSP" | grep "INFO" | grep "checkConnectionsSP_fragPackets" | awk -F " - " '{print $7}' | head -1)
if [[ $LASTRUNFRAGPACKETS == "" ]]; then
	LASTRUNFRAGPACKETS=$checkConnectionsSP_fragPackets
fi		
LASTRUNFRAGEXPIRED=$(cat $CURRENTRUNHISTORYLOGOUTPUT | grep "checkConnectionsSP" | grep "INFO" | grep "checkConnectionsSP_fragExpired" | awk -F " - " '{print $7}' | head -1)
if [[ $LASTRUNFRAGEXPIRED == "" ]]; then
	LASTRUNFRAGEXPIRED=$checkConnectionsSP_fragExpired
fi	

LASTRUNLINECOUNTERS="LASTRUN FRAGMENTS=$LASTRUNFRAGFRAGMENTS PACKETS=$LASTRUNFRAGPACKETS EXPIRED=$LASTRUNFRAGEXPIRED"


LASTRUNFRAGFRAGMENTSDIFF="$(( checkConnectionsSP_fragFragments - LASTRUNFRAGFRAGMENTS ))"
LASTRUNFRAGPACKETSDIFF="$(( checkConnectionsSP_fragPackets - LASTRUNFRAGPACKETS ))"
LASTRUNFRAGEXPIREDDIFF="$(( checkConnectionsSP_fragExpired - LASTRUNFRAGEXPIRED ))"
LASTRUNFRAGEXPIREDDIFFCOUNTERS="DIFF FRAGMENTS=$LASTRUNFRAGFRAGMENTSDIFF PACKETS=$LASTRUNFRAGPACKETSDIFF EXPIRED=$LASTRUNFRAGEXPIREDDIFF"

RATEFRAGFRAGMENTS="$(( LASTRUNFRAGFRAGMENTSDIFF / SINCELASTRUN ))"
RATEFRAGPACKETS="$(( LASTRUNFRAGPACKETSDIFF / SINCELASTRUN ))"
RATEEXPIRED="$(( LASTRUNFRAGEXPIREDDIFF / SINCELASTRUN ))"
RATEFRAGCOUNTERS="RATE FRAGMENTS=$RATEFRAGFRAGMENTS PACKETS=$RATEFRAGPACKETS EXPIRED=$RATEEXPIRED"

checkConnectionsSP_fragFragmentsRate=$RATEFRAGFRAGMENTS
checkConnectionsSP_fragPacketsRate=$RATEFRAGPACKETS
checkConnectionsSP_fragExpiredRate=$RATEEXPIRED


# FW CTL PSTAT - ENQUEUE FAILURES
fw ctl pstat -m > $TEMPFILE_PSTAT 2>&1
VS=$(cat $TEMPFILE_PSTAT | grep "VS" | head -1 | awk '{print $2}')
TOTALVALUE="0"
TOTALRATE="0"
IFS=$'\n'
for LINE in `cat $TEMPFILE_PSTAT | sed -n '/fwmultik enqueue fail stats/,/^$/p' | grep -v "fwmultik enqueue fail stats"` ; do
	REASON=$(echo "$LINE" | awk -F ":" '{print $1}' | rev | awk '{$1=$1};1' | rev | tr -d '()' | tr ' ' '_')
	VALUE=$(echo "$LINE" | awk '{print $NF}')
	LASTRUNVALUE=$(cat $CURRENTRUNHISTORYLOGOUTPUT | grep "checkConnectionsSP_pstatFwmultikEnqueueFail" | grep "VS=$VS" | grep -w "$REASON" | awk -F " - " '{print $7}' | awk '{print $2}' | awk -F "=" '{print $2}' | tail -1)
	if [[ $LASTRUNVALUE == "" ]]; then
		LASTRUNVALUE=$VALUE
	fi
	LASTRUNVALUEDIFF="$(( VALUE - LASTRUNVALUE ))"
	LASTRUNVALUERATE="$(( LASTRUNVALUEDIFF / SINCELASTRUN ))"
	let TOTALVALUE=$TOTALVALUE+$VALUE
	let TOTALRATE=$TOTALRATE+$LASTRUNVALUERATE
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_pstatFwmultikEnqueueFail - VS=$VS REASON=$REASON VALUE=$VALUE RATE=$LASTRUNVALUERATE" >>$HISTORYLOG
	IFS=$ORIGIFS
	sendSyslog "$functionName" "INFO" "checkConnectionsSP_pstatFwmultikEnqueueFail" "VS=\"$VS\" REASON=\"$REASON\" VALUE=\"$VALUE\" RATE=\"$LASTRUNVALUERATE\""
	IFS=$'\n'
done
IFS=$ORIGIFS
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_pstatFwmultikEnqueueFailTotal - VS=$VS VALUE=$TOTALVALUE RATE=$TOTALRATE" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkConnectionsSP_pstatFwmultikEnqueueFailTotal" "VS=\"$VS\" VALUE=\"$TOTALVALUE\" RATE=\"$TOTALRATE\""





#FW CTL PSTAT OUTPUTS
checkConnectionsSP_pstatPhysicalMemPct=$(cat $TEMPFILE_PSTAT | grep "Physical" | awk '{print $4}' | tr -cd '[0-9]')
checkConnectionsSP_pstatPhysicalMemUsed=$(cat $TEMPFILE_PSTAT | grep "Physical" | awk '{print $5}' | tr -cd '[0-9]')
checkConnectionsSP_pstatPhysicalMemTotal=$(cat $TEMPFILE_PSTAT | grep "Physical" | awk '{print $9}' | tr -cd '[0-9]')
checkConnectionsSP_pstatKernelMemPct=$(cat $TEMPFILE_PSTAT | grep "Kernel" | head -1 | awk '{print $4}' | tr -cd '[0-9]')
checkConnectionsSP_pstatKernelMemUsed=$(cat $TEMPFILE_PSTAT | grep "Kernel" | head -1 | awk '{print $5}' | tr -cd '[0-9]')
checkConnectionsSP_pstatKernelMemTotal=$(cat $TEMPFILE_PSTAT | grep "Kernel" | head -1 | awk '{print $9}' | tr -cd '[0-9]')
checkConnectionsSP_pstatVirtualMemPct=$(cat $TEMPFILE_PSTAT | grep "Virtual" | tail -1 | awk '{print $4}' | tr -cd '[0-9]')
checkConnectionsSP_pstatVirtualMemUsed=$(cat $TEMPFILE_PSTAT | grep "Virtual" | tail -1 | awk '{print $5}' | tr -cd '[0-9]')
checkConnectionsSP_pstatVirtualMemUsedFw=$(cat $TEMPFILE_PSTAT | grep "zeco" | awk '{print $2}' | tr -cd '[0-9]')
checkConnectionsSP_pstatVirtualMemUsedZeco=$(cat $TEMPFILE_PSTAT | grep "zeco" | awk '{print $6}' | tr -cd '[0-9]')
checkConnectionsSP_pstatVirtualMemTotal=$(cat $TEMPFILE_PSTAT | grep "Virtual" | tail -1 | awk '{print $9}' | tr -cd '[0-9]')
# checkConnectionsSP_pstatConnectionsTcp=$(snmp .1.3.6.1.4.1.2620.1.1.26.11.1)
# checkConnectionsSP_pstatConnectionsUdp=$(snmp .1.3.6.1.4.1.2620.1.1.26.11.2)
# checkConnectionsSP_pstatConnectionsIcmp=$(snmp .1.3.6.1.4.1.2620.1.1.26.11.3)
# checkConnectionsSP_pstatConnectionsOther=$(snmp .1.3.6.1.4.1.2620.1.1.26.11.4)
# checkConnectionsSP_pstatConnectionsTotal=$(snmp .1.3.6.1.4.1.2620.1.1.26.11.5)
# checkConnectionsSP_pstatConnectionsRate=$(snmp .1.3.6.1.4.1.2620.1.1.26.11.6)
# checkConnectionsSP_pstatKmemBytesUsed=$(snmp .1.3.6.1.4.1.2620.1.1.26.2.4)
# checkConnectionsSP_pstatKmemAllocOperations=$(snmp .1.3.6.1.4.1.2620.1.1.26.2.13)
# checkConnectionsSP_pstatKmemFreeOperations=$(snmp .1.3.6.1.4.1.2620.1.1.26.2.14)
checkConnectionsSP_pstatConnectionsTcp=$(stattestget 1.3.6.1.4.1.2620.1.1.26.11.1)
checkConnectionsSP_pstatConnectionsUdp=$(stattestget 1.3.6.1.4.1.2620.1.1.26.11.2)
checkConnectionsSP_pstatConnectionsIcmp=$(stattestget 1.3.6.1.4.1.2620.1.1.26.11.3)
checkConnectionsSP_pstatConnectionsOther=$(stattestget 1.3.6.1.4.1.2620.1.1.26.11.4)
checkConnectionsSP_pstatConnectionsTotal=$(stattestget 1.3.6.1.4.1.2620.1.1.26.11.5)
checkConnectionsSP_pstatConnectionsRate=$(stattestget 1.3.6.1.4.1.2620.1.1.26.11.6)
checkConnectionsSP_pstatKmemBytesUsed=$(stattestget 1.3.6.1.4.1.2620.1.1.26.2.4)
checkConnectionsSP_pstatKmemAllocOperations=$(stattestget 1.3.6.1.4.1.2620.1.1.26.2.13)
checkConnectionsSP_pstatKmemFreeOperations=$(stattestget 1.3.6.1.4.1.2620.1.1.26.2.14)


# SECUREXL_RUNNING=$(fwaccel stat | grep "Accelerator Status" | awk '{print $NF}')
# if [[ $SECUREXL_RUNNING == "yes" ]]; then

	# #ASG PROFILE
	# g_profile -p > $TEMPFILE_profile0

	# if [[ $LOCALSMO == "1" ]]; then
			
		# checkConnectionsSP_corexlEnqueueFailIn="0"
		# checkConnectionsSP_corexlEnqueueFailOut="0"
		# checkConnectionsSP_corexlEnqueueFailF2p="0"

		# #ASG PROFILE
		# g_all "cat $TEMPFILE_profile0" > $TEMPFILE_profile
		

		# IFS=$'\n'
		# for SGM in $ALLSGM ; do
			# SGM=$(echo $SGM | tr -d ' ')
			# IFS=$'\n'
			# for LINE in `cat $TEMPFILE_profile | grep -A38 $SGM | grep "\/tcp\|\/udp"` ; do
				# SERVICE=$(echo "$LINE" | awk -F '|' '{print $2}'| awk '{print $1}' | tr '/' '_')
				# ACCELBPS=$(multiply_number `echo "$LINE" | awk -F '|' '{print $3}'`)
				# ACCELPPS=$(multiply_number `echo "$LINE" | awk -F '|' '{print $4}'`)
				# MEDBPS=$(multiply_number `echo "$LINE" | awk -F '|' '{print $5}'`)
				# MEDPPS=$(multiply_number `echo "$LINE" | awk -F '|' '{print $6}'`)
				# FWBPS=$(multiply_number `echo "$LINE" | awk -F '|' '{print $7}'`)
				# FWPPS=$(multiply_number `echo "$LINE" | awk -F '|' '{print $8}'`)
				# checkConnectionsSP_profileServiceDetails="SGM=$SGM SERVICE=$SERVICE ACCELBPS=$ACCELBPS ACCELPPS=$ACCELPPS MEDBPS=$MEDBPS MEDPPS=$MEDPPS FWBPS=$FWBPS FWPPS=$FWPPS"
				# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_profileServiceDetails - $checkConnectionsSP_profileServiceDetails" >>$HISTORYLOG
				# IFS=$ORIGIFS
				# sendSyslog "$functionName" "INFO" "checkConnectionsSP_profileServiceDetails" "SGM=\"$SGM\" SERVICE=\"$SERVICE\" ACCELBPS=\"$ACCELBPS\" ACCELPPS=\"$ACCELPPS\" MEDBPS=\"$MEDBPS\" MEDPPS=\"$MEDPPS\" FWBPS=\"$FWBPS\" FWPPS=\"$FWPPS\"" "SMO"
				# IFS=$'\n'
			# done
			# IFS=$ORIGIFS
			
			
			# TCPACCELBPS=$(multiply_number `cat $TEMPFILE_profile | grep -A38 $SGM | grep "Total tcp" | awk -F '|' '{print $3}'`)
			# TCPACCELPPS=$(multiply_number `cat $TEMPFILE_profile | grep -A38 $SGM | grep "Total tcp" | awk -F '|' '{print $4}'`)
			# TCPMEDBPS=$(multiply_number `cat $TEMPFILE_profile | grep -A38 $SGM | grep "Total tcp" | awk -F '|' '{print $5}'`)
			# TCPMEDPPS=$(multiply_number `cat $TEMPFILE_profile | grep -A38 $SGM | grep "Total tcp" | awk -F '|' '{print $6}'`)
			# TCPFWBPS=$(multiply_number `cat $TEMPFILE_profile | grep -A38 $SGM | grep "Total tcp" | awk -F '|' '{print $7}'`)
			# TCPFWPPS=$(multiply_number `cat $TEMPFILE_profile | grep -A38 $SGM | grep "Total tcp" | awk -F '|' '{print $8}'`)
			
			# checkConnectionsSP_profileTcpDetails="SGM=$SGM TCPACCELBPS=$TCPACCELBPS TCPACCELPPS=$TCPACCELPPS TCPMEDBPS=$TCPMEDBPS TCPMEDPPS=$TCPMEDPPS TCPFWBPS=$TCPFWBPS TCPFWPPS=$TCPFWPPS"
			# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_profileTcpDetails - $checkConnectionsSP_profileTcpDetails" >>$HISTORYLOG

			# UDPACCELBPS=$(multiply_number `cat $TEMPFILE_profile | grep -A38 $SGM | grep "Total udp" | awk -F '|' '{print $3}'`)
			# UDPACCELPPS=$(multiply_number `cat $TEMPFILE_profile | grep -A38 $SGM | grep "Total udp" | awk -F '|' '{print $4}'`)
			# UDPMEDBPS=$(multiply_number `cat $TEMPFILE_profile | grep -A38 $SGM | grep "Total udp" | awk -F '|' '{print $5}'`)
			# UDPMEDPPS=$(multiply_number `cat $TEMPFILE_profile | grep -A38 $SGM | grep "Total udp" | awk -F '|' '{print $6}'`)
			# UDPFWBPS=$(multiply_number `cat $TEMPFILE_profile | grep -A38 $SGM | grep "Total udp" | awk -F '|' '{print $7}'`)
			# UDPFWPPS=$(multiply_number `cat $TEMPFILE_profile | grep -A38 $SGM | grep "Total udp" | awk -F '|' '{print $8}'`)
			
			# checkConnectionsSP_profileUdpDetails="SGM=$SGM UDPACCELBPS=$UDPACCELBPS UDPACCELPPS=$UDPACCELPPS UDPMEDBPS=$UDPMEDBPS UDPMEDPPS=$UDPMEDPPS UDPFWBPS=$UDPFWBPS UDPFWPPS=$UDPFWPPS"
			# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_profileUdpDetails - $checkConnectionsSP_profileUdpDetails" >>$HISTORYLOG

			# OTHERACCELBPS=$(multiply_number `cat $TEMPFILE_profile | grep -A38 $SGM | grep "Total other" | awk -F '|' '{print $3}'`)
			# OTHERACCELPPS=$(multiply_number `cat $TEMPFILE_profile | grep -A38 $SGM | grep "Total other" | awk -F '|' '{print $4}'`)
			# OTHERMEDBPS=$(multiply_number `cat $TEMPFILE_profile | grep -A38 $SGM | grep "Total other" | awk -F '|' '{print $5}'`)
			# OTHERMEDPPS=$(multiply_number `cat $TEMPFILE_profile | grep -A38 $SGM | grep "Total other" | awk -F '|' '{print $6}'`)
			# OTHERFWBPS=$(multiply_number `cat $TEMPFILE_profile | grep -A38 $SGM | grep "Total other" | awk -F '|' '{print $7}'`)
			# OTHERFWPPS=$(multiply_number `cat $TEMPFILE_profile | grep -A38 $SGM | grep "Total other" | awk -F '|' '{print $8}'`)
			
			# checkConnectionsSP_profileOtherDetails="SGM=$SGM OTHERACCELBPS=$OTHERACCELBPS OTHERACCELPPS=$OTHERACCELPPS OTHERMEDBPS=$OTHERMEDBPS OTHERMEDPPS=$OTHERMEDPPS OTHERFWBPS=$OTHERFWBPS OTHERFWPPS=$OTHERFWPPS"
			# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_profileOtherDetails - $checkConnectionsSP_profileOtherDetails" >>$HISTORYLOG
			
			# SYSACCELBPS=$(multiply_number `cat $TEMPFILE_profile | grep -A38 $SGM | grep "System" | awk -F '|' '{print $3}'`)
			# SYSACCELPPS=$(multiply_number `cat $TEMPFILE_profile | grep -A38 $SGM | grep "System" | awk -F '|' '{print $4}'`)
			# SYSMEDBPS=$(multiply_number `cat $TEMPFILE_profile | grep -A38 $SGM | grep "System" | awk -F '|' '{print $5}'`)
			# SYSMEDPPS=$(multiply_number `cat $TEMPFILE_profile | grep -A38 $SGM | grep "System" | awk -F '|' '{print $6}'`)
			# SYSFWBPS=$(multiply_number `cat $TEMPFILE_profile | grep -A38 $SGM | grep "System" | awk -F '|' '{print $7}'`)
			# SYSFWPPS=$(multiply_number `cat $TEMPFILE_profile | grep -A38 $SGM | grep "System" | awk -F '|' '{print $8}'`)

			# checkConnectionsSP_profileSystemDetails="SGM=$SGM SYSACCELBPS=$SYSACCELBPS SYSACCELPPS=$SYSACCELPPS SYSMEDBPS=$SYSMEDBPS SYSMEDPPS=$SYSMEDPPS SYSFWBPS=$SYSFWBPS SYSFWPPS=$SYSFWPPS"
			# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_profileSystemDetails - $checkConnectionsSP_profileSystemDetails" >>$HISTORYLOG
			
			# IFS=$ORIGIFS
			# sendSyslog "$functionName" "INFO" "checkConnectionsSP_profileTcpDetails" "VALUE=\"$checkConnectionsSP_profileTcpDetails\"" "SMO"
			# sendSyslog "$functionName" "INFO" "checkConnectionsSP_profileUdpDetails" "VALUE=\"$checkConnectionsSP_profileUdpDetails\"" "SMO"
			# sendSyslog "$functionName" "INFO" "checkConnectionsSP_profileOtherDetails" "VALUE=\"$checkConnectionsSP_profileOtherDetails\"" "SMO"
			# sendSyslog "$functionName" "INFO" "checkConnectionsSP_profileSystemDetails" "VALUE=\"$checkConnectionsSP_profileSystemDetails\"" "SMO"
			# IFS=$'\n'

		# done
		# IFS=$ORIGIFS


		# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_corexlEnqueueFail $LASTRUNLINECOUNTERS" >>$HISTORYLOG
		# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_corexlEnqueueFail $LASTRUNLINEDIFFCOUNTERS" >>$HISTORYLOG
		# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_corexlEnqueueFail $RATECOUNTERS" >>$HISTORYLOG

		# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_perfConcurrent - $checkConnectionsSP_perfConcurrent" >>$HISTORYLOG
		# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_perfRate - $checkConnectionsSP_perfRate" >>$HISTORYLOG
		# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_corexlEnqueueFailIn - $checkConnectionsSP_corexlEnqueueFailIn" >>$HISTORYLOG
		# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_corexlEnqueueFailOut - $checkConnectionsSP_corexlEnqueueFailOut" >>$HISTORYLOG
		# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_corexlEnqueueFailF2p - $checkConnectionsSP_corexlEnqueueFailF2p" >>$HISTORYLOG
		
		# sendSyslog "$functionName" "INFO" "checkConnectionsSP_perfConcurrent" "VALUE=\"$checkConnectionsSP_perfConcurrent\"" "SMO"
		# sendSyslog "$functionName" "INFO" "checkConnectionsSP_perfRate" "VALUE=\"$checkConnectionsSP_perfRate\"" "SMO"
		# sendSyslog "$functionName" "INFO" "checkConnectionsSP_corexlEnqueueFail" "INBOUND=\"$checkConnectionsSP_corexlEnqueueFailIn\" OUTBOUND=\"$checkConnectionsSP_corexlEnqueueFailOut\"" "SMO"
		# sendSyslog "$functionName" "INFO" "checkConnectionsSP_corexlEnqueueFailF2p" "VALUE=\"$checkConnectionsSP_corexlEnqueueFailF2p\"" "SMO"
		# sendSyslog "$functionName" "INFO" "checkConnectionsSP_corexlEnqueueFailRate" "INBOUND=\"$RATEENQUEUEFAILIN\" OUTBOUND=\"$RATEENQUEUEFAILOUT\"" "SMO"
		
		# rm -rf $TEMPFILE $TEMPFILE_profile
	# fi
# fi


#LOG OUTPUTS
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_fragFragments - $checkConnectionsSP_fragFragments" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_fragPackets - $checkConnectionsSP_fragPackets" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_fragExpired - $checkConnectionsSP_fragExpired" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_fragFragmentsRate - $checkConnectionsSP_fragFragmentsRate" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_fragPacketsRate - $checkConnectionsSP_fragPacketsRate" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_fragExpiredRate - $checkConnectionsSP_fragExpiredRate" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_current - $checkConnectionsSP_current" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_peak - $checkConnectionsSP_peak" >>$HISTORYLOG
if [[ $checkSelf_ipv6Enabled == "1" ]] && [[ $checkSelf_ipv6Configured != "0" ]]; then
	echo "checkConnectionsSP_currentIpv6 $checkConnectionsSP_currentIpv6" >>$RUNLOG
	echo "checkConnectionsSP_peakIpv6 $checkConnectionsSP_peakIpv6" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_currentIpv6 - $checkConnectionsSP_currentIpv6" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_peakIpv6 - $checkConnectionsSP_peakIpv6" >>$HISTORYLOG
fi
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_pstatPhysicalMemPct - $checkConnectionsSP_pstatPhysicalMemPct" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_pstatPhysicalMemUsed - $checkConnectionsSP_pstatPhysicalMemUsed" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_pstatPhysicalMemTotal - $checkConnectionsSP_pstatPhysicalMemTotal" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_pstatKernelMemPct - $checkConnectionsSP_pstatKernelMemPct" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_pstatKernelMemUsed - $checkConnectionsSP_pstatKernelMemUsed" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_pstatKernelMemTotal - $checkConnectionsSP_pstatKernelMemTotal" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_pstatVirtualMemPct - $checkConnectionsSP_pstatVirtualMemPct" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_pstatVirtualMemUsed - $checkConnectionsSP_pstatVirtualMemUsed" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_pstatVirtualMemUsedFw - $checkConnectionsSP_pstatVirtualMemUsedFw" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_pstatVirtualMemUsedZeco - $checkConnectionsSP_pstatVirtualMemUsedZeco" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_pstatVirtualMemTotal - $checkConnectionsSP_pstatVirtualMemTotal" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_pstatConnectionsTcp - $checkConnectionsSP_pstatConnectionsTcp" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_pstatConnectionsUdp - $checkConnectionsSP_pstatConnectionsUdp" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_pstatConnectionsIcmp - $checkConnectionsSP_pstatConnectionsIcmp" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_pstatConnectionsOther - $checkConnectionsSP_pstatConnectionsOther" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_pstatConnectionsTotal - $checkConnectionsSP_pstatConnectionsTotal" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_pstatConnectionsRate - $checkConnectionsSP_pstatConnectionsRate" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_pstatKmemBytesUsed - $checkConnectionsSP_pstatKmemBytesUsed" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_pstatKmemAllocOperations - $checkConnectionsSP_pstatKmemAllocOperations" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_pstatKmemFreeOperations - $checkConnectionsSP_pstatKmemFreeOperations" >>$HISTORYLOG



#RUN LOGIC
IFS=$'\n'
for LINE in `fw ctl multik stat 2>&1 | grep -v "cp.macro" | grep -v "ID" | grep -v "\-\-" | awk '{print $1" "$5" "$7" "$9}'` ; do
	ID=$(echo "$LINE" | awk '{print $1}')
	CPU=$(echo "$LINE" | awk '{print $2}')
	CUR=$(echo "$LINE" | awk '{print $3}')
	PEAK=$(echo "$LINE" | awk '{print $4}')

	checkConnectionsSP_workerInfo="$checkConnectionsSP_workerInfo [$ID/$CPU/$CUR/$PEAK]"

done
IFS=$ORIGIFS
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Worker Info - $checkConnectionsSP_workerInfo" >>$HISTORYLOG

if [[ $checkConnectionsSP_current == "" ]] ; then
        echo "Logic - current: FAIL" >>$RUNLOG
        echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Current - $checkConnectionsSP_current" >>$HISTORYLOG
        checkConnectionsSP_problem="1"
		checkConnectionsSP_problemInfo="$checkConnectionsSP_problemInfo [Cannot determine current connections]  [Current: $checkConnectionsSP_current, Peak: $checkConnectionsSP_peak]"
else
        echo "Logic - current: PASS" >>$RUNLOG
        echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Current - $checkConnectionsSP_current" >>$HISTORYLOG
		checkConnectionsSP_workingInfo="$checkConnectionsSP_workingInfo [Current: $checkConnectionsSP_current, Peak: $checkConnectionsSP_peak]"
fi
if [[ $checkSelf_ipv6Enabled == "1" ]] && [[ $checkSelf_ipv6Configured != "0" ]]; then
	if [[ $checkConnectionsSP_currentIpv6 == "" ]] ; then
			echo "Logic - currentIpv6: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - CurrentIpv6 - $checkConnectionsSP_currentIpv6" >>$HISTORYLOG
			checkConnectionsSP_problem="1"
			checkConnectionsSP_problemInfo="$checkConnectionsSP_problemInfo [Current IPv6: $checkConnectionsSP_currentIpv6, Peak: $checkConnectionsSP_peakIpv6]"
	else
			echo "Logic - currentIpv6: PASS" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - CurrentIpv6 - $checkConnectionsSP_currentIpv6" >>$HISTORYLOG
			checkConnectionsSP_workingInfo="$checkConnectionsSP_workingInfo [Current IPv6: $checkConnectionsSP_currentIpv6, Peak: $checkConnectionsSP_peakIpv6]"
	fi
fi
if [[ $LOCALSMO == "1" ]]; then
	checkConnectionsSP_workingInfo="$checkConnectionsSP_workingInfo $checkConnectionsSP_perfConnectionRateInfo"
fi



#SYSLOG
if [[ $checkConnectionsSP_problem == "1" ]]; then
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "PROBLEM" "checkConnectionsSP_problemInfo" "VALUE=\"$checkConnectionsSP_problemInfo $checkConnectionsSP_warningInfo $checkConnectionsSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "PROBLEM" "checkConnectionsSP_problemInfo" "VALUE=\"$checkConnectionsSP_problemInfo $checkConnectionsSP_warningInfo $checkConnectionsSP_workingInfo\""
	fi
elif [[ $checkConnectionsSP_warning == "1" ]]; then
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "WARNING" "checkConnectionsSP_problemInfo" "VALUE=\"$checkConnectionsSP_warningInfo $checkConnectionsSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "WARNING" "checkConnectionsSP_problemInfo" "VALUE=\"$checkConnectionsSP_warningInfo $checkConnectionsSP_workingInfo\""
	fi
else
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "WORKING" "checkConnectionsSP_problemInfo" "VALUE=\"$checkConnectionsSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "WORKING" "checkConnectionsSP_problemInfo" "VALUE=\"$checkConnectionsSP_workingInfo\""
	fi
fi

sendSyslog "$functionName" "INFO" "checkConnectionsSP_current" "VALUE=\"$checkConnectionsSP_current\""
sendSyslog "$functionName" "INFO" "checkConnectionsSP_peak" "VALUE=\"$checkConnectionsSP_peak\""
sendSyslog "$functionName" "INFO" "checkConnectionsSP_workerInfo" "VALUE=\"$checkConnectionsSP_workerInfo\""
if [[ $LOCALSMO == "1" ]]; then
	sendSyslog "$functionName" "INFO" "checkConnectionsSP_fragFragmentsRate" "VALUE=\"$checkConnectionsSP_fragFragmentsRate\"" "SMO"
	sendSyslog "$functionName" "INFO" "checkConnectionsSP_fragPacketsRate" "VALUE=\"$checkConnectionsSP_fragPacketsRate\"" "SMO"
	sendSyslog "$functionName" "INFO" "checkConnectionsSP_fragExpiredRate" "VALUE=\"$checkConnectionsSP_fragExpiredRate\"" "SMO"
else
	sendSyslog "$functionName" "INFO" "checkConnectionsSP_fragFragmentsRate" "VALUE=\"$checkConnectionsSP_fragFragmentsRate\""
	sendSyslog "$functionName" "INFO" "checkConnectionsSP_fragPacketsRate" "VALUE=\"$checkConnectionsSP_fragPacketsRate\""
	sendSyslog "$functionName" "INFO" "checkConnectionsSP_fragExpiredRate" "VALUE=\"$checkConnectionsSP_fragExpiredRate\""
fi
sendSyslog "$functionName" "INFO" "$checkConnectionsSP_fragRate" "VALUE=\"$RATEFRAGCOUNTERS\""
if [[ $LOCALSMO == "1" ]]; then
	sendSyslog "$functionName" "INFO" "checkConnectionsSP_corexlEnqueueFail" "VALUE=\"$RATECOUNTERS\"" "SMO"
	sendSyslog "$functionName" "INFO" "checkConnectionsSP_ipsBuild" "VALUE=\"$checkConnectionsSP_ipsBuild\"" "SMO"
	sendSyslog "$functionName" "INFO" "checkConnectionsSP_ipsConfig" "VALUE=\"$checkConnectionsSP_ipsConfig\"" "SMO"
	sendSyslog "$functionName" "INFO" "checkConnectionsSP_ipsProfile" "VALUE=\"$checkConnectionsSP_ipsProfile\"" "SMO"
fi
if [[ $checkSelf_ipv6Enabled == "1" ]] && [[ $checkSelf_ipv6Configured != "0" ]]; then
	sendSyslog "$functionName" "INFO" "checkConnectionsSP_currentIpv6" "VALUE=\"$checkConnectionsSP_currentIpv6\""
	sendSyslog "$functionName" "INFO" "checkConnectionsSP_peakIpv6" "VALUE=\"$checkConnectionsSP_peakIpv6\""
fi
sendSyslog "$functionName" "INFO" "checkConnectionsSP_pstatPhysicalMemDetails" "PCT=\"$checkConnectionsSP_pstatPhysicalMemPct\" USED=\"$checkConnectionsSP_pstatPhysicalMemUsed\" TOTAL=\"$checkConnectionsSP_pstatPhysicalMemTotal\""
sendSyslog "$functionName" "INFO" "checkConnectionsSP_pstatKernelMemDetails" "PCT=\"$checkConnectionsSP_pstatKernelMemPct\" USED=\"$checkConnectionsSP_pstatKernelMemUsed\" TOTAL=\"$checkConnectionsSP_pstatKernelMemTotal\""
sendSyslog "$functionName" "INFO" "checkConnectionsSP_pstatVirtualMemDetails" "PCT=\"$checkConnectionsSP_pstatVirtualMemPct\" USED=\"$checkConnectionsSP_pstatVirtualMemUsed\" USED_FW=\"$checkConnectionsSP_pstatVirtualMemUsedFw\" USED_ZECO=\"$checkConnectionsSP_pstatVirtualMemUsedZeco\" TOTAL=\"$checkConnectionsSP_pstatVirtualMemTotal\""
sendSyslog "$functionName" "INFO" "checkConnectionsSP_pstatConnectionsDetails" "TOTAL=\"$checkConnectionsSP_pstatConnectionsTotal\" TCP=\"$checkConnectionsSP_pstatConnectionsTcp\" UDP=\"$checkConnectionsSP_pstatConnectionsUdp\" ICMP=\"$checkConnectionsSP_pstatConnectionsIcmp\" OTHER=\"$checkConnectionsSP_pstatConnectionsOther\" RATE=\"$checkConnectionsSP_pstatConnectionsRate\""
sendSyslog "$functionName" "INFO" "checkConnectionsSP_pstatKmemDetails" "USED=\"$checkConnectionsSP_pstatKmemBytesUsed\" ALLOC_OPERATIONS=\"$checkConnectionsSP_pstatKmemAllocOperations\" FREE_OPERATIONS=\"$checkConnectionsSP_pstatKmemFreeOperations\""



checkConnectionsSP_fEnd=$(date "+%s")
checkConnectionsSP_fRunTime=$(( checkConnectionsSP_fEnd - checkConnectionsSP_fStart ))
echo "checkConnectionsSP_fRunTime $checkConnectionsSP_fRunTime" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_warning - $checkConnectionsSP_warning" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_problem - $checkConnectionsSP_problem" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_problemInfo - $checkConnectionsSP_problemInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_warningInfo - $checkConnectionsSP_warningInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_workingInfo - $checkConnectionsSP_workingInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionsSP_runTime - $checkConnectionsSP_fRunTime" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkConnectionsSP_warning" "VALUE=\"$checkConnectionsSP_warning\""
sendSyslog "$functionName" "INFO" "checkConnectionsSP_problem" "VALUE=\"$checkConnectionsSP_problem\""
sendSyslog "$functionName" "INFO" "checkConnectionsSP_problemInfo" "VALUE=\"$checkConnectionsSP_problemInfo\""
sendSyslog "$functionName" "INFO" "checkConnectionsSP_warningInfo" "VALUE=\"$checkConnectionsSP_warningInfo\""
sendSyslog "$functionName" "INFO" "checkConnectionsSP_workingInfo" "VALUE=\"$checkConnectionsSP_workingInfo\""
sendSyslog "$functionName" "INFO" "checkConnectionsSP_runTime" "VALUE=\"$checkConnectionsSP_fRunTime\""


#CLEANUP
rm $TEMPFILE_PSTAT

#SUMMARY
if [[ $checkConnectionsSP_problem == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - checkConnectionsSP - SUMMARY - PROBLEM - $checkConnectionsSP_problemInfo $checkConnectionsSP_warningInfo $checkConnectionsSP_workingInfo" >>$HISTORYLOG
elif [[ $checkConnectionsSP_warning == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - checkConnectionsSP - SUMMARY - WARNING - $checkConnectionsSP_warningInfo $checkConnectionsSP_workingInfo" >>$HISTORYLOG
else
	echo "$HISTORYLOGPREAMBLE - checkConnectionsSP - SUMMARY - WORKING - $checkConnectionsSP_workingInfo" >>$HISTORYLOG
fi
echo "checkConnectionsSP_problem $checkConnectionsSP_problem" >>$RUNLOG
echo "END==checkConnectionsSP" >>$RUNLOG
}

###################################################################################################
checkSecureXL() {
echo "START==checkSecureXL" >>$RUNLOG

#DEFAULTS
checkSecureXL_fStart=$(date "+%s")
functionName=${FUNCNAME[0]}
checkSecureXL_warning="0"
checkSecureXL_problem="0"
checkSecureXL_workingInfo=""
checkSecureXL_warningInfo=""
checkSecureXL_problemInfo=""
TEMPFILE=$TEMPDIR/$SCRIPT.$EPOCH.$functionName
TEMPFILE2=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.2
TEMPFILE_STAT=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.stat
TEMPFILE_STAT6=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.stat6

#COLLECT OUTPUTS
fwaccel stat > $TEMPFILE_STAT
if [[ $checkSelf_ipv6Enabled == "1" ]]; then
	fwaccel6 stat > $TEMPFILE_STAT6
fi

checkSecureXL_status=$(cat $TEMPFILE_STAT | grep "SND\|KPPAK\|UPPAK" | awk -F "|" '{print $4}' | tr -d '[:space:]')
if [[ $checkSecureXL_status == "disabled" ]]; then
	checkSecureXL_disabledFromRule="DISABLED"
	checkSecureXL_acceptTemplates="DISABLED"
	checkSecureXL_natTemplates="DISABLED"
	checkSecureXL_dropTemplates="DISABLED"
elif [[ $checkSecureXL_status == "off" ]]; then
	checkSecureXL_disabledFromRule="OFF"
	checkSecureXL_acceptTemplates="OFF"
	checkSecureXL_natTemplates="OFF"
	checkSecureXL_dropTemplates"OFF"
else
	checkSecureXL_disabledFromRule=$(cat $TEMPFILE_STAT | grep rule | head -1 | awk '{print $NF}' | tr -d '#')
	if [[ $checkSecureXL_disabledFromRule == "" ]]; then
		checkSecureXL_disabledFromRule="LAST"
	fi
	if [[ $checkSecureXL_disabledFromRule == "LAST" ]]; then
		checkSecureXL_disabledFromRulePct="100"
	else
		checkSecureXL_disabledFromRulePct=$(percentofvalue $checkSecureXL_disabledFromRule $checkPolicy_policyRuleQty)
	fi
	checkSecureXL_acceptTemplates=$(cat $TEMPFILE_STAT | grep "Accept Template" | awk '{print $4}')
	checkSecureXL_natTemplates=$(cat $TEMPFILE_STAT | grep "NAT Template" | awk '{print $4}')
	checkSecureXL_dropTemplates=$(cat $TEMPFILE_STAT | grep "Drop Template" | awk '{print $4}')
fi
if [[ $checkSelf_ipv6Enabled == "1" ]] && [[ $checkSelf_ipv6Configured != "0" ]]; then
	checkSecureXL_statusIpv6=$(cat $TEMPFILE_STAT6 | grep "SND\|KPPAK\|UPPAK" | awk -F "|" '{print $4}' | tr -d '[:space:]')
	if [[ $checkSecureXL_statusIpv6 == "disabled" ]]; then
		checkSecureXL_disabledFromRuleIpv6="DISABLED"
		checkSecureXL_natTemplatesIpv6="DISABLED"
		checkSecureXL_dropTemplatesIpv6="DISABLED"
	elif [[ $checkSecureXL_statusIpv6 == "off" ]]; then
		checkSecureXL_disabledFromRuleIpv6="OFF"
		checkSecureXL_natTemplatesIpv6="OFF"
		checkSecureXL_dropTemplatesIpv6="OFF"
	else
		checkSecureXL_disabledFromRuleIpv6=$(cat $TEMPFILE_STAT6 | grep rule | head -1 | awk '{print $NF}' | tr -d '#')
		if [[ $checkSecureXL_disabledFromRuleIpv6 == "" ]]; then
			checkSecureXL_disabledFromRuleIpv6="LAST"
		fi
		checkSecureXL_natTemplatesIpv6=$(cat $TEMPFILE_STAT6 | grep "NAT Template" | awk '{print $4}')
		checkSecureXL_dropTemplatesIpv6=$(cat $TEMPFILE_STAT6 | grep "Drop Template" | awk '{print $4}')
	fi
fi

fwaccel stats -s > $TEMPFILE
checkSecureXL_statsAccPct=$(cat $TEMPFILE | grep "Accelerated pkts" | awk '{print $6}' | tr -d '()%')
checkSecureXL_statsF2fPct=$(cat $TEMPFILE | grep "F2Fed pkts" | awk '{print $6}' | tr -d '()%')
checkSecureXL_statsPxlPct=$(cat $TEMPFILE | grep "PSLXL pkts" | awk '{print $6}' | tr -d '()%')
checkSecureXL_statsQPxlPct="0"
checkSecureXL_statsAcceptTemplateQty=$(fwaccel templates -s | grep "Total number of templates" | awk '{print $NF}')
if [[ $checkSecureXL_dropTemplates == "enabled" ]]; then
	checkSecureXL_statsDropTemplateQty=$(fwaccel stats -d | grep "Drop Template" | awk '{print $NF}')
	LASTRUNDROPTEMPLATEQTY=$(cat $CURRENTRUNHISTORYLOGOUTPUT | grep checkSecureXL_statsDropTemplateQty | head -1 | awk -F " - " '{print $7}')
	if [[ $LASTRUNDROPTEMPLATEQTY == "" ]]; then
		LASTRUNDROPTEMPLATEQTY=$checkSecureXL_statsDropTemplateQty
	fi
	checkSecureXL_statsDropTemplateRate="$(( (checkSecureXL_statsDropTemplateQty - LASTRUNDROPTEMPLATEQTY) / SINCELASTRUN ))"
	if [[ $checkSecureXL_statsDropTemplateRate -lt "0" ]]; then
			checkSecureXL_statsDropTemplateRate="0"
		fi
else
	checkSecureXL_statsDropTemplateQty="0"
	checkSecureXL_statsDropTemplateRate="0"
fi


#f2f_addresses
fw tab -t f2f_addresses > $TEMPFILE 2>&1
NOT_LOADED=$(cat $TEMPFILE | grep "not loaded" | wc -l)
if [[ $NOT_LOADED -gt "0" ]]; then 
	checkSecureXL_f2fAddressesEnabled="No"
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXL_f2fAddressesEnabled - $checkSecureXL_f2fAddressesEnabled" >>$HISTORYLOG
	sendSyslog "$functionName" "INFO" "checkSecureXL_f2fAddressesEnabled" "VALUE=\"$checkSecureXL_f2fAddressesEnabled\""
else
	checkSecureXL_f2fAddressesEnabled="Yes"
	checkSecureXL_f2fAddressesQty=$(cat $TEMPFILE | grep "<" | wc -l)
	sendSyslog "$functionName" "INFO" "checkSecureXL_f2fAddressesEnabled" "VALUE=\"$checkSecureXL_f2fAddressesEnabled\""
	sendSyslog "$functionName" "INFO" "checkSecureXL_f2fAddressesQty" "VALUE=\"$checkSecureXL_f2fAddressesQty\""
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXL_f2fAddressesEnabled - $checkSecureXL_f2fAddressesEnabled" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXL_f2fAddressesQty - $checkSecureXL_f2fAddressesQty" >>$HISTORYLOG
	for LINE in `cat $TEMPFILE | grep "<" | tr -d '<> '`; do
		SUBNET_START=$(hex2dot `echo "$LINE" | awk -F "," '{print $1}'`)
		SUBNET_END=$(hex2dot `echo "$LINE" | awk -F "," '{print $2}'`)
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXL_f2fAddressesDetail - $SUBNET_START-$SUBNET_END" >>$HISTORYLOG
		IFS=$'\n'
		sendSyslog "$functionName" "INFO" "checkSecureXL_f2fAddressesDetail" "VALUE=\"$SUBNET_START-$SUBNET_END\""
		IFS=$ORIGIFS
	done
	checkSecureXL_workingInfo="$checkSecureXL_workingInfo [F2F Addresses Enabled-$checkSecureXL_f2fAddressesQty Ranges]"
fi

if [[ $checkSelf_majorVer == "R80.40" ]]; then
	checkSecureXL_connsFromTemplatesPct=$(/usr/bin/sqlite3 /var/log/opt/CPshrd-R80.40/cpview_services/cpview_services.dat "SELECT * FROM fw_network_stats ORDER BY ROWID DESC LIMIT 1" | awk -F "|" '{print $7}')
	checkSecureXL_unusedTemplatesPct=$(/usr/bin/sqlite3 /var/log/opt/CPshrd-R80.40/cpview_services/cpview_services.dat "SELECT * FROM fw_network_stats ORDER BY ROWID DESC LIMIT 1" | awk -F "|" '{print $8}')
elif [[ $checkSelf_majorVer == "R81.10" ]]; then
	checkSecureXL_connsFromTemplatesPct=$(/usr/bin/sqlite3 /var/log/opt/CPshrd-R81.10/cpview_services/cpview_services.dat "SELECT * FROM fw_network_stats ORDER BY ROWID DESC LIMIT 1" | awk -F "|" '{print $7}')
	checkSecureXL_unusedTemplatesPct=$(/usr/bin/sqlite3 /var/log/opt/CPshrd-R81.10/cpview_services/cpview_services.dat "SELECT * FROM fw_network_stats ORDER BY ROWID DESC LIMIT 1" | awk -F "|" '{print $8}')
elif [[ $checkSelf_majorVer == "R81.20" ]]; then
	checkSecureXL_connsFromTemplatesPct=$(/usr/bin/sqlite3 /var/log/opt/CPshrd-R81.20/cpview_services/cpview_services.dat "SELECT * FROM fw_network_stats ORDER BY ROWID DESC LIMIT 1" 2>&1 | awk -F "|" '{print $7}')
	checkSecureXL_unusedTemplatesPct=$(/usr/bin/sqlite3 /var/log/opt/CPshrd-R81.20/cpview_services/cpview_services.dat "SELECT * FROM fw_network_stats ORDER BY ROWID DESC LIMIT 1" 2>&1 | awk -F "|" '{print $8}')
fi


# fast_accel
if [[ -f $FWDIR/log/fw_fast_accel.log ]]; then
	checkSecureXL_fastaccelEnabled=$(fw ctl fast_accel show_state | grep "enabled" | wc -l)
	if [[ $checkSecureXL_fastaccelEnabled -eq "1" ]]; then
		fw ctl fast_accel show_table | grep ")" | sed 's/\s\+/,/g' | tr -cd 'a-z0-9.,/\n'> $TEMPFILE
		IFS=$'\n'
		for LINE in `cat $TEMPFILE` ; do 
			RULE_NUMBER=$(echo "$LINE" | awk -F "," '{print $1}')
			SRC_IP=$(echo "$LINE" | awk -F "," '{print $2}')
			DST_IP=$(echo "$LINE" | awk -F "," '{print $3}')
			DST_PORT=$(echo "$LINE" | awk -F "," '{print $4}')
			PROTO=$(echo "$LINE" | awk -F "," '{print $5}')
			HIT_COUNT=$(echo "$LINE" | awk -F "," '{print $6}')
			echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXL_fastaccelDetails - RULE_NUMBER=$RULE_NUMBER SRC_IP=$SRC_IP DST_IP=$DST_IP DST_PORT=$DST_PORT PROTO=$PROTO HIT_COUNT=$HIT_COUNT" >>$HISTORYLOG
			IFS=$ORIGIFS
			sendSyslog "$functionName" "INFO" "checkSecureXL_fastaccelDetails" "RULE_NUMBER=\"$RULE_NUMBER\" SRC_IP=\"$SRC_IP\" DST_IP=\"$DST_IP\" DST_PORT=\"$DST_PORT\" PROTO=\"$PROTO\" HIT_COUNT=\"$HIT_COUNT\""
			IFS=$'\n'
		done
		IFS=$ORIGIFS
	fi
	checkSecureXL_fastaccelRuleQty=$(cat $TEMPFILE | wc -l)
	checkSecureXL_workingInfo="$checkSecureXL_workingInfo [Fast Accel Enabled: $checkSecureXL_fastaccelRuleQty rules]"
else
	checkSecureXL_fastaccelEnabled="0"
fi



#LOG OUTPUTS
echo "checkSecureXL_status $checkSecureXL_status" >>$RUNLOG
echo "checkSecureXL_disabledFromRule $checkSecureXL_disabledFromRule" >>$RUNLOG
echo "checkSecureXL_disabledFromRulePct $checkSecureXL_disabledFromRulePct" >>$RUNLOG
echo "checkSecureXL_acceptTemplates $checkSecureXL_acceptTemplates" >>$RUNLOG
echo "checkSecureXL_dropTemplates $checkSecureXL_dropTemplates" >>$RUNLOG
echo "checkSecureXL_natTemplates $checkSecureXL_natTemplates" >>$RUNLOG
echo "checkSecureXL_statsAccPct $checkSecureXL_statsAccPct" >>$RUNLOG
echo "checkSecureXL_statsF2fPct $checkSecureXL_statsF2fPct" >>$RUNLOG
echo "checkSecureXL_statsPxlPct $checkSecureXL_statsPxlPct" >>$RUNLOG
echo "checkSecureXL_statsAcceptTemplateQty $checkSecureXL_statsAcceptTemplateQty" >>$RUNLOG

if [[ $checkSecureXL_dropTemplates == "enabled" ]]; then
	echo "checkSecureXL_statsDropTemplateQty $checkSecureXL_statsDropTemplateQty" >>$RUNLOG
	echo "checkSecureXL_statsDropTemplateRate $checkSecureXL_statsDropTemplateRate" >>$RUNLOG
fi

echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXL_status - $checkSecureXL_status" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXL_statusTooManyGeneralErrors - $checkSecureXL_statusTooManyGeneralErrors" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXL_disabledFromRule - $checkSecureXL_disabledFromRule" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXL_disabledFromRulePct - $checkSecureXL_disabledFromRulePct" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXL_acceptTemplates - $checkSecureXL_acceptTemplates" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXL_dropTemplates - $checkSecureXL_dropTemplates" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXL_natTemplates - $checkSecureXL_natTemplates" >>$HISTORYLOG
if [[ $checkSelf_ipv6Enabled == "1" ]] && [[ $checkSelf_ipv6Configured != "0" ]]; then
	echo "checkSecureXL_statusIpv6 $checkSecureXL_statusIpv6" >>$RUNLOG
	echo "checkSecureXL_disabledFromRuleIpv6 $checkSecureXL_disabledFromRuleIpv6" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXL_statusIpv6 - $checkSecureXL_statusIpv6" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXL_disabledFromRuleIpv6 - $checkSecureXL_disabledFromRuleIpv6" >>$HISTORYLOG
fi
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXL_statsAccPct - $checkSecureXL_statsAccPct" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXL_statsF2fPct - $checkSecureXL_statsF2fPct" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXL_statsPxlPct - $checkSecureXL_statsPxlPct" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXL_statsAcceptTemplateQty - $checkSecureXL_statsAcceptTemplateQty" >>$HISTORYLOG
if [[ $checkSecureXL_dropTemplates == "enabled" ]]; then
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXL_statsDropTemplateQty - $checkSecureXL_statsDropTemplateQty" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXL_statsDropTemplateRate - $checkSecureXL_statsDropTemplateRate" >>$HISTORYLOG
fi
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXL_connsFromTemplatesPct - $checkSecureXL_connsFromTemplatesPct" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXL_unusedTemplatesPct - $checkSecureXL_unusedTemplatesPct" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXL_fastaccelEnabled - $checkSecureXL_fastaccelEnabled" >>$HISTORYLOG


#RUN LOGIC
if [[ $checkSecureXL_status == "disabled" ]]; then
	echo "Logic - status: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Status - $checkSecureXL_status" >>$HISTORYLOG
	checkSecureXL_problem="1"
	checkSecureXL_problemInfo="$checkSecureXL_problemInfo [Status: $checkSecureXL_status]"
elif [[ $checkSecureXL_status == "off" ]] || [[ $checkSecureXL_status == "noinit" ]]; then
	echo "Logic - status: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Status - $checkSecureXL_status" >>$HISTORYLOG
	checkSecureXL_problem="1"
	checkSecureXL_problemInfo="$checkSecureXL_problemInfo [Status: $checkSecureXL_status]"
elif [[ $checkSecureXL_status == "no" ]] || [[ $checkSecureXL_status == "nolicense" ]]; then
	echo "Logic - status: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Status - $checkSecureXL_status" >>$HISTORYLOG
	checkSecureXL_problem="1"
	checkSecureXL_problemInfo="$checkSecureXL_problemInfo [No License]"
else
	echo "Logic - status: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Status - $checkSecureXL_status" >>$HISTORYLOG
	if [[ $checkSecureXL_disabledFromRule == "LAST" ]]; then
		checkSecureXL_workingInfo="$checkSecureXL_workingInfo [Status: $checkSecureXL_status, Not disabled at any rule]"
	else
		checkSecureXL_workingInfo="$checkSecureXL_workingInfo [Status: $checkSecureXL_status, Disabled at Rule: $checkSecureXL_disabledFromRule ($checkSecureXL_disabledFromRulePct pct)]"
	fi
fi
if [[ $checkSelf_ipv6Enabled == "1" ]] && [[ $checkSelf_ipv6Configured != "0" ]]; then
	if [[ $checkSecureXL_statusIpv6 == "disabled" ]]; then
		echo "Logic - status Ipv6: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Status Ipv6 - $checkSecureXL_statusIpv6" >>$HISTORYLOG
		checkSecureXL_problem="1"
		checkSecureXL_problemInfo="$checkSecureXL_problemInfo [Status IPv6: $checkSecureXL_statusIpv6]"
	elif [[ $checkSecureXL_statusIpv6 == "off" ]]; then
		echo "Logic - status Ipv6: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Status Ipv6 - $checkSecureXL_statusIpv6" >>$HISTORYLOG
		checkSecureXL_problem="1"
		checkSecureXL_problemInfo="$checkSecureXL_problemInfo [Status IPv6: $checkSecureXL_statusIpv6]"
	else
		echo "Logic - status Ipv6: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Status Ipv6 - $checkSecureXL_statusIpv6" >>$HISTORYLOG
		if [[ $checkSecureXL_disabledFromRuleIpv6 == "LAST" ]]; then
			checkSecureXL_workingInfo="$checkSecureXL_workingInfo [Status IPv6: $checkSecureXL_statusIpv6, Not disabled at any rule]"
		else
			checkSecureXL_workingInfo="$checkSecureXL_workingInfo [Status IPv6: $checkSecureXL_statusIpv6, Disabled at Rule IPv6: $checkSecureXL_disabledFromRuleIpv6]"
		fi
	fi
fi
if [[ $checkSecureXL_dropTemplates == "enabled" ]] && [[ $checkSecureXL_statsDropTemplateRate -gt "0" ]]; then
	checkSecureXL_workingInfo="$checkSecureXL_workingInfo [Drop Template Rate: $checkSecureXL_statsDropTemplateRate/sec]"
fi

#SYSLOG
if [[ $checkSecureXL_problem == "1" ]]; then
	sendSyslog "$functionName" "PROBLEM" "checkSecureXL_problemInfo" "VALUE=\"$checkSecureXL_problemInfo $checkSecureXL_warningInfo $checkSecureXL_workingInfo\""
elif [[ $checkSecureXL_warning == "1" ]]; then
	sendSyslog "$functionName" "WARNING" "checkSecureXL_warningInfo" "VALUE=\"$checkSecureXL_warningInfo $checkSecureXL_workingInfo\""	
else
	sendSyslog "$functionName" "WORKING" "checkSecureXL_workingInfo" "VALUE=\"$checkSecureXL_workingInfo\""
fi





sendSyslog "$functionName" "INFO" "checkSecureXL_status" "VALUE=\"$checkSecureXL_status\""
sendSyslog "$functionName" "INFO" "checkSecureXL_disabledFromRule" "VALUE=\"$checkSecureXL_disabledFromRule\""
sendSyslog "$functionName" "INFO" "checkSecureXL_disabledFromRulePct" "VALUE=\"$checkSecureXL_disabledFromRulePct\""
sendSyslog "$functionName" "INFO" "checkSecureXL_acceptTemplates" "VALUE=\"$checkSecureXL_acceptTemplates\""
sendSyslog "$functionName" "INFO" "checkSecureXL_dropTemplates" "VALUE=\"$checkSecureXL_dropTemplates\""
sendSyslog "$functionName" "INFO" "checkSecureXL_natTemplates" "VALUE=\"$checkSecureXL_natTemplates\""
sendSyslog "$functionName" "INFO" "checkSecureXL_statsAccPct" "VALUE=\"$checkSecureXL_statsAccPct\""
sendSyslog "$functionName" "INFO" "checkSecureXL_statsF2fPct" "VALUE=\"$checkSecureXL_statsF2fPct\""
sendSyslog "$functionName" "INFO" "checkSecureXL_statsPxlPct" "VALUE=\"$checkSecureXL_statsPxlPct\""
sendSyslog "$functionName" "INFO" "checkSecureXL_statsDropTemplateQty" "VALUE=\"$checkSecureXL_statsDropTemplateQty\""
sendSyslog "$functionName" "INFO" "checkSecureXL_statsDropTemplateRate" "VALUE=\"$checkSecureXL_statsDropTemplateRate\""
sendSyslog "$functionName" "INFO" "checkSecureXL_statsAcceptTemplateQty" "VALUE=\"$checkSecureXL_statsAcceptTemplateQty\""
if [[ $checkSelf_ipv6Enabled == "1" ]] && [[ $checkSelf_ipv6Configured != "0" ]]; then
	sendSyslog "$functionName" "INFO" "checkSecureXL_statusIpv6" "VALUE=\"$checkSecureXL_statusIpv6\""
	sendSyslog "$functionName" "INFO" "checkSecureXL_disabledFromRuleIpv6" "VALUE=\"$checkSecureXL_disabledFromRuleIpv6\""
fi
sendSyslog "$functionName" "INFO" "checkSecureXL_connsFromTemplatesPct" "VALUE=\"$checkSecureXL_connsFromTemplatesPct\""
sendSyslog "$functionName" "INFO" "checkSecureXL_unusedTemplatesPct" "VALUE=\"$checkSecureXL_unusedTemplatesPct\""


#CLEANUP
rm -rf $TEMPFILE $TEMPFILE_STAT $TEMPFILE_STAT6 $TEMPFILE2


checkSecureXL_fEnd=$(date "+%s")
checkSecureXL_fRunTime=$(( checkSecureXL_fEnd - checkSecureXL_fStart ))
echo "checkSecureXL_fRunTime $checkSecureXL_fRunTime" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXL_warning - $checkSecureXL_warning" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXL_problem - $checkSecureXL_problem" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXL_problemInfo - $checkSecureXL_problemInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXL_warningInfo - $checkSecureXL_warningInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXL_workingInfo - $checkSecureXL_workingInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXL_runTime - $checkSecureXL_fRunTime" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkSecureXL_warning" "VALUE=\"$checkSecureXL_warning\""
sendSyslog "$functionName" "INFO" "checkSecureXL_problem" "VALUE=\"$checkSecureXL_problem\""
sendSyslog "$functionName" "INFO" "checkSecureXL_problemInfo" "VALUE=\"$checkSecureXL_problemInfo\""
sendSyslog "$functionName" "INFO" "checkSecureXL_warningInfo" "VALUE=\"$checkSecureXL_warningInfo\""
sendSyslog "$functionName" "INFO" "checkSecureXL_workingInfo" "VALUE=\"$checkSecureXL_workingInfo\""
sendSyslog "$functionName" "INFO" "checkSecureXL_runTime" "VALUE=\"$checkSecureXL_fRunTime\""
echo "checkSecureXL_problem $checkSecureXL_problem" >>$RUNLOG
echo "END==checkSecureXL" >>$RUNLOG
}

###################################################################################################
checkSecureXLSP() {
echo "START==checkSecureXLSP" >>$RUNLOG

#DEFAULTS
checkSecureXLSP_fStart=$(date "+%s")
functionName=${FUNCNAME[0]}
checkSecureXLSP_warning="0"
checkSecureXLSP_problem="0"
checkSecureXLSP_workingInfo=""
checkSecureXLSP_warningInfo=""
checkSecureXLSP_problemInfo=""
TEMPFILE=$TEMPDIR/$SCRIPT.$EPOCH.$functionName
TEMPFILE_STAT=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.stat


#COLLECT OUTPUTS
fwaccel stat > $TEMPFILE_STAT
checkSecureXLSP_statusTooManyGeneralErrors=$(cat $TEMPFILE_STAT | grep "too many general errors" | wc -l)
if [[ $checkSecureXLSP_statusTooManyGeneralErrors -gt "0" ]]; then
	echo "Logic - status too many general errors: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Status - $checkSecureXLSP_statusTooManyGeneralErrors" >>$HISTORYLOG
	checkSecureXLSP_problem="1"
	checkSecureXLSP_problemInfo="$checkSecureXLSP_problemInfo [Too many general errors]"
else
	echo "Logic - status too many general errors: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Status - $checkSecureXLSP_statusTooManyGeneralErrors" >>$HISTORYLOG
fi

if [[ $SELF_HEAL_ENABLED -eq "1" ]]; then
	if [[ $checkSecureXLSP_statusTooManyGeneralErrors -gt "0" ]]; then
		FIX="SecureXL Too Many General Errors"
		COMMAND="fwaccel on"
		BEFORE_FIX=$(fwaccel stat | grep "Accelerator Status")
		if [[ $SELF_HEAL_CHRONIC -eq "1" ]]; then
			COMMAND_EXECUTION="bypassed due to SELF_HEAL_CHRONIC"
			checkSecureXLSP_warningInfo="$checkSecureXLSP_warningInfo [Self Heal Bypassed due to Chronic issue - fwaccel on]"
		else
			COMMAND_EXECUTION=$(fwaccel on 2>&1)
			checkSecureXLSP_workingInfo="$checkSecureXLSP_workingInfo [Self Heal - fwaccel on]"
		fi
		AFTER_FIX=$(fwaccel stat | grep "Accelerator Status")
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - SELF_HEAL - FIX=$FIX COMMAND=$COMMAND COMMAND_EXECUTION=$COMMAND_EXECUTION BEFORE_FIX=$BEFORE_FIX AFTER_FIX=$AFTER_FIX" >>$HISTORYLOG
		sendSyslog "$functionName" "INFO" "SELF_HEAL" "FIX=\"$FIX\" COMMAND=\"$COMMAND\" BEFORE_FIX=\"$BEFORE_FIX\" AFTER_FIX=\"$AFTER_FIX\" COMMAND_EXECUTION=\"$COMMAND_EXECUTION\""
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - SELF_HEAL - FIX=$FIX COMMAND=$COMMAND COMMAND_EXECUTION=$COMMAND_EXECUTION BEFORE_FIX=$BEFORE_FIX AFTER_FIX=$AFTER_FIX" >>$SELF_HEAL_LOG
	fi
fi



#KPPAK in R81.10 Maestro
checkSecureXLSP_status=$(cat $TEMPFILE_STAT | grep "SND\|KPPAK\|UPPAK" | awk -F "|" '{print $4}' | tr -d ' ')
if [[ $checkSecureXLSP_state == "disabled" ]]; then
	checkSecureXLSP_disabledFromRule="DISABLED"
else
	checkSecureXLSP_disabledFromRule=$(cat $TEMPFILE_STAT | grep "Layer Network disables" | head -1 | awk '{print $NF}' | tr -d '#')
fi


if [[ $checkSecureXLSP_status == "on" || $checkSecureXLSP_status == "enabled" ]] && [[ $checkSecureXLSP_disabledFromRule == "" ]]; then
	checkSecureXLSP_disabledFromRule="LAST"
fi
if [[ $checkSecureXLSP_disabledFromRule == "LAST" ]]; then
	checkSecureXLSP_disabledFromRulePct="100"
elif [[ $checkSecureXLSP_disabledFromRule == "DISABLED" ]]; then
		checkSecureXLSP_disabledFromRulePct=""
else
	checkSecureXLSP_disabledFromRulePct=$(percentofvalue $checkSecureXLSP_disabledFromRule $checkPolicySP_policyRuleQty)
fi

if [[ $checkSecureXLSP_status == "disabled" ]]; then
	checkSecureXLSP_acceptTemplates="DISABLED"
	checkSecureXLSP_natTemplates="DISABLED"
	checkSecureXLSP_dropTemplates="DISABLED"
elif [[ $checkSecureXLSP_status == "off" ]]; then
	checkSecureXLSP_acceptTemplates="OFF"
	checkSecureXLSP_natTemplates="OFF"
	checkSecureXLSP_dropTemplates="OFF"
else
	checkSecureXLSP_acceptTemplates=$(cat $TEMPFILE_STAT | grep "Accept Template" | awk '{print $4}')
	checkSecureXLSP_natTemplates=$(cat $TEMPFILE_STAT | grep "NAT Template" | awk '{print $4}')
	checkSecureXLSP_dropTemplates=$(cat $TEMPFILE_STAT | grep "Drop Template" | awk '{print $4}')
fi


if [[ $checkSelf_ipv6Enabled == "1" ]] && [[ $checkSelf_ipv6Configured != "0" ]]; then
	checkSecureXLSP_statusIpv6=$(fwaccel6 stat | grep "SND\|KPPAK" | awk -F "|" '{print $4}' | tr -d ' ')
	if [[ $checkSecureXLSP_statusIpv6 == "disabled" ]]; then
		checkSecureXLSP_disabledFromRuleIpv6="DISABLED"
	else
		checkSecureXLSP_disabledFromRuleIpv6=$(fwaccel6 stat | grep "Layer Network disables" | head -1 | awk '{print $NF}' | tr -d '#')
	fi
	
	if [[ $checkSecureXLSP_disabledFromRuleIpv6 == "" ]]; then
		checkSecureXLSP_disabledFromRuleIpv6="LAST"
	fi
	if [[ $checkSecureXLSP_disabledFromRuleIpv6 == "LAST" ]]; then
		checkSecureXLSP_disabledFromRulePctIpv6="100"
	else
		checkSecureXLSP_disabledFromRulePctIpv6=$(percentofvalue $checkSecureXLSP_disabledFromRuleIpv6 $checkPolicySP_policyRuleQty)
	fi
	if [[ $checkSecureXLSP_statusIpv6 == "disabled" ]]; then
		checkSecureXLSP_natTemplatesIpv6="DISABLED"
		checkSecureXLSP_dropTemplatesIpv6="DISABLED"
	elif [[ $checkSecureXLSP_statusIpv6 == "off" ]]; then
		checkSecureXLSP_natTemplatesIpv6="OFF"
		checkSecureXLSP_dropTemplatesIpv6="OFF"
	else
		checkSecureXLSP_natTemplatesIpv6=$(fwaccel6 stat | grep "NAT Template" | awk '{print $4}')
		checkSecureXLSP_dropTemplatesIpv6=$(fwaccel6 stat | grep "Drop Template" | awk '{print $4}')
	fi
fi



if [[ $checkSecureXLSP_status == "disabled" ]]; then
	checkSecureXLSP_statsAccPct="DISABLED"
	checkSecureXLSP_statsF2fPct="DISABLED"
	checkSecureXLSP_statsPxlPct="DISABLED"
elif [[ $checkSecureXLSP_status == "off" ]]; then
	checkSecureXLSP_statsAccPct="OFF"
	checkSecureXLSP_statsF2fPct="OFF"
	checkSecureXLSP_statsPxlPct="OFF"
else
	fwaccel stats -s > $TEMPFILE
	checkSecureXLSP_statsAccPct=$(cat $TEMPFILE | grep "Accelerated pkts" | awk '{print $6}' | tr -d '()%')
	checkSecureXLSP_statsF2fPct=$(cat $TEMPFILE | grep "F2Fed pkts" | awk '{print $6}' | tr -d '()%')
	checkSecureXLSP_statsPxlPct=$(cat $TEMPFILE | grep "PXL pkts" | awk '{print $6}' | tr -d '()%')
fi

if [[ $LOCALSMO == "1" ]]; then
	#checkSecureXLSP_statsConnRateAccel=$(snmp .1.3.6.1.4.1.2620.1.48.20.24.1.3.3)
	checkSecureXLSP_statsConnRateAccel=$(stattestget 1.3.6.1.4.1.2620.1.48.20.24.1.3.3)
	if [[ $checkSecureXLSP_statsConnRateAccel =~ "No" ]]; then
		checkSecureXLSP_statsConnRateAccel="1"
	fi
	#checkSecureXLSP_statsConnRateMedium=$(snmp .1.3.6.1.4.1.2620.1.48.20.24.1.4.3)
	checkSecureXLSP_statsConnRateMedium=$(stattestget 1.3.6.1.4.1.2620.1.48.20.24.1.4.3)
	if [[ $checkSecureXLSP_statsConnRateMedium =~ "No" ]]; then
		checkSecureXLSP_statsConnRateMedium="1"
	fi
	#checkSecureXLSP_statsConnRateFirewall=$(snmp .1.3.6.1.4.1.2620.1.48.20.24.1.5.3)
	checkSecureXLSP_statsConnRateFirewall=$(stattestget 1.3.6.1.4.1.2620.1.48.20.24.1.5.3)
	if [[ $checkSecureXLSP_statsConnRateFirewall =~ "No" ]]; then
		checkSecureXLSP_statsConnRateFirewall="1"
	fi
	#checkSecureXLSP_statsConnRateDropped=$(snmp .1.3.6.1.4.1.2620.1.48.20.24.1.6.3)
	checkSecureXLSP_statsConnRateDropped=$(stattestget 1.3.6.1.4.1.2620.1.48.20.24.1.6.3)
	if [[ $checkSecureXLSP_statsConnRateDropped =~ "No" ]]; then
		checkSecureXLSP_statsConnRateDropped="1"
	fi
	checkSecureXLSP_statsConnRate=$(( checkSecureXLSP_statsConnRateAccel + checkSecureXLSP_statsConnRateMedium + checkSecureXLSP_statsConnRateFirewall + checkSecureXLSP_statsConnRateDropped ))
	if [[ $checkSecureXLSP_statsConnRate == "0" ]]; then
		checkSecureXLSP_statsConnRateAccelPct="0"
		checkSecureXLSP_statsConnRateMediumPct="0"
		checkSecureXLSP_statsConnRateFirewallPct="0"
		checkSecureXLSP_statsConnRateDroppedPct="0"
	else
		checkSecureXLSP_statsConnRateAccelPct=$(echo $checkSecureXLSP_statsConnRateAccel/$checkSecureXLSP_statsConnRate*100 | bc -l | awk -F "." '{print $1}')
		checkSecureXLSP_statsConnRateMediumPct=$(echo $checkSecureXLSP_statsConnRateMedium/$checkSecureXLSP_statsConnRate*100 | bc -l | awk -F "." '{print $1}')
		checkSecureXLSP_statsConnRateFirewallPct=$(echo $checkSecureXLSP_statsConnRateFirewall/$checkSecureXLSP_statsConnRate*100 | bc -l | awk -F "." '{print $1}')
		checkSecureXLSP_statsConnRateDroppedPct=$(echo $checkSecureXLSP_statsConnRateDropped/$checkSecureXLSP_statsConnRate*100 | bc -l | awk -F "." '{print $1}')
	fi
	
	
	if [[ $checkSecureXLSP_dropTemplates == "enabled" ]]; then
		checkSecureXLSP_statsDropTemplateQty=$(g_all "fwaccel stats -d" | grep "drop template" | awk '{print $NF}' | paste -sd+ | bc)
		LASTRUNDROPTEMPLATEQTY=$(cat $CURRENTRUNHISTORYLOGOUTPUT | grep checkSecureXLSP_statsDropTemplateQty | head -1 | awk -F " - " '{print $7}')
		if [[ $LASTRUNDROPTEMPLATEQTY == "" ]]; then
			LASTRUNDROPTEMPLATEQTY=$checkSecureXLSP_statsDropTemplateQty
		fi
		checkSecureXLSP_statsDropTemplateRate="$(( (checkSecureXLSP_statsDropTemplateQty - LASTRUNDROPTEMPLATEQTY) / SINCELASTRUN ))"
		if [[ $checkSecureXLSP_statsDropTemplateRate -lt "0" ]]; then
			checkSecureXLSP_statsDropTemplateRate="0"
		fi
	fi


	#f2f_addresses
	fw tab -t f2f_addresses > $TEMPFILE 2>&1
	NOT_LOADED=$(cat $TEMPFILE | grep "not loaded" | wc -l)
	if [[ $NOT_LOADED -gt "0" ]]; then 
		checkSecureXLSP_f2fAddressesEnabled="No"
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXLSP_f2fAddressesEnabled - $checkSecureXLSP_f2fAddressesEnabled" >>$HISTORYLOG
		sendSyslog "$functionName" "INFO" "checkSecureXLSP_f2fAddressesEnabled" "VALUE=\"$checkSecureXLSP_f2fAddressesEnabled\""
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXLSP_f2fAddressesDetail - NOT_LOADED" >>$HISTORYLOG
		sendSyslog "$functionName" "INFO" "checkSecureXLSP_f2fAddressesDetail" "VALUE=\"NOT_LOADED\""
	else
		checkSecureXLSP_f2fAddressesEnabled="Yes"
		checkSecureXLSP_f2fAddressesQty=$(cat $TEMPFILE | grep "<" | wc -l)
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXLSP_f2fAddressesEnabled - $checkSecureXLSP_f2fAddressesEnabled" >>$HISTORYLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXLSP_f2fAddressesQty - $checkSecureXLSP_f2fAddressesQty" >>$HISTORYLOG
		sendSyslog "$functionName" "INFO" "checkSecureXLSP_f2fAddressesEnabled" "VALUE=\"$checkSecureXLSP_f2fAddressesEnabled\""
		sendSyslog "$functionName" "INFO" "checkSecureXLSP_f2fAddressesQty" "VALUE=\"$checkSecureXLSP_f2fAddressesQty\""
		for LINE in `cat $TEMPFILE | grep "<" | tr -d '<> '`; do
			SUBNET_START=$(hex2dot `echo "$LINE" | awk -F "," '{print $1}'`)
			SUBNET_END=$(hex2dot `echo "$LINE" | awk -F "," '{print $2}'`)
			echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXLSP_f2fAddressesDetail - $SUBNET_START-$SUBNET_END" >>$HISTORYLOG
			sendSyslog "$functionName" "INFO" "checkSecureXLSP_f2fAddressesDetail" "VALUE=\"$SUBNET_START-$SUBNET_END\""
		done
		checkSecureXLSP_workingInfo="$checkSecureXLSP_workingInfo [F2F Addresses Enabled-$checkSecureXLSP_f2fAddressesQty Ranges]"
	fi
fi

if [[ $checkSelf_majorVer == "R81.10" ]]; then
	checkSecureXLSP_connsFromTemplatesPct=$(/usr/bin/sqlite3 /var/log/opt/CPshrd-R81.10/cpview_services/cpview_services.dat "SELECT * FROM fw_network_stats ORDER BY ROWID DESC LIMIT 1" | awk -F "|" '{print $7}')
	checkSecureXLSP_unusedTemplatesPct=$(/usr/bin/sqlite3 /var/log/opt/CPshrd-R81.10/cpview_services/cpview_services.dat "SELECT * FROM fw_network_stats ORDER BY ROWID DESC LIMIT 1" | awk -F "|" '{print $8}')
elif [[ $checkSelf_majorVer == "R81.20" ]]; then
	checkSecureXLSP_connsFromTemplatesPct=$(/usr/bin/sqlite3 /var/log/opt/CPshrd-R81.20/cpview_services/cpview_services.dat "SELECT * FROM fw_network_stats ORDER BY ROWID DESC LIMIT 1" | awk -F "|" '{print $7}')
	checkSecureXLSP_unusedTemplatesPct=$(/usr/bin/sqlite3 /var/log/opt/CPshrd-R81.20/cpview_services/cpview_services.dat "SELECT * FROM fw_network_stats ORDER BY ROWID DESC LIMIT 1" | awk -F "|" '{print $8}')
fi


# fast_accel
if [[ -f $FWDIR/log/fw_fast_accel.log ]]; then
	checkSecureXLSP_fastaccelEnabled=$(fw ctl fast_accel show_state | grep "enabled" | wc -l)
	if [[ $checkSecureXLSP_fastaccelEnabled -eq "1" ]]; then
		fw ctl fast_accel show_table | grep ")" | sed 's/\s\+/,/g' | tr -cd 'a-z0-9.,/\n'> $TEMPFILE
		IFS=$'\n'
		for LINE in `cat $TEMPFILE` ; do 
			RULE_NUMBER=$(echo "$LINE" | awk -F "," '{print $1}')
			SRC_IP=$(echo "$LINE" | awk -F "," '{print $2}')
			DST_IP=$(echo "$LINE" | awk -F "," '{print $3}')
			DST_PORT=$(echo "$LINE" | awk -F "," '{print $4}')
			PROTO=$(echo "$LINE" | awk -F "," '{print $5}')
			HIT_COUNT=$(echo "$LINE" | awk -F "," '{print $6}')
			echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXLSP_fastaccelDetails - RULE_NUMBER=$RULE_NUMBER SRC_IP=$SRC_IP DST_IP=$DST_IP DST_PORT=$DST_PORT PROTO=$PROTO HIT_COUNT=$HIT_COUNT" >>$HISTORYLOG
			IFS=$ORIGIFS
			sendSyslog "$functionName" "INFO" "checkSecureXLSP_fastaccelDetails" "RULE_NUMBER=\"$RULE_NUMBER\" SRC_IP=\"$SRC_IP\" DST_IP=\"$DST_IP\" DST_PORT=\"$DST_PORT\" PROTO=\"$PROTO\" HIT_COUNT=\"$HIT_COUNT\""
			IFS=$'\n'
		done
		IFS=$ORIGIFS
		checkSecureXLSP_fastaccelRuleQty=$(cat $TEMPFILE | wc -l)
		checkSecureXLSP_workingInfo="$checkSecureXLSP_workingInfo [Fast Accel Enabled: $checkSecureXLSP_fastaccelRuleQty rules]"
	fi
else
	checkSecureXLSP_fastaccelEnabled="0"
fi




#LOG OUTPUTS
echo "checkSecureXLSP_status $checkSecureXLSP_status" >>$RUNLOG
echo "checkSecureXLSP_disabledFromRule $checkSecureXLSP_disabledFromRule" >>$RUNLOG
echo "checkSecureXLSP_disabledFromRulePct $checkSecureXLSP_disabledFromRulePct" >>$RUNLOG
echo "checkSecureXLSP_acceptTemplates $checkSecureXLSP_acceptTemplates" >>$RUNLOG
echo "checkSecureXLSP_dropTemplates $checkSecureXLSP_dropTemplates" >>$RUNLOG
echo "checkSecureXLSP_natTemplates $checkSecureXLSP_natTemplates" >>$RUNLOG
echo "checkSecureXLSP_statsAccPct $checkSecureXLSP_statsAccPct" >>$RUNLOG
echo "checkSecureXLSP_statsF2fPct $checkSecureXLSP_statsF2fPct" >>$RUNLOG
echo "checkSecureXLSP_statsPxlPct $checkSecureXLSP_statsPxlPct" >>$RUNLOG
if [[ $LOCALSMO == "1" ]]; then
	echo "checkSecureXLSP_statsConnRateAccel $checkSecureXLSP_statsConnRateAccel" >>$RUNLOG
	echo "checkSecureXLSP_statsConnRateMedium $checkSecureXLSP_statsConnRateMedium" >>$RUNLOG
	echo "checkSecureXLSP_statsConnRateFirewall $checkSecureXLSP_statsConnRateFirewall" >>$RUNLOG
	echo "checkSecureXLSP_statsConnRateDropped $checkSecureXLSP_statsConnRateDropped" >>$RUNLOG
	echo "checkSecureXLSP_statsConnRate $checkSecureXLSP_statsConnRate" >>$RUNLOG
	echo "checkSecureXLSP_statsDropTemplateQty $checkSecureXLSP_statsDropTemplateQty" >>$RUNLOG
	echo "checkSecureXLSP_statsDropTemplateRate $checkSecureXLSP_statsDropTemplateRate" >>$RUNLOG
	echo "checkSecureXLSP_statsConnRateAccelPct $checkSecureXLSP_statsConnRateAccelPct" >>$RUNLOG
	echo "checkSecureXLSP_statsConnRateMediumPct $checkSecureXLSP_statsConnRateMediumPct" >>$RUNLOG
	echo "checkSecureXLSP_statsConnRateFirewallPct $checkSecureXLSP_statsConnRateFirewallPct" >>$RUNLOG
	echo "checkSecureXLSP_statsConnRateDroppedPct $checkSecureXLSP_statsConnRateDroppedPct" >>$RUNLOG
fi
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXLSP_status - $checkSecureXLSP_status" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXLSP_disabledFromRule - $checkSecureXLSP_disabledFromRule" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXLSP_disabledFromRulePct - $checkSecureXLSP_disabledFromRulePct" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXLSP_acceptTemplates - $checkSecureXLSP_acceptTemplates" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXLSP_dropTemplates - $checkSecureXLSP_dropTemplates" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXLSP_natTemplates - $checkSecureXLSP_natTemplates" >>$HISTORYLOG
if [[ $checkSelf_ipv6Enabled == "1" ]] && [[ $checkSelf_ipv6Configured != "0" ]]; then
	echo "checkSecureXLSP_statusIpv6 $checkSecureXLSP_statusIpv6" >>$RUNLOG
	echo "checkSecureXLSP_disabledFromRuleIpv6 $checkSecureXLSP_disabledFromRuleIpv6" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXLSP_statusIpv6 - $checkSecureXLSP_statusIpv6" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXLSP_disabledFromRuleIpv6 - $checkSecureXLSP_disabledFromRuleIpv6" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXLSP_disabledFromRulePctIpv6 - $checkSecureXLSP_disabledFromRulePctIpv6" >>$HISTORYLOG
fi
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXLSP_statsAccPct - $checkSecureXLSP_statsAccPct" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXLSP_statsF2fPct - $checkSecureXLSP_statsF2fPct" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXLSP_statsPxlPct - $checkSecureXLSP_statsPxlPct" >>$HISTORYLOG
if [[ $LOCALSMO == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXLSP_statsConnRateAccel - $checkSecureXLSP_statsConnRateAccel" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXLSP_statsConnRateMedium - $checkSecureXLSP_statsConnRateMedium" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXLSP_statsConnRateFirewall - $checkSecureXLSP_statsConnRateFirewall" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXLSP_statsConnRateDropped - $checkSecureXLSP_statsConnRateDropped" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXLSP_statsConnRate - $checkSecureXLSP_statsConnRate" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXLSP_statsDropTemplateQty - $checkSecureXLSP_statsDropTemplateQty" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXLSP_statsDropTemplateRate - $checkSecureXLSP_statsDropTemplateRate" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXLSP_statsConnRateAccelPct - $checkSecureXLSP_statsConnRateAccelPct" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXLSP_statsConnRateMediumPct - $checkSecureXLSP_statsConnRateMediumPct" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXLSP_statsConnRateFirewallPct - $checkSecureXLSP_statsConnRateFirewallPct" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXLSP_statsConnRateDroppedPct - $checkSecureXLSP_statsConnRateDroppedPct" >>$HISTORYLOG
fi
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXLSP_connsFromTemplatesPct - $checkSecureXLSP_connsFromTemplatesPct" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXLSP_unusedTemplatesPct - $checkSecureXLSP_unusedTemplatesPct" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXLSP_fastaccelEnabled - $checkSecureXLSP_fastaccelEnabled" >>$HISTORYLOG

#RUN LOGIC
if [[ $checkSecureXLSP_status == "disabled" ]] ; then
        echo "Logic - status: FAIL" >>$RUNLOG
        echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Status - $checkSecureXLSP_status" >>$HISTORYLOG
        checkSecureXLSP_problem="1"
		checkSecureXLSP_problemInfo="$checkSecureXLSP_problemInfo [Status: $checkSecureXLSP_status]"
elif [[ $checkSecureXLSP_status == "off" ]] || [[ $checkSecureXL_status == "noinit" ]]; then
        echo "Logic - status: FAIL" >>$RUNLOG
        echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Status - $checkSecureXLSP_status" >>$HISTORYLOG
        checkSecureXLSP_problem="1"
		checkSecureXLSP_problemInfo="$checkSecureXLSP_problemInfo [Status: $checkSecureXLSP_status]"
elif [[ $checkSecureXLSP_status == "no" ]] ; then
        echo "Logic - status: FAIL" >>$RUNLOG
        echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Status - $checkSecureXLSP_status" >>$HISTORYLOG
        checkSecureXLSP_problem="1"
		checkSecureXLSP_problemInfo="$checkSecureXLSP_problemInfo [No License]"
else
	echo "Logic - status: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Status - $checkSecureXLSP_status" >>$HISTORYLOG
	if [[ $checkSecureXLSP_disabledFromRule == "LAST" ]]; then
		checkSecureXLSP_workingInfo="$checkSecureXLSP_workingInfo [Status: $checkSecureXLSP_status, Not disabled at any rule]"
	else
		checkSecureXLSP_workingInfo="$checkSecureXLSP_workingInfo [Status: $checkSecureXLSP_status, Disabled at Rule: $checkSecureXLSP_disabledFromRule ($checkSecureXLSP_disabledFromRulePct pct)]"
	fi
fi
if [[ $checkSelf_ipv6Enabled == "1" ]] && [[ $checkSelf_ipv6Configured != "0" ]]; then
	if [[ $checkSecureXLSP_statusIpv6 == "off" ]] ; then
		echo "Logic - status Ipv6: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Status Ipv6 - $checkSecureXLSP_statusIpv6" >>$HISTORYLOG
		checkSecureXLSP_problem="1"
		checkSecureXLSP_problemInfo="$checkSecureXLSP_problemInfo [Status IPv6: $checkSecureXLSP_statusIpv6]"
	elif [[ $checkSecureXLSP_statusIpv6 == "off" ]] ; then
        echo "Logic - status: FAIL" >>$RUNLOG
        echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Status - $checkSecureXLSP_statusIpv6" >>$HISTORYLOG
        checkSecureXLSP_problem="1"
		checkSecureXLSP_problemInfo="$checkSecureXLSP_problemInfo [Status: $checkSecureXLSP_statusIpv6]"
	elif [[ $checkSecureXLSP_statusIpv6 == "no" ]] ; then
			echo "Logic - status: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Status - $checkSecureXLSP_statusIpv6" >>$HISTORYLOG
			checkSecureXLSP_problem="1"
			checkSecureXLSP_problemInfo="$checkSecureXLSP_problemInfo [No License]"
	else
		echo "Logic - status Ipv6: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Status Ipv6 - $checkSecureXLSP_statusIpv6" >>$HISTORYLOG
		if [[ $checkSecureXLSP_disabledFromRuleIpv6 == "LAST" ]]; then
			checkSecureXLSP_workingInfo="$checkSecureXLSP_workingInfo [Status IPv6: $checkSecureXLSP_statusIpv6, Not disabled at any rule]"
		else
			checkSecureXLSP_workingInfo="$checkSecureXLSP_workingInfo [Status IPv6: $checkSecureXLSP_statusIpv6, Disabled at Rule IPv6: $checkSecureXLSP_disabledFromRuleIpv6]"
		fi
	fi
fi
if [[ $LOCALSMO == "1" ]]; then
	if [[ $checkSecureXLSP_dropTemplates == "enabled" ]] && [[ $checkSecureXLSP_statsDropTemplateRate -gt "0" ]]; then
		checkSecureXLSP_workingInfo="$checkSecureXLSP_workingInfo [Drop Template Rate: $checkSecureXLSP_statsDropTemplateRate/sec]"
	fi
fi


#SYSLOG
if [[ $checkSecureXLSP_problem == "1" ]]; then
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "PROBLEM" "checkSecureXLSP_problemInfo" "VALUE=\"$checkSecureXLSP_problemInfo $checkSecureXLSP_warningInfo $checkSecureXLSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "PROBLEM" "checkSecureXLSP_problemInfo" "VALUE=\"$checkSecureXLSP_problemInfo $checkSecureXLSP_warningInfo $checkSecureXLSP_workingInfo\""
	fi
elif [[ $checkSecureXLSP_warning == "1" ]]; then
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "WARNING" "checkSecureXLSP_problemInfo" "VALUE=\"$checkSecureXLSP_warningInfo $checkSecureXLSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "WARNING" "checkSecureXLSP_problemInfo" "VALUE=\"$checkSecureXLSP_warningInfo $checkSecureXLSP_workingInfo\""
	fi
else
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "WORKING" "checkSecureXLSP_problemInfo" "VALUE=\"$checkSecureXLSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "WORKING" "checkSecureXLSP_problemInfo" "VALUE=\"$checkSecureXLSP_workingInfo\""
	fi
fi

sendSyslog "$functionName" "INFO" "checkSecureXLSP_status" "VALUE=\"$checkSecureXLSP_status\""
sendSyslog "$functionName" "INFO" "checkSecureXLSP_disabledFromRule" "VALUE=\"$checkSecureXLSP_disabledFromRule\""
sendSyslog "$functionName" "INFO" "checkSecureXLSP_disabledFromRulePct" "VALUE=\"$checkSecureXLSP_disabledFromRulePct\""
sendSyslog "$functionName" "INFO" "checkSecureXLSP_acceptTemplates" "VALUE=\"$checkSecureXLSP_acceptTemplates\""
sendSyslog "$functionName" "INFO" "checkSecureXLSP_dropTemplates" "VALUE=\"$checkSecureXLSP_dropTemplates\""
sendSyslog "$functionName" "INFO" "checkSecureXLSP_natTemplates" "VALUE=\"$checkSecureXLSP_natTemplates\""
if [[ $checkSelf_ipv6Enabled == "1" ]] && [[ $checkSelf_ipv6Configured != "0" ]]; then
	sendSyslog "$functionName" "INFO" "checkSecureXLSP_statusIpv6" "VALUE=\"$checkSecureXLSP_statusIpv6\""
	sendSyslog "$functionName" "INFO" "checkSecureXLSP_disabledFromRuleIpv6" "VALUE=\"$checkSecureXLSP_disabledFromRuleIpv6\""
	sendSyslog "$functionName" "INFO" "checkSecureXLSP_disabledFromRulePctIpv6" "VALUE=\"$checkSecureXLSP_disabledFromRulePctIpv6\""
fi
sendSyslog "$functionName" "INFO" "checkSecureXLSP_statsAccPct" "VALUE=\"$checkSecureXLSP_statsAccPct\""
sendSyslog "$functionName" "INFO" "checkSecureXLSP_statsF2fPct" "VALUE=\"$checkSecureXLSP_statsF2fPct\""
sendSyslog "$functionName" "INFO" "checkSecureXLSP_statsPxlPct" "VALUE=\"$checkSecureXLSP_statsPxlPct\""
if [[ $LOCALSMO == "1" ]]; then
	sendSyslog "$functionName" "INFO" "checkSecureXLSP_statsConnRateAccel" "VALUE=\"$checkSecureXLSP_statsConnRateAccel\"" "SMO"
	sendSyslog "$functionName" "INFO" "checkSecureXLSP_statsConnRateMedium" "VALUE=\"$checkSecureXLSP_statsConnRateMedium\"" "SMO"
	sendSyslog "$functionName" "INFO" "checkSecureXLSP_statsConnRateFirewall" "VALUE=\"$checkSecureXLSP_statsConnRateFirewall\"" "SMO"
	sendSyslog "$functionName" "INFO" "checkSecureXLSP_statsConnRateDropped" "VALUE=\"$checkSecureXLSP_statsConnRateDropped\"" "SMO"
	sendSyslog "$functionName" "INFO" "checkSecureXLSP_statsConnRate" "VALUE=\"$checkSecureXLSP_statsConnRate\"" "SMO"
	sendSyslog "$functionName" "INFO" "checkSecureXLSP_statsDropTemplateQty" "VALUE=\"$checkSecureXLSP_statsDropTemplateQty\"" "SMO"
	sendSyslog "$functionName" "INFO" "checkSecureXLSP_statsDropTemplateRate" "VALUE=\"$checkSecureXLSP_statsDropTemplateRate\"" "SMO"
	sendSyslog "$functionName" "INFO" "checkSecureXLSP_statsConnRateAccelPct" "VALUE=\"$checkSecureXLSP_statsConnRateAccelPct\""
	sendSyslog "$functionName" "INFO" "checkSecureXLSP_statsConnRateMediumPct" "VALUE=\"$checkSecureXLSP_statsConnRateMediumPct\""
	sendSyslog "$functionName" "INFO" "checkSecureXLSP_statsConnRateFirewallPct" "VALUE=\"$checkSecureXLSP_statsConnRateFirewallPct\""
	sendSyslog "$functionName" "INFO" "checkSecureXLSP_statsConnRateDroppedPct" "VALUE=\"$checkSecureXLSP_statsConnRateDroppedPct\""
fi
sendSyslog "$functionName" "INFO" "checkSecureXLSP_connsFromTemplatesPct" "VALUE=\"$checkSecureXLSP_connsFromTemplatesPct\""
sendSyslog "$functionName" "INFO" "checkSecureXLSP_unusedTemplatesPct" "VALUE=\"$checkSecureXLSP_unusedTemplatesPct\""	

#CLEANUP
rm -rf $TEMPFILE $TEMPFILE_STAT


checkSecureXLSP_fEnd=$(date "+%s")
checkSecureXLSP_fRunTime=$(( checkSecureXLSP_fEnd - checkSecureXLSP_fStart ))
echo "checkSecureXLSP_fRunTime $checkSecureXLSP_fRunTime" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXLSP_warning - $checkSecureXLSP_warning" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXLSP_problem - $checkSecureXLSP_problem" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXLSP_problemInfo - $checkSecureXLSP_problemInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXLSP_warningInfo - $checkSecureXLSP_warningInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXLSP_workingInfo - $checkSecureXLSP_workingInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSecureXLSP_runTime - $checkSecureXLSP_fRunTime" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkSecureXLSP_warning" "VALUE=\"$checkSecureXLSP_warning\""
sendSyslog "$functionName" "INFO" "checkSecureXLSP_problem" "VALUE=\"$checkSecureXLSP_problem\""
sendSyslog "$functionName" "INFO" "checkSecureXLSP_problemInfo" "VALUE=\"$checkSecureXLSP_problemInfo\""
sendSyslog "$functionName" "INFO" "checkSecureXLSP_warningInfo" "VALUE=\"$checkSecureXLSP_warningInfo\""
sendSyslog "$functionName" "INFO" "checkSecureXLSP_workingInfo" "VALUE=\"$checkSecureXLSP_workingInfo\""
sendSyslog "$functionName" "INFO" "checkSecureXLSP_runTime" "VALUE=\"$checkSecureXLSP_fRunTime\""

	
#SUMMARY
if [[ $checkSecureXLSP_problem == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - checkSecureXLSP - SUMMARY - PROBLEM - $checkSecureXLSP_problemInfo $checkSecureXLSP_warningInfo $checkSecureXLSP_workingInfo" >>$HISTORYLOG
elif [[ $checkSecureXLSP_warning == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - checkSecureXLSP - SUMMARY - WARNING - $checkSecureXLSP_warningInfo $checkSecureXLSP_workingInfo" >>$HISTORYLOG
else
	echo "$HISTORYLOGPREAMBLE - checkSecureXLSP - SUMMARY - WORKING - $checkSecureXLSP_workingInfo" >>$HISTORYLOG
fi
echo "checkSecureXLSP_problem $checkSecureXLSP_problem" >>$RUNLOG
echo "END==checkSecureXLSP" >>$RUNLOG
}

###################################################################################################
checkLicense() {
echo "START==checkLicense" >>$RUNLOG

#DEFAULTS
checkLicense_fStart=$(date "+%s")
functionName=${FUNCNAME[0]}
checkLicense_warning="0"
checkLicense_problem="0"
checkLicense_workingInfo=""
checkLicense_warningInfo=""
checkLicense_problemInfo=""
TEMPFILE=$TEMPDIR/$SCRIPT.$functionName.$EPOCH

#COLLECT OUTPUTS

##work around bug 6-0002657319
if [[ $MDPSENABLED == "2" ]]; then
	dplane > /dev/null 2>&1
	cplic print | grep -v cp.macro > $TEMPFILE 2>&1
	mplane > /dev/null 2>&1
	cplic print | grep -v cp.macro >> $TEMPFILE 2>&1
else
	cplic print | grep -v cp.macro > $TEMPFILE 2>&1
fi

checkLicense_licenseCount=$(cat $TEMPFILE | sed -n '/Host/,/Contract/p' | grep -v "Host\|Contract" | sed '/^[[:space:]]*$/d' | grep "cpap\|CPAP\|cpsg\|CPSG" | grep -v Covers | sort -n | uniq | wc -l)
checkLicense_licenseCountEvals=$(cat $TEMPFILE | sed -n '/Host/,/Contract/p' | grep -v "Host\|Contract" | sed '/^[[:space:]]*$/d' | grep "cpap\|CPAP\|cpsg\|CPSG" | grep -v never | grep -v Covers | sort -n | uniq | wc -l)
checkLicense_contractExpiration0=$(cat $TEMPFILE | sed -n -e '/Contract Coverage/,$p' | grep -v "Covers" | grep -v "CPAP\|CPSG" | grep "IPS\|ABOT\|URLF" | head -1 | awk '{print $5}')
checkLicense_contractExpiration1=$(date -d "$checkLicense_contractExpiration0" +"%s")
checkLicense_contractExpiration="$(( $checkLicense_contractExpiration1 + 86400 ))"
checkLicense_cplicprint0=$(cat $TEMPFILE | grep "never" | wc -l)
if [[ $checkLicense_cplicprint0 -gt "1" ]]; then
	checkLicense_cplicprint=$(cat $TEMPFILE | grep "never" | tr '\n' '|' | rev | cut -c2- | rev)
	checkLicense_ip=$(cat $TEMPFILE | grep "never" | awk '{print $1}' | sort -n | uniq | tr '\n' '|' | rev | cut -c2- | rev)
	checkLicense_expiration=$(cat $TEMPFILE | grep "never" | awk '{print $2}' | sort -n | uniq | tr '\n' '|' | rev | cut -c2- | rev)
	checkLicense_features=$(cat $TEMPFILE | grep "never" | awk -F "CK-" '{print $1}' | awk -F "never" '{print $NF}' | sort -n | uniq | sed -e 's/^[[:space:]]*//' | tr '\n' '|' | rev | cut -c2- | rev)
	checkLicense_ck=$(cat $TEMPFILE | grep "never" | awk '{print $NF}' | sort -n | uniq | tr '\n' '|' | rev | cut -c2- | rev)
else
	checkLicense_cplicprint=$(cat $TEMPFILE | grep "never")
	checkLicense_ip=$(cat $TEMPFILE | grep "never" | awk '{print $1}')
	checkLicense_expiration=$(cat $TEMPFILE | grep "never" | awk '{print $2}')
	checkLicense_features=$(cat $TEMPFILE | grep "never" | awk -F "CK-" '{print $1}' | awk -F "never" '{print $NF}' | sed -e 's/^[[:space:]]*//')
	checkLicense_ck=$(cat $TEMPFILE | grep "never" | awk '{print $NF}')
fi

checkLicense_contractExpirationIps="0"
for LINE in `cat $TEMPFILE | sort -n | uniq | sed -n -e '/Contract Coverage/,$p' | grep -v "Covers" | grep -v "CPAP\|CPSG" | grep "IPS" | awk -F "|" '{print $3}'` ; do
	DATE=$(date -d $LINE +"%s")
	if [[ $checkLicense_contractExpirationIps -lt $DATE ]]; then
		checkLicense_contractExpirationIps=$DATE
	fi
done
checkLicense_contractExpirationAbot="0"
for LINE in `cat $TEMPFILE | sort -n | uniq | sed -n -e '/Contract Coverage/,$p' | grep -v "Covers" | grep -v "CPAP\|CPSG" | grep "ABOT" | awk -F "|" '{print $3}'` ; do
	DATE=$(date -d $LINE +"%s")
	if [[ $checkLicense_contractExpirationAbot -lt $DATE ]]; then
		checkLicense_contractExpirationAbot=$DATE
	fi
done
checkLicense_contractExpirationUrlf="0"
for LINE in `cat $TEMPFILE | sort -n | uniq | sed -n -e '/Contract Coverage/,$p' | grep -v "Covers" | grep -v "CPAP\|CPSG" | grep "URLF" | awk -F "|" '{print $3}'` ; do
	DATE=$(date -d $LINE +"%s")
	if [[ $checkLicense_contractExpirationUrlf -lt $DATE ]]; then
		checkLicense_contractExpirationUrlf=$DATE
	fi
done
checkLicense_contractExpirationAv="0"
for LINE in `cat $TEMPFILE | sort -n | uniq | sed -n -e '/Contract Coverage/,$p' | grep -v "Covers" | grep -v "CPAP\|CPSG" | grep "AV" | awk -F "|" '{print $3}'` ; do
	DATE=$(date -d $LINE +"%s")
	if [[ $checkLicense_contractExpirationAv -lt $DATE ]]; then
		checkLicense_contractExpirationAv=$DATE
	fi
done
checkLicense_contractExpirationApcl="0"
for LINE in `cat $TEMPFILE | sort -n | uniq | sed -n -e '/Contract Coverage/,$p' | grep -v "Covers" | grep -v "CPAP\|CPSG" | grep "APCL" | awk -F "|" '{print $3}'` ; do
	DATE=$(date -d $LINE +"%s")
	if [[ $checkLicense_contractExpirationApcl -lt $DATE ]]; then
		checkLicense_contractExpirationApcl=$DATE
	fi
done

checkLicense_contractCount=$(cat $TEMPFILE | sed -n -e '/Contract Coverage/,$p' | grep Covers | wc -l)
if [[ $checkSelf_hwtype != "VM" ]]; then
	checkLicense_macToCk=$(/bin/cp-ifconfig.sh Mgmt | grep HWaddr | awk '{print $5}' | sed 's/:/-/g')
	checkLicense_licenseCorrectCount=$(cat $TEMPFILE | grep never | grep $checkLicense_macToCk | wc -l)
fi
checkLicense_cplicprint=$(cat $TEMPFILE | sort -n | uniq | grep "never")
#Hardware
checkLicense_featureCpap=$(cat $TEMPFILE | sort -n | uniq | grep "never" | grep -i "CPAP-" | awk '{print $3}' | awk -F "-" '{print $NF}' | head -1)
#Firewall
checkLicense_featureFw=$(cat $TEMPFILE | sort -n | uniq | grep "never" | grep -i "CPSB-FW" | wc -l)
#Adv Networking, Clustering and Acceleration
checkLicense_featureAdnc=$(cat $TEMPFILE | sort -n | uniq | grep "never" | grep -i "CPSB-ADNC" | wc -l)
#URL Filtering
checkLicense_featureUrlf=$(cat $TEMPFILE | sort -n | uniq | grep "never" | grep -i "CPSB-URLF" | wc -l)
#IPS
checkLicense_featureIps=$(cat $TEMPFILE | sort -n | uniq | grep "never" | grep -i "CPSB-IPS" | wc -l)
#Application Control
checkLicense_featureApcl=$(cat $TEMPFILE | sort -n | uniq | grep "never" | grep -i "CPSB-APCL" | wc -l)
#Anti-Virus
checkLicense_featureAv=$(cat $TEMPFILE | sort -n | uniq | grep "never" | grep -i "CPSB-AV" | wc -l)
#Anti-Bot
checkLicense_featureAbot=$(cat $TEMPFILE | sort -n | uniq | grep "never" | grep -i "CPSB-ABOT" | wc -l)
#Anti-Spam
checkLicense_featureAspm=$(cat $TEMPFILE | sort -n | uniq | grep "never" | grep -i "CPSB-ASPM" | wc -l)

rm -rf $TEMPFILE


#LOG OUTPUTS
echo "checkLicense_licenseCount $checkLicense_licenseCount" >>$RUNLOG
echo "checkLicense_licenseCountEvals $checkLicense_licenseCountEvals" >>$RUNLOG
echo "checkLicense_contractCount $checkLicense_contractCount" >>$RUNLOG
echo "checkLicense_contractExpiration0 $checkLicense_contractExpiration0" >>$RUNLOG
echo "checkLicense_contractExpiration $checkLicense_contractExpiration" >>$RUNLOG
if [[ $checkSelf_hwtype != "VM" ]]; then
	echo "checkLicense_macToCk $checkLicense_macToCk" >>$RUNLOG
	echo "checkLicense_licenseCorrectCount $checkLicense_licenseCorrectCount" >>$RUNLOG
fi

echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicense_licenseCount - $checkLicense_licenseCount" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicense_licenseCountEvals - $checkLicense_licenseCountEvals" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicense_contractCount - $checkLicense_contractCount" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicense_contractExpiration - $checkLicense_contractExpiration" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicense_cplicprint - $checkLicense_cplicprint" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicense_ip - $checkLicense_ip" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicense_expiration - $checkLicense_expiration" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicense_features - $checkLicense_features" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicense_ck - $checkLicense_ck" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicense_featureCpap - $checkLicense_featureCpap" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicense_featureFw - $checkLicense_featureFw" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicense_featureAdnc - $checkLicense_featureAdnc" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicense_featureIps - $checkLicense_featureIps" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicense_contractExpirationIps - $checkLicense_contractExpirationIps" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicense_featureAbot - $checkLicense_featureAbot" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicense_contractExpirationAbot - $checkLicense_contractExpirationAbot" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicense_featureUrlf - $checkLicense_featureUrlf" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicense_contractExpirationUrlf - $checkLicense_contractExpirationUrlf" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicense_featureAv - $checkLicense_featureAv" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicense_contractExpirationAv - $checkLicense_contractExpirationAv" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicense_featureApcl - $checkLicense_featureApcl" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicense_contractExpirationApcl - $checkLicense_contractExpirationApcl" >>$HISTORYLOG


#RUN LOGIC
if [[ $checkLicense_licenseCount -lt "1" ]] ; then
        echo "Logic - license count: FAIL" >>$RUNLOG
        echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - License Count - $checkLicense_licenseCount" >>$HISTORYLOG
        checkLicense_problem="1"
		checkLicense_problemInfo="$checkLicense_problemInfo [No License Installed]"
else
        echo "Logic - license count: PASS" >>$RUNLOG
        echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - License Count - $checkLicense_licenseCount" >>$HISTORYLOG
fi

if [[ $checkLicense_licenseCountEvals -gt "0" ]] ; then
        echo "Logic - license count evals: FAIL" >>$RUNLOG
        echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - License Count Evals - $checkLicense_licenseCountEvals" >>$HISTORYLOG
        checkLicense_warning="1"
		checkLicense_warningInfo="$checkLicense_warningInfo [Eval License Installed]"
else
        echo "Logic - license count evals: PASS" >>$RUNLOG
        echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - License Count Evals - $checkLicense_licenseCountEvals" >>$HISTORYLOG
fi

if [[ $checkLicense_contractCount == "0" ]] ; then
        echo "Logic - contract count: FAIL" >>$RUNLOG
        echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Contract count - $checkLicense_contractCount" >>$HISTORYLOG
        checkLicense_problem="1"
		checkLicense_problemInfo="$checkLicense_problemInfo [No Contract Installed]"
else
        echo "Logic - contract count: PASS" >>$RUNLOG
        echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Contract count - $checkLicense_contractCount" >>$HISTORYLOG
fi

if [[ $checkSelf_hwtype != "VM" ]] && [[ $checkLicense_licenseCorrectCount == "0" ]] ; then
        echo "Logic - correct license: FAIL" >>$RUNLOG
        echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Correct license - $checkLicense_licenseCorrectCount" >>$HISTORYLOG
        checkLicense_problem="1"
		checkLicense_problemInfo="$checkLicense_problemInfo [Wrong License Installed]"
else
        echo "Logic - contract count: PASS" >>$RUNLOG
        echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Correct license - $checkLicense_licenseCorrectCount" >>$HISTORYLOG
fi

if [[ $checkLicense_contractExpirationIps -lt $EPOCH ]] && [[ $checkSelf_bladeIps -eq "1" ]]; then
	echo "Logic - checkLicense_contractExpirationIps: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - checkLicense_contractExpirationIps - $checkLicense_contractExpirationIps" >>$HISTORYLOG
	checkLicense_problem="1"
	checkLicense_problemInfo="$checkLicense_problemInfo [IPS Contract Expired]"
else
	echo "Logic - checkLicense_contractExpirationIps: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkLicense_contractExpirationIps - $checkLicense_contractExpirationIps" >>$HISTORYLOG
fi

if [[ $checkLicense_contractExpirationAbot -lt $EPOCH ]] && [[ $checkSelf_bladeAb -eq "1" ]]; then
	echo "Logic - checkLicense_contractExpirationAbot: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - checkLicense_contractExpirationAbot - $checkLicense_contractExpirationAbot" >>$HISTORYLOG
	checkLicense_problem="1"
	checkLicense_problemInfo="$checkLicense_problemInfo [Anti-Bot Contract Expired]"
else
	echo "Logic - checkLicense_contractExpirationAbot: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkLicense_contractExpirationAbot - $checkLicense_contractExpirationAbot" >>$HISTORYLOG
fi

if [[ $checkLicense_contractExpirationAv -lt $EPOCH ]] && [[ $checkSelf_bladeAv -eq "1" ]]; then
	echo "Logic - checkLicense_contractExpirationAv: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - checkLicense_contractExpirationAv - $checkLicense_contractExpirationAv" >>$HISTORYLOG
	checkLicense_problem="1"
	checkLicense_problemInfo="$checkLicense_problemInfo [Anti-Virus Contract Expired]"
else
	echo "Logic - checkLicense_contractExpirationAv: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkLicense_contractExpirationAv - $checkLicense_contractExpirationAv" >>$HISTORYLOG
fi

if [[ $checkLicense_contractExpirationUrlf -lt $EPOCH ]] && [[ $checkSelf_bladeUrlf -eq "1" ]]; then
	echo "Logic - checkLicense_contractExpirationUrlf: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - checkLicense_contractExpirationUrlf - $checkLicense_contractExpirationUrlf" >>$HISTORYLOG
	checkLicense_problem="1"
	checkLicense_problemInfo="$checkLicense_problemInfo [URLF Contract Expired]"
else
	echo "Logic - checkLicense_contractExpirationUrlf: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkLicense_contractExpirationUrlf - $checkLicense_contractExpirationUrlf" >>$HISTORYLOG
fi

if [[ $checkLicense_contractExpirationApcl -lt $EPOCH ]] && [[ $checkSelf_bladeAppi -eq "1" ]]; then
	echo "Logic - checkLicense_contractExpirationApcl: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - checkLicense_contractExpirationApcl - $checkLicense_contractExpirationApcl" >>$HISTORYLOG
	checkLicense_problem="1"
	checkLicense_problemInfo="$checkLicense_problemInfo [AppControl Contract Expired]"
else
	echo "Logic - checkLicense_contractExpirationApcl: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkLicense_contractExpirationApcl - $checkLicense_contractExpirationApcl" >>$HISTORYLOG
fi

if [[ $checkLicense_licenseCount -gt "1" ]]; then
        echo "Logic - correct license: FAIL" >>$RUNLOG
        echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Extra license - " >>$HISTORYLOG
        #Not Blocking
		#checkLicense_problem="1"
		checkLicense_warningInfo="$checkLicense_warningInfo [Extra License Installed]"
else
        echo "Logic - contract expiration: PASS" >>$RUNLOG
        echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Extra license - " >>$HISTORYLOG
fi

if [[ $checkLicense_featureAdnc -eq "0" ]] ; then
	echo "Logic - license adnc: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - License feature ADNC - $checkLicense_featureAdnc" >>$HISTORYLOG
	checkLicense_warning="1"
	checkLicense_warningInfo="$checkLicense_warningInfo [License does not contain ADNC feature (SecureXL)]"
else
	echo "Logic - clicense adnc: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - License feature ADNC - $checkLicense_featureAdnc" >>$HISTORYLOG
fi

if [[ $checkSelf_bladeIps -eq "1" ]]; then
	if [[ $checkLicense_featureIps -eq "0" ]] && [[ $checkLicense_contractExpirationIps -gt $EPOCH ]] ; then
		echo "Logic - license ips: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - License feature IPS - $checkLicense_featureIps" >>$HISTORYLOG
		checkLicense_workingInfo="$checkLicense_workingInfo [License does not contain IPS feature (IPS), but Contract Exists]"
	elif [[ $checkLicense_featureIps -eq "0" ]] ; then
		echo "Logic - license ips: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - License feature IPS - $checkLicense_featureIps" >>$HISTORYLOG
		checkLicense_warning="1"
		checkLicense_warningInfo="$checkLicense_warningInfo [License does not contain IPS feature (IPS)]"
	else
		echo "Logic - license ips: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - License feature IPS - $checkLicense_featureIps" >>$HISTORYLOG
	fi
fi

if [[ $checkSelf_bladeAppi -eq "1" ]]; then
	if [[ $checkLicense_featureApcl -eq "0" ]] ; then
		echo "Logic - license apcl: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - License feature Application Control - $checkLicense_featureApcl" >>$HISTORYLOG
		checkLicense_warning="1"
		checkLicense_warningInfo="$checkLicense_warningInfo [License does not contain AppControl feature (APCL)]"
	else
		echo "Logic - license apcl: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - License feature Application Control - $checkLicense_featureApcl" >>$HISTORYLOG
	fi
fi

if [[ $checkSelf_bladeAb -eq "1" ]]; then
	if [[ $checkLicense_featureAbot -eq "0" ]] ; then
		echo "Logic - license Abot: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - License feature Anti-Bot - $checkLicense_featureAbot" >>$HISTORYLOG
		checkLicense_warning="1"
		checkLicense_warningInfo="$checkLicense_warningInfo [License does not contain Anti-Bot feature (ABOT)]"
	else
		echo "Logic - license Abot: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - License feature Anti-Bot - $checkLicense_featureAbot" >>$HISTORYLOG
	fi
fi

if [[ $checkSelf_bladeAv -eq "1" ]]; then
	if [[ $checkLicense_featureAv -eq "0" ]] ; then
		echo "Logic - license Av: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - License feature Anti-Virus - $checkLicense_featureAv" >>$HISTORYLOG
		checkLicense_warning="1"
		checkLicense_warningInfo="$checkLicense_warningInfo [License does not contain Anti-Virus feature (AV)]"
	else
		echo "Logic - license Av: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - License feature Anti-Virus - $checkLicense_featureAv" >>$HISTORYLOG
	fi
fi


#SYSLOG
if [[ $checkLicense_problem == "1" ]]; then
	sendSyslog "$functionName" "PROBLEM" "checkLicense_problemInfo" "VALUE=\"$checkLicense_problemInfo $checkLicense_warningInfo $checkLicense_workingInfo\""
elif [[ $checkLicense_warning == "1" ]]; then
	sendSyslog "$functionName" "WARNING" "checkLicense_warningInfo" "VALUE=\"$checkLicense_warningInfo $checkLicense_workingInfo\""	
else
	sendSyslog "$functionName" "WORKING" "checkLicense_workingInfo" "VALUE=\"$checkLicense_workingInfo\""
fi

sendSyslog "$functionName" "INFO" "checkLicense_licenseCount" "VALUE=\"$checkLicense_licenseCount\""
if [[ $checkSelf_hwtype != "VM" ]]; then
	sendSyslog "$functionName" "INFO" "checkLicense_licenseCorrectCount" "VALUE=\"$checkLicense_licenseCorrectCount\""
fi
sendSyslog "$functionName" "INFO" "checkLicense_licenseCountEvals" "VALUE=\"$checkLicense_licenseCountEvals\""
sendSyslog "$functionName" "INFO" "checkLicense_contractCount" "VALUE=\"$checkLicense_contractCount\""
sendSyslog "$functionName" "INFO" "checkLicense_contractExpiration" "VALUE=\"$checkLicense_contractExpiration\""
sendSyslog "$functionName" "INFO" "checkLicense_contractExpirationIps" "VALUE=\"$checkLicense_contractExpirationIps\""
sendSyslog "$functionName" "INFO" "checkLicense_contractExpirationAbot" "VALUE=\"$checkLicense_contractExpirationAbot\""
sendSyslog "$functionName" "INFO" "checkLicense_contractExpirationAv" "VALUE=\"$checkLicense_contractExpirationAv\""
sendSyslog "$functionName" "INFO" "checkLicense_contractExpirationUrlf" "VALUE=\"$checkLicense_contractExpirationUrlf\""
sendSyslog "$functionName" "INFO" "checkLicense_contractExpirationApcl" "VALUE=\"$checkLicense_contractExpirationApcl\""
sendSyslog "$functionName" "INFO" "checkLicense_cplicprint" "IP=\"$checkLicense_ip\" EXPIRATION=\"$checkLicense_expiration\" FEATURES=\"$checkLicense_features\" CK=\"$checkLicense_ck\""


checkLicense_fEnd=$(date "+%s")
checkLicense_fRunTime=$(( checkLicense_fEnd - checkLicense_fStart ))
echo "checkLicense_fRunTime $checkLicense_fRunTime" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicense_warning - $checkLicense_warning" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicense_problem - $checkLicense_problem" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicense_problemInfo - $checkLicense_problemInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicense_warningInfo - $checkLicense_warningInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicense_workingInfo - $checkLicense_workingInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicense_runTime - $checkLicense_fRunTime" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkLicense_warning" "VALUE=\"$checkLicense_warning\""
sendSyslog "$functionName" "INFO" "checkLicense_problem" "VALUE=\"$checkLicense_problem\""
sendSyslog "$functionName" "INFO" "checkLicense_problemInfo" "VALUE=\"$checkLicense_problemInfo\""
sendSyslog "$functionName" "INFO" "checkLicense_warningInfo" "VALUE=\"$checkLicense_warningInfo\""
sendSyslog "$functionName" "INFO" "checkLicense_workingInfo" "VALUE=\"$checkLicense_workingInfo\""
sendSyslog "$functionName" "INFO" "checkLicense_runTime" "VALUE=\"$checkLicense_fRunTime\""
echo "checkLicense_problem $checkLicense_problem" >>$RUNLOG
echo "END==checkLicense" >>$RUNLOG
}

###################################################################################################
checkLicenseSP() {
echo "START==checkLicenseSP" >>$RUNLOG

#DEFAULTS
checkLicenseSP_fStart=$(date "+%s")
functionName=${FUNCNAME[0]}
checkLicenseSP_warning="0"
checkLicenseSP_problem="0"
checkLicenseSP_workingInfo=""
checkLicenseSP_warningInfo=""
checkLicenseSP_problemInfo=""
TEMPFILE=$TEMPDIR/$SCRIPT.$functionName

#COLLECT OUTPUTS
cplic print | grep -v cp.macro > $TEMPFILE 2>&1
checkLicenseSP_licenseCount=$(cat $TEMPFILE | grep -v "|" | grep "cpap\|CPAP\|CPSG" | grep -v Covers | wc -l)
checkLicenseSP_licenseCountEvals=$(cat $TEMPFILE | grep -v "|" | grep "cpap\|CPAP\|CPSG" | grep -v never | grep -v Covers | wc -l)
checkLicenseSP_contractExpiration0=$(cat $TEMPFILE | sed -n -e '/Contract Coverage/,$p' | grep -v "Covers" | grep -v "cpap\|CPAP\|CPSG" | grep "IPS\|ABOT\|URLF\|AV\|APCL" | head -1 | awk '{print $5}')
checkLicenseSP_contractExpiration1=$(date -d "$checkLicenseSP_contractExpiration0" +"%s")
checkLicenseSP_contractExpiration="$(( $checkLicenseSP_contractExpiration1 + 86400 ))"

checkLicenseSP_contractExpirationIps="0"
for LINE in `cat $TEMPFILE | sed -n -e '/Contract Coverage/,$p' | grep -v "Covers" | grep -v "cpap\|CPAP\|CPSG" | grep "IPS" | awk -F "|" '{print $3}'` ; do
	DATE=$(date -d $LINE +"%s")
	if [[ $checkLicenseSP_contractExpirationIps -lt $DATE ]]; then
		checkLicenseSP_contractExpirationIps=$DATE
	fi
done
checkLicenseSP_contractExpirationAbot="0"
for LINE in `cat $TEMPFILE | sed -n -e '/Contract Coverage/,$p' | grep -v "Covers" | grep -v "cpap\|CPAP\|CPSG" | grep "ABOT" | awk -F "|" '{print $3}'` ; do
	DATE=$(date -d $LINE +"%s")
	if [[ $checkLicenseSP_contractExpirationAbot -lt $DATE ]]; then
		checkLicenseSP_contractExpirationAbot=$DATE
	fi
done
checkLicenseSP_contractExpirationUrlf="0"
for LINE in `cat $TEMPFILE | sed -n -e '/Contract Coverage/,$p' | grep -v "Covers" | grep -v "cpap\|CPAP\|CPSG" | grep "URLF" | awk -F "|" '{print $3}'` ; do
	DATE=$(date -d $LINE +"%s")
	if [[ $checkLicenseSP_contractExpirationUrlf -lt $DATE ]]; then
		checkLicenseSP_contractExpirationUrlf=$DATE
	fi
done
checkLicenseSP_contractExpirationAv="0"
for LINE in `cat $TEMPFILE | sed -n -e '/Contract Coverage/,$p' | grep -v "Covers" | grep -v "cpap\|CPAP\|CPSG" | grep "AV" | awk -F "|" '{print $3}'` ; do
	DATE=$(date -d $LINE +"%s")
	if [[ $checkLicenseSP_contractExpirationAv -lt $DATE ]]; then
		checkLicenseSP_contractExpirationAv=$DATE
	fi
done
checkLicenseSP_contractExpirationApcl="0"
for LINE in `cat $TEMPFILE | sed -n -e '/Contract Coverage/,$p' | grep -v "Covers" | grep -v "cpap\|CPAP\|CPSG" | grep "APCL" | awk -F "|" '{print $3}'` ; do
	DATE=$(date -d $LINE +"%s")
	if [[ $checkLicenseSP_contractExpirationApcl -lt $DATE ]]; then
		checkLicenseSP_contractExpirationApcl=$DATE
	fi
done

checkLicenseSP_contractCount=$(cat $TEMPFILE | sed -n -e '/Contract Coverage/,$p' | grep Covers | wc -l)
if [[ $checkSelf_hwtype == "SP" ]]; then
	checkLicenseSP_snToCkCh1=$checkSelf_snToCkCh1
	checkLicenseSP_snToCkCh2=$checkSelf_snToCkCh2
fi

if [[ $checkSelf_hwtype != "MAESTRO" ]]; then
	checkLicenseSP_licenseCorrectCount=$(cat $TEMPFILE | grep "cpap\|CPAP" | grep never | grep -E "$checkLicenseSP_snToCkCh1|$checkLicenseSP_snToCkCh2" | wc -l)
	if [[ $checkLicenseSP_licenseCorrectCount -lt "2" ]]; then
		checkLicenseSP_licenseLegacyCk=$(cat $TEMPFILE | grep "cpap\|CPAP" | grep never | awk '{print $NF}' | awk -F "-" '{print $2}' | tr -d '0-9' | wc -l)
		if [[ $checkLicenseSP_licenseCount == $checkLicenseSP_licenseLegacyCk ]]; then
			checkLicenseSP_licenseCorrectCount=$checkLicenseSP_licenseCount
		fi
	fi
else
	checkLicenseSP_licenseCorrectCountCk=$(cat $TEMPFILE | grep never | grep "cpap\|CPAP\|CPSG" | awk '{print $NF}' | cut -c 4- | tr '-' ':' | grep $checkSelf_mac | head -1)
	if [[ $checkSelf_mac == $checkLicenseSP_licenseCorrectCountCk ]]; then
		checkLicenseSP_licenseCorrectCount="1"
	else
		checkLicenseSP_licenseCorrectCount="0"
	fi
fi
checkLicenseSP_cplicprint0=$(cat $TEMPFILE | grep "never" | wc -l)
if [[ $checkLicenseSP_cplicprint0 -gt "1" ]]; then
	checkLicenseSP_cplicprint=$(cat $TEMPFILE | grep "never" | tr '\n' '|' | rev | cut -c2- | rev)
	checkLicenseSP_ip=$(cat $TEMPFILE | grep "never" | awk '{print $1}' | tr '\n' '|' | rev | cut -c2- | rev)
	checkLicenseSP_expiration=$(cat $TEMPFILE | grep "never" | awk '{print $2}' | tr '\n' '|' | rev | cut -c2- | rev)
	checkLicenseSP_features=$(cat $TEMPFILE | grep "never" | awk -F "CK-" '{print $1}' | awk -F "never" '{print $NF}' | sed -e 's/^[[:space:]]*//' | tr '\n' '|' | rev | cut -c2- | rev)
	checkLicenseSP_ck=$(cat $TEMPFILE | grep "never" | awk '{print $NF}' | tr '\n' '|' | rev | cut -c2- | rev)
else
	checkLicenseSP_cplicprint=$(cat $TEMPFILE | grep "never")
	checkLicenseSP_ip=$(cat $TEMPFILE | grep "never" | awk '{print $1}')
	checkLicenseSP_expiration=$(cat $TEMPFILE | grep "never" | awk '{print $2}')
	checkLicenseSP_features=$(cat $TEMPFILE | grep "never" | awk -F "CK-" '{print $1}' | awk -F "never" '{print $NF}' | sed -e 's/^[[:space:]]*//')
	checkLicenseSP_ck=$(cat $TEMPFILE | grep "never" | awk '{print $NF}')
fi
#Hardware
checkLicenseSP_featureCpap=$(cat $TEMPFILE | grep "never" | grep -i "CPAP-" | awk '{print $3}' | awk -F "-" '{print $NF}')
#Firewall
checkLicenseSP_featureFw=$(cat $TEMPFILE | grep "never" | grep -i "CPSB-FW" | wc -l)
#Adv Networking and Acceleration
checkLicenseSP_featureAdnc=$(cat $TEMPFILE | grep "never" | grep -i "CPSB-ADNC\|CPSB-ADN" | wc -l)
#URL Filtering
checkLicenseSP_featureUrlf=$(cat $TEMPFILE | grep "never" | grep -i "CPSB-URLF" | wc -l)
#IPS
checkLicenseSP_featureIps=$(cat $TEMPFILE | grep "never" | grep -i "CPSB-IPS" | wc -l)
#Application Control
checkLicenseSP_featureApcl=$(cat $TEMPFILE | grep "never" | grep -i "CPSB-APCL" | wc -l)
#Anti-Virus
checkLicenseSP_featureAv=$(cat $TEMPFILE | grep "never" | grep -i "CPSB-AV" | wc -l)
#Anti-Bot
checkLicenseSP_featureAbot=$(cat $TEMPFILE | grep "never" | grep -i "CPSB-ABOT" | wc -l)
#Anti-Spam
checkLicenseSP_featureAspm=$(cat $TEMPFILE | grep "never" | grep -i "CPSB-ASPM" | wc -l)
rm -rf $TEMPFILE

#LOG OUTPUTS
echo "checkLicenseSP_licenseCount $checkLicenseSP_licenseCount" >>$RUNLOG
echo "checkLicenseSP_licenseCountEvals $checkLicenseSP_licenseCountEvals" >>$RUNLOG
echo "checkLicenseSP_contractCount $checkLicenseSP_contractCount" >>$RUNLOG
echo "checkLicenseSP_contractExpiration0 $checkLicenseSP_contractExpiration0" >>$RUNLOG
echo "checkLicenseSP_contractExpiration $checkLicenseSP_contractExpiration" >>$RUNLOG
if [[ $checkSelf_hwtype == "SP" ]]; then
	echo "checkLicenseSP_snToCkCh1 $checkLicenseSP_snToCkCh1" >>$RUNLOG
	echo "checkLicenseSP_snToCkCh2 $checkLicenseSP_snToCkCh2" >>$RUNLOG
	echo "checkLicenseSP_licenseLegacyCk $checkLicenseSP_licenseLegacyCk" >>$RUNLOG
	echo "checkLicenseSP_licenseCorrectCount $checkLicenseSP_licenseCorrectCount" >>$RUNLOG
fi

echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicenseSP_licenseCount - $checkLicenseSP_licenseCount" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicenseSP_licenseCountEvals - $checkLicenseSP_licenseCountEvals" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicenseSP_contractCount - $checkLicenseSP_contractCount" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicenseSP_contractExpiration - $checkLicenseSP_contractExpiration" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicenseSP_cplicprint - $checkLicenseSP_cplicprint" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicenseSP_ip - $checkLicenseSP_ip" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicenseSP_expiration - $checkLicenseSP_expiration" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicenseSP_features - $checkLicenseSP_features" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicenseSP_ck - $checkLicenseSP_ck" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicenseSP_featureCpap - $checkLicenseSP_featureCpap" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicenseSP_featureFw - $checkLicenseSP_featureFw" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicenseSP_featureAdnc - $checkLicenseSP_featureAdnc" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicenseSP_featureIps - $checkLicenseSP_featureIps" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicenseSP_contractExpirationIps - $checkLicenseSP_contractExpirationIps" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicenseSP_featureAbot - $checkLicenseSP_featureAbot" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicenseSP_contractExpirationAbot - $checkLicenseSP_contractExpirationAbot" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicenseSP_featureUrlf - $checkLicenseSP_featureUrlf" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicenseSP_contractExpirationUrlf - $checkLicenseSP_contractExpirationUrlf" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicenseSP_featureAv - $checkLicenseSP_featureAv" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicenseSP_contractExpirationAv - $checkLicenseSP_contractExpirationAv" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicenseSP_featureApcl - $checkLicenseSP_featureApcl" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicenseSP_contractExpirationApcl - $checkLicenseSP_contractExpirationApcl" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Legacy CK - $checkLicenseSP_licenseLegacyCk" >>$HISTORYLOG

#RUN LOGIC
if [[ $checkSelf_hwtype == "SP" ]] && [[ $checkLicenseSP_licenseLegacyCk -gt "0" ]] ; then
	echo "Logic - legacy ck: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Legacy CK - $checkLicenseSP_licenseLegacyCk" >>$HISTORYLOG
	checkLicenseSP_warningInfo="$checkLicenseSP_warningInfo [Legacy CK Installed]"
else
	echo "Logic - legacy ck: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Legacy CK - $checkLicenseSP_licenseLegacyCk" >>$HISTORYLOG
fi
if [[ $checkSelf_hwtype == "SP" ]] && [[ $checkLicenseSP_licenseCount -lt "2" ]] ; then
	echo "Logic - license count: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - License Count - $checkLicenseSP_licenseCount" >>$HISTORYLOG
	checkLicenseSP_problem="1"
	checkLicenseSP_problemInfo="$checkLicenseSP_problemInfo [No License Installed]"
elif [[ $checkSelf_hwtype == "MAESTRO" ]] && [[ $checkLicenseSP_licenseCount -lt "1" ]] ; then
	echo "Logic - license count: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - License Count - $checkLicenseSP_licenseCount" >>$HISTORYLOG
	checkLicenseSP_problem="1"
	checkLicenseSP_problemInfo="$checkLicenseSP_problemInfo [No License Installed]"
else
	echo "Logic - license count: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - License Count - $checkLicenseSP_licenseCount" >>$HISTORYLOG
fi
if [[ $checkLicenseSP_licenseCountEvals -gt "0" ]] ; then
	echo "Logic - license count evals: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - License Count Evals - $checkLicenseSP_licenseCountEvals" >>$HISTORYLOG
	checkLicenseSP_warning="1"
	checkLicenseSP_warningInfo="$checkLicenseSP_warningInfo [Eval License Installed]"
else
	echo "Logic - license count evals: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - License Count Evals - $checkLicenseSP_licenseCountEvals" >>$HISTORYLOG
fi
if [[ $checkLicenseSP_contractCount == "0" ]] ; then
	echo "Logic - contract count: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Contract count - $checkLicenseSP_contractCount" >>$HISTORYLOG
	checkLicenseSP_problem="1"
	checkLicenseSP_problemInfo="$checkLicenseSP_problemInfo [No Contract Installed]"
else
	echo "Logic - contract count: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Contract count - $checkLicenseSP_contractCount" >>$HISTORYLOG
fi
if [[ $checkSelf_hwtype == "SP" ]] && [[ $checkLicenseSP_licenseCorrectCount -lt "2" ]] && [[ $checkLicenseSP_licenseLegacyCk -gt "0" ]]; then
	echo "Logic - correct license: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Correct license - $checkLicenseSP_licenseCorrectCount" >>$HISTORYLOG
	checkLicenseSP_problem="1"
	checkLicenseSP_problemInfo="$checkLicenseSP_problemInfo [Wrong License Installed]"
elif [[ $checkSelf_hwtype == "MAESTRO" ]] && [[ $checkLicenseSP_licenseCorrectCount -lt "1" ]]; then
	echo "Logic - correct license: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Correct license - $checkLicenseSP_licenseCorrectCount" >>$HISTORYLOG
	checkLicenseSP_problem="1"
	checkLicenseSP_problemInfo="$checkLicenseSP_problemInfo [Wrong License Installed]"
else
    echo "Logic - contract count: PASS" >>$RUNLOG
    echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Correct license - $checkLicenseSP_licenseCorrectCount" >>$HISTORYLOG
fi
if [[ $checkLicenseSP_featureAdnc -eq "0" ]] ; then
	echo "Logic - license adnc: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - License feature ADNC - $checkLicenseSP_featureAdnc" >>$HISTORYLOG
	checkLicenseSP_warning="1"
	checkLicenseSP_warningInfo="$checkLicenseSP_warningInfo [License does not contain ADNC feature (SecureXL)]"
else
	echo "Logic - clicense adnc: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - License feature ADNC - $checkLicenseSP_featureAdnc" >>$HISTORYLOG
fi

if [[ $checkLicenseSP_contractExpirationIps -lt $EPOCH ]] && [[ $checkSelf_bladeIps -eq "1" ]]; then
	echo "Logic - checkLicenseSP_contractExpirationIps: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - checkLicenseSP_contractExpirationIps - $checkLicenseSP_contractExpirationIps" >>$HISTORYLOG
	checkLicenseSP_problem="1"
	checkLicenseSP_problemInfo="$checkLicenseSP_problemInfo [IPS Contract Expired]"
else
	echo "Logic - checkLicenseSP_contractExpirationIps: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkLicenseSP_contractExpirationIps - $checkLicenseSP_contractExpirationIps" >>$HISTORYLOG
fi

if [[ $checkLicenseSP_contractExpirationAbot -lt $EPOCH ]] && [[ $checkSelf_bladeAb -eq "1" ]]; then
	echo "Logic - checkLicenseSP_contractExpirationAbot: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - checkLicenseSP_contractExpirationAbot - $checkLicenseSP_contractExpirationAbot" >>$HISTORYLOG
	checkLicenseSP_problem="1"
	checkLicenseSP_problemInfo="$checkLicenseSP_problemInfo [Anti-Bot Contract Expired]"
else
	echo "Logic - checkLicenseSP_contractExpirationAbot: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkLicenseSP_contractExpirationAbot - $checkLicenseSP_contractExpirationAbot" >>$HISTORYLOG
fi

if [[ $checkLicenseSP_contractExpirationAv -lt $EPOCH ]] && [[ $checkSelf_bladeAv -eq "1" ]]; then
	echo "Logic - checkLicenseSP_contractExpirationAv: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - checkLicenseSP_contractExpirationAv - $checkLicenseSP_contractExpirationAv" >>$HISTORYLOG
	checkLicenseSP_problem="1"
	checkLicenseSP_problemInfo="$checkLicenseSP_problemInfo [Anti-Virus Contract Expired]"
else
	echo "Logic - checkLicenseSP_contractExpirationAv: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkLicenseSP_contractExpirationAv - $checkLicenseSP_contractExpirationAv" >>$HISTORYLOG
fi

if [[ $checkLicenseSP_contractExpirationUrlf -lt $EPOCH ]] && [[ $checkSelf_bladeUrlf -eq "1" ]]; then
	echo "Logic - checkLicenseSP_contractExpirationUrlf: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - checkLicenseSP_contractExpirationUrlf - $checkLicenseSP_contractExpirationUrlf" >>$HISTORYLOG
	checkLicenseSP_problem="1"
	checkLicenseSP_problemInfo="$checkLicenseSP_problemInfo [URLF Contract Expired]"
else
	echo "Logic - checkLicenseSP_contractExpirationUrlf: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkLicenseSP_contractExpirationUrlf - $checkLicenseSP_contractExpirationUrlf" >>$HISTORYLOG
fi

if [[ $checkLicenseSP_contractExpirationApcl -lt $EPOCH ]] && [[ $checkSelf_bladeAppi -eq "1" ]]; then
	echo "Logic - checkLicenseSP_contractExpirationApcl: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - checkLicenseSP_contractExpirationApcl - $checkLicenseSP_contractExpirationApcl" >>$HISTORYLOG
	checkLicenseSP_problem="1"
	checkLicenseSP_problemInfo="$checkLicenseSP_problemInfo [AppControl Contract Expired]"
else
	echo "Logic - checkLicenseSP_contractExpirationApcl: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkLicenseSP_contractExpirationApcl - $checkLicenseSP_contractExpirationApcl" >>$HISTORYLOG
fi

if [[ $checkSelf_hwtype == "SP" ]]; then
	if [[ $checkLicenseSP_licenseCount -gt "2" ]]; then
		echo "Logic - correct license: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Extra license - " >>$HISTORYLOG
		#NOT BLOCKING
		#checkLicenseSP_problem="1"
		checkLicenseSP_warningInfo="$checkLicenseSP_warningInfo [Extra License Installed]"
	else
		echo "Logic - contract expiration: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Extra license - " >>$HISTORYLOG
	fi
fi

if [[ $checkSelf_bladeIps -eq "1" ]]; then
	if [[ $checkLicenseSP_featureIps -eq "0" ]] && [[ $checkLicenseSP_contractExpirationIps -gt $EPOCH ]] ; then
		echo "Logic - license ips: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - License feature IPS - $checkLicenseSP_featureIps" >>$HISTORYLOG
		checkLicenseSP_workingInfo="$checkLicenseSP_workingInfo [License does not contain IPS feature (IPS), but Contract Exists]"
	elif [[ $checkLicenseSP_featureIps -eq "0" ]] ; then
		echo "Logic - license ips: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - License feature IPS - $checkLicenseSP_featureIps" >>$HISTORYLOG
		checkLicenseSP_warning="1"
		checkLicenseSP_warningInfo="$checkLicenseSP_warningInfo [License does not contain IPS feature (IPS)]"
	else
		echo "Logic - license ips: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - License feature IPS - $checkLicenseSP_featureIps" >>$HISTORYLOG
	fi
fi

if [[ $checkSelf_bladeAppi -eq "1" ]]; then
	if [[ $checkLicenseSP_featureApcl -eq "0" ]] ; then
		echo "Logic - license apcl: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - License feature Application Control - $checkLicenseSP_featureApcl" >>$HISTORYLOG
		checkLicenseSP_warning="1"
		checkLicenseSP_warningInfo="$checkLicenseSP_warningInfo [License does not contain AppControl feature (APCL)]"
	else
		echo "Logic - license apcl: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - License feature Application Control - $checkLicenseSP_featureApcl" >>$HISTORYLOG
	fi
fi

if [[ $checkSelf_bladeAb -eq "1" ]]; then
	if [[ $checkLicenseSP_featureAbot -eq "0" ]] ; then
		echo "Logic - license Abot: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - License feature Anti-Bot - $checkLicenseSP_featureAbot" >>$HISTORYLOG
		checkLicenseSP_warning="1"
		checkLicenseSP_warningInfo="$checkLicenseSP_warningInfo [License does not contain Anti-Bot feature (ABOT)]"
	else
		echo "Logic - license Abot: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - License feature Anti-Bot - $checkLicenseSP_featureAbot" >>$HISTORYLOG
	fi
fi

if [[ $checkSelf_bladeAv -eq "1" ]]; then
	if [[ $checkLicenseSP_featureAv -eq "0" ]] ; then
		echo "Logic - license Av: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - License feature Anti-Virus - $checkLicenseSP_featureAv" >>$HISTORYLOG
		checkLicenseSP_warning="1"
		checkLicenseSP_warningInfo="$checkLicenseSP_warningInfo [License does not contain Anti-Virus feature (AV)]"
	else
		echo "Logic - license Av: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - License feature Anti-Virus - $checkLicenseSP_featureAv" >>$HISTORYLOG
	fi
fi

#SYSLOG
if [[ $checkLicenseSP_problem == "1" ]]; then
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "PROBLEM" "checkLicenseSP_problemInfo" "VALUE=\"$checkLicenseSP_problemInfo $checkLicenseSP_warningInfo $checkLicenseSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "PROBLEM" "checkLicenseSP_problemInfo" "VALUE=\"$checkLicenseSP_problemInfo $checkLicenseSP_warningInfo $checkLicenseSP_workingInfo\""
	fi
elif [[ $checkLicenseSP_warning == "1" ]]; then
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "WARNING" "checkLicenseSP_problemInfo" "VALUE=\"$checkLicenseSP_warningInfo $checkLicenseSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "WARNING" "checkLicenseSP_problemInfo" "VALUE=\"$checkLicenseSP_warningInfo $checkLicenseSP_workingInfo\""
	fi
else
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "WORKING" "checkLicenseSP_problemInfo" "VALUE=\"$checkLicenseSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "WORKING" "checkLicenseSP_problemInfo" "VALUE=\"$checkLicenseSP_workingInfo\""
	fi
fi

sendSyslog "$functionName" "INFO" "checkLicenseSP_licenseCount" "VALUE=\"$checkLicenseSP_licenseCount\""
sendSyslog "$functionName" "INFO" "checkLicenseSP_licenseCorrectCount" "VALUE=\"$checkLicenseSP_licenseCorrectCount\""
sendSyslog "$functionName" "INFO" "checkLicenseSP_licenseCountEvals" "VALUE=\"$checkLicenseSP_licenseCountEvals\""
sendSyslog "$functionName" "INFO" "checkLicenseSP_licenseCorrectCount" "VALUE=\"$checkLicenseSP_licenseCorrectCount\""
sendSyslog "$functionName" "INFO" "checkLicenseSP_contractCount" "VALUE=\"$checkLicenseSP_contractCount\""
sendSyslog "$functionName" "INFO" "checkLicenseSP_contractExpiration" "VALUE=\"$checkLicenseSP_contractExpiration\""
sendSyslog "$functionName" "INFO" "checkLicenseSP_cplicprint" "IP=\"$checkLicenseSP_ip\" EXPIRATION=\"$checkLicenseSP_expiration\" FEATURES=\"$checkLicenseSP_features\" CK=\"$checkLicenseSP_ck\""
sendSyslog "$functionName" "INFO" "checkLicenseSP_licenseCount" "VALUE=\"$checkLicenseSP_licenseCount\""
sendSyslog "$functionName" "INFO" "checkLicenseSP_licenseCorrectCount" "VALUE=\"$checkLicenseSP_licenseCorrectCount\""
sendSyslog "$functionName" "INFO" "checkLicenseSP_licenseCountEvals" "VALUE=\"$checkLicenseSP_licenseCountEvals\""
sendSyslog "$functionName" "INFO" "checkLicenseSP_licenseCorrectCount" "VALUE=\"$checkLicenseSP_licenseCorrectCount\""
sendSyslog "$functionName" "INFO" "checkLicenseSP_contractCount" "VALUE=\"$checkLicenseSP_contractCount\""
sendSyslog "$functionName" "INFO" "checkLicenseSP_contractExpiration" "VALUE=\"$checkLicenseSP_contractExpiration\""
sendSyslog "$functionName" "INFO" "checkLicenseSP_contractExpirationIps" "VALUE=\"$checkLicenseSP_contractExpirationIps\""
sendSyslog "$functionName" "INFO" "checkLicenseSP_contractExpirationAbot" "VALUE=\"$checkLicenseSP_contractExpirationAbot\""
sendSyslog "$functionName" "INFO" "checkLicenseSP_contractExpirationAv" "VALUE=\"$checkLicenseSP_contractExpirationAv\""
sendSyslog "$functionName" "INFO" "checkLicenseSP_contractExpirationUrlf" "VALUE=\"$checkLicenseSP_contractExpirationUrlf\""
sendSyslog "$functionName" "INFO" "checkLicenseSP_contractExpirationApcl" "VALUE=\"$checkLicenseSP_contractExpirationApcl\""




checkLicenseSP_fEnd=$(date "+%s")
checkLicenseSP_fRunTime=$(( checkLicenseSP_fEnd - checkLicenseSP_fStart ))
echo "checkLicenseSP_fRunTime $checkLicenseSP_fRunTime" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicenseSP_warning - $checkLicenseSP_warning" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicenseSP_problem - $checkLicenseSP_problem" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicenseSP_problemInfo - $checkLicenseSP_problemInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicenseSP_warningInfo - $checkLicenseSP_warningInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicenseSP_workingInfo - $checkLicenseSP_workingInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkLicenseSP_runTime - $checkLicenseSP_fRunTime" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkLicenseSP_warning" "VALUE=\"$checkLicenseSP_warning\""
sendSyslog "$functionName" "INFO" "checkLicenseSP_problem" "VALUE=\"$checkLicenseSP_problem\""
sendSyslog "$functionName" "INFO" "checkLicenseSP_problemInfo" "VALUE=\"$checkLicenseSP_problemInfo\""
sendSyslog "$functionName" "INFO" "checkLicenseSP_warningInfo" "VALUE=\"$checkLicenseSP_warningInfo\""
sendSyslog "$functionName" "INFO" "checkLicenseSP_workingInfo" "VALUE=\"$checkLicenseSP_workingInfo\""
sendSyslog "$functionName" "INFO" "checkLicenseSP_runTime" "VALUE=\"$checkLicenseSP_fRunTime\""

#SUMMARY
if [[ $checkLicenseSP_problem == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - checkLicenseSP - SUMMARY - PROBLEM - $checkLicenseSP_problemInfo $checkLicenseSP_warningInfo $checkLicenseSP_workingInfo" >>$HISTORYLOG
elif [[ $checkLicenseSP_warning == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - checkLicenseSP - SUMMARY - WARNING - $checkLicenseSP_warningInfo $checkLicenseSP_workingInfo" >>$HISTORYLOG
else
	echo "$HISTORYLOGPREAMBLE - checkLicenseSP - SUMMARY - WORKING - $checkLicenseSP_workingInfo" >>$HISTORYLOG
fi
echo "checkLicenseSP_problem $checkLicenseSP_problem" >>$RUNLOG
echo "END==checkLicenseSP" >>$RUNLOG
}

###################################################################################################
checkHardware() {
echo "START==checkHardware" >>$RUNLOG

#DEFAULTS
checkHardware_fStart=$(date "+%s")
functionName=${FUNCNAME[0]}
checkHardware_warning="0"
checkHardware_problem="0"
checkHardware_workingInfo=""
checkHardware_warningInfo=""
checkHardware_problemInfo=""
TEMPFILE=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.cpstat
TEMPFILE_ETHTOOL=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.ethtool




#COLLECT OUTPUTS
cpstat os -f sensors >> $TEMPFILE
cpstat os -f power_supply >> $TEMPFILE
cpstat os -f raidInfo >> $TEMPFILE

if [[ $MDPSENABLED == "2" ]]; then
	mplane > /dev/null 2>&1

	#checkHardware_tempStatus=$(snmpwalk -r 1 -v2c -c $SNMPCOMMUNITYDPLANE localhost .1.3.6.1.4.1.2620.1.6.7.8.1.1.6 | sed 's/.*: //' | tr -d '"' | paste -sd+ | bc)
	checkHardware_tempStatus=$(stattestget 1.3.6.1.4.1.2620.1.6.7.8.1.1.6 | paste -sd+ | bc)
	COUNTER="0"
	while [ $checkHardware_tempStatus -gt "0" ] && [ $COUNTER -lt "3" ]; do
		echo "checkHardware_tempStatus $checkHardware_tempStatus" >>$RUNLOG
		sleep 10
		#checkHardware_tempStatus=$(snmpwalk -r 1 -v2c -c $SNMPCOMMUNITYDPLANE localhost .1.3.6.1.4.1.2620.1.6.7.8.1.1.6 | sed 's/.*: //' | tr -d '"' | paste -sd+ | bc)
		checkHardware_tempStatus=$(stattestget 1.3.6.1.4.1.2620.1.6.7.8.1.1.6 | paste -sd+ | bc)
		let COUNTER=$COUNTER+1
		echo "WAITING FOR PROPER OUTPUT $COUNTER times" >> $RUNLOG
	done
	checkHardware_tempStatusDetail=$(cat $TEMPFILE | grep "Temperature" | awk -F "|" '{if ($6 ~ /1/) print $2,$3}' | tr '\n' ',')
	#checkHardware_fanStatus=$(snmpwalk -r 1 -v2c -c $SNMPCOMMUNITYDPLANE localhost .1.3.6.1.4.1.2620.1.6.7.8.2.1.6 | sed 's/.*: //' | tr -d '"' | paste -sd+ | bc)
	checkHardware_fanStatus=$(stattestget 1.3.6.1.4.1.2620.1.6.7.8.2.1.6 | paste -sd+ | bc)
	COUNTER="0"
	while [ $checkHardware_fanStatus -gt "0" ] && [ $COUNTER -lt "3" ]; do
		echo "checkHardware_fanStatus $checkHardware_fanStatus" >>$RUNLOG
		sleep 10
		#checkHardware_fanStatus=$(snmpwalk -r 1 -v2c -c $SNMPCOMMUNITYDPLANE localhost .1.3.6.1.4.1.2620.1.6.7.8.2.1.6 | sed 's/.*: //' | tr -d '"' | paste -sd+ | bc)
		checkHardware_fanStatus=$(stattestget 1.3.6.1.4.1.2620.1.6.7.8.2.1.6 | paste -sd+ | bc)
		let COUNTER=$COUNTER+1
		echo "WAITING FOR PROPER OUTPUT $COUNTER times" >> $RUNLOG
	done
	checkHardware_fanStatusDetail=$(cat $TEMPFILE | grep "Fan" | awk -F "|" '{if ($6 ~ /1/) print $2,$3}' | tr '\n' ',')
	#checkHardware_voltageStatus=$(snmpwalk -r 1 -v2c -c $SNMPCOMMUNITYDPLANE localhost .1.3.6.1.4.1.2620.1.6.7.8.3.1.6 | sed 's/.*: //' | tr -d '"' | paste -sd+ | bc)
	checkHardware_voltageStatus=$(stattestget 1.3.6.1.4.1.2620.1.6.7.8.3.1.6 | paste -sd+ | bc)
	COUNTER="0"
	while [ $checkHardware_voltageStatus -gt "0" ] && [ $COUNTER -lt "3" ]; do
		echo "checkHardware_voltageStatus $checkHardware_voltageStatus" >>$RUNLOG
		sleep 10
		#checkHardware_voltageStatus=$(snmpwalk -r 1 -v2c -c $SNMPCOMMUNITYDPLANE localhost .1.3.6.1.4.1.2620.1.6.7.8.3.1.6 | sed 's/.*: //' | tr -d '"' | paste -sd+ | bc)
		checkHardware_voltageStatus=$(stattestget 1.3.6.1.4.1.2620.1.6.7.8.3.1.6 | paste -sd+ | bc)
		let COUNTER=$COUNTER+1
		echo "WAITING FOR PROPER OUTPUT $COUNTER times" >> $RUNLOG
	done
	checkHardware_voltageStatusDetail1=$(cat $TEMPFILE | grep "Voltage" | awk -F "|" '{if ($6 ~ /1/) print $2,$3}' | tr '\n' ',')
	
	#checkHardware_psuStatus=$(snmpwalk -r 1 -v2c -c $SNMPCOMMUNITYDPLANE localhost .1.3.6.1.4.1.2620.1.6.7.9.1.1.2 | grep "Down" | wc -l)
	checkHardware_psuStatus=$(stattestget 1.3.6.1.4.1.2620.1.6.7.9.1.1.2 | grep "Down" | wc -l)
	checkHardware_psuStatusDetail=$(cpstat os -f power_supply | grep "Up\|Down" | tr '|' ' ' | awk '{print $1,$2}' | tr ' ' '-' | tr '\n' ' ')
	COUNTER="0"
	while [ $checkHardware_psuStatus -gt "0" ] && [ $COUNTER -lt "3" ]; do
		echo "checkHardware_psuStatus $checkHardware_psuStatus" >>$RUNLOG
		sleep 10
		#checkHardware_psuStatus=$(snmpwalk -r 1 -v2c -c $SNMPCOMMUNITYDPLANE localhost .1.3.6.1.4.1.2620.1.6.7.9.1.1.2 | grep "Down" | wc -l)
		checkHardware_psuStatus=$(stattestget 1.3.6.1.4.1.2620.1.6.7.9.1.1.2 | grep "Down" | wc -l)
		checkHardware_psuStatusDetail=$(cpstat os -f power_supply | grep "Up\|Down" | tr '|' ' ' | awk '{print $1,$2}' | tr ' ' '-' | tr '\n' ' ')
		let COUNTER=$COUNTER+1
		echo "WAITING FOR PROPER OUTPUT $COUNTER times" >> $RUNLOG
	done
	if [[ $checkSelf_hwmodel == "Check Point 28600" ]]; then
		checkHardware_raidStatus="0"
		checkHardware_raidStatusDetail="n/a"
	else
		#checkHardware_raidStatus=$(snmpwalk -r 1 -v2c -c $SNMPCOMMUNITYDPLANE localhost .1.3.6.1.4.1.2620.1.6.7.7.1.1.6 2>&1 | sed 's/.*: //' | tr -d '"')
		checkHardware_raidStatus=$(stattestget 1.3.6.1.4.1.2620.1.6.7.7.1.1.6)
		checkHardware_raidStatusDetail=$(raid_diagnostic | grep "VolumeID" | awk -F ":" '{print $6,$NF}' | awk '{print $1,$NF}')
	fi
	COUNTER="0"
	while [[ $checkHardware_raidStatus == "1" || $checkHardware_raidStatus == "No Response from localhost" ]] && [ $COUNTER -lt "3" ]; do
		echo "checkHardware_raidStatus $checkHardware_raidStatus" >>$RUNLOG
		echo "WAITING FOR PROPER OUTPUT $COUNTER times" >> $RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkHardware_raidStatus - $checkHardware_raidStatus RECHECKING $COUNTER" >>$HISTORYLOG
		sleep 10
		#checkHardware_raidStatus=$(snmpwalk -r 1 -v2c -c $SNMPCOMMUNITYDPLANE localhost .1.3.6.1.4.1.2620.1.6.7.7.1.1.6 | sed 's/.*: //' | tr -d '"' | paste -sd+ | bc)
		checkHardware_raidStatus=$(stattestget 1.3.6.1.4.1.2620.1.6.7.7.1.1.6)
		checkHardware_raidStatusDetail=$(raid_diagnostic | grep "VolumeID" | awk -F ":" '{print $6,$NF}' | awk '{print $1,$NF}')
		let COUNTER=$COUNTER+1
	done
	if [[ $checkHardware_raidStatus == "No Response from localhost" ]]; then
		checkHardware_warning="1"
		checkHardware_problemInfo="$checkHardware_problemInfo [RAID not monitored due SNMP issue]"
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkHardware_raidStatus - $checkHardware_raidStatus [RAID not monitored due SNMP issue]" >>$HISTORYLOG
		checkHardware_raidStatus="1"
	fi
	

else

	#checkHardware_tempStatus=$(snmp .1.3.6.1.4.1.2620.1.6.7.8.1.1.6 | tr ',' '\n' | tr -d '[:space:]' | paste -sd+ | bc)
	checkHardware_tempStatus=$(stattestget 1.3.6.1.4.1.2620.1.6.7.8.1.1.6 | paste -sd+ | bc)
	checkHardware_tempStatusDetail=$(cat $TEMPFILE | grep "Temperature" | awk -F "|" '{if ($6 ~ /1/) print $2,$3}' | tr '\n' ',')
	#checkHardware_fanStatus=$(snmp .1.3.6.1.4.1.2620.1.6.7.8.2.1.6 | tr ',' '\n' | tr -d '[:space:]' | paste -sd+ | bc)
	checkHardware_fanStatus=$(stattestget 1.3.6.1.4.1.2620.1.6.7.8.2.1.6 | paste -sd+ | bc)
	checkHardware_fanStatusDetail=$(cat $TEMPFILE | grep "Fan" | awk -F "|" '{if ($6 ~ /1/) print $2,$3}' | tr '\n' ',')
	#checkHardware_voltageStatus=$(snmp .1.3.6.1.4.1.2620.1.6.7.8.3.1.6 | tr ',' '\n' | tr -d '[:space:]' | paste -sd+ | bc)
	checkHardware_voltageStatus=$(stattestget 1.3.6.1.4.1.2620.1.6.7.8.3.1.6 | paste -sd+ | bc)
	checkHardware_voltageStatusDetail=$(cat $TEMPFILE | grep "Voltage" | awk -F "|" '{if ($6 ~ /1/) print $2,$3}' | tr '\n' ',')
	#checkHardware_psuStatus=$(snmp .1.3.6.1.4.1.2620.1.6.7.9.1.1.2 | grep "Down" | wc -l)
	checkHardware_psuStatus=$(stattestget 1.3.6.1.4.1.2620.1.6.7.9.1.1.2 | grep "Down" | wc -l)
	checkHardware_psuStatusDetail=$(cpstat os -f power_supply | grep "Up\|Down" | tr '|' ' ' | awk '{print $1,$2}' | tr ' ' '-' | tr '\n' ' ')
	if [[ $checkSelf_hwmodel == "Check Point 28600" ]] || [[ $checkSelf_hwmodel == "Check Point 29200" ]]; then
		checkHardware_raidStatus="0"
		checkHardware_raidStatusDetail="n/a"
	else
		#checkHardware_raidStatus=$(snmp .1.3.6.1.4.1.2620.1.6.7.7.1.1.6)
		checkHardware_raidStatus=$(stattestget 1.3.6.1.4.1.2620.1.6.7.7.1.1.6)
		checkHardware_raidStatusDetail="n/a"
	fi
fi



#LOG OUTPUTS
echo "checkHardware_tempStatus $checkHardware_tempStatus" >>$RUNLOG
echo "checkHardware_tempStatus $checkHardware_tempStatusDetail" >>$RUNLOG
echo "checkHardware_fanStatus $checkHardware_fanStatus" >>$RUNLOG
echo "checkHardware_tempStatus $checkHardware_fanStatusDetail" >>$RUNLOG
echo "checkHardware_voltageStatus $checkHardware_voltageStatus" >>$RUNLOG
echo "checkHardware_tempStatus $checkHardware_voltageStatusDetail" >>$RUNLOG
echo "checkHardware_psuStatus $checkHardware_psuStatus" >>$RUNLOG
echo "checkHardware_psuStatusDetail $checkHardware_psuStatusDetail" >>$RUNLOG
echo "checkHardware_raidStatus $checkHardware_raidStatus" >>$RUNLOG
echo "checkHardware_raidStatusDetail $checkHardware_raidStatusDetail" >>$RUNLOG

echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkHardware_tempStatus - $checkHardware_tempStatus" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkHardware_tempStatusDetail - $checkHardware_tempStatusDetail" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkHardware_fanStatus - $checkHardware_fanStatus" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkHardware_fanStatusDetail - $checkHardware_fanStatusDetail" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkHardware_voltageStatus - $checkHardware_voltageStatus" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkHardware_voltageStatusDetail - $checkHardware_voltageStatusDetail" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkHardware_psuStatus - $checkHardware_psuStatus" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkHardware_psuStatusDetail - $checkHardware_psuStatusDetail" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkHardware_raidStatus - $checkHardware_raidStatus" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkHardware_raidStatusDetail - $checkHardware_raidStatusDetail" >>$HISTORYLOG


#RUN LOGIC
if [[ $checkHardware_tempStatus -gt "0" ]]; then
	echo "Logic - temp status: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Temp status - $checkHardware_tempStatus" >>$HISTORYLOG
	checkHardware_warning="1"
	checkHardware_warningInfo="$checkHardware_problemInfo [Temp ($checkHardware_tempStatusDetail)]"
else
	echo "Logic - temp status: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Temp status - $checkHardware_tempStatus" >>$HISTORYLOG
fi

if [[ $checkHardware_fanStatus -gt "0" ]]; then
	echo "Logic - fan status: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Fan status - $checkHardware_fanStatus" >>$HISTORYLOG
	checkHardware_warning="1"
	checkHardware_warningInfo="$checkHardware_problemInfo [Fan ($checkHardware_fanStatusDetail)]"
else
	echo "Logic - fan status: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Fan status - $checkHardware_fanStatus" >>$HISTORYLOG
fi

if [[ $checkHardware_voltageStatus -gt "0" ]]; then
	echo "Logic - voltage status: FAIL" >>$RUNLOG
    echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - voltage status - $checkHardware_voltageStatus" >>$HISTORYLOG
	checkHardware_warning="1"
	checkHardware_warningInfo="$checkHardware_problemInfo [Voltage ($checkHardware_voltageStatusDetail)]"
else
    echo "Logic - voltage status: PASS" >>$RUNLOG
    echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - voltage status - $checkHardware_voltageStatus" >>$HISTORYLOG
fi

if [[ $checkHardware_psuStatus -gt "0" ]]; then
	echo "Logic - psu status: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - psu status - $checkHardware_psuStatus" >>$HISTORYLOG
	checkHardware_problem="1"
	checkHardware_problemInfo="$checkHardware_problemInfo [PSU ($checkHardware_psuStatusDetail)]"
else
	echo "Logic - psu status: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - psu status - $checkHardware_psuStatus" >>$HISTORYLOG
fi

if [[ $checkHardware_raidStatus -gt "0" ]]; then
	echo "Logic - raid status: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - raid status - $checkHardware_raidStatus ($checkHardware_raidStatusDetail)" >>$HISTORYLOG
	checkHardware_problem="1"
	checkHardware_problemInfo="$checkHardware_problemInfo [RAID]"
else
	echo "Logic - raid status: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - raid status - $checkHardware_raidStatus" >>$HISTORYLOG
fi



#SYSLOG
if [[ $checkHardware_problem == "1" ]]; then
	sendSyslog "$functionName" "PROBLEM" "checkHardware_problemInfo" "VALUE=\"$checkHardware_problemInfo $checkHardware_warningInfo $checkHardware_workingInfo\""
elif [[ $checkHardware_warning == "1" ]]; then
	sendSyslog "$functionName" "WARNING" "checkHardware_warningInfo" "VALUE=\"$checkHardware_warningInfo $checkHardware_workingInfo\""	
else
	sendSyslog "$functionName" "WORKING" "checkHardware_workingInfo" "VALUE=\"$checkHardware_workingInfo\""
fi

sendSyslog "$functionName" "INFO" "checkHardware_tempStatus" "VALUE=\"$checkHardware_tempStatus\""
sendSyslog "$functionName" "INFO" "checkHardware_tempStatusDetail" "VALUE=\"$checkHardware_tempStatusDetail\""
sendSyslog "$functionName" "INFO" "checkHardware_fanStatus" "VALUE=\"$checkHardware_fanStatus\""
sendSyslog "$functionName" "INFO" "checkHardware_fanStatusDetail" "VALUE=\"$checkHardware_fanStatusDetail\""
sendSyslog "$functionName" "INFO" "checkHardware_voltageStatus" "VALUE=\"$checkHardware_voltageStatus\""
sendSyslog "$functionName" "INFO" "checkHardware_voltageStatusDetail" "VALUE=\"$checkHardware_voltageStatusDetail\""
sendSyslog "$functionName" "INFO" "checkHardware_psuStatus" "VALUE=\"$checkHardware_psuStatus\""
sendSyslog "$functionName" "INFO" "checkHardware_psuStatusDetail" "VALUE=\"$checkHardware_psuStatusDetail\""
sendSyslog "$functionName" "INFO" "checkHardware_raidStatus" "VALUE=\"$checkHardware_raidStatus\""
sendSyslog "$functionName" "INFO" "checkHardware_raidStatusDetail" "VALUE=\"$checkHardware_raidStatusDetail\""



#CLEANUP
rm -f $TEMPFILE $TEMPFILE_ETHTOOL > /dev/null 2>&1


checkHardware_fEnd=$(date "+%s")
checkHardware_fRunTime=$(( checkHardware_fEnd - checkHardware_fStart ))
echo "checkHardware_fRunTime $checkHardware_fRunTime" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkHardware_warning - $checkHardware_warning" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkHardware_problem - $checkHardware_problem" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkHardware_problemInfo - $checkHardware_problemInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkHardware_warningInfo - $checkHardware_warningInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkHardware_workingInfo - $checkHardware_workingInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkHardware_runTime - $checkHardware_fRunTime" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkHardware_warning" "VALUE=\"$checkHardware_warning\""
sendSyslog "$functionName" "INFO" "checkHardware_problem" "VALUE=\"$checkHardware_problem\""
sendSyslog "$functionName" "INFO" "checkHardware_problemInfo" "VALUE=\"$checkHardware_problemInfo\""
sendSyslog "$functionName" "INFO" "checkHardware_warningInfo" "VALUE=\"$checkHardware_warningInfo\""
sendSyslog "$functionName" "INFO" "checkHardware_workingInfo" "VALUE=\"$checkHardware_workingInfo\""
sendSyslog "$functionName" "INFO" "checkHardware_runTime" "VALUE=\"$checkHardware_fRunTime\""
echo "checkHardware_warning $checkHardware_warning" >>$RUNLOG
echo "checkHardware_problem $checkHardware_problem" >>$RUNLOG
echo "END==checkHardware" >>$RUNLOG
}

###################################################################################################
checkHardwareSP() {
echo "START==checkHardwareSP" >>$RUNLOG

#DEFAULTS
checkHardwareSP_fStart=$(date "+%s")
functionName=${FUNCNAME[0]}
checkHardwareSP_warning="0"
checkHardwareSP_problem="0"
checkHardwareSP_workingInfo=""
checkHardwareSP_warningInfo=""
checkHardwareSP_problemInfo=""
TEMPFILE=$TEMPDIR/$SCRIPT.$functionName


if [[ $APPLIANCETYPE == "MAESTRO" ]]; then
	cpstat os -f sensors >> $TEMPFILE
	cpstat os -f power_supply >> $TEMPFILE
	cpstat os -f raidInfo >> $TEMPFILE

	if [[ $MDPSENABLED == "2" ]]; then
		mplane > /dev/null 2>&1

		#checkHardwareSP_tempStatus=$(snmpwalk -r 1 -v2c -c $SNMPCOMMUNITYDPLANE localhost .1.3.6.1.4.1.2620.1.6.7.8.1.1.6 | sed 's/.*: //' | tr -d '"' | paste -sd+ | bc)
		checkHardwareSP_tempStatus=$(stattestget 1.3.6.1.4.1.2620.1.6.7.8.1.1.6 | paste -sd+ | bc)
		COUNTER="0"
		while [ $checkHardwareSP_tempStatus -gt "0" ] && [ $COUNTER -lt "3" ]; do
			echo "checkHardwareSP_tempStatus $checkHardwareSP_tempStatus" >>$RUNLOG
			sleep 10
			#checkHardwareSP_tempStatus=$(snmpwalk -r 1 -v2c -c $SNMPCOMMUNITYDPLANE localhost .1.3.6.1.4.1.2620.1.6.7.8.1.1.6 | sed 's/.*: //' | tr -d '"' | paste -sd+ | bc)
			checkHardwareSP_tempStatus=$(stattestget 1.3.6.1.4.1.2620.1.6.7.8.1.1.6 | paste -sd+ | bc)
			let COUNTER=$COUNTER+1
			echo "WAITING FOR PROPER OUTPUT $COUNTER times" >> $RUNLOG
		done
		checkHardwareSP_tempStatusDetail=$(cat $TEMPFILE | grep "Temperature" | awk -F "|" '{if ($6 ~ /1/) print $2,$3}' | tr '\n' ',')
		#checkHardwareSP_fanStatus=$(snmpwalk -r 1 -v2c -c $SNMPCOMMUNITYDPLANE localhost .1.3.6.1.4.1.2620.1.6.7.8.2.1.6 | sed 's/.*: //' | tr -d '"' | paste -sd+ | bc)
		checkHardwareSP_fanStatus=$(stattestget 1.3.6.1.4.1.2620.1.6.7.8.2.1.6 | paste -sd+ | bc)
		COUNTER="0"
		while [ $checkHardwareSP_fanStatus -gt "0" ] && [ $COUNTER -lt "3" ]; do
			echo "checkHardwareSP_fanStatus $checkHardwareSP_fanStatus" >>$RUNLOG
			sleep 10
			#checkHardwareSP_fanStatus=$(snmpwalk -r 1 -v2c -c $SNMPCOMMUNITYDPLANE localhost .1.3.6.1.4.1.2620.1.6.7.8.2.1.6 | sed 's/.*: //' | tr -d '"' | paste -sd+ | bc)
			checkHardwareSP_fanStatus=$(stattestget 1.3.6.1.4.1.2620.1.6.7.8.2.1.6 | paste -sd+ | bc)
			let COUNTER=$COUNTER+1
			echo "WAITING FOR PROPER OUTPUT $COUNTER times" >> $RUNLOG
		done
		checkHardwareSP_fanStatusDetail=$(cat $TEMPFILE | grep "Fan" | awk -F "|" '{if ($6 ~ /1/) print $2,$3}' | tr '\n' ',')
		#checkHardwareSP_voltageStatus=$(snmpwalk -r 1 -v2c -c $SNMPCOMMUNITYDPLANE localhost .1.3.6.1.4.1.2620.1.6.7.8.3.1.6 | sed 's/.*: //' | tr -d '"' | paste -sd+ | bc)
		checkHardwareSP_voltageStatus=$(stattestget 1.3.6.1.4.1.2620.1.6.7.8.3.1.6 | paste -sd+ | bc)
		COUNTER="0"
		while [ $checkHardwareSP_voltageStatus -gt "0" ] && [ $COUNTER -lt "3" ]; do
			echo "checkHardwareSP_voltageStatus $checkHardwareSP_voltageStatus" >>$RUNLOG
			sleep 10
			#checkHardwareSP_voltageStatus=$(snmpwalk -r 1 -v2c -c $SNMPCOMMUNITYDPLANE localhost .1.3.6.1.4.1.2620.1.6.7.8.3.1.6 | sed 's/.*: //' | tr -d '"' | paste -sd+ | bc)
			checkHardwareSP_voltageStatus=$(stattestget 1.3.6.1.4.1.2620.1.6.7.8.3.1.6 | paste -sd+ | bc)
			let COUNTER=$COUNTER+1
			echo "WAITING FOR PROPER OUTPUT $COUNTER times" >> $RUNLOG
		done
		checkHardwareSP_voltageStatusDetail1=$(cat $TEMPFILE | grep "Voltage" | awk -F "|" '{if ($6 ~ /1/) print $2,$3}' | tr '\n' ',')
		#checkHardwareSP_psuStatus=$(snmpwalk -r 1 -v2c -c $SNMPCOMMUNITYDPLANE localhost .1.3.6.1.4.1.2620.1.6.7.9.1.1.2 | grep "Down" | wc -l)
		checkHardwareSP_psuStatus=$(stattestget 1.3.6.1.4.1.2620.1.6.7.9.1.1.2 | grep "Down" | wc -l)
		checkHardwareSP_psuStatusDetail=$(cpstat os -f power_supply | grep "Up\|Down" | tr '|' ' ' | awk '{print $1,$2}' | tr ' ' '-' | tr '\n' ' ')
		COUNTER="0"
		while [ $checkHardwareSP_psuStatus -gt "0" ] && [ $COUNTER -lt "3" ]; do
			echo "checkHardwareSP_psuStatus $checkHardwareSP_psuStatus" >>$RUNLOG
			sleep 10
			#checkHardwareSP_psuStatus=$(snmpwalk -r 1 -v2c -c $SNMPCOMMUNITYDPLANE localhost .1.3.6.1.4.1.2620.1.6.7.9.1.1.2 | grep "Down" | wc -l)
			checkHardwareSP_psuStatus=$(stattestget 1.3.6.1.4.1.2620.1.6.7.9.1.1.2 | grep "Down" | wc -l)
			checkHardwareSP_psuStatusDetail=$(cpstat os -f power_supply | grep "Up\|Down" | tr '|' ' ' | awk '{print $1,$2}' | tr ' ' '-' | tr '\n' ' ')
			let COUNTER=$COUNTER+1
			echo "WAITING FOR PROPER OUTPUT $COUNTER times" >> $RUNLOG
		done
		
		
		if [[ $checkSelf_hwmodel == "Check Point Maestro Security Group/28600" ]]; then
			checkHardwareSP_raidStatus="0"
			checkHardwareSP_raidStatusDetail="n/a"
		else
			#checkHardwareSP_raidStatus=$(snmpwalk -r 1 -v2c -c $SNMPCOMMUNITYDPLANE localhost .1.3.6.1.4.1.2620.1.6.7.7.1.1.6 2>&1 | sed 's/.*: //' | tr -d '"')
			checkHardwareSP_raidStatus=$(stattestget 1.3.6.1.4.1.2620.1.6.7.7.1.1.6)
			checkHardwareSP_raidStatusDetail=$(raid_diagnostic | grep "VolumeID" | awk -F ":" '{print $6,$NF}' | awk '{print $1,$NF}')
		fi
		COUNTER="0"
		while [[ $checkHardwareSP_raidStatus == "1" || $checkHardwareSP_raidStatus == "No Response from localhost" ]] && [ $COUNTER -lt "3" ]; do
			echo "checkHardwareSP_raidStatus $checkHardwareSP_raidStatus" >>$RUNLOG
			echo "WAITING FOR PROPER OUTPUT $COUNTER times" >> $RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkHardwareSP_raidStatus - $checkHardwareSP_raidStatus RECHECKING $COUNTER" >>$HISTORYLOG
			sleep 10
			#checkHardwareSP_raidStatus=$(snmpwalk -r 1 -v2c -c $SNMPCOMMUNITYDPLANE localhost .1.3.6.1.4.1.2620.1.6.7.7.1.1.6 | sed 's/.*: //' | tr -d '"' | paste -sd+ | bc)
			checkHardwareSP_raidStatus=$(stattestget 1.3.6.1.4.1.2620.1.6.7.7.1.1.6)
			checkHardwareSP_raidStatusDetail=$(raid_diagnostic | grep "VolumeID" | awk -F ":" '{print $6,$NF}' | awk '{print $1,$NF}')
			let COUNTER=$COUNTER+1
		done
		if [[ $checkHardwareSP_raidStatus == "No Response from localhost" ]]; then
			checkHardwareSP_warning="1"
			checkHardwareSP_problemInfo="$checkHardwareSP_problemInfo [RAID not monitored due SNMP issue]"
			echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkHardwareSP_raidStatus - $checkHardwareSP_raidStatus [RAID not monitored due SNMP issue]" >>$HISTORYLOG
			checkHardwareSP_raidStatus="1"
		fi
		

	else

		#checkHardwareSP_tempStatus=$(snmp .1.3.6.1.4.1.2620.1.6.7.8.1.1.6 | tr ',' '\n' | tr -d '[:space:]' | paste -sd+ | bc)
		checkHardwareSP_tempStatus=$(stattestget 1.3.6.1.4.1.2620.1.6.7.8.1.1.6 | paste -sd+ | bc)
		checkHardwareSP_tempStatusDetail=$(cat $TEMPFILE | grep "Temperature" | awk -F "|" '{if ($6 ~ /1/) print $2,$3}' | tr '\n' ',')
		#checkHardwareSP_fanStatus=$(snmp .1.3.6.1.4.1.2620.1.6.7.8.2.1.6 | tr ',' '\n' | tr -d '[:space:]' | paste -sd+ | bc)
		checkHardwareSP_fanStatus=$(stattestget 1.3.6.1.4.1.2620.1.6.7.8.2.1.6 | paste -sd+ | bc)
		checkHardwareSP_fanStatusDetail=$(cat $TEMPFILE | grep "Fan" | awk -F "|" '{if ($6 ~ /1/) print $2,$3}' | tr '\n' ',')
		#checkHardwareSP_voltageStatus=$(snmp .1.3.6.1.4.1.2620.1.6.7.8.3.1.6 | tr ',' '\n' | tr -d '[:space:]' | paste -sd+ | bc)
		checkHardwareSP_voltageStatus=$(stattestget 1.3.6.1.4.1.2620.1.6.7.8.3.1.6 | paste -sd+ | bc)
		checkHardwareSP_voltageStatusDetail=$(cat $TEMPFILE | grep "Voltage" | awk -F "|" '{if ($6 ~ /1/) print $2,$3}' | tr '\n' ',')
		#checkHardwareSP_psuStatus=$(snmp .1.3.6.1.4.1.2620.1.6.7.9.1.1.2 | grep "Down" | wc -l)
		checkHardwareSP_psuStatus=$(stattestget 1.3.6.1.4.1.2620.1.6.7.9.1.1.2 | grep "Down" | wc -l)
		checkHardwareSP_psuStatusDetail=$(cpstat os -f power_supply | grep "Up\|Down" | tr '|' ' ' | awk '{print $1,$2}' | tr ' ' '-' | tr '\n' ' ')
		if [[ $checkSelf_hwmodel == "Check Point Maestro Security Group/28600" ]]; then
			checkHardwareSP_raidStatus="0"
			checkHardwareSP_raidStatusDetail="n/a"
		else
			#checkHardwareSP_raidStatus=$(snmp .1.3.6.1.4.1.2620.1.6.7.7.1.1.6 | tr ',' '\n' | paste -sd+ | bc)
			checkHardwareSP_raidStatus=$(stattestget 1.3.6.1.4.1.2620.1.6.7.7.1.1.6 | paste -sd+ | bc)
			checkHardwareSP_raidStatusDetail="n/a"
		fi
	fi



	#LOG OUTPUTS
	echo "checkHardwareSP_tempStatus $checkHardwareSP_tempStatus" >>$RUNLOG
	echo "checkHardwareSP_tempStatus $checkHardwareSP_tempStatusDetail" >>$RUNLOG
	echo "checkHardwareSP_fanStatus $checkHardwareSP_fanStatus" >>$RUNLOG
	echo "checkHardwareSP_tempStatus $checkHardwareSP_fanStatusDetail" >>$RUNLOG
	echo "checkHardwareSP_voltageStatus $checkHardwareSP_voltageStatus" >>$RUNLOG
	echo "checkHardwareSP_tempStatus $checkHardwareSP_voltageStatusDetail" >>$RUNLOG
	echo "checkHardwareSP_psuStatus $checkHardwareSP_psuStatus" >>$RUNLOG
	echo "checkHardwareSP_psuStatusDetail $checkHardwareSP_psuStatusDetail" >>$RUNLOG
	echo "checkHardwareSP_raidStatus $checkHardwareSP_raidStatus" >>$RUNLOG
	echo "checkHardwareSP_raidStatusDetail $checkHardwareSP_raidStatusDetail" >>$RUNLOG

	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkHardwareSP_tempStatus - $checkHardwareSP_tempStatus" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkHardwareSP_tempStatusDetail - $checkHardwareSP_tempStatusDetail" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkHardwareSP_fanStatus - $checkHardwareSP_fanStatus" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkHardwareSP_fanStatusDetail - $checkHardwareSP_fanStatusDetail" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkHardwareSP_voltageStatus - $checkHardwareSP_voltageStatus" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkHardwareSP_voltageStatusDetail - $checkHardwareSP_voltageStatusDetail" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkHardwareSP_psuStatus - $checkHardwareSP_psuStatus" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkHardwareSP_psuStatusDetail - $checkHardwareSP_psuStatusDetail" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkHardwareSP_raidStatus - $checkHardwareSP_raidStatus" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkHardwareSP_raidStatusDetail - $checkHardwareSP_raidStatusDetail" >>$HISTORYLOG


	#RUN LOGIC
	if [[ $checkHardwareSP_tempStatus -gt "0" ]]; then
		echo "Logic - temp status: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Temp status - $checkHardwareSP_tempStatus" >>$HISTORYLOG
		checkHardwareSP_problem="1"
		checkHardwareSP_problemInfo="$checkHardwareSP_problemInfo [Temp ($checkHardwareSP_tempStatusDetail)]"
	else
		echo "Logic - temp status: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Temp status - $checkHardwareSP_tempStatus" >>$HISTORYLOG
	fi

	if [[ $checkHardwareSP_fanStatus -gt "0" ]]; then
		echo "Logic - fan status: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Fan status - $checkHardwareSP_fanStatus" >>$HISTORYLOG
		checkHardwareSP_problem="1"
		checkHardwareSP_problemInfo="$checkHardwareSP_problemInfo [Fan ($checkHardwareSP_fanStatusDetail)]"
	else
			echo "Logic - fan status: PASS" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Fan status - $checkHardwareSP_fanStatus" >>$HISTORYLOG
	fi

	if [[ $checkHardwareSP_voltageStatus -gt "0" ]]; then
		echo "Logic - voltage status: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - voltage status - $checkHardwareSP_voltageStatus" >>$HISTORYLOG
		checkHardwareSP_problem="1"
		checkHardwareSP_problemInfo="$checkHardwareSP_problemInfo [Voltage ($checkHardwareSP_voltageStatusDetail)]"
	else
		echo "Logic - voltage status: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - voltage status - $checkHardwareSP_voltageStatus" >>$HISTORYLOG
	fi

	if [[ $checkHardwareSP_psuStatus -gt "0" ]]; then
		echo "Logic - psu status: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - psu status - $checkHardwareSP_psuStatus" >>$HISTORYLOG
		checkHardwareSP_problem="1"
		checkHardwareSP_problemInfo="$checkHardwareSP_problemInfo [PSU ($checkHardwareSP_psuStatusDetail)]"
	else
		echo "Logic - psu status: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - psu status - $checkHardwareSP_psuStatus" >>$HISTORYLOG
	fi

	if [[ $checkHardwareSP_raidStatus -gt "0" ]]; then
		echo "Logic - raid status: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - raid status - $checkHardwareSP_raidStatus ($checkHardwareSP_raidStatusDetail)" >>$HISTORYLOG
		checkHardwareSP_problem="1"
		checkHardwareSP_problemInfo="$checkHardwareSP_problemInfo [RAID]"
	else
		echo "Logic - raid status: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - raid status - $checkHardwareSP_raidStatus" >>$HISTORYLOG
	fi



	#SYSLOG
	if [[ $checkHardwareSP_problem == "1" ]]; then
		if [[ $LOCALSMO == "1" ]]; then
			sendSyslog "$functionName" "PROBLEM" "checkHardwareSP_problemInfo" "VALUE=\"$checkHardwareSP_problemInfo $checkHardwareSP_warningInfo $checkHardwareSP_workingInfo\""
		else
			sendSyslog "$functionName" "PROBLEM" "checkHardwareSP_problemInfo" "VALUE=\"$checkHardwareSP_problemInfo $checkHardwareSP_warningInfo $checkHardwareSP_workingInfo\""
		fi
	elif [[ $checkHardwareSP_warning == "1" ]]; then
		if [[ $LOCALSMO == "1" ]]; then
			sendSyslog "$functionName" "WARNING" "checkHardwareSP_problemInfo" "VALUE=\"$checkHardwareSP_warningInfo $checkHardwareSP_workingInfo\""
		else
			sendSyslog "$functionName" "WARNING" "checkHardwareSP_problemInfo" "VALUE=\"$checkHardwareSP_warningInfo $checkHardwareSP_workingInfo\""
		fi
	else
		if [[ $LOCALSMO == "1" ]]; then
			sendSyslog "$functionName" "WORKING" "checkHardwareSP_problemInfo" "VALUE=\"$checkHardwareSP_workingInfo\""
		else
			sendSyslog "$functionName" "WORKING" "checkHardwareSP_problemInfo" "VALUE=\"$checkHardwareSP_workingInfo\""
		fi
	fi

	sendSyslog "$functionName" "INFO" "checkHardwareSP_tempStatus" "VALUE=\"$checkHardwareSP_tempStatus\""
	sendSyslog "$functionName" "INFO" "checkHardwareSP_tempStatusDetail" "VALUE=\"$checkHardwareSP_tempStatusDetail\""
	sendSyslog "$functionName" "INFO" "checkHardwareSP_fanStatus" "VALUE=\"$checkHardwareSP_fanStatus\""
	sendSyslog "$functionName" "INFO" "checkHardwareSP_fanStatusDetail" "VALUE=\"$checkHardwareSP_fanStatusDetail\""
	sendSyslog "$functionName" "INFO" "checkHardwareSP_voltageStatus" "VALUE=\"$checkHardwareSP_voltageStatus\""
	sendSyslog "$functionName" "INFO" "checkHardwareSP_voltageStatusDetail" "VALUE=\"$checkHardwareSP_voltageStatusDetail\""
	sendSyslog "$functionName" "INFO" "checkHardwareSP_psuStatus" "VALUE=\"$checkHardwareSP_psuStatus\""
	sendSyslog "$functionName" "INFO" "checkHardwareSP_psuStatusDetail" "VALUE=\"$checkHardwareSP_psuStatusDetail\""
	sendSyslog "$functionName" "INFO" "checkHardwareSP_raidStatus" "VALUE=\"$checkHardwareSP_raidStatus\""
	sendSyslog "$functionName" "INFO" "checkHardwareSP_raidStatusDetail" "VALUE=\"$checkHardwareSP_raidStatusDetail\""

elif [[ $LOCALSMO == "1" ]]; then

	#COLLECT OUTPUTS
	checkHardwareSP_tempfile="0"
	COUNTER=0
	while [[ $checkHardwareSP_tempfile == "0" ]] && [[ $COUNTER -lt "3" ]]; do
		asg hw_monitor -v > $TEMPFILE 2>&1
		checkHardwareSP_tempfile=$(cat $TEMPFILE | wc -l)
		if [[ $checkHardwareSP_tempfile == "0" ]]; then
			sleep 10
			echo "Rerunning TEMPFILE because it was empty - $COUNTER" >> $RUNLOG 
			let COUNTER=COUNTER+1
		fi
	done
	if [[ $checkSelf_hwmodel == "Check Point 41000 SGM260" ]]; then
		if [[ $FCPENABLED == "1" ]]; then
			checkHardwareSP_fanTotalQty="20"
			checkHardwareSP_psuTotalQty="3"	
		else
			checkHardwareSP_fanTotalQty="40"
			checkHardwareSP_psuTotalQty="6"
		fi
	elif [[ $checkSelf_hwmodel == "Check Point 44000 SGM400" ]]; then
		if [[ $FCPENABLED == "1" ]]; then
			checkHardwareSP_fanTotalQty="6"
			checkHardwareSP_psuTotalQty="4"
		else
			checkHardwareSP_fanTotalQty="12"
			checkHardwareSP_psuTotalQty="8"
		fi
	elif [[ $checkSelf_hwmodel == "Check Point 64000 SGM400" ]]; then
		#if [[ -f /opt/CPsmo-R80.20/bin/asg ]] || [[ -f /opt/CPsmo-R81.10/bin/asg ]] || [[ -f /opt/CPsmo-R81.20/bin/asg ]]; then
		if [[ $IS_SCALABLE_PLATFORM -eq "1" ]]; then
			if [[ $FCPENABLED == "1" ]]; then
				checkHardwareSP_fanTotalQty="9"
				checkHardwareSP_psuTotalQty=$(cphaprob chassis | grep "PSUs" | tr '/' '|' | tr -d '! ' | awk -F "|" '{print $4,$6}' | tr ' ' '+' | bc)
			else
				checkHardwareSP_fanTotalQty="18"
				checkHardwareSP_psuTotalQty=$(cphaprob chassis | grep "PSUs" | tr '/' '|' | tr -d '! ' | awk -F "|" '{print $4,$6}' | tr ' ' '+' | bc)
			fi
		else
			if [[ $FCPENABLED == "1" ]]; then
				checkHardwareSP_fanTotalQty="9"
				checkHardwareSP_psuTotalQty=$(cphaprob chassis | grep "Power Supplies" | awk -F "|" '{print $3,$4}' | awk -F " / " '{print $2,$4}' | tr ' ' '\n' | sed '/^$/d' | paste -sd+ | bc)
			else
				checkHardwareSP_fanTotalQty="18"
				checkHardwareSP_psuTotalQty=$(cphaprob chassis | grep "Power Supplies" | awk -F "|" '{print $3,$4}' | awk -F " / " '{print $2,$4}' | tr ' ' '\n' | sed '/^$/d' | paste -sd+ | bc)
			fi	
		fi


	else
		checkHardwareSP_fanTotalQty=$(cat $TEMPFILE | grep "Fan" | grep -v "PowerUnitFan" | wc -l)
		checkHardwareSP_psuTotalQty=$(cat $TEMPFILE | grep "PowerUnit" | grep -v "Fan" | wc -l)
	fi
	checkHardwareSP_fanWorkingQty=$(cat $TEMPFILE | grep "Fan" | grep -v "PowerUnitFan" | awk -F "|" '{print $7}' | grep "1" | wc -l)
	checkHardwareSP_psuWorkingQty=$(cat $TEMPFILE | grep "PowerUnit" | grep -v "Fan" | awk -F "|" '{print $7}' | grep "1" | wc -l)
	COUNTER=0
	while [[ $checkHardwareSP_fanTotalQty != $checkHardwareSP_fanWorkingQty || $checkHardwareSP_psuTotalQty != $checkHardwareSP_psuWorkingQty ]] && [[ $COUNTER -lt "3" ]]; do
		asg hw_monitor -v > $TEMPFILE 2>&1
		echo "Rerunning TEMPFILE because something is missing - $COUNTER - FAN: $checkHardwareSP_fanWorkingQty PSU: $checkHardwareSP_psuWorkingQty" >> $RUNLOG 
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Hardware Monitor Fan - RERUN ($COUNTER) $checkHardwareSP_fanWorkingQty of $checkHardwareSP_fanTotalQty" >>$HISTORYLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Hardware Monitor PSU - RERUN ($COUNTER) $checkHardwareSP_psuWorkingQty of $checkHardwareSP_psuTotalQty" >>$HISTORYLOG
		let COUNTER=COUNTER+1
		sleep 10
		checkHardwareSP_fanWorkingQty=$(cat $TEMPFILE | grep "Fan" | grep -v "PowerUnitFan" | awk -F "|" '{print $7}' | grep "1" | wc -l)
		checkHardwareSP_psuWorkingQty=$(cat $TEMPFILE | grep "PowerUnit" | grep -v "Fan" | awk -F "|" '{print $7}' | grep "1" | wc -l)
	done

	#LOG OUTPUTS
	echo "checkHardwareSP_fanTotalQty $checkHardwareSP_fanTotalQty" >>$RUNLOG
	echo "checkHardwareSP_fanWorkingQty $checkHardwareSP_fanWorkingQty" >>$RUNLOG
	echo "checkHardwareSP_psuTotalQty $checkHardwareSP_fanTotalQty" >>$RUNLOG
	echo "checkHardwareSP_psuWorkingQty $checkHardwareSP_fanWorkingQty" >>$RUNLOG

	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkHardwareSP_fanWorkingQty - $checkHardwareSP_fanWorkingQty" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkHardwareSP_fanTotalQty - $checkHardwareSP_fanTotalQty" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkHardwareSP_fanWorkingQty - $checkHardwareSP_fanWorkingQty" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkHardwareSP_fanTotalQty - $checkHardwareSP_fanTotalQty" >>$HISTORYLOG


	#RUN LOGIC
	if [[ $checkHardwareSP_fanWorkingQty != $checkHardwareSP_fanTotalQty ]]; then
			echo "Logic - diag status: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Hardware Monitor Fan - $checkHardwareSP_fanWorkingQty of $checkHardwareSP_fanTotalQty" >>$HISTORYLOG
			checkHardwareSP_problem="1"
			checkHardwareSP_problemInfo="$checkHardwareSP_problemInfo [Fans: $checkHardwareSP_fanWorkingQty/$checkHardwareSP_fanTotalQty ]"
	else
			echo "Logic - diag status: PASS" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Hardware Monitor Fan - $checkHardwareSP_fanWorkingQty of $checkHardwareSP_fanTotalQty" >>$HISTORYLOG
	fi

	if [[ $checkHardwareSP_psuWorkingQty != $checkHardwareSP_psuTotalQty ]]; then
			echo "Logic - diag status: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Hardware Monitor PSU - $checkHardwareSP_psuWorkingQty of $checkHardwareSP_psuTotalQty" >>$HISTORYLOG
			checkHardwareSP_problem="1"
			checkHardwareSP_problemInfo="$checkHardwareSP_problemInfo [PSU: $checkHardwareSP_psuWorkingQty/$checkHardwareSP_psuTotalQty ]"
	else
			echo "Logic - diag status: PASS" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Hardware Monitor PSU - $checkHardwareSP_psuWorkingQty of $checkHardwareSP_psuTotalQty" >>$HISTORYLOG
	fi


	#SYSLOG
	if [[ $checkHardwareSP_problem == "1" ]]; then
		if [[ $LOCALSMO == "1" ]]; then
			sendSyslog "$functionName" "PROBLEM" "checkHardwareSP_problemInfo" "VALUE=\"$checkHardwareSP_problemInfo $checkHardwareSP_warningInfo $checkHardwareSP_workingInfo\"" "SMO"
		else
			sendSyslog "$functionName" "PROBLEM" "checkHardwareSP_problemInfo" "VALUE=\"$checkHardwareSP_problemInfo $checkHardwareSP_warningInfo $checkHardwareSP_workingInfo\""
		fi
	elif [[ $checkHardwareSP_warning == "1" ]]; then
		if [[ $LOCALSMO == "1" ]]; then
			sendSyslog "$functionName" "WARNING" "checkHardwareSP_problemInfo" "VALUE=\"$checkHardwareSP_warningInfo $checkHardwareSP_workingInfo\"" "SMO"
		else
			sendSyslog "$functionName" "WARNING" "checkHardwareSP_problemInfo" "VALUE=\"$checkHardwareSP_warningInfo $checkHardwareSP_workingInfo\""
		fi
	else
		if [[ $LOCALSMO == "1" ]]; then
			sendSyslog "$functionName" "WORKING" "checkHardwareSP_problemInfo" "VALUE=\"$checkHardwareSP_workingInfo\"" "SMO"
		else
			sendSyslog "$functionName" "WORKING" "checkHardwareSP_problemInfo" "VALUE=\"$checkHardwareSP_workingInfo\""
		fi
	fi
	sendSyslog "$functionName" "INFO" "checkHardwareSP_fanWorkingQty" "VALUE=\"$checkHardwareSP_fanWorkingQty\""
	sendSyslog "$functionName" "INFO" "checkHardwareSP_fanTotalQty" "VALUE=\"$checkHardwareSP_fanTotalQty\""
	sendSyslog "$functionName" "INFO" "checkHardwareSP_psuWorkingQty" "VALUE=\"$checkHardwareSP_psuWorkingQty\""
	sendSyslog "$functionName" "INFO" "checkHardwareSP_psuTotalQty" "VALUE=\"$checkHardwareSP_psuTotalQty\""

fi






#SUMMARY
if [[ $checkHardwareSP_problem == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - checkHardwareSP - SUMMARY - PROBLEM - $checkHardwareSP_problemInfo $checkHardwareSP_warningInfo $checkHardwareSP_workingInfo" >>$HISTORYLOG
elif [[ $checkHardwareSP_warning == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - checkHardwareSP - SUMMARY - WARNING - $checkHardwareSP_warningInfo $checkHardwareSP_workingInfo" >>$HISTORYLOG
else
	echo "$HISTORYLOGPREAMBLE - checkHardwareSP - SUMMARY - WORKING - $checkHardwareSP_workingInfo" >>$HISTORYLOG
fi


rm -rf $TEMPFILE


checkHardwareSP_fEnd=$(date "+%s")
checkHardwareSP_fRunTime=$(( checkHardwareSP_fEnd - checkHardwareSP_fStart ))
echo "checkHardwareSP_fRunTime $checkHardwareSP_fRunTime" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkHardwareSP_warning - $checkHardwareSP_warning" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkHardwareSP_problem - $checkHardwareSP_problem" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkHardwareSP_problemInfo - $checkHardwareSP_problemInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkHardwareSP_warningInfo - $checkHardwareSP_warningInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkHardwareSP_workingInfo - $checkHardwareSP_workingInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkHardwareSP_runTime - $checkHardwareSP_fRunTime" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkHardwareSP_warning" "VALUE=\"$checkHardwareSP_warning\""
sendSyslog "$functionName" "INFO" "checkHardwareSP_problem" "VALUE=\"$checkHardwareSP_problem\""
sendSyslog "$functionName" "INFO" "checkHardwareSP_problemInfo" "VALUE=\"$checkHardwareSP_problemInfo\""
sendSyslog "$functionName" "INFO" "checkHardwareSP_warningInfo" "VALUE=\"$checkHardwareSP_warningInfo\""
sendSyslog "$functionName" "INFO" "checkHardwareSP_workingInfo" "VALUE=\"$checkHardwareSP_workingInfo\""
sendSyslog "$functionName" "INFO" "checkHardwareSP_runTime" "VALUE=\"$checkHardwareSP_fRunTime\""
echo "checkHardwareSP_problem $checkHardwareSP_problem" >>$RUNLOG
echo "END==checkHardwareSP" >>$RUNLOG
}

###################################################################################################
checkPerformance() {
echo "START==checkPerformance" >>$RUNLOG

#DEFAULTS
checkPerformance_fStart=$(date "+%s")
functionName=${FUNCNAME[0]}
checkPerformance_warning="0"
checkPerformance_problem="0"
checkPerformance_workingInfo=""
checkPerformance_warningInfo=""
checkPerformance_problemInfo=""
checkPerformance_countersProblemInfo=""
TEMPFILE=$TEMPDIR/$SCRIPT.$EPOCH.$functionName
TEMPFILEMESSAGES=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.messages
TEMPFILE_CPSTAT=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.cpstat

if [[ $MDPSENABLED == "2" ]]; then
	mplane > /dev/null 2>&1
fi



#COLLECT OUTPUTS
top -b -n3 > $TEMPFILE 2>&1
checkPerformance_load0=$(uptime | awk -F "load average:" '{print $2}' | awk -F "," '{print $2}' | tr -d ' ' | awk -F "." '{print $1}')
checkPerformance_load1=$(uptime | awk -F "load average:" '{print $2}' | awk -F "," '{print $1}' | tr -d ' ')
checkPerformance_load5=$(uptime | awk -F "load average:" '{print $2}' | awk -F "," '{print $2}' | tr -d ' ')
checkPerformance_load15=$(uptime | awk -F "load average:" '{print $2}' | awk -F "," '{print $3}' | tr -d ' ')
checkPerformance_load=$(echo "$checkPerformance_load1,$checkPerformance_load5,$checkPerformance_load15")
#checkPerformance_diskRootFree=$(snmp .1.3.6.1.4.1.2620.1.6.7.6.1.8.1)
checkPerformance_diskRootFree=$(stattestget 1.3.6.1.4.1.2620.1.6.7.6.1.8.1)
checkPerformance_diskFileSystemType=$(mount | grep " / " | awk '{print $5}')
checkPerformance_diskRootRW=$(touch /$SCRIPT.testfile 2>&1 | wc -l; rm /$SCRIPT.testfile)
#checkPerformance_diskVarLogFree=$(snmp .1.3.6.1.4.1.2620.1.6.7.6.1.8.3)
checkPerformance_diskVarLogFree=$(stattestget 1.3.6.1.4.1.2620.1.6.7.6.1.8.3)
checkPerformance_diskVarLogRW=$(touch /var/log/$SCRIPT.testfile 2>&1 | wc -l; rm /var/log/$SCRIPT.testfile)
checkPerformance_memTotal=$(free | grep Mem | awk '{print $2}')
checkPerformance_memFree=$(free | grep "Mem" | awk '{print $4}')
checkPerformance_memUsed=$(free | grep "Mem" | awk '{print $3}')
checkPerformance_memSwapTotal=$(free | grep Swap | awk '{print $2}')
checkPerformance_memSwapUsed=$(free | grep Swap | awk '{print $3}')
checkPerformance_memUsedPercentage=$(awk "BEGIN { pc=100*${checkPerformance_memUsed}/${checkPerformance_memTotal}; i=int(pc); print (pc-i<0.5)?i:i+1 }")
checkPerformance_memAvailable=$(free | grep "Mem" | awk '{print $7}')


checkPerformance_usermodeCoreQty=$(find /var/log/dump/usermode/*.core.gz -type f 2>&1 | grep -v "No such file" | wc -l)
if [[ $checkPerformance_usermodeCoreQty -gt "0" ]]; then
	IFS=$'\n'
	for LINE in `ls -al /var/log/dump/usermode/*.core.gz | grep "core.gz"` ; do
		COREDAEMON=$(echo "$LINE" | awk '{print $9}' | awk -F "/" '{print $NF}' | awk -F "." '{print $1}')
		COREPID=$(echo "$LINE" | awk '{print $9}' | awk -F "/" '{print $NF}' | awk -F "." '{print $2}')
		COREFILE=$(echo "$LINE" | awk '{print $9}')
		COREDATE=$(stat -c %Y $COREFILE)
		CORESIZE=$(echo "$LINE" | awk '{print $5}')
		COREDATESINCE="$(( EPOCH - COREDATE ))"
		if [[ $COREDATESINCE -lt $SINCELASTRUN ]]; then
			echo "checkPerformance_usermodeCore FILE=$COREFILE DATE=$COREDATE SIZE=$CORESIZE" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformance_usermodeCore - FILE=$COREFILE DATE=$COREDATE SIZE=$CORESIZE DAEMON=$COREDAEMON PID=$COREPID SOFTWARE=$checkSelf_majorVer $checkSelf_minorVer" >>$HISTORYLOG
			checkPerformance_warning="1"
			checkPerformance_warningInfo="$checkPerformance_warningInfo [Core File Created: $COREFILE]"
			IFS=$ORIGIFS
			sendSyslog "$functionName" "INFO" "checkPerformance_usermodeCore" "FILE=\"$COREFILE\" DATE=\"$COREDATE\" SIZE=\"$CORESIZE\" DAEMON=\"$COREDAEMON\" PID=\"$COREPID\" SOFTWARE=\"$checkSelf_majorVer $checkSelf_minorVer\""
			IFS=$'\n'
		fi
	done
	IFS=$ORIGIFS
fi


checkPerformance_kernelCrashQty=$(find /var/log/crash/* -type f 2>&1 | grep -v "No such file" | wc -l)
if [[ $checkPerformance_kernelCrashQty -gt "0" ]]; then
	IFS=$'\n'
	for LINE in `find /var/log/crash/* -type f 2>&1 | grep -v "No such file"` ; do
		COREFILE=$(echo $LINE)
		COREDATE=$(stat -c %Y $COREFILE)
		CORESIZE=$(ls -al $LINE | awk '{print $5}')
		COREDATESINCE="$(( EPOCH - COREDATE ))"
		if [[ $COREDATESINCE -lt "3600" ]]; then
			echo "checkPerformance_kernelCrash FILE=$COREFILE DATE=$COREDATE SIZE=$CORESIZE" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Kernel Crash File - FILE=$COREFILE DATE=$COREDATE SIZE=$CORESIZE SOFTWARE=$checkSelf_majorVer $checkSelf_minorVer" >>$HISTORYLOG
			checkPerformance_problemInfo="$checkPerformance_problemInfo [Kernel Crash Created: $COREFILE]"
			checkPerformance_problem="1"
			IFS=$ORIGIFS
			sendSyslog "$functionName" "INFO" "checkPerformance_kernelCrash" "FILE=\"$COREFILE\" DATE=\"$COREDATE\" SIZE=\"$CORESIZE\" DAEMON=\"NA\" PID=\"$NA\" SOFTWARE=\"$checkSelf_majorVer $checkSelf_minorVer\""
			IFS=$'\n'
		else
			echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Kernel Crash File - FILE=$COREFILE DATE=$COREDATE SIZE=$CORESIZE SOFTWARE=$checkSelf_majorVer $checkSelf_minorVer" >>$HISTORYLOG
		fi
	done
	IFS=$ORIGIFS
fi


cpstat os -f multi_cpu | grep "|" | grep -v "User" | awk -F "|" '{print $2,$3,$4,$5,$6,$8}' | awk '{print $1","$2","$3","$4","$5","$6}' > $TEMPFILE_CPSTAT
checkPerformance_cpuQty=$(cat $TEMPFILE_CPSTAT | wc -l)
checkPerformance_cpuThreshold="$(( (checkPerformance_cpuQty * 70) / 100 ))"
IFS=$'\n'
for LINE in `cat $TEMPFILE_CPSTAT` ; do
	CPU=$(echo "$LINE" | awk -F "," '{print $1}')
	USER=$(echo "$LINE" | awk -F "," '{print $2}')
	SYSTEM=$(echo "$LINE" | awk -F "," '{print $3}')
	IDLE=$(echo "$LINE" | awk -F "," '{print $4}')
	USAGE=$(echo "$LINE" | awk -F "," '{print $5}')
	INTERRUPTS=$(echo "$LINE" | awk -F "," '{print $6}')
	#PURPOSE=$(snmp .1.3.6.1.4.1.2620.1.56.101.2.1.9.$CPU | tr -d [:space:])
	PURPOSE=$(stattestget 1.3.6.1.4.1.2620.1.56.101.2.1.9.$CPU)
	LINECOUNTERS="CPU=$CPU USER=$USER SYSTEM=$SYSTEM IDLE=$IDLE USAGE=$USAGE INTERRUPTS=$INTERRUPTS PURPOSE=$PURPOSE"
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformance_cpuCounters - $LINECOUNTERS" >>$HISTORYLOG
	IFS=$ORIGIFS
	sendSyslog "$functionName" "INFO" "checkPerformance_cpuCounters" "CPU=\"$CPU\" USER=\"$USER\" SYSTEM=\"$SYSTEM\" IDLE=\"$IDLE\" USAGE=\"$USAGE\" INTERRUPTS=\"$INTERRUPTS\" PURPOSE=\"$PURPOSE\""
	IFS=$'\n'
	if [[ $USAGE -gt "80" ]]; then
		echo "Logic - high cpu usage: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - High cpu usage for core - $LINECOUNTERS" >>$HISTORYLOG
		checkPerformance_warningInfo="$checkPerformance_warningInfo [CPU$CPU $USAGE pct]"
	fi
done
IFS=$ORIGIFS


checkPerformance_zombieQty="0"
IFS=$'\n'
for LINE in `ps aux | grep " Z " | grep -v "grep\|awk\|USER"`; do
	PID=$(echo "$LINE" | awk '{print $2}')
	DETAIL=$(echo "$LINE" | tr ' ' '_')
	STARTTIME=$(date --date="`ps -eo pid,lstart | awk -v p="$PID" '$1==p' | awk '{print $2,$3,$4,$5,$6}'`" +%s)
	STARTTIMESINCE=$(since_time_epoch $STARTTIME)
	IFS=$ORIGIFS
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformance_zombie - $DETAIL TIMESINCE=$STARTTIMESINCE" >>$HISTORYLOG
	sendSyslog "$functionName" "INFO" "checkPerformance_zombie" "DETAIL=\"$DETAIL\" TIMESINCE=\"$STARTTIMESINCE\""
	IFS=$'\n'
	let checkPerformance_zombieQty=checkPerformance_zombieQty+1
done
IFS=$ORIGIFS


#SPIKE DETECTIVE
# if [[ -f /var/log/spike_detective/spike_detective.csv ]]; then

	# SPIKE_FOUND=$(cat /var/log/spike_detective/spike_detective.csv | grep -v "spike_start_time" | awk -F "," -v e=$LASTRUNEPOCH '{if($1>e) print $1}' | wc -l)

	# if [[ $SPIKE_FOUND -gt "0" ]]; then
		# checkPerformance_spikeQty=$SPIKE_FOUND
		# IFS=$'\n'
		# for LINE in `cat /var/log/spike_detective/spike_detective.csv | grep -v "spike_start_time" | awk -F "," -v e=$LASTRUNEPOCH '{if($1>e)print $1","$2","$3","$4","$5","$6","$7","$8}'` ; do
			# SPIKE_START_TIME=$(echo "$LINE" | awk -F "," '{print $1}')
			# SPIKE_TYPE=$(echo "$LINE" | awk -F "," '{print $2}')
			# CPU_CORE_OR_THREAD_ID=$(echo "$LINE" | awk -F "," '{print $3}')
			# THREAD_NAME=$(echo "$LINE" | awk -F "," '{print $4}')
			# SPIKE_DURATION_SEC=$(echo "$LINE" | awk -F "," '{print $5}')
			# INITIAL_CPU_USAGE=$(echo "$LINE" | awk -F "," '{print $6}')
			# AVERAGE_CPU_USAGE=$(echo "$LINE" | awk -F "," '{print $7}')
			# PERF_TAKEN=$(echo "$LINE" | awk -F "," '{print $8}')
			# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformance_spikeDetails - SPIKE_START_TIME=$SPIKE_START_TIME SPIKE_TYPE=$SPIKE_TYPE CPU_CORE_OR_THREAD_ID=$CPU_CORE_OR_THREAD_ID THREAD_NAME=$THREAD_NAME SPIKE_DURATION_SEC=$SPIKE_DURATION_SEC INITIAL_CPU_USAGE=$INITIAL_CPU_USAGE AVERAGE_CPU_USAGE=$AVERAGE_CPU_USAGE PERF_TAKEN=$PERF_TAKEN" >>$HISTORYLOG
			# IFS=$ORIGIFS
			# sendSyslog "$functionName" "INFO" "checkPerformance_spikeDetails" "SPIKE_START_TIME=\"$SPIKE_START_TIME\" SPIKE_TYPE=\"$SPIKE_TYPE\" CPU_CORE_OR_THREAD_ID=\"$CPU_CORE_OR_THREAD_ID\" THREAD_NAME=\"$THREAD_NAME\" SPIKE_DURATION_SEC=\"$SPIKE_DURATION_SEC\" INITIAL_CPU_USAGE=\"$INITIAL_CPU_USAGE\" AVERAGE_CPU_USAGE=\"$AVERAGE_CPU_USAGE\" PERF_TAKEN=\"$PERF_TAKEN\""
			# IFS=$'\n'
			
			# #ASSUME one per minute since epoch doesn't always match log directory
			# LOG_FILE_DATE=$(date -d @`echo $SPIKE_START_TIME` +%Y-%m-%d_%H-%M)
			# LOG_FILE=$(ls -al /var/log/spike_detective/*$LOG_FILE_DATE*/*.log 2>&1 | grep -v "No such file" | head -1 | awk '{print $NF}')
			# if [[ -f $LOG_FILE ]]; then
				# RANK="1"
				# for LINE2 in `cat $LOG_FILE | grep -v "#" | head -5` ; do
					# OVERHEAD=$(echo $LINE2 | awk '{print $1}' | tr -d '%[:space:]')
					# COMMAND=$(echo $LINE2 | awk '{print $2}' | tr -d '[:space:]')
					# SHARED_OBJECT=$(echo $LINE2 | awk '{print $3}' | tr -d '[:space:]')
					# SYMBOL=$(echo $LINE2 | awk '{print $4,$5}')
					# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformance_spikeDetailsExtended - RANK=$RANK SPIKE_START_TIME=$SPIKE_START_TIME OVERHEAD=$OVERHEAD COMMAND=$COMMAND SHARED_OBJECT=$SHARED_OBJECT SYMBOL=$SYMBOL LOG_FILE=$LOG_FILE" >>$HISTORYLOG
					# IFS=$ORIGIFS
					# sendSyslog "$functionName" "INFO" "checkPerformance_spikeDetailsExtended" "RANK=\"$RANK\" SPIKE_START_TIME=\"$SPIKE_START_TIME\" OVERHEAD=\"$OVERHEAD\" COMMAND=\"$COMMAND\" SHARED_OBJECT=\"$SHARED_OBJECT\" SYMBOL=\"$SYMBOL\" LOG_FILE=\"$LOG_FILE\""
					# IFS=$'\n'
					# let RANK=RANK+1
				# done
			# fi
			
		# done
		# IFS=$ORIGIFS
		
		# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformance_spikeQty - $checkPerformance_spikeQty" >>$HISTORYLOG
		# sendSyslog "$functionName" "INFO" "checkPerformance_spikeQty" "VALUE=\"$checkPerformance_spikeQty\""
	# fi
# fi


# if [[ $checkSelf_bladeUrlf == "1" ]]; then
	# checkPerformance_radErrorLogQty=$(find $FWDIR/log/rad_events/Errors/ -type f -exec bash -c 'if [[ $(stat -c %Y "$1") -ge $2 ]]; then echo "$1"; fi' bash {} $LASTRUNEPOCH \; | wc -l)
	# checkPerformance_radErrorLogNames=$(find $FWDIR/log/rad_events/Errors/ -type f -exec bash -c 'if [[ $(stat -c %Y "$1") -ge $2 ]]; then echo "$1"; fi' bash {} $LASTRUNEPOCH \; | awk -F "/" '{print $NF}' | tr '\n' ' ')
	# IFS=$'\n'
	# for LINE in `find $FWDIR/log/rad_events/Errors/ -type f -exec bash -c 'if [[ $(stat -c %Y "$1") -ge $2 ]]; then echo "$1"; fi' bash {} $LASTRUNEPOCH \;` ; do
		# SERVICE=$(cat $LINE | grep "Service=" | awk -F "=" '{print $2}')
		# RESOURCE=$(cat $LINE | grep "Resource=" | awk -F "=" '{print $2}')
		# FLOWERROR=$(cat $LINE | grep "FlowError=" | awk -F "=" '{print $2}')
		# FETCHURL=$(cat $LINE | grep "FetchUrl=" | awk -F "FetchUrl=" '{print $2}')
		# ACTIVEFLOWS=$(cat $LINE | grep "ActiveFlows=" | awk -F "=" '{print $2}')
		# LOGDATE=$(stat -c %Y $LINE)
		# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformance_radErrorLogDetails - SERVICE=$SERVICE RESOURCE=$RESOURCE FLOWERROR=$FLOWERROR FETCHURL=$FETCHURL ACTIVEFLOWS=$ACTIVEFLOWS LOG=$LINE LOGDATE=$LOGDATE" >>$HISTORYLOG
		# IFS=$ORIGIFS
		# sendSyslog "$functionName" "INFO" "checkPerformance_radErrorLogDetails" "SERVICE=\"$SERVICE\" RESOURCE=\"$RESOURCE\" FLOWERROR=\"$FLOWERROR\" FETCHURL=\"$FETCHURL\" ACTIVEFLOWS=\"$ACTIVEFLOWS\" LOG=\"$LINE\" LOGDATE=\"$LOGDATE\""
		# IFS=$'\n'
	# done
	# IFS=$ORIGIFS
# fi


#Check for soft lockups
checkPerformance_softlockQty="0"
# checkPerformance_softlockQty0=$(echo $LASTRUNMESSAGES | grep "BUG: soft lockup" | wc -l)
# if [[ $checkPerformance_softlockQty0 -gt "0" ]]; then
	# while IFS= read -r LINE; do
		# if [[ "$LINE" == *"BUG: soft lockup"* ]]; then
			# checkPerformance_softlockQty=$((checkPerformance_softlockQty + 1))
		# fi
	# done <<< "$LASTRUNMESSAGES"
# fi



#LOG OUTPUTS
echo "checkPerformance_load $checkPerformance_load" >>$RUNLOG
echo "checkPerformance_diskRootFree $checkPerformance_diskRootFree" >>$RUNLOG
echo "checkPerformance_diskVarLogFree $checkPerformance_diskVarLogFree" >>$RUNLOG
echo "checkPerformance_diskFileSystemType $checkPerformance_diskFileSystemType" >>$RUNLOG
echo "checkPerformance_diskRootRW $checkPerformance_diskRootRW" >>$RUNLOG
echo "checkPerformance_diskVarLogRW $checkPerformance_diskVarLogRW" >>$RUNLOG
echo "checkPerformance_memTotal $checkPerformance_memTotal" >>$RUNLOG
echo "checkPerformance_memFree $checkPerformance_memFree" >>$RUNLOG
echo "checkPerformance_memUsed $checkPerformance_memUsed" >>$RUNLOG
echo "checkPerformance_memSwapTotal $checkPerformance_memSwapTotal" >>$RUNLOG
echo "checkPerformance_memSwapUsed $checkPerformance_memSwapUsed" >>$RUNLOG
echo "checkPerformance_memUsedPercentage $checkPerformance_memUsedPercentage" >>$RUNLOG

echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformance_load - $checkPerformance_load" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformance_diskRootFree - $checkPerformance_diskRootFree" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformance_diskVarLogFree - $checkPerformance_diskVarLogFree" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformance_memUsed - $checkPerformance_memUsed" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformance_memUsedPercentage - $checkPerformance_memUsedPercentage" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformance_memSwapUsed - $checkPerformance_memSwapUsed" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformance_memAvailable - $checkPerformance_memAvailable" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformance_diskRootRW - $checkPerformance_diskRootRW" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformance_diskVarLogRW - $checkPerformance_diskVarLogRW" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformance_diskFileSystemType - $checkPerformance_diskFileSystemType" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformance_zombieQty - $checkPerformance_zombieQty" >>$HISTORYLOG
# if [[ $checkSelf_bladeUrlf == "1" ]]; then
	# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformance_radErrorLogQty - $checkPerformance_radErrorLogQty" >>$HISTORYLOG
	# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformance_radErrorLogNames - $checkPerformance_radErrorLogNames" >>$HISTORYLOG
# fi
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformance_softlockQty - $checkPerformance_softlockQty" >>$HISTORYLOG

#RUN LOGIC
if [[ $checkPerformance_load0 -gt $checkPerformance_cpuThreshold ]]; then
		echo "Logic - 5 min load above 70 pct: FAIL" >>$RUNLOG
        echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - checkPerformance_load - $checkPerformance_load0" >>$HISTORYLOG
        checkPerformance_warning="1"
		checkPerformance_warningInfo="$checkPerformance_warningInfo [Load Average: $checkPerformance_load0 (above 70 pct)]"
else
        echo "Logic - 5 min load above 70 pct: PASS" >>$RUNLOG
        echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkPerformance_load - $checkPerformance_load0" >>$HISTORYLOG
fi

if [[ $checkPerformance_diskRootRW -gt "0" ]] || [[ $checkPerformance_diskVarLogRW -gt "0" ]]; then
		echo "Logic - Filesystem Read Only: FAIL" >>$RUNLOG
        echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Filesystem Read Only - Root: $checkPerformance_diskRootRW VarLog: $checkPerformance_diskVarLogRW" >>$HISTORYLOG
        checkPerformance_problem="1"
		checkPerformance_problemInfo="$checkPerformance_problemInfo [File System Read Only: Root($checkPerformance_diskRootRW) VarLog($checkPerformance_diskVarLogRW)"
else
        echo "Logic - Filesystem Read Only: PASS" >>$RUNLOG
        echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Filesystem Read Only - Root: $checkPerformance_diskRootRW VarLog: $checkPerformance_diskVarLogRW" >>$HISTORYLOG
fi


#Usermode PROCESS
fStartMs=$(date +%s%3N)
IFS=$'\n'
for LINE in `ps aux | grep -v "\[" | grep -v "routed -N" | grep -v "COMMAND\|ifiPython3\|dlpu\|wstlsd\|udevd\|kauditd\|kjournald\|ksnapd\|usb-storage\|kpsmoused\|kswapd\|pdflush\|kseriod\|khubd\|klogd\|kacpid\|khelper\|kthread\|init\|watchdog\|scsi\|migration\|ksoftirqd\|kblockd\|cqueue\|ata\|aio\|kworker\|snd\|xfs\|mlx\|rcu\|lru\|netns\|slab_mcd\|bioset\|md\|edac-poller\|rpciod\|ksmd\|kmpath\|nfsiod\|kaluad\|deferwq\|writeback\|kintegrityd\|cciss_scan\|i40e\|kdmflush\|khugepaged\|crypto\|kthrotld\|dm_bufio_cache\|irq\|kdev\|xprt\|agetty\|python3.7\|httpd2\|grep\|sleep\|sshd\|bash\|ps\|syslogd\|sh\|acpid\|auditd\|awk\|crond\|csh\|frontstage" | awk '{print $2" "$3" "$6" "$11}'` ; do
	PID=$(echo "$LINE" | awk '{print $1}')
	CPU0=$(cat $TEMPFILE | awk -v var="$PID" '$1==var' | awk '{print $9}' | tr '\n' ' ')
	CPU=$(average_values 3 "$CPU0")
	CPUID=$(ps -o pid,cpuid --pid $PID | tail -1 | awk '{print $2}')
	MEM0=$(echo "$LINE" | awk '{print $3}')
	MEM="$(( MEM0 / 1000 ))"
	CMD=$(echo "$LINE" | awk '{print $4}' | awk -F/ '{print $NF}' | tr -d '[]:')
	STARTTIME=$(date --date="`ps -eo pid,lstart | awk -v p="$PID" '$1==p' | awk '{print $2,$3,$4,$5,$6}'`" +%s)
	STARTTIMESINCE=$(since_time_epoch $STARTTIME)
	if [[ $CMD == "java" ]]; then
		CMDARGTEST=$(ps aux | grep $CMD | grep $PID | grep solr | wc -l)
		if [[ $CMDARGTEST -eq "1" ]]; then
			CMDARG="_SOLR"
		fi
		CMDARGTEST=$(ps aux | grep $CMD | grep $PID | grep RFL | wc -l)
		if [[ $CMDARGTEST -eq "1" ]]; then
			CMDARG="_RFL"
		fi
		CMDARGTEST=$(ps aux | grep $CMD | grep $PID | grep CPM | wc -l)
		if [[ $CMDARGTEST -eq "1" ]]; then
			CMDARG="_CPM"
		fi
		CMDARGTEST=$(ps aux | grep $CMD | grep $PID | grep smartview | wc -l)
		if [[ $CMDARGTEST -eq "1" ]]; then
			CMDARG="_SMARTVIEW"
		fi
		CMDARGTEST=$(ps aux | grep $CMD | grep $PID | grep CPM_SOLR | wc -l)
		if [[ $CMDARGTEST -eq "1" ]]; then
			CMDARG="_CPMSOLR"
		fi
	else
		CMDARG=""
	fi
	LINECOUNTERS="PID=$PID CPU=$CPU MEM=$MEM CMD=$CMD$CMDARG TIME=$STARTTIME CPUID=$CPUID"
		
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformance_countersDetail - $LINECOUNTERS" >>$HISTORYLOG
	IFS=$ORIGIFS
	sendSyslog "$functionName" "INFO" "checkPerformance_countersDetail" "PID=\"$PID\" CPU=\"$CPU\" MEM=\"$MEM\" CMD=\"$CMD$CMDARG\" TIME=\"$STARTTIME\" CPUID=\"$CPUID\""
	IFS=$'\n'




	if [[ $CPU -gt 90 ]]; then
		if [[ $APPLIANCETYPE == "SM" ]] && [[ $CMD == "java" || $CMD == "gzip" || $CMD == "pigz" || $CMD == "sshd" || $CMD == "log_exporter" || $CMD == "smartlog_server" || $CMD == "cpsead"  || $CMD == "dbsync" || $CMD == "log_indexer" || $CMD == "lea_session" || $CMD == "java_CPM" ]]; then
			if [[ $CPU -gt 2000 ]]; then
				echo "Logic - high cpu: FAIL" >>$RUNLOG
				echo "$HISTORYLOGPREAMBLE - $functionName - INFO - High CPU usage for single PID - PID=$PID CPU=$CPU CMD=$CMD$CMDARG TIME=$STARTTIME" >>$HISTORYLOG
				checkPerformance_countersProblemInfo="$checkPerformance_countersProblemInfo $CMD$CMDARG(PID=$PID/CPU=$CPU/TIME=$STARTTIME)"
				checkPerformance_problemInfo="$checkPerformance_problemInfo [Multi-thread process $CMD$CMDARG running $CPU pct]"
			else
				echo "Logic - high cpu: FAIL" >>$RUNLOG
				echo "$HISTORYLOGPREAMBLE - $functionName - INFO - High CPU usage for single PID - PID=$PID CPU=$CPU CMD=$CMD$CMDARG TIME=$STARTTIME" >>$HISTORYLOG
			fi

		elif [[ $CMD == "rad" || $CMD == "fwk" || $CMD == "fwk_forker" ]]; then
			echo "Logic - high cpu: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - INFO - High CPU usage for single PID - PID=$PID CPU=$CPU CMD=$CMD$CMDARG TIME=$STARTTIME" >>$HISTORYLOG
			checkPerformance_warningInfo="$checkPerformance_warningInfo [System process $CMD$CMDARG running $CPU pct]"
		elif [[ $CMD == "fw" || $CMD == "fw6" || $CMD == "rad" || $CMD == "cpdiag" || $CMD == "monitord" || $CMD == "fwk" || $CMD =~ "fw_worker" || $CMD == "lea_session" || $CMD == "awk" || $CMD == "md5sum" || $CMD == "ssh" || $CMD == "confd" || $CMD == "fwd" || $CMD == "fwm" || $CMD == "postgres" || $CMD == "gzip" || $CMD == "pigz" || $CMD == "snmpd" || $CMD == "syslog" || $CMD == "cp_file_convertd" ]]; then
			echo "Logic - high cpu: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - INFO - High CPU usage for single PID - PID=$PID CPU=$CPU CMD=$CMD$CMDARG TIME=$STARTTIME" >>$HISTORYLOG
			checkPerformance_countersProblemInfo="$checkPerformance_countersProblemInfo $CMD$CMDARG(PID=$PID/CPU=$CPU/TIME=$STARTTIME)"
			checkPerformance_problemInfo="$checkPerformance_problemInfo [System process $CMD$CMDARG running $CPU pct]"
		elif [[ $STARTTIMESINCE -lt "900" ]]; then
			echo "Logic - high cpu: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - INFO - High CPU usage for single PID (total run time less than 900 seconds) - PID=$PID CPU=$CPU CMD=$CMD$CMDARG TIME=$STARTTIME" >>$HISTORYLOG
			checkPerformance_countersProblemInfo="$checkPerformance_countersProblemInfo $CMD$CMDARG(PID=$PID/CPU=$CPU/TIME=$STARTTIME)"
			checkPerformance_problemInfo="$checkPerformance_problemInfo [$CMD$CMDARG running $CPU pct (total run time less than 900 seconds)]"
		else
			echo "Logic - high cpu: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - High CPU usage for single PID - PID=$PID CPU=$CPU CMD=$CMD$CMDARG TIME=$STARTTIME" >>$HISTORYLOG
			checkPerformance_countersProblemInfo="$checkPerformance_countersProblemInfo $CMD$CMDARG(PID=$PID/CPU=$CPU/TIME=$STARTTIME)"
			checkPerformance_counters="1"
			checkPerformance_problemInfo="$checkPerformance_problemInfo [$CMD$CMDARG running $CPU pct]"
		fi
	fi

	if [[ $CMD == "java"  || $CMD == "fwk" || $CMD == "fwk_forker" ]]; then
		if [[ $MEM -ge "50000" ]]; then
			##64bit Processes		
			echo "Logic - high mem: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - INFO - High memory usage for single PID - PID=$PID MEM=$MEM CMD=$CMD$CMDARG TIME=$STARTTIME" >>$HISTORYLOG
			checkPerformance_warningCounters="1"
			checkPerformance_countersProblemInfo="$checkPerformance_countersProblemInfo $CMD$CMDARG(PID=$PID/MEM=$MEM/TIME=$STARTTIME)"
			checkPerformance_warningInfo="$checkPerformance_problemInfo [System process $CMD$CMDARG using $MEM MB RAM]"
		fi
		
	else
		##32bit Processes
		if [[ $MEM -gt "3500" ]] && [[ $MEM -lt "3700" ]]; then
			echo "Logic - high mem: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - High memory usage for single PID - PID=$PID MEM=$MEM CMD=$CMD$CMDARG TIME=$STARTTIME" >>$HISTORYLOG
			checkPerformance_warningCounters="1"
			checkPerformance_countersProblemInfo="$checkPerformance_countersProblemInfo $CMD$CMDARG(PID=$PID/MEM=$MEM/TIME=$STARTTIME)"
			checkPerformance_warningInfo="$checkPerformance_problemInfo [$CMD$CMDARG using $MEM MB RAM]"
			
			
			if [[ $SELF_HEAL_ENABLED -eq "1" ]]; then
				if [[ $CMD == "snmpd" ]]; then
					FIX="High memory utilization - snmpd"
					COMMAND="tellpm process:snmpd;tellpm process:snmpd t"
					BEFORE_FIX=$(ps aux | grep "snmpd" | grep -v "grep" | tr ' ' '_')
					if [[ $SELF_HEAL_CHRONIC -eq "1" ]]; then
						COMMAND_EXECUTION="bypassed due to SELF_HEAL_CHRONIC"
						checkPerformance_warningInfo="$checkPerformance_warningInfo [Self Heal Bypassed due to Chronic Issue - process restart snmpd]"
					else
						COMMAND_EXECUTION=$(tellpm process:snmpd; tellpm process:snmpd t; sleep 10)
						checkPerformance_workingInfo="$checkPerformance_workingInfo [Self Heal - process restart snmpd]"
					fi
					AFTER_FIX=$(ps aux | grep "snmpd" | grep -v "grep" | tr ' ' '_')
					COMMAND=$(echo $COMMAND | tr -d '"')
					

					echo "$HISTORYLOGPREAMBLE - $functionName - INFO - SELF_HEAL - FIX=$FIX COMMAND=$COMMAND COMMAND_EXECUTION=$COMMAND_EXECUTION BEFORE_FIX=$BEFORE_FIX AFTER_FIX=$AFTER_FIX" >>$HISTORYLOG
					IFS=$ORIGIFS
					sendSyslog "$functionName" "INFO" "SELF_HEAL" "FIX=\"$FIX\" COMMAND=\"$COMMAND\" BEFORE_FIX=\"$BEFORE_FIX\" AFTER_FIX=\"$AFTER_FIX\" COMMAND_EXECUTION=\"$COMMAND_EXECUTION\""
					IFS=$'\n'
					echo "$HISTORYLOGPREAMBLE - $functionName - INFO - SELF_HEAL - FIX=$FIX COMMAND=$COMMAND COMMAND_EXECUTION=$COMMAND_EXECUTION BEFORE_FIX=$BEFORE_FIX AFTER_FIX=$AFTER_FIX" >>$SELF_HEAL_LOG
				fi
			fi

			if [[ $SELF_HEAL_ENABLED -eq "1" ]]; then
				if [[ $CMD == "cpview_services" ]]; then
					FIX="High memory utilization - cpview_services"
					COMMAND="cpwd_admin stop -name CPVIEWS; cpwd_admin start -name CPVIEWS -path "$CPDIR/bin/cpview_services" -command "cpview_services""
					BEFORE_FIX=$(ps aux | grep "cpview_services" | grep -v "grep" | tr ' ' '_')
					if [[ $SELF_HEAL_CHRONIC -eq "1" ]]; then
						COMMAND_EXECUTION="bypassed due to SELF_HEAL_CHRONIC"
						checkPerformance_warningInfo="$checkPerformance_warningInfo [Self Heal Bypassed due to Chronic Issue - process restart cpview_services]"
					else
						COMMAND_EXECUTION=$(cpwd_admin stop -name CPVIEWS; cpwd_admin start -name CPVIEWS -path "$CPDIR/bin/cpview_services" -command "cpview_services"; sleep 10)
						checkPerformance_workingInfo="$checkPerformance_workingInfo [Self Heal - process restart cpview_services]"
					fi
					AFTER_FIX=$(ps aux | grep "cpview_services" | grep -v "grep" | tr ' ' '_')
					COMMAND=$(echo $COMMAND | tr -d '"')
					

					echo "$HISTORYLOGPREAMBLE - $functionName - INFO - SELF_HEAL - FIX=$FIX COMMAND=$COMMAND COMMAND_EXECUTION=$COMMAND_EXECUTION BEFORE_FIX=$BEFORE_FIX AFTER_FIX=$AFTER_FIX" >>$HISTORYLOG
					IFS=$ORIGIFS
					sendSyslog "$functionName" "INFO" "SELF_HEAL" "FIX=\"$FIX\" COMMAND=\"$COMMAND\" BEFORE_FIX=\"$BEFORE_FIX\" AFTER_FIX=\"$AFTER_FIX\" COMMAND_EXECUTION=\"$COMMAND_EXECUTION\""
					IFS=$'\n'
					echo "$HISTORYLOGPREAMBLE - $functionName - INFO - SELF_HEAL - FIX=$FIX COMMAND=$COMMAND COMMAND_EXECUTION=$COMMAND_EXECUTION BEFORE_FIX=$BEFORE_FIX AFTER_FIX=$AFTER_FIX CRONIC=$SELF_HEAL_CHRONIC" >>$SELF_HEAL_LOG
				fi
			fi
			
		elif [[ $MEM -ge "3700" ]]; then
			echo "Logic - high mem: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - High memory usage for single PID - PID=$PID MEM=$MEM CMD=$CMD$CMDARG TIME=$STARTTIME" >>$HISTORYLOG
			checkPerformance_counters="1"
			checkPerformance_countersProblemInfo="$checkPerformance_countersProblemInfo $CMD$CMDARG(PID=$PID/MEM=$MEM/TIME=$STARTTIME)"
			checkPerformance_problemInfo="$checkPerformance_problemInfo [$CMD$CMDARG using $MEM MB RAM]"
			
			
			if [[ $SELF_HEAL_ENABLED -eq "1" ]]; then
				if [[ $CMD == "snmpd" ]]; then
					FIX="High memory utilization - snmpd"
					COMMAND="tellpm process:snmpd;tellpm process:snmpd t"
					BEFORE_FIX=$(ps aux | grep "snmpd" | grep -v "grep" | tr ' ' '_')
					if [[ $SELF_HEAL_CHRONIC -eq "1" ]]; then
						COMMAND_EXECUTION=$(bypassed due to SELF_HEAL_CHRONIC)
						checkPerformance_warningInfo="$checkPerformance_warningInfo [Self Heal Bypassed due to Chronic issue - process restart snmpd]"
					else
						COMMAND_EXECUTION=$(tellpm process:snmpd; tellpm process:snmpd t; sleep 10)
						checkPerformance_workingInfo="$checkPerformance_workingInfo [Self Heal - process restart snmpd]"
					fi
					AFTER_FIX=$(ps aux | grep "snmpd" | grep -v "grep" | tr ' ' '_')
					COMMAND=$(echo $COMMAND | tr -d '"')
					

					echo "$HISTORYLOGPREAMBLE - $functionName - INFO - SELF_HEAL - FIX=$FIX COMMAND=$COMMAND COMMAND_EXECUTION=$COMMAND_EXECUTION BEFORE_FIX=$BEFORE_FIX AFTER_FIX=$AFTER_FIX" >>$HISTORYLOG
					IFS=$ORIGIFS
					sendSyslog "$functionName" "INFO" "SELF_HEAL" "FIX=\"$FIX\" COMMAND=\"$COMMAND\" BEFORE_FIX=\"$BEFORE_FIX\" AFTER_FIX=\"$AFTER_FIX\" COMMAND_EXECUTION=\"$COMMAND_EXECUTION\""
					IFS=$'\n'
					echo "$HISTORYLOGPREAMBLE - $functionName - INFO - SELF_HEAL - FIX=$FIX COMMAND=$COMMAND COMMAND_EXECUTION=$COMMAND_EXECUTION BEFORE_FIX=$BEFORE_FIX AFTER_FIX=$AFTER_FIX CRONIC=$SELF_HEAL_CHRONIC" >>$SELF_HEAL_LOG
				fi
			fi
			
		fi
	fi
done
fEndMs=$(date +%s%3N)
fTotalMs=$(( fEndMs - fStartMs ))
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_fTotalMs - $fTotalMs (usermode process)" >>$HISTORYLOG


#cpwd_admin
fStartMs=$(date +%s%3N)
if [[ $MDPSENABLED == "2" ]]; then
	dplane > /dev/null 2>&1
fi
IFS=$'\n'
for LINE in `cpwd_admin list | grep -v "START_TIME"` ; do
	APP=$(echo "$LINE" | awk '{print $1}')
	PID=$(echo "$LINE" | awk '{print $2}')
	STAT=$(echo "$LINE" | awk '{print $3}')
	START=$(echo "$LINE" | awk '{print $4}')
	START_TIME=$(echo "$LINE" | awk '{print $5"_"$6}')
	MON=$(echo "$LINE" | awk '{print $7}')
	if [[ $APP == "CPD" ]] && [[ $STAT != "E" ]]; then
		checkPerformance_problem="1"
		checkPerformance_problemInfo="$checkPerformanceSP_problemInfo [CPD not running per cpwd_admin list]"
	fi
	if [[ $APP == "RAD" ]] && [[ $STAT != "E" ]]; then
		checkPerformance_problem="1"
		checkPerformance_problemInfo="$checkPerformanceSP_problemInfo [RAD not running per cpwd_admin list]"
	fi		
	if [[ $SELF_HEAL_ENABLED -eq "1" ]] && [[ $APPLIANCETYPE != "SM" ]]; then
		if [[ $APP == "CPD" ]] && [[ $STAT != "E" ]]; then
			FIX="CPD not running per cpwd_admin list"
			COMMAND="$CPDIR/bin/cpwd_admin start -name CPD -path "$CPDIR/bin/cpd" -command "cpd""
			BEFORE_FIX=$(cpwd_admin list | grep "CPD" | tr ' ' '_')
			if [[ $SELF_HEAL_CHRONIC -eq "1" ]]; then
				COMMAND_EXECUTION="bypassed due to SELF_HEAL_CHRONIC"
				checkPerformance_warningInfo="$checkPerformance_warningInfo [Self Heal Bypassed due to Chronic issue - cpwd_admin start CPD]"
			else
				COMMAND_EXECUTION=$($CPDIR/bin/cpwd_admin start -name CPD -path "$CPDIR/bin/cpd" -command "cpd" 2>&1)
				checkPerformance_workingInfo="$checkPerformance_workingInfo [Self Heal - cpwd_admin start CPD]"
			fi
			AFTER_FIX=$(cpwd_admin list | grep "CPD" | tr ' ' '_')
			COMMAND=$(echo $COMMAND | tr -d '"')
			

			echo "$HISTORYLOGPREAMBLE - $functionName - INFO - SELF_HEAL - FIX=$FIX COMMAND=$COMMAND COMMAND_EXECUTION=$COMMAND_EXECUTION BEFORE_FIX=$BEFORE_FIX AFTER_FIX=$AFTER_FIX" >>$HISTORYLOG
			IFS=$ORIGIFS
			sendSyslog "$functionName" "INFO" "SELF_HEAL" "FIX=\"$FIX\" COMMAND=\"$COMMAND\" BEFORE_FIX=\"$BEFORE_FIX\" AFTER_FIX=\"$AFTER_FIX\" COMMAND_EXECUTION=\"$COMMAND_EXECUTION\""
			IFS=$'\n'
			echo "$HISTORYLOGPREAMBLE - $functionName - INFO - SELF_HEAL - FIX=$FIX COMMAND=$COMMAND COMMAND_EXECUTION=$COMMAND_EXECUTION BEFORE_FIX=$BEFORE_FIX AFTER_FIX=$AFTER_FIX" >>$SELF_HEAL_LOG
		fi
	fi
	
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformance_cpwdDetails - APP=$APP PID=$PID STAT=$STAT START=$START START_TIME=$START_TIME MON=$MON" >>$HISTORYLOG
	IFS=$ORIGIFS
	sendSyslog "$functionName" "INFO" "checkPerformance_cpwdDetails" "APP=\"$APP\" PID=\"$PID\" STAT=\"$STAT\" START=\"$START\" START_TIME=\"$START_TIME\" MON=\"$MON\""
	IFS=$'\n'
done
IFS=$ORIGIFS
fEndMs=$(date +%s%3N)
fTotalMs=$(( fEndMs - fStartMs ))
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPolicy_fTotalMs - $fTotalMs (cpwd_admin)" >>$HISTORYLOG






if [[ $checkPerformance_counters -gt "0" ]]; then
	echo "Logic - performance counters FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Performance Counters - $checkPerformance_countersProblemInfo" >>$HISTORYLOG
	checkPerformance_problem="1"
elif [[ $checkPerformance_warningCounters -gt "0" ]]; then
	echo "Logic - performance counters FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - Performance Counters - $checkPerformance_countersProblemInfo" >>$HISTORYLOG
	checkPerformance_warning="1"
else
	echo "Logic - performance counters: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Performance Counters - $checkPerformance_countersProblemInfo" >>$HISTORYLOG
fi

if [[ $checkPerformance_diskRootFree -lt "15" ]] && [[ $checkPerformance_diskRootFree != "" ]]; then
	echo "Logic - disk root free: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Disk Root Free - $checkPerformance_diskRootFree" >>$HISTORYLOG
	checkPerformance_problem="1"
	checkPerformance_problemInfo="$checkPerformance_problemInfo [Disk / free space $checkPerformance_diskRootFree pct]"
else
	echo "Logic - disk root free: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Disk Root Free - $checkPerformance_diskRootFree" >>$HISTORYLOG
fi

if [[ $checkPerformance_diskVarLogFree -lt "15" ]] && [[ $checkPerformance_diskVarLogFree != "" ]]; then
	echo "Logic - disk var log free: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Disk Var Log Free - $checkPerformance_diskVarLogFree" >>$HISTORYLOG
	checkPerformance_problem="1"
	checkPerformance_problemInfo="$checkPerformance_problemInfo [Disk /var/log free space $checkPerformance_diskVarLogFree pct]"
else
	echo "Logic - disk var log free: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Disk Var Log Free - $checkPerformance_diskVarLogFree" >>$HISTORYLOG
fi

if [[ $checkPerformance_memUsedPercentage -gt "75" ]]; then
	echo "Logic - high usage: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - High usage - $checkPerformance_memUsedPercentage" >>$HISTORYLOG
	checkPerformance_problem="1"
	checkPerformance_problemInfo="$checkPerformance_problemInfo [High Total Memory Utilized $checkPerformance_memUsedPercentage pct]"
else
	echo "Logic - high usage: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - High usage - $checkPerformance_memUsedPercentage" >>$HISTORYLOG
fi

# if [[ $checkSelf_bladeUrlf == "1" ]] && [[ $checkPerformance_radErrorLogQty -gt "0" ]]; then
	# echo "Logic - rad errors: FAIL" >>$RUNLOG
	# echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkPerformance_radErrorLogQty - $checkPerformance_radErrorLogQty" >>$HISTORYLOG
	# #checkPerformance_warning="1"
	# checkPerformance_workingInfo="$checkPerformance_workingInfo [$checkPerformance_radErrorLogQty RAD Error Logs Created]"
# fi

if [[ $checkPerformance_zombieQty -gt "25" ]]; then
	echo "Logic - zombie processes: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - checkPerformance_zombieQty - $checkPerformance_zombieQty" >>$HISTORYLOG
	checkPerformance_warning="1"
	checkPerformance_warningInfo="$checkPerformance_warningInfo [$checkPerformance_zombieQty Zombie Processes]"
fi

if [[ $checkPerformance_softlockQty -gt "0" ]]; then
	echo "Logic - soft lockup: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - checkPerformance_softlockQty - $checkPerformance_softlockQty" >>$HISTORYLOG
	checkPerformance_problem="1"
	checkPerformance_problemInfo="$checkPerformance_warningInfo [$checkPerformance_softlockQty Soft Lockup Event]"
fi

IFS=$ORIGIFS



#SYSLOG
if [[ $checkPerformance_problem == "1" ]]; then
	sendSyslog "$functionName" "PROBLEM" "checkPerformance_problemInfo" "VALUE=\"$checkPerformance_problemInfo $checkPerformance_warningInfo $checkPerformance_workingInfo\""
elif [[ $checkPerformance_warning == "1" ]]; then
	sendSyslog "$functionName" "WARNING" "checkPerformance_warningInfo" "VALUE=\"$checkPerformance_warningInfo $checkPerformance_workingInfo\""	
else
	sendSyslog "$functionName" "WORKING" "checkPerformance_workingInfo" "VALUE=\"$checkPerformance_workingInfo\""
fi

sendSyslog "$functionName" "INFO" "checkPerformance_load" "VALUE=\"$checkPerformance_load\""
sendSyslog "$functionName" "INFO" "checkPerformance_load1" "VALUE=\"$checkPerformance_load1\""
sendSyslog "$functionName" "INFO" "checkPerformance_load5" "VALUE=\"$checkPerformance_load5\""
sendSyslog "$functionName" "INFO" "checkPerformance_load15" "VALUE=\"$checkPerformance_load15\""
sendSyslog "$functionName" "INFO" "checkPerformance_diskRootFree" "VALUE=\"$checkPerformance_diskRootFree\""
sendSyslog "$functionName" "INFO" "checkPerformance_diskVarLogFree" "VALUE=\"$checkPerformance_diskVarLogFree\""
sendSyslog "$functionName" "INFO" "checkPerformance_memUsed" "VALUE=\"$checkPerformance_memUsed\""
sendSyslog "$functionName" "INFO" "checkPerformance_memUsedPercentage" "VALUE=\"$checkPerformance_memUsedPercentage\""
sendSyslog "$functionName" "INFO" "checkPerformance_memSwapUsed" "VALUE=\"$checkPerformance_memSwapUsed\""
sendSyslog "$functionName" "INFO" "checkPerformance_memAvailable" "VALUE=\"$checkPerformance_memAvailable\""
sendSyslog "$functionName" "INFO" "checkPerformance_diskFileSystemType" "VALUE=\"$checkPerformance_diskFileSystemType\""
sendSyslog "$functionName" "INFO" "checkPerformance_diskRootRW" "VALUE=\"$checkPerformance_diskRootRW\""
sendSyslog "$functionName" "INFO" "checkPerformance_diskVarLogRW" "VALUE=\"$checkPerformance_diskVarLogRW\""
sendSyslog "$functionName" "INFO" "checkPerformance_softlockQty" "VALUE=\"$checkPerformance_softlockQty\""
# if [[ $checkSelf_bladeUrlf == "1" ]]; then
	# sendSyslog "$functionName" "INFO" "checkPerformance_radErrorLogQty" "VALUE=\"$checkPerformance_radErrorLogQty\""
	# sendSyslog "$functionName" "INFO" "checkPerformance_radErrorLogNames" "VALUE=\"$checkPerformance_radErrorLogNames\""
# fi

#CLEANUP
rm -f $TEMPFILE $TEMPFILE_CPSTAT > /dev/null 2>&1



checkPerformance_fEnd=$(date "+%s")
checkPerformance_fRunTime=$(( checkPerformance_fEnd - checkPerformance_fStart ))
echo "checkPerformance_fRunTime $checkPerformance_fRunTime" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformance_warning - $checkPerformance_warning" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformance_problem - $checkPerformance_problem" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformance_problemInfo - $checkPerformance_problemInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformance_warningInfo - $checkPerformance_warningInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformance_workingInfo - $checkPerformance_workingInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformance_runTime - $checkPerformance_fRunTime" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkPerformance_warning" "VALUE=\"$checkPerformance_warning\""
sendSyslog "$functionName" "INFO" "checkPerformance_problem" "VALUE=\"$checkPerformance_problem\""
sendSyslog "$functionName" "INFO" "checkPerformance_problemInfo" "VALUE=\"$checkPerformance_problemInfo\""
sendSyslog "$functionName" "INFO" "checkPerformance_warningInfo" "VALUE=\"$checkPerformance_warningInfo\""
sendSyslog "$functionName" "INFO" "checkPerformance_workingInfo" "VALUE=\"$checkPerformance_workingInfo\""
sendSyslog "$functionName" "INFO" "checkPerformance_runTime" "VALUE=\"$checkPerformance_fRunTime\""
echo "checkPerformance_warning $checkPerformance_warning" >>$RUNLOG
echo "checkPerformance_problem $checkPerformance_problem" >>$RUNLOG
echo "END==checkPerformance" >>$RUNLOG
}

###################################################################################################
checkPerformanceSP() {
echo "START==checkPerformanceSP" >>$RUNLOG

#DEFAULTS
checkPerformanceSP_fStart=$(date "+%s")
functionName=${FUNCNAME[0]}
checkPerformanceSP_warning="0"
checkPerformanceSP_problem="0"
checkPerformanceSP_workingInfo=""
checkPerformanceSP_warningInfo=""
checkPerformanceSP_problemInfo=""
checkPerformanceSP_warningCounters="0"
checkPerformanceSP_countersProblemInfo=""
TEMPFILE=$TEMPDIR/$SCRIPT.$functionName.gperf.$EPOCH
TEMPFILE2=$TEMPDIR/$SCRIPT.$functionName.top.$EPOCH
TEMPFILE_CPSTAT=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.cpstat
TEMPFILE_cpkstats0=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.cpkstats0
TEMPFILE_cpkstats=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.cpkstats


#COLLECT OUTPUTS
top -b -n3 > $TEMPFILE2 2>&1
checkPerformanceSP_load0=$(uptime | awk -F "load average:" '{print $2}' | awk -F "," '{print $1}' | tr -d ' ' | awk -F "." '{print $1}')
checkPerformanceSP_load1=$(uptime | awk -F "load average:" '{print $2}' | awk -F "," '{print $1}' | tr -d ' ')
checkPerformanceSP_load5=$(uptime | awk -F "load average:" '{print $2}' | awk -F "," '{print $2}' | tr -d ' ')
checkPerformanceSP_load15=$(uptime | awk -F "load average:" '{print $2}' | awk -F "," '{print $3}' | tr -d ' ')
checkPerformanceSP_load=$(echo "$checkPerformanceSP_load1,$checkPerformanceSP_load5,$checkPerformanceSP_load15")
#checkPerformanceSP_diskRootFree=$(snmp .1.3.6.1.4.1.2620.1.6.7.6.1.8.1)
checkPerformanceSP_diskRootFree=$(stattestget 1.3.6.1.4.1.2620.1.6.7.6.1.8.1)
#checkPerformanceSP_diskVarLogFree=$(snmp .1.3.6.1.4.1.2620.1.6.7.6.1.8.3)
checkPerformanceSP_diskVarLogFree=$(stattestget 1.3.6.1.4.1.2620.1.6.7.6.1.8.3)
checkPerformanceSP_diskFileSystemType=$(mount | grep " / " | awk '{print $5}')
checkPerformanceSP_memTotal=$(free | grep "Mem" | awk '{print $2}')
checkPerformanceSP_memFree=$(free | grep "Mem" | awk '{print $4}')
checkPerformanceSP_memUsed=$(free | grep "Mem" | awk '{print $3}')
checkPerformanceSP_memSwapTotal=$(free | grep "Swap" | awk '{print $2}')
checkPerformanceSP_memSwapUsed=$(free | grep "Swap" | awk '{print $3}')
checkPerformanceSP_memAvailable=$(free | grep "Mem" | awk '{print $7}')
checkPerformanceSP_memUsedPercentage=$(awk "BEGIN { pc=100*${checkPerformanceSP_memUsed}/${checkPerformanceSP_memTotal}; i=int(pc); print (pc-i<0.5)?i:i+1 }")

if [[ $LOCALSMO == "1" ]]; then
	g_perf -a -v > $TEMPFILE 2>&1
	TEMPFILE_LINES=$(cat $TEMPFILE | wc -l)
	COUNTER="0"
	while [ $TEMPFILE_LINES -le "10" ] && [ $COUNTER -lt "6" ]; do
		cat $TEMPFILE >>$RUNLOG
		sleep 10
		g_perf -a -v > $TEMPFILE 2>&1
		TEMPFILE_LINES=$(cat $TEMPFILE | wc -l)
		let COUNTER=$COUNTER+1
		echo "WAITING FOR PROPER OUTPUT $COUNTER times" >> $RUNLOG
	done
	checkPerformanceSP_perfLoadAverage=$(cat $TEMPFILE | grep "Load average" | awk -F "|" '{print $3}' | awk '{print $1}' | tr -d '%')
	checkPerformanceSP_perfAccLoad=$(cat $TEMPFILE | grep "Acceleration load " | awk -F "|" '{print $3}' | awk '{print $1}' | tr -d '%')
	checkPerformanceSP_perfInstanceLoad=$(cat $TEMPFILE | grep "Instances load " | awk -F "|" '{print $3}' | awk '{print $1}' | tr -d '%')

	for LINE in `echo $ALLSGM` ; do
		ACC=$(cat $TEMPFILE | grep "$LINE" | awk -F "|" '{print $7}' | awk '{print $1}')
		INSTANCES=$(cat $TEMPFILE | grep "$LINE" | awk -F "|" '{print $8}' | awk '{print $1}')
		checkPerformanceSP_perfSgm="$checkPerformanceSP_perfSgm [$LINE/$ACC/$INSTANCES]"
	done
	
	
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Chassis Perf Load Average - $checkPerformanceSP_perfLoadAverage" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Chassis Perf Acceleration Load - $checkPerformanceSP_perfAccLoad" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Chassis Perf Instance Load - $checkPerformanceSP_perfInstanceLoad" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Perf SGMs - $checkPerformanceSP_perfSgm" >>$HISTORYLOG
	
	sendSyslog "$functionName" "INFO" "checkPerformanceSP_perfLoadAverage" "VALUE=\"$checkPerformanceSP_perfLoadAverage\"" "SMO"
	sendSyslog "$functionName" "INFO" "checkPerformanceSP_perfAccLoad" "VALUE=\"$checkPerformanceSP_perfAccLoad\"" "SMO"
	sendSyslog "$functionName" "INFO" "checkPerformanceSP_perfInstanceLoad" "VALUE=\"$checkPerformanceSP_perfInstanceLoad\"" "SMO"
	sendSyslog "$functionName" "INFO" "checkPerformanceSP_perfSgm" "VALUE=\"$checkPerformanceSP_perfSgm\"" "SMO"

	rm -rf $TEMPFILE
fi


checkPerformanceSP_usermodeCoreQty=$(find /var/log/dump/usermode/*.core.gz -type f 2>&1 | grep -v "No such file" | wc -l)
if [[ $checkPerformanceSP_usermodeCoreQty -gt "0" ]]; then
	IFS=$'\n'
	for LINE in `ls -al /var/log/dump/usermode/*.core.gz | grep "core.gz"` ; do
		COREDAEMON=$(echo "$LINE" | awk '{print $9}' | awk -F "/" '{print $NF}' | awk -F "." '{print $1}')
		COREPID=$(echo "$LINE" | awk '{print $9}' | awk -F "/" '{print $NF}' | awk -F "." '{print $2}')
		COREFILE=$(echo "$LINE" | awk '{print $9}')
		COREDATE=$(stat -c %Y $COREFILE)
		CORESIZE=$(echo "$LINE" | awk '{print $5}')
		COREDATESINCE="$(( EPOCH - COREDATE ))"
		if [[ $COREDATESINCE -lt $SINCELASTRUN ]]; then
			checkPerformanceSP_warning="1"
			checkPerformanceSP_warningInfo="$checkPerformance_warningInfo [Core File Created: $COREFILE]"
			echo "checkPerformanceSP_usermodeCore FILE=$COREFILE DATE=$COREDATE SIZE=$CORESIZE" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Core File - FILE=$COREFILE DATE=$COREDATE SIZE=$CORESIZE DAEMON=$COREDAEMON PID=$COREPID SOFTWARE=$checkSelf_majorVer $checkSelf_minorVer" >>$HISTORYLOG
			IFS=$ORIGIFS
			sendSyslog "$functionName" "INFO" "checkPerformanceSP_usermodeCore" "FILE=\"$COREFILE\" DATE=\"$COREDATE\" SIZE=\"$CORESIZE\" DAEMON=\"$COREDAEMON\" PID=\"$COREPID\" SOFTWARE=\"$checkSelf_majorVer $checkSelf_minorVer\""
			IFS=$'\n'

		fi
	done
	IFS=$ORIGIFS
fi


checkPerformanceSP_kernelCrashQty=$(find /var/log/crash/* -type f 2>&1 | grep -v "No such file" | wc -l)
if [[ $checkPerformanceSP_kernelCrashQty -gt "0" ]]; then
	IFS=$'\n'
	for LINE in `find /var/log/crash/* -type f 2>&1 | grep -v "No such file"` ; do
		COREFILE=$(echo $LINE)
		COREDATE=$(stat -c %Y $COREFILE)
		CORESIZE=$(ls -al $LINE | awk '{print $5}')
		COREDATESINCE="$(( EPOCH - COREDATE ))"
		if [[ $COREDATESINCE -lt "3600" ]]; then
			echo "checkPerformanceSP_kernelCrash FILE=$COREFILE DATE=$COREDATE SIZE=$CORESIZE" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Kernel Crash File - FILE=$COREFILE DATE=$COREDATE SIZE=$CORESIZE SOFTWARE=$checkSelf_majorVer $checkSelf_minorVer" >>$HISTORYLOG
			checkPerformanceSP_problemInfo="$checkPerformanceSP_problemInfo [Kernel Crash Created: $COREFILE]"
			checkPerformanceSP_problem="1"
			IFS=$ORIGIFS
			sendSyslog "$functionName" "INFO" "checkPerformanceSP_kernelCrash" "FILE=\"$COREFILE\" DATE=\"$COREDATE\" SIZE=\"$CORESIZE\" DAEMON=\"NA\" PID=\"$NA\" SOFTWARE=\"$checkSelf_majorVer $checkSelf_minorVer\""
			IFS=$'\n'
		else
			echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Kernel Crash File - FILE=$COREFILE DATE=$COREDATE SIZE=$CORESIZE SOFTWARE=$checkSelf_majorVer $checkSelf_minorVer" >>$HISTORYLOG
		fi
	done
	IFS=$ORIGIFS
fi


checkPerformanceSP_tempfileCpstat="0"
COUNTER=0
while [[ $checkPerformanceSP_tempfileCpstat == "0" ]] && [[ $COUNTER -lt "3" ]]; do
	cpstat os -f multi_cpu | grep "|" | grep -v "User" | awk -F "|" '{print $2,$3,$4,$5,$6,$8}' | awk '{print $1","$2","$3","$4","$5","$6}' > $TEMPFILE_CPSTAT
	checkPerformanceSP_tempfileCpstat=$(cat $TEMPFILE_CPSTAT | wc -l)
	if [[ $checkPerformanceSP_tempfileCpstat == "0" ]]; then
		sleep 5
		echo "Rerunning TEMPFILE_CPSTAT because it was empty - $COUNTER" >> $RUNLOG 
		let COUNTER=COUNTER+1
	fi
done
checkPerformanceSP_cpuQty=$(cat $TEMPFILE_CPSTAT | wc -l)

checkPerformanceSP_cpuThreshold="$(( (checkPerformanceSP_cpuQty * 70) / 100 ))"

#CPUStats
IFS=$'\n'
for LINE in `cat $TEMPFILE_CPSTAT` ; do
	CPU=$(echo "$LINE" | awk -F "," '{print $1}')
	USER=$(echo "$LINE" | awk -F "," '{print $2}')
	SYSTEM=$(echo "$LINE" | awk -F "," '{print $3}')
	IDLE=$(echo "$LINE" | awk -F "," '{print $4}')
	USAGE=$(echo "$LINE" | awk -F "," '{print $5}')
	INTERRUPTS=$(echo "$LINE" | awk -F "," '{print $6}')
	#PURPOSE=$(snmp .1.3.6.1.4.1.2620.1.56.101.2.1.9.$CPU | tr -d [:space:])
	PURPOSE=$(stattestget 1.3.6.1.4.1.2620.1.56.101.2.1.9.$CPU)
	LINECOUNTERS="CPU=$CPU USER=$USER SYSTEM=$SYSTEM IDLE=$IDLE USAGE=$USAGE INTERRUPTS=$INTERRUPTS PURPOSE=$PURPOSE"
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformanceSP_cpuCounters - $LINECOUNTERS" >>$HISTORYLOG
	IFS=$ORIGIFS
	sendSyslog "$functionName" "INFO" "checkPerformanceSP_cpuCounters" "CPU=\"$CPU\" USER=\"$USER\" SYSTEM=\"$SYSTEM\" IDLE=\"$IDLE\" USAGE=\"$USAGE\" INTERRUPTS=\"$INTERRUPTS\" PURPOSE=\"$PURPOSE\""
	IFS=$'\n'
	if [[ $USAGE -gt "80" ]]; then
		echo "Logic - high cpu usage: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - High cpu usage for core - $LINECOUNTERS" >>$HISTORYLOG
		checkPerformanceSP_problemInfo="$checkPerformanceSP_problemInfo [CPU$LINE $CPU pct]"
	fi
done
IFS=$ORIGIFS

#Zombies
checkPerformanceSP_zombieQty="0"
IFS=$'\n'
for LINE in `ps aux | grep " Z " | grep -v "grep\|awk\|USER"`; do
	PID=$(echo "$LINE" | awk '{print $2}')
	DETAIL=$(echo "$LINE" | tr ' ' '_')
	STARTTIME=$(date --date="`ps -eo pid,lstart | awk -v p="$PID" '$1==p' | awk '{print $2,$3,$4,$5,$6}'`" +%s)
	STARTTIMESINCE=$(since_time_epoch $STARTTIME)
	IFS=$ORIGIFS
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformanceSP_zombie - $DETAIL TIMESINCE=$STARTTIMESINCE" >>$HISTORYLOG
	sendSyslog "$functionName" "INFO" "checkPerformanceSP_zombie" "DETAIL=\"$DETAIL\" TIMESINCE=\"$STARTTIMESINCE\""
	IFS=$'\n'
	let checkPerformanceSP_zombieQty=checkPerformanceSP_zombieQty+1
done
IFS=$ORIGIFS



IFS=$'\n'
for LINE in `cpwd_admin list | grep -v "START_TIME"` ; do
	APP=$(echo "$LINE" | awk '{print $1}')
	PID=$(echo "$LINE" | awk '{print $2}')
	STAT=$(echo "$LINE" | awk '{print $3}')
	START=$(echo "$LINE" | awk '{print $4}')
	START_TIME=$(echo "$LINE" | awk '{print $5"_"$6}')
	MON=$(echo "$LINE" | awk '{print $7}')
	if [[ $APP == "CPD" ]] && [[ $STAT != "E" ]]; then
		checkPerformanceSP_problem="1"
		checkPerformanceSP_problemInfo="$checkPerformanceSP_problemInfo [CPD not running per cpwd_admin list]"
	fi
	if [[ $APP == "RAD" ]] && [[ $STAT != "E" ]]; then
		checkPerformanceSP_problem="1"
		checkPerformanceSP_problemInfo="$checkPerformanceSP_problemInfo [RAD not running per cpwd_admin list]"
	fi	
	if [[ $SELF_HEAL_ENABLED -eq "1" ]]; then
		if [[ $APP == "CPD" ]] && [[ $STAT != "E" ]]; then
			FIX="CPD not running per cpwd_admin list"
			COMMAND="$CPDIR/bin/cpwd_admin start -name CPD -path "$CPDIR/bin/cpd" -command "cpd""
			BEFORE_FIX=$(cpwd_admin list | grep "CPD" | tr ' ' '_')
			if [[ $SELF_HEAL_CHRONIC -eq "1" ]]; then
				COMMAND_EXECUTION="bypassed due to SELF_HEAL_CHRONIC"
				checkPerformanceSP_warningInfo="$checkPerformanceSP_warningInfo [Self Heal Bypassed due to Chronic issue - cpwd_admin start CPD]"
			else
				COMMAND_EXECUTION=$($CPDIR/bin/cpwd_admin start -name CPD -path "$CPDIR/bin/cpd" -command "cpd" 2>&1)
				checkPerformanceSP_workingInfo="$checkPerformanceSP_workingInfo [Self Heal - cpwd_admin start CPD]"
			fi
			AFTER_FIX=$(cpwd_admin list | grep "CPD" | tr ' ' '_')
			COMMAND=$(echo $COMMAND | tr -d '"')
			
			

			echo "$HISTORYLOGPREAMBLE - $functionName - INFO - SELF_HEAL - FIX=$FIX COMMAND=$COMMAND COMMAND_EXECUTION=$COMMAND_EXECUTION BEFORE_FIX=$BEFORE_FIX AFTER_FIX=$AFTER_FIX" >>$HISTORYLOG
			IFS=$ORIGIFS
			sendSyslog "$functionName" "INFO" "SELF_HEAL" "FIX=\"$FIX\" COMMAND=\"$COMMAND\" BEFORE_FIX=\"$BEFORE_FIX\" AFTER_FIX=\"$AFTER_FIX\" COMMAND_EXECUTION=\"$COMMAND_EXECUTION\""
			IFS=$'\n'
			echo "$HISTORYLOGPREAMBLE - $functionName - INFO - SELF_HEAL - FIX=$FIX COMMAND=$COMMAND COMMAND_EXECUTION=$COMMAND_EXECUTION BEFORE_FIX=$BEFORE_FIX AFTER_FIX=$AFTER_FIX" >>$SELF_HEAL_LOG
		fi
	fi
	
	
	
	
	
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformanceSP_cpwdDetails - APP=$APP PID=$PID STAT=$STAT START=$START START_TIME=$START_TIME MON=$MON" >>$HISTORYLOG
	IFS=$ORIGIFS
	sendSyslog "$functionName" "INFO" "checkPerformanceSP_cpwdDetails" "APP=\"$APP\" PID=\"$PID\" STAT=\"$STAT\" START=\"$START\" START_TIME=\"$START_TIME\" MON=\"$MON\""
	IFS=$'\n'
done
IFS=$ORIGIFS


#Check for soft lockups
checkPerformanceSP_softlockQty="0"
# checkPerformanceSP_softlockQty0=$(echo $LASTRUNMESSAGES | grep "BUG: soft lockup" | wc -l)
# if [[ $checkPerformanceSP_softlockQty0 -gt "0" ]]; then
	# while IFS= read -r LINE; do
		# if [[ "$LINE" == *"BUG: soft lockup"* ]]; then
			# checkPerformanceSP_softlockQty=$((checkPerformanceSP_softlockQty + 1))
		# fi
	# done <<< "$LASTRUNMESSAGES"
# fi


#LOG OUTPUTS
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformanceSP_load - $checkPerformanceSP_load" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformanceSP_diskRootFree - $checkPerformanceSP_diskRootFree" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformanceSP_diskVarLogFree - $checkPerformanceSP_diskVarLogFree" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformanceSP_diskFileSystemType - $checkPerformanceSP_diskFileSystemType" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformanceSP_memUsed - $checkPerformanceSP_memUsed" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformanceSP_memUsedPercentage - $checkPerformanceSP_memUsedPercentage" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformanceSP_memSwapUsed - $checkPerformanceSP_memSwapUsed" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformanceSP_memAvailable - $checkPerformanceSP_memAvailable" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformanceSP_zombieQty - $checkPerformanceSP_zombieQty" >>$HISTORYLOG
# if [[ $checkSelf_bladeUrlf == "1" ]]; then
	# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformanceSP_radErrorLogQty - $checkPerformanceSP_radErrorLogQty" >>$HISTORYLOG
	# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformanceSP_radErrorLogNames - $checkPerformanceSP_radErrorLogNames" >>$HISTORYLOG
# fi
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformanceSP_softlockQty - $checkPerformanceSP_softlockQty" >>$HISTORYLOG


#RUN LOGIC
if [[ $checkPerformanceSP_load0 -gt $checkPerformanceSP_cpuThreshold ]]; then
		echo "Logic - 5 min load above 70 pct: FAIL" >>$RUNLOG
        echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - checkPerformanceSP_load - $checkPerformanceSP_load0" >>$HISTORYLOG
        checkPerformance_warning="1"
		checkPerformance_warningInfo="$checkPerformance_warningInfo [Load Average: $checkPerformanceSP_load0 (above 70 pct)]"
else
        echo "Logic - 5 min load above 70 pct: PASS" >>$RUNLOG
        echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkPerformanceSP_load - $checkPerformanceSP_load0" >>$HISTORYLOG
fi





IFS=$'\n'
for LINE in `ps aux | grep -v "\[" | grep -v "routed -N" | grep -v "COMMAND\|ifiPython3\|dlpu\|wstlsd\|udevd\|kauditd\|kjournald\|ksnapd\|usb-storage\|kpsmoused\|kswapd\|pdflush\|kseriod\|khubd\|klogd\|kacpid\|khelper\|kthread\|init\|watchdog\|scsi\|migration\|ksoftirqd\|kblockd\|cqueue\|ata\|aio\|kworker\|snd\|xfs\|mlx\|rcu\|lru\|netns\|slab_mcd\|bioset\|md\|edac-poller\|rpciod\|ksmd\|kmpath\|nfsiod\|kaluad\|deferwq\|writeback\|kintegrityd\|cciss_scan\|i40e\|kdmflush\|khugepaged\|crypto\|kthrotld\|dm_bufio_cache\|irq\|kdev\|xprt\|agetty\|python3.7\|httpd2\|grep\|sleep\|sshd\|bash\|ps\|syslogd\|sh\|acpid\|auditd\|awk\|crond\|csh\|frontstage" | awk '{print $2" "$3" "$6" "$11}'` ; do
	PID=$(echo "$LINE" | awk '{print $1}')
	CPU0=$(cat $TEMPFILE2 | awk -v var="$PID" '$1==var' | awk '{print $9}' | tr '\n' ' ')
	CPU=$(average_values 3 "$CPU0")
	CPUID=$(ps -o pid,cpuid --pid $PID | tail -1 | awk '{print $2}')
	MEM0=$(echo "$LINE" | awk '{print $3}')
	MEM="$(( MEM0 / 1000 ))"
	CMD=$(echo "$LINE" | awk '{print $4}' | awk -F/ '{print $NF}' | tr -d '[]')
	STARTTIME=$(date --date="`ps -eo pid,lstart | awk -v p="$PID" '$1==p' | awk '{print $2,$3,$4,$5,$6}'`" +%s)
	STARTTIMESINCE=$(since_time_epoch $STARTTIME)
	LINECOUNTERS="PID=$PID CPU=$CPU MEM=$MEM CMD=$CMD TIME=$STARTTIME CPUID=$CPUID"

	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformanceSP_countersDetail - $LINECOUNTERS" >>$HISTORYLOG
	IFS=$ORIGIFS
	sendSyslog "$functionName" "INFO" "checkPerformanceSP_countersDetail" "PID=\"$PID\" CPU=\"$CPU\" MEM=\"$MEM\" CMD=\"$CMD\" TIME=\"$STARTTIME\" CPUID=\"$CPUID\""
	IFS=$'\n'


	
	if [[ $CPU -gt 90 ]] && [[ $STARTTIMESINCE -lt "900" ]]; then
		echo "Logic - high cpu: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - High CPU usage for single PID (total run time less than 900 seconds) - PID=$PID CPU=$CPU CMD=$CMD TIME=$STARTTIME" >>$HISTORYLOG
		checkPerformanceSP_countersProblemInfo="$checkPerformanceSP_countersProblemInfo $CMD(PID=$PID/CPU=$CPU/TIME=$STARTTIME)"
		checkPerformanceSP_problemInfo="$checkPerformanceSP_problemInfo [$CMD running $CPU pct (total run time less than 900 seconds)]"
	elif [[ $CPU -gt 90 ]] && [[ $CMD == "rad" || $CMD == "fwk" ]]; then
		echo "Logic - high cpu: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - High CPU usage for single PID - PID=$PID CPU=$CPU CMD=$CMD TIME=$STARTTIME" >>$HISTORYLOG
		#checkPerformanceSP_countersProblemInfo="$checkPerformanceSP_countersProblemInfo $CMD(PID=$PID/CPU=$CPU/TIME=$STARTTIME)"
		checkPerformanceSP_warningInfo="$checkPerformanceSP_warningInfo [System process $CMD running $CPU pct]"
	elif [[ $CPU -gt 90 ]] && [[ $CMD == "fw6" || $CMD == "rad" || $CMD == "fwd" || $CMD == "monitord" || $CMD == "fwk" || $CMD =~ "fw_worker" || $CMD == "cphaprob" || $CMD == "confd" || $CMD == "asg_send_alert" || $CMD == "ssh" || $CMD == "md5sum" || $CMD == "cpd" || $CMD == "snmpd" ]]; then
		echo "Logic - high cpu: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - High CPU usage for single PID - PID=$PID CPU=$CPU CMD=$CMD TIME=$STARTTIME" >>$HISTORYLOG
		checkPerformanceSP_countersProblemInfo="$checkPerformanceSP_countersProblemInfo $CMD(PID=$PID/CPU=$CPU/TIME=$STARTTIME)"
		checkPerformanceSP_problemInfo="$checkPerformanceSP_problemInfo [System process $CMD running $CPU pct]"
	elif [[ $CPU -gt 90 ]] && [[ $STARTTIMESINCE -ge "900" ]]; then
		echo "Logic - high cpu: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - High CPU usage for single PID - PID=$PID CPU=$CPU CMD=$CMD TIME=$STARTTIME" >>$HISTORYLOG
		checkPerformanceSP_countersProblemInfo="$checkPerformanceSP_countersProblemInfo $CMD(PID=$PID/CPU=$CPU/TIME=$STARTTIME)"
		checkPerformanceSP_counters="1"
		checkPerformanceSP_problemInfo="$checkPerformanceSP_problemInfo [$CMD running $CPU pct]"
	fi
	

	if [[ $MEM -gt "3500" ]] && [[ $MEM -lt "3700" ]] && [[ $CMD == "fwk" || $CMD == "fwk_forker" ]]; then
		echo "Logic - high mem: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - High memory usage for single PID - PID=$PID MEM=$MEM CMD=$CMD TIME=$STARTTIME" >>$HISTORYLOG
		checkPerformanceSP_countersProblemInfo="$checkPerformanceSP_countersProblemInfo $CMD(PID=$PID/MEM=$MEM/TIME=$STARTTIME)"
		checkPerformanceSP_problemInfo="$checkPerformanceSP_problemInfo [System Process $CMD using $MEM MB RAM]"
	elif [[ $MEM -gt "3500" ]] && [[ $MEM -lt "3700" ]]; then
		echo "Logic - high mem: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - High memory usage for single PID - PID=$PID MEM=$MEM CMD=$CMD TIME=$STARTTIME" >>$HISTORYLOG
		checkPerformanceSP_countersProblemInfo="$checkPerformanceSP_countersProblemInfo $CMD(PID=$PID/MEM=$MEM/TIME=$STARTTIME)"
		checkPerformanceSP_warningCounters="1"
		checkPerformanceSP_warningInfo="$checkPerformanceSP_problemInfo [$CMD using $MEM MB RAM]"
	elif [[ $MEM -ge "3700" ]] && [[ $CMD != "fwk" ]]; then
		echo "Logic - high mem: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - High memory usage for single PID - PID=$PID MEM=$MEM CMD=$CMD TIME=$STARTTIME" >>$HISTORYLOG
		checkPerformanceSP_countersProblemInfo="$checkPerformanceSP_countersProblemInfo $CMD(PID=$PID/MEM=$MEM/TIME=$STARTTIME)"
		checkPerformanceSP_counters="1"
		checkPerformanceSP_problemInfo="$checkPerformanceSP_problemInfo [$CMD using $MEM MB RAM]"
	fi
		
done

if [[ $checkPerformanceSP_warningCounters -gt "0" ]] && [[ $checkPerformanceSP_counters -eq "0" ]]; then
	echo "Logic - performance counters FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - Performance Counters - $checkPerformanceSP_countersProblemInfo" >>$HISTORYLOG
	checkPerformanceSP_warning="1"
fi

if [[ $checkPerformanceSP_counters -gt "0" ]]; then
	echo "Logic - performance counters FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Performance Counters - $checkPerformanceSP_countersProblemInfo" >>$HISTORYLOG
	checkPerformanceSP_problem="1"
else
	echo "Logic - performance counters: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Performance Counters - $checkPerformanceSP_countersProblemInfo" >>$HISTORYLOG
fi

if [[ $checkPerformanceSP_diskRootFree -lt "15" ]] && [[ $checkPerformanceSP_diskRootFree != "" ]]; then
	echo "Logic - disk root free: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Disk Root Free - $checkPerformanceSP_diskRootFree" >>$HISTORYLOG
	checkPerformanceSP_problem="1"
	checkPerformanceSP_problemInfo="$checkPerformanceSP_problemInfo [Disk / free space $checkPerformanceSP_diskRootFree pct]"
else
	echo "Logic - disk root free: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Disk Root Free - $checkPerformanceSP_diskRootFree" >>$HISTORYLOG
fi

if [[ $checkPerformanceSP_diskVarLogFree -lt "15" ]] && [[ $checkPerformanceSP_diskVarLogFree != "" ]]; then
	echo "Logic - disk var log free: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Disk Var Log Free - $checkPerformanceSP_diskVarLogFree" >>$HISTORYLOG
	checkPerformanceSP_problem="1"
	checkPerformanceSP_problemInfo="$checkPerformanceSP_problemInfo [Disk /var/log free space $checkPerformanceSP_diskVarLogFree pct]"
else
	echo "Logic - disk var log free: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Disk Var Log Free - $checkPerformanceSP_diskVarLogFree" >>$HISTORYLOG
fi

if [[ $checkPerformanceSP_memUsedPercentage -gt "75" ]]; then
	echo "Logic - high usage: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - High usage - $checkPerformanceSP_memUsedPercentage" >>$HISTORYLOG
	checkPerformanceSP_problem="1"
	checkPerformanceSP_problemInfo="$checkPerformanceSP_problemInfo [High Total Memory Utilized $checkPerformanceSP_memUsedPercentage pct]"
else
	echo "Logic - high usage: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - High usage - $checkPerformanceSP_memUsedPercentage" >>$HISTORYLOG
fi
# if [[ $checkSelf_bladeUrlf == "1" ]] && [[ $checkPerformanceSP_radErrorLogQty -gt "0" ]]; then
	# echo "Logic - rad errors: FAIL" >>$RUNLOG
	# echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkPerformanceSP_radErrorLogQty - $checkPerformanceSP_radErrorLogQty" >>$HISTORYLOG
	# #checkPerformanceSP_warning="1"
	# checkPerformanceSP_workingInfo="$checkPerformanceSP_workingInfo [$checkPerformanceSP_radErrorLogQty RAD Error Logs Created]"
# fi

if [[ $checkPerformanceSP_zombieQty -gt "25" ]]; then
	echo "Logic - zombie processes: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - checkPerformanceSP_zombieQty - $checkPerformanceSP_zombieQty" >>$HISTORYLOG
	checkPerformanceSP_warning="1"
	checkPerformanceSP_warningInfo="$checkPerformanceSP_warningInfo [$checkPerformanceSP_zombieQty Zombie Processes]"
fi

if [[ $checkPerformanceSP_softlockQty -gt "0" ]]; then
	echo "Logic - soft lockup: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - checkPerformanceSP_softlockQty - $checkPerformanceSP_softlockQty" >>$HISTORYLOG
	checkPerformanceSP_problem="1"
	checkPerformanceSP_problemInfo="$checkPerformanceSP_warningInfo [$checkPerformanceSP_softlockQty Soft Lockup Event]"
fi



IFS=$ORIGIFS



#SYSLOG
if [[ $checkPerformanceSP_problem == "1" ]]; then
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "PROBLEM" "checkPerformanceSP_problemInfo" "VALUE=\"$checkPerformanceSP_problemInfo $checkPerformanceSP_warningInfo $checkPerformanceSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "PROBLEM" "checkPerformanceSP_problemInfo" "VALUE=\"$checkPerformanceSP_problemInfo $checkPerformanceSP_warningInfo $checkPerformanceSP_workingInfo\""
	fi
elif [[ $checkPerformanceSP_warning == "1" ]]; then
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "WARNING" "checkPerformanceSP_problemInfo" "VALUE=\"$checkPerformanceSP_warningInfo $checkPerformanceSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "WARNING" "checkPerformanceSP_problemInfo" "VALUE=\"$checkPerformanceSP_warningInfo $checkPerformanceSP_workingInfo\""
	fi
else
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "WORKING" "checkPerformanceSP_problemInfo" "VALUE=\"$checkPerformanceSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "WORKING" "checkPerformanceSP_problemInfo" "VALUE=\"$checkPerformanceSP_workingInfo\""
	fi
fi



sendSyslog "$functionName" "INFO" "checkPerformanceSP_load" "VALUE=\"$checkPerformanceSP_load\""
sendSyslog "$functionName" "INFO" "checkPerformanceSP_load1" "VALUE=\"$checkPerformanceSP_load1\""
sendSyslog "$functionName" "INFO" "checkPerformanceSP_load5" "VALUE=\"$checkPerformanceSP_load5\""
sendSyslog "$functionName" "INFO" "checkPerformanceSP_load15" "VALUE=\"$checkPerformanceSP_load15\""
sendSyslog "$functionName" "INFO" "checkPerformanceSP_diskFileSystemType" "VALUE=\"$checkPerformanceSP_diskFileSystemType\""
sendSyslog "$functionName" "INFO" "checkPerformanceSP_diskRootFree" "VALUE=\"$checkPerformanceSP_diskRootFree\""
sendSyslog "$functionName" "INFO" "checkPerformanceSP_diskVarLogFree" "VALUE=\"$checkPerformanceSP_diskVarLogFree\""
sendSyslog "$functionName" "INFO" "checkPerformanceSP_memUsed" "VALUE=\"$checkPerformanceSP_memUsed\""
sendSyslog "$functionName" "INFO" "checkPerformanceSP_memUsedPercentage" "VALUE=\"$checkPerformanceSP_memUsedPercentage\""
sendSyslog "$functionName" "INFO" "checkPerformanceSP_memSwapUsed" "VALUE=\"$checkPerformanceSP_memSwapUsed\""
sendSyslog "$functionName" "INFO" "checkPerformanceSP_memAvailable" "VALUE=\"$checkPerformanceSP_memAvailable\""
# if [[ $checkSelf_bladeUrlf == "1" ]]; then
	# sendSyslog "$functionName" "INFO" "checkPerformanceSP_radErrorLogQty" "VALUE=\"$checkPerformanceSP_radErrorLogQty\""
	# sendSyslog "$functionName" "INFO" "checkPerformanceSP_radErrorLogNames" "VALUE=\"$checkPerformanceSP_radErrorLogNames\""
# fi
sendSyslog "$functionName" "INFO" "checkPerformanceSP_softlockQty" "VALUE=\"$checkPerformanceSP_softlockQty\""

#CLEANUP
rm -f $TEMPFILE2 $TEMPFILE_CPSTAT $TEMPFILE_cpkstats $TEMPFILE_cpkstats0 > /dev/null 2>&1




checkPerformanceSP_fEnd=$(date "+%s")
checkPerformanceSP_fRunTime=$(( checkPerformanceSP_fEnd - checkPerformanceSP_fStart ))
echo "checkPerformanceSP_fRunTime $checkPerformanceSP_fRunTime" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformanceSP_warning - $checkPerformanceSP_warning" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformanceSP_problem - $checkPerformanceSP_problem" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformanceSP_problemInfo - $checkPerformanceSP_problemInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformanceSP_warningInfo - $checkPerformanceSP_warningInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformanceSP_workingInfo - $checkPerformanceSP_workingInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkPerformanceSP_runTime - $checkPerformanceSP_fRunTime" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkPerformanceSP_warning" "VALUE=\"$checkPerformanceSP_warning\""
sendSyslog "$functionName" "INFO" "checkPerformanceSP_problem" "VALUE=\"$checkPerformanceSP_problem\""
sendSyslog "$functionName" "INFO" "checkPerformanceSP_problemInfo" "VALUE=\"$checkPerformanceSP_problemInfo\""
sendSyslog "$functionName" "INFO" "checkPerformanceSP_warningInfo" "VALUE=\"$checkPerformanceSP_warningInfo\""
sendSyslog "$functionName" "INFO" "checkPerformanceSP_workingInfo" "VALUE=\"$checkPerformanceSP_workingInfo\""
sendSyslog "$functionName" "INFO" "checkPerformanceSP_runTime" "VALUE=\"$checkPerformanceSP_fRunTime\""



#SUMMARY
if [[ $checkPerformanceSP_problem == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - checkPerformanceSP - SUMMARY - PROBLEM - $checkPerformanceSP_problemInfo $checkPerformanceSP_warningInfo $checkPerformanceSP_workingInfo" >>$HISTORYLOG
elif [[ $checkPerformanceSP_warning == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - checkPerformanceSP - SUMMARY - WARNING - $checkPerformanceSP_warningInfo $checkPerformanceSP_workingInfo" >>$HISTORYLOG
else
	echo "$HISTORYLOGPREAMBLE - checkPerformanceSP - SUMMARY - WORKING - $checkPerformanceSP_workingInfo" >>$HISTORYLOG
fi
echo "checkPerformanceSP_warning $checkPerformanceSP_warning" >>$RUNLOG
echo "checkPerformanceSP_problem $checkPerformanceSP_problem" >>$RUNLOG
echo "END==checkPerformanceSP" >>$RUNLOG
}

###################################################################################################
checkRouting() {
echo "START==checkRouting" >>$RUNLOG

#DEFAULTS
checkRouting_fStart=$(date "+%s")
functionName=${FUNCNAME[0]}
checkRouting_warning="0"
checkRouting_problem="0"
checkRouting_workingInfo=""
checkRouting_warningInfo=""
checkRouting_problemInfo=""
TEMPFILELOCAL="$TEMPDIR/$SCRIPT.snmpwalk.routing.local.$EPOCH"
TEMPFILEREMOTE="$TEMPDIR/$SCRIPT.snmpwalk.routing.remote.$EPOCH"
TEMPFILE_SHOWCONFIGROUTE="$TEMPDIR/$SCRIPT.$EPOCH.showconfigroute"
TEMPFILE_SHOWCONFIGROUTE6="$TEMPDIR/$SCRIPT.$EPOCH.showconfigroute6"
TEMPFILE_NETSTAT="$TEMPDIR/$SCRIPT.$EPOCH.netstat"
if [[ $MDPSENABLED == "2" ]]; then
	dplane > /dev/null 2>&1
fi

#COLLECT OUTPUTS
checkRouting_defaultGateway=$(cat /config/active | grep "routed:instance:default:static:default:gateway:address" | awk -F ":" '{print $NF}' | awk '{print $1}' | head -1)
checkRouting_defaultGatewayInterface=$(netstat -rn | grep -w 0.0.0.0 | grep "UG" | awk '{print $NF}' | uniq)
checkRouting_defaultGatewayQty=$(cat /config/active | grep "routed:instance:default:static:default:gateway:address" | awk -F ":" '{print $NF}' | awk '{print $1}' | wc -l)
checkRouting_bgpPeerQty=$(cat /config/active | grep routed:instance:default:bgp:group_type:external-peer | awk -F ":" '{print $12}' | grep "t" | sort -n | uniq | wc -l)

if [[ $checkRouting_defaultGatewayQty -gt "1" ]]; then
	checkRouting_defaultGatewayMac=$(/sbin/arp -an | grep " ($checkRouting_defaultGateway) " | head -1 | awk '{print $4}')
	echo "Multiple default routes: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Multiple Default Routes -" >>$HISTORYLOG
	checkRouting_problem="1"
	checkRouting_problemInfo="$checkRouting_problemInfo [Multiple default routes configured]"
elif [[ $checkRouting_defaultGatewayQty -lt "1" ]]; then
	echo "No default routes: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - No Default Route -" >>$HISTORYLOG
	checkRouting_problem="1"
	checkRouting_problemInfo="$checkRouting_problemInfo [No default route configured]"
else

	if [[ $MDPSENABLED == "2" ]]; then
		dplane > /dev/null 2>&1
		checkRouting_defaultGatewayPing=$(ping -c 1 -w 1 $checkRouting_defaultGateway 2>&1 | grep "packets transmitted" | awk '{print $4}')
		checkRouting_defaultGatewayMac=$(/sbin/arp -an | grep "$checkRouting_defaultGateway" | awk '{print $4}')
		mplane > /dev/null 2>&1
	else
		checkRouting_defaultGatewayPing=$(ping -c 1 -w 1 $checkRouting_defaultGateway 2>&1 | grep "packets transmitted" | awk '{print $4}')
		checkRouting_defaultGatewayMac=$(/sbin/arp -an | grep "$checkRouting_defaultGateway" | awk '{print $4}')
	fi
	
	if [[ $checkSelf_ipv6Enabled == "1" ]] && [[ $checkSelf_ipv6Configured != "0" ]] && [[ $IDSENABLED == "0" ]]; then
		if [[ $MDPSENABLED == "2" ]]; then
			dplane > /dev/null 2>&1
		fi
		checkRouting_defaultGatewayIpv6=$(/sbin/ping6  `cat /config/active | grep "routed:instance:default:static:default6:gateway:address" | grep -v "preference" | awk -F ":" '{print $NF}' | awk '{print $1}' | head -1 | sed 's/.\{4\}/&\:/g' | rev | cut -c2- | rev` -c 1 | grep "64 bytes" | awk '{print $4}' | rev | cut -c2- | rev)
		checkRouting_defaultGatewayIpv6Interface=$(ip -6 route show | grep "default" | awk '{print $5}' | uniq)
		checkRouting_defaultGatewayIpv6Qty=$(cat /config/active | grep "routed:instance:default:static:default6:gateway:address" | grep -v "preference" | awk -F ":" '{print $NF}' | awk '{print $1}' | wc -l)
		if [[ $checkRouting_defaultGatewayIpv6Qty -gt "1" ]]; then
			if [[ $MDPSENABLED == "2" ]]; then
				dplane > /dev/null 2>&1
				checkRouting_defaultGatewayMacIpv6=$(/sbin/ip -6 neigh show | grep "$checkRouting_defaultGatewayIpv6" | awk '{print $5}')
				mplane /dev/null 2>&1
			else
				checkRouting_defaultGatewayMacIpv6=$(/sbin/ip -6 neigh show | grep "$checkRouting_defaultGatewayIpv6" | awk '{print $5}')
			fi
			echo "Multiple IPv6 default routes: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Multiple IPv6 Default Routes -" >>$HISTORYLOG
			checkRouting_problem="1"
			checkRouting_problemInfo="$checkRouting_problemInfo [Multiple IPv6 default routes configured]"
		elif [[ $checkRouting_defaultGatewayIpv6Qty -lt "1" ]]; then
			echo "No IPv6 default routes: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - INFO - No IPv6 Default Route -" >>$HISTORYLOG
			checkRouting_problem="1"
			checkRouting_problemInfo="$checkRouting_problemInfo [No IPv6 default route configured]"
		else
			if [[ $MDPSENABLED == "2" ]]; then
				dplane > /dev/null 2>&1
				ping6 -c 1 -w 1 $checkRouting_defaultGatewayIpv6 > /dev/null 2>&1
				checkRouting_defaultGatewayMacIpv6=$(/sbin/ip -6 neigh show | grep "$checkRouting_defaultGatewayIpv6" | awk '{print $5}')
				mplane > /dev/null 2>&1
			else
				ping6 -c 1 -w 1 $checkRouting_defaultGatewayIpv6 > /dev/null 2>&1
				checkRouting_defaultGatewayMacIpv6=$(/sbin/ip -6 neigh show | grep "$checkRouting_defaultGatewayIpv6" | awk '{print $5}')
			fi
		fi
		checkRouting_staticConfiguredIpv6=$(cat /config/active | grep "routed:instance:default:static" | grep "v6addr" | grep "gateway:address" | grep -v "preference" | wc -l)
		if [[ $MDPSENABLED == "2" ]]; then
			dplane > /dev/null 2>&1
			checkRouting_staticActiveIpv6=$(/sbin/ip -6 route show | grep via | wc -l)
			mplane > /dev/null 2>&1
		else
			checkRouting_staticActiveIpv6=$(/sbin/ip -6 route show | grep via | wc -l)
		fi
	fi
fi

if [[ $MDPSENABLED == "2" ]]; then
	checkRouting_staticConfigured=$(cat /config/active | grep "gateway:address" | grep -v "v6addr" | wc -l)
	dplane > /dev/null 2>&1
	checkRouting_staticActiveDplane=$(netstat -rn | grep "U" | grep -v "U " | wc -l)
	mplane > /dev/null 2>&1
	checkRouting_staticActiveMplane=$(netstat -rn | grep "U" | grep -v "U " | wc -l)
	checkRouting_staticActive=$(( checkRouting_staticActiveDplane + checkRouting_staticActiveMplane ))
else
	checkRouting_staticConfigured=$(cat /config/active | grep "routed:instance:default:static" | grep "gateway:address" | grep -v "v6addr" | wc -l)
	checkRouting_staticActive=$(netstat -rn | grep "U" | grep -v "U " | wc -l)
fi





###NEW ROUTE DETAILS OUTPUT

### DOES NOT INCLUDE MDPS ROUTING SEPARATION PROPERLY
if [[ $checkRouting_bgpPeerQty -eq "0" ]]; then
	if [[ $MDPSENABLED == "2" ]]; then
		dplane > /dev/null 2>&1
	fi
	#IPV4 STATIC ROUTES
	cat /config/active | grep "instance:default:static:network" | grep gateway:address | grep -v "v6addr" | grep " t" | awk -F ":" '{print $6,$8,$11}' > $TEMPFILE_SHOWCONFIGROUTE
	cat /config/active | grep "instance:default:static:default" | grep gateway:address | grep -v "v6addr" | grep " t" | awk -F ":" '{print $5,$8}' >> $TEMPFILE_SHOWCONFIGROUTE
	IFS=$'\n'
	for LINE in $(cat $TEMPFILE_SHOWCONFIGROUTE); do
		TYPE="STATIC"
		AGE="n/a"
		COST="n/a"
		NETWORK=$(echo "$LINE" | awk '{print $1}')
		if [[ $NETWORK == "default" ]]; then
			NETWORK="0.0.0.0"
			CIDR="0"
			GATEWAY=$(echo "$LINE" | awk '{print $2}')
			INTERFACE=$(netstat -rn | grep -w $NETWORK | grep "UG" | awk '{print $NF}' | uniq)
			if [[ ! $INTERFACE ]]; then
				INTERFACE="n/a"
			fi
			ZONE="EXTERNAL"
		else
			CIDR=$(echo "$LINE" | awk '{print $2}')
			GATEWAY=$(echo "$LINE" | awk '{print $3}')
			INTERFACE=$(netstat -rn | grep -w $NETWORK | awk '{print $NF}' | uniq)
			
			if [[ $checkSelf_hwtype == "VM" ]]; then
				if [[ $INTERFACE == "eth0" ]]; then
					ZONE="MGMT"
				elif [[ $INTERFACE == "eth3" ]]; then
					ZONE="SYNC"
				elif [[ $INTERFACE == "" ]]; then
					ZONE="n/a"
				# elif [[ $INTERFACE =~ "CIN" ]]; then
					# ZONE="CHASSIS_INTERNAL"
				elif [[ $INTERFACE =~ "lo" ]]; then
					ZONE="LOOPBACK"
				elif [[ $INTERFACE == $checkRouting_defaultGatewayInterface ]]; then
					ZONE="EXTERNAL"
				else
					ZONE="INTERNAL"
				fi		
			else
				if [[ $INTERFACE == "Mgmt" ]] || [[ $INTERFACE == "magg0" ]]; then
					ZONE="MGMT"
				elif [[ $INTERFACE == "Sync" ]]; then
					ZONE="SYNC"
				elif [[ $INTERFACE == "" ]]; then
					ZONE="n/a"
				elif [[ $INTERFACE =~ "lo" ]]; then
					ZONE="LOOPBACK"
				elif [[ $INTERFACE == $checkRouting_defaultGatewayInterface ]]; then
					ZONE="EXTERNAL"
				else
					ZONE="INTERNAL"
				fi
			fi
		fi
		STATE="n/a"
		
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkRouting_routeDetails - NETWORK=$NETWORK CIDR=$CIDR GATEWAY=$GATEWAY INTERFACE=$INTERFACE ZONE=$ZONE TYPE=$TYPE STATE=$STATE AGE=$AGE COST=$COST" >>$HISTORYLOG
		IFS=$ORIGIFS
		sendSyslog "$functionName" "INFO" "checkRouting_routeDetails" "NETWORK=\"$NETWORK\" CIDR=\"$CIDR\" GATEWAY=\"$GATEWAY\" INTERFACE=\"$INTERFACE\" ZONE=\"$ZONE\" TYPE=\"$TYPE\" STATE=\"$STATE\" AGE=\"$AGE\" COST=\"$COST\""
		IFS=$'\n'

	done
	IFS=$ORIGIFS

	#IPV6 STATIC ROUTES
	if [[ $checkSelf_ipv6Enabled == "1" ]] && [[ $checkSelf_ipv6Configured == "1" ]]; then

		cat /config/active | grep "static:network" | grep gateway:address | grep "v6addr" | grep " t" | awk -F ":" '{print $7,$9,$13}' > $TEMPFILE_SHOWCONFIGROUTE6
		cat /config/active | grep "static:default6" | grep gateway:address | grep "v6addr" | grep " t" | awk -F ":" '{print $5,$9}' >> $TEMPFILE_SHOWCONFIGROUTE6
		IFS=$'\n'
		for LINE in $(cat $TEMPFILE_SHOWCONFIGROUTE6); do
			NETWORK=$(echo "$LINE" | awk '{print $1}')
			if [[ $NETWORK == "default6" ]]; then
				NETWORK="::"
				CIDR="0"
				GATEWAY=$(/sbin/ip -6 route show | grep "default" | awk '{print $3}' | sort | uniq)
				INTERFACE=$(/sbin/ip -6 route show | grep "default" | awk '{print $5}' | sort | uniq)
				if [[ ! $INTERFACE ]]; then
					INTERFACE="n/a"
				fi
				ZONE="EXTERNAL"
			else
				CIDR=$(echo "$LINE" | awk '{print $2}')
				if [[ $CIDR -le "64" ]]; then
					NETWORK=$(echo "$LINE" | awk '{print $1}' | sed 's/..../&:/g; s/:$//' | sed -e 's/:0*/:/g' | cut -d':' -f1-6 | sed 's/::\+/::/g')
				fi
				GATEWAY=$(compressIpv6 `echo "$LINE" | awk '{print $3}'`)
				INTERFACE=$(/sbin/ip -6 route show | grep -w $NETWORK | awk '{print $5}' | sort | uniq)
				
				if [[ $checkSelf_hwtype == "VM" ]]; then
					if [[ $INTERFACE == "eth0" ]]; then
						ZONE="MGMT"
					elif [[ $INTERFACE == "eth3" ]]; then
						ZONE="SYNC"
					elif [[ $INTERFACE == "" ]]; then
						ZONE="n/a"
					elif [[ $INTERFACE =~ "lo" ]]; then
						ZONE="LOOPBACK"
					elif [[ $INTERFACE == $checkRouting_defaultGatewayIpv6Interface ]]; then
						ZONE="EXTERNAL"
					else
						ZONE="INTERNAL"
					fi		
				else
					if [[ $INTERFACE == "Mgmt" ]] || [[ $INTERFACE == "magg0" ]]; then
						ZONE="MGMT"
					elif [[ $INTERFACE == "Sync" ]]; then
						ZONE="SYNC"
					elif [[ $INTERFACE == "" ]]; then
						ZONE="n/a"
					# elif [[ $INTERFACE =~ "CIN" ]]; then
						# ZONE="CHASSIS_INTERNAL"
					elif [[ $INTERFACE =~ "lo" ]]; then
						ZONE="LOOPBACK"
					elif [[ $INTERFACE == $checkRouting_defaultGatewayIpv6Interface ]]; then
						ZONE="EXTERNAL"
					else
						ZONE="INTERNAL"
					fi
				fi
			fi
			STATE="n/a"
		
			echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkRouting_routeDetails - NETWORK=$NETWORK CIDR=$CIDR GATEWAY=$GATEWAY INTERFACE=$INTERFACE ZONE=$ZONE TYPE=$TYPE STATE=$STATE AGE=$AGE COST=$COST" >>$HISTORYLOG
			IFS=$ORIGIFS
			sendSyslog "$functionName" "INFO" "checkRouting_routeDetails" "NETWORK=\"$NETWORK\" CIDR=\"$CIDR\" GATEWAY=\"$GATEWAY\" INTERFACE=\"$INTERFACE\" ZONE=\"$ZONE\" TYPE=\"$TYPE\" STATE=\"$STATE\" AGE=\"$AGE\" COST=\"$COST\""
			IFS=$'\n'

		done
		IFS=$ORIGIFS

	fi

else

	clish -c "show route all" | grep -v "CLINFR0771" | tail -n +5 > $TEMPFILE_SHOWROUTE
	
	IFS=$'\n'
	for LINE in $(cat $TEMPFILE_SHOWROUTE | grep "B\|S\|A\|C"); do
		TYPE=$(echo "$LINE" | awk '{print $1}' | tr -d '[:space:]')
		if [[ $TYPE == "B" ]]; then
			TYPE="BGP"
		elif [[ $TYPE == "S" ]]; then
			TYPE="STATIC"
		elif [[ $TYPE == "A" ]]; then
			TYPE="AGGREGATE"
		elif [[ $TYPE == "C" ]]; then
			TYPE="CONNECTED"
		fi
		
		if [[ $TYPE == "BGP" ]]; then
			IS_INACTIVE=$(echo "$LINE" | grep " i " | wc -l)
			if [[ $IS_INACTIVE -eq "1" ]]; then
				STATE="INACTIVE"
				NETWORK=$(echo "$LINE" | awk '{print $3}' | awk -F "/" '{print $1}')
				GATEWAY=$(echo "$LINE" | awk '{print $5}' | tr -d ',')
				INTERFACE=$(echo "$LINE" | awk '{print $6}' | tr -d ',')
				COST=$(echo "$LINE" | awk '{print $8}' | tr -d ',')
				AGE=$(echo "$LINE" | awk '{print $10}')

				if [[ $NETWORK == "0.0.0.0" ]]; then
					CIDR="0"
					if [[ ! $INTERFACE ]]; then
						INTERFACE="n/a"
					fi
					ZONE="EXTERNAL"
				else
					CIDR=$(echo "$LINE" | awk '{print $3}' | awk -F "/" '{print $2}')
					if [[ $INTERFACE =~ "Mgmt" ]] || [[ $INTERFACE =~ "mag" ]]; then
						ZONE="MGMT"
					elif [[ $INTERFACE == "Sync" ]]; then
						ZONE="SYNC"
					elif [[ $INTERFACE =~ "CIN" ]]; then
						ZONE="CHASSIS_INTERNAL"
					elif [[ $INTERFACE =~ "lo" ]]; then
						ZONE="LOOPBACK"
					elif [[ $INTERFACE == "" ]]; then
						ZONE="n/a"
					elif [[ $INTERFACE == $checkRouting_defaultGatewayInterface ]]; then
						ZONE="EXTERNAL"
					else
						if [[ -f $IFZONE ]]; then
							ZONE=$(cat $IFZONE | grep $INTERFACE | awk '{print $2}')
						else
						ZONE="INTERNAL"
						fi
					fi
				fi
			else
				STATE="ACTIVE"
				NETWORK=$(echo "$LINE" | awk '{print $2}' | awk -F "/" '{print $1}')
				GATEWAY=$(echo "$LINE" | awk '{print $4}' | tr -d ',')
				INTERFACE=$(echo "$LINE" | awk '{print $5}' | tr -d ',')
				COST=$(echo "$LINE" | awk '{print $7}' | tr -d ',')
				AGE=$(echo "$LINE" | awk '{print $9}')

				if [[ $NETWORK == "0.0.0.0" ]]; then
					CIDR="0"
					if [[ ! $INTERFACE ]]; then
						INTERFACE="n/a"
					fi
					ZONE="EXTERNAL"
				else
					CIDR=$(echo "$LINE" | awk '{print $2}' | awk -F "/" '{print $2}')
					if [[ $INTERFACE =~ "Mgmt" ]] || [[ $INTERFACE =~ "mag" ]]; then
						ZONE="MGMT"
					elif [[ $INTERFACE == "Sync" ]]; then
						ZONE="SYNC"
					elif [[ $INTERFACE =~ "CIN" ]]; then
						ZONE="CHASSIS_INTERNAL"
					elif [[ $INTERFACE =~ "lo" ]]; then
						ZONE="LOOPBACK"
					elif [[ $INTERFACE == "" ]]; then
						ZONE="n/a"
					elif [[ $INTERFACE == $checkRouting_defaultGatewayInterface ]]; then
						ZONE="EXTERNAL"
					else
						if [[ -f $IFZONE ]]; then
							ZONE=$(cat $IFZONE | grep $INTERFACE | awk '{print $2}')
						else
							ZONE="INTERNAL"
						fi
					fi
				fi
			fi
		fi
		
		
		
		if [[ $TYPE == "STATIC" ]]; then
			IS_BLACKHOLE=$(echo "$LINE" | grep "is a blackhole route" | wc -l)
			if [[ $IS_BLACKHOLE -eq "1" ]]; then
				STATE="BLACKHOLE"
				NETWORK=$(echo "$LINE" | awk '{print $2}' | awk -F "/" '{print $1}')
				GATEWAY="BLACKHOLE"
				INTERFACE="BLACKHOLE"
				COST="BLACKHOLE"
				AGE="BLACKHOLE"
				ZONE="BLACKHOLE"
				CIDR=$(echo "$LINE" | awk '{print $2}' | awk -F "/" '{print $2}')
			else
				STATE="ACTIVE"
				NETWORK=$(echo "$LINE" | awk '{print $2}' | awk -F "/" '{print $1}')
				GATEWAY=$(echo "$LINE" | awk '{print $4}' | tr -d ',')
				INTERFACE=$(echo "$LINE" | awk '{print $5}' | tr -d ',')
				COST=$(echo "$LINE" | awk '{print $7}' | tr -d ',')
				AGE=$(echo "$LINE" | awk '{print $9}')

				if [[ $NETWORK == "0.0.0.0" ]]; then
					CIDR="0"
					if [[ ! $INTERFACE ]]; then
						INTERFACE="n/a"
					fi
					ZONE="EXTERNAL"
				else
					CIDR=$(echo "$LINE" | awk '{print $2}' | awk -F "/" '{print $2}')
					if [[ $INTERFACE =~ "Mgmt" ]] || [[ $INTERFACE =~ "mag" ]]; then
						ZONE="MGMT"
					elif [[ $INTERFACE == "Sync" ]]; then
						ZONE="SYNC"
					elif [[ $INTERFACE =~ "CIN" ]]; then
						ZONE="CHASSIS_INTERNAL"
					elif [[ $INTERFACE =~ "lo" ]]; then
						ZONE="LOOPBACK"
					elif [[ $INTERFACE == "" ]]; then
						ZONE="n/a"
					elif [[ $INTERFACE == $checkRouting_defaultGatewayInterface ]]; then
						ZONE="EXTERNAL"
					else
						if [[ -f $IFZONE ]]; then
							ZONE=$(cat $IFZONE | grep $INTERFACE | awk '{print $2}')
						else
							ZONE="INTERNAL"
						fi
					fi
				fi
			fi
		fi
		
		
		
		if [[ $TYPE == "CONNECTED" ]]; then
			STATE="ACTIVE"
			NETWORK=$(echo "$LINE" | awk '{print $2}' | awk -F "/" '{print $1}')
			GATEWAY="CONNECTED"
			INTERFACE=$(echo "$LINE" | awk '{print $NF}')
			COST="n/a"
			AGE="n/a"

			if [[ $NETWORK == "0.0.0.0" ]]; then
				CIDR="0"
				if [[ ! $INTERFACE ]]; then
					INTERFACE="n/a"
				fi
				ZONE="EXTERNAL"
			else
				CIDR=$(echo "$LINE" | awk '{print $2}' | awk -F "/" '{print $2}')
				if [[ $INTERFACE =~ "Mgmt" ]] || [[ $INTERFACE =~ "mag" ]]; then
					ZONE="MGMT"
				elif [[ $INTERFACE == "Sync" ]]; then
					ZONE="SYNC"
				elif [[ $INTERFACE =~ "CIN" ]]; then
					ZONE="CHASSIS_INTERNAL"
				elif [[ $INTERFACE =~ "lo" ]]; then
					ZONE="LOOPBACK"
				elif [[ $INTERFACE == "" ]]; then
					ZONE="n/a"
				elif [[ $INTERFACE == $checkRouting_defaultGatewayInterface ]]; then
					ZONE="EXTERNAL"
				else
					if [[ -f $IFZONE ]]; then
						ZONE=$(cat $IFZONE | grep $INTERFACE | awk '{print $2}')
					else
						ZONE="INTERNAL"
					fi
				fi
			fi
		fi
			
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkRouting_routeDetails - NETWORK=$NETWORK CIDR=$CIDR GATEWAY=$GATEWAY INTERFACE=$INTERFACE ZONE=$ZONE TYPE=$TYPE STATE=$STATE AGE=$AGE COST=$COST" >>$HISTORYLOG

		IFS=$ORIGIFS
		sendSyslog "$functionName" "INFO" "checkRouting_routeDetails" "NETWORK=\"$NETWORK\" CIDR=\"$CIDR\" GATEWAY=\"$GATEWAY\" INTERFACE=\"$INTERFACE\" ZONE=\"$ZONE\" TYPE=\"$TYPE\" STATE=\"$STATE\" AGE=\"$AGE\" COST=\"$COST\""
		IFS=$'\n'
		
	done
	IFS=$ORIGIFS
fi


#IPv4 only right now
if [[ $checkRouting_staticConfigured != $checkRouting_staticActive ]]; then
	if [[ $MDPSENABLED == "2" ]]; then
		mplane > /dev/null 2>&1
		netstat -rn | grep "U" | grep -v "U " | awk '{print $1,$3,$2}' > $TEMPFILE_NETSTAT
		dplane > /dev/null 2>&1
		netstat -rn | grep "U" | grep -v "U " | awk '{print $1,$3,$2}' >> $TEMPFILE_NETSTAT
	else
		netstat -rn | grep "U" | grep -v "U " | awk '{print $1,$3,$2}' > $TEMPFILE_NETSTAT
	fi
	IFS=$'\n'
	for LINE in $(cat $TEMPFILE_SHOWCONFIGROUTE); do
		NETWORK=$(echo "$LINE" | awk '{print $1}')
		if [[ $NETWORK == "default" ]]; then
			NETWORK="0.0.0.0"
			MASK="0.0.0.0"
			GW=$(echo "$LINE" | awk '{print $2}')
		else
			MASK=$(cidr2mask `echo "$LINE" | awk '{print $2}'`)
			GW=$(echo "$LINE" | awk '{print $3}')
		fi
		LINE2="$NETWORK $MASK $GW"
		NETSTAT_FOUND=$(cat $TEMPFILE_NETSTAT | grep $LINE2 | wc -l)
		if [[ $NETSTAT_FOUND -eq "0" ]]; then
			checkRouting_problemInfo="$checkRouting_problemInfo [Configured/Not Active IPv4 Route - $LINE2]"
		fi
	done
	IFS=$ORIGIFS
fi



# DISABLED BECAUSE CYBER FW MGMT RULE	
# if [[ $checkSelf_haInstalled == "1" ]] && [[ $checkSelf_haNotStarted == "0" ]]; then
	# if [[ $MDPSENABLED == "2" ]]; then
		# mplane > /dev/null 2>&1
	# fi
	# AVAILABLE=$(snmpwalk -r 1 -v2c -c $SNMPCOMMUNITY $CLUSTERMEMBEROTHER 1.3.6.1.4.1.2620.1.1.1.0 2>&1 | grep "STRING" | wc -l)
	# if [[ $AVAILABLE == "0" ]]; then
		# echo "Remote route check: FAIL" >>$RUNLOG
		# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Unable to SNMP walk remote system - $CLUSTERMEMBEROTHER" >>$HISTORYLOG
		# checkRouting_problemInfo="$checkRouting_problemInfo [Cannot validate routes synced between members]"
	# else
		# snmpwalk -r 1 -v2c -c $SNMPCOMMUNITY localhost 1.3.6.1.4.1.2620.1.6.6.1 | awk -F "=" '{print $2}' | grep "IpAddress" | sort > $TEMPFILELOCAL
		# snmpwalk -r 1 -v2c -c $SNMPCOMMUNITY $CLUSTERMEMBEROTHER 1.3.6.1.4.1.2620.1.6.6.1 | awk -F "=" '{print $2}' | grep "IpAddress" | sort > $TEMPFILEREMOTE
		# checkRouting_remoteDiffLocalQty=$(cat $TEMPFILELOCAL | wc -l)
		# checkRouting_remoteDiffRemoteQty=$(cat $TEMPFILEREMOTE | wc -l)
		# if [[ $checkRouting_remoteDiffLocalQty == "0" || $checkRouting_remoteDiffRemoteQty == "0" ]]; then
			# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkRouting_remoteDiff RERUN - Original Local=$checkRouting_remoteDiffLocalQty Remote=checkRouting_remoteDiffRemoteQty" >>$HISTORYLOG
			# sleep 10
			# snmpwalk -r 1 -v2c -c $SNMPCOMMUNITY localhost 1.3.6.1.4.1.2620.1.6.6.1 | awk -F "=" '{print $2}' | grep "IpAddress" | sort > $TEMPFILELOCAL
			# snmpwalk -r 1 -v2c -c $SNMPCOMMUNITY $CLUSTERMEMBEROTHER 1.3.6.1.4.1.2620.1.6.6.1 | awk -F "=" '{print $2}' | grep "IpAddress" | sort > $TEMPFILEREMOTE
			# checkRouting_remoteDiffLocalQty=$(cat $TEMPFILELOCAL | wc -l)
			# checkRouting_remoteDiffRemoteQty=$(cat $TEMPFILEREMOTE | wc -l)
		# fi
		# checkRouting_remoteDiff=$(diff $TEMPFILELOCAL $TEMPFILEREMOTE | wc -l)
		# if [[ $SYSARG3 != "debug" ]]; then
			# rm -rf $TEMPFILELOCAL $TEMPFILEREMOTE
		# fi
	# fi
# fi



IFS=$'\n'
for LINE in `netstat -rn | awk '{print $2,$8}' | grep -v "IP\|Gateway\|0.0.0.0" | sort -n | uniq` ; do
	IPADDRESS=$(echo "$LINE" | awk '{print $1}')
	INTERFACE=$(echo "$LINE" | awk '{print $2}')
	echo "checkRouting_nexthopDevice $INTERFACE $IPADDRESS $RESOLVEDNAME" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkRouting_nexthopDevice - $INTERFACE $IPADDRESS $RESOLVEDNAME" >>$HISTORYLOG
	IFS=$ORIGIFS
	sendSyslog "$functionName" "INFO" "checkRouting_nexthopDevice" "INTERFACE=\"$INTERFACE\" IPADDRESS=\"$IPADDRESS\" RESOLVEDNAME=\"$RESOLVEDNAME\""
	IFS=$'\n'
	checkRouting_nexthopDeviceList="$checkRouting_nexthopDeviceList $RESOLVEDNAMESHORT($INTERFACE)"
done
IFS=$ORIGIFS

if [[ $MDPSENABLED == "2" ]]; then
	IFS=$'\n'
	dplane > /dev/null 2>&1
	for LINE in `netstat -rn | awk '{print $2,$8}' | grep -v "IP\|Gateway\|0.0.0.0" | sort -n | uniq` ; do
		IPADDRESS=$(echo "$LINE" | awk '{print $1}')
		INTERFACE=$(echo "$LINE" | awk '{print $2}')
		echo "checkRouting_nexthopDevice $INTERFACE $IPADDRESS $RESOLVEDNAME" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkRouting_nexthopDevice - $INTERFACE $IPADDRESS $RESOLVEDNAME" >>$HISTORYLOG
		IFS=$ORIGIFS
		sendSyslog "$functionName" "INFO" "checkRouting_nexthopDevice" "INTERFACE=\"$INTERFACE\" IPADDRESS=\"$IPADDRESS\" RESOLVEDNAME=\"$RESOLVEDNAME\""
		IFS=$'\n'
		checkRouting_nexthopDeviceList="$checkRouting_nexthopDeviceList $RESOLVEDNAMESHORT($INTERFACE)"
				
	done
	mplane > /dev/null 2>&1
	IFS=$ORIGIFS
fi
		

#LOG OUTPUTS
echo "checkRouting_defaultGateway $checkRouting_defaultGateway" >>$RUNLOG
echo "checkRouting_defaultGatewayQty $checkRouting_defaultGatewayQty" >>$RUNLOG
echo "checkRouting_defaultGatewayMac $checkRouting_defaultGatewayMac" >>$RUNLOG
echo "checkRouting_staticActive $checkRouting_staticActive" >>$RUNLOG
echo "checkRouting_staticConfigured $checkRouting_staticConfigured" >>$RUNLOG
# if [[ $checkSelf_haInstalled == "1" ]] && [[ $checkSelf_haNotStarted == "0" ]]; then
	# echo "checkRouting_remoteDiff $checkRouting_remoteDiff" >>$RUNLOG
	# echo "checkRouting_remoteDiffLocalQty $checkRouting_remoteDiffLocalQty" >>$RUNLOG
	# echo "checkRouting_remoteDiffRemoteQty $checkRouting_remoteDiffRemoteQty" >>$RUNLOG
# fi

echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkRouting_defaultGateway - $checkRouting_defaultGateway" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkRouting_defaultGatewayQty - $checkRouting_defaultGatewayQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkRouting_defaultGatewayMac - $checkRouting_defaultGatewayMac" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkRouting_defaultGatewayPing - $checkRouting_defaultGatewayPing" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkRouting_staticConfigured - $checkRouting_staticConfigured" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkRouting_staticActive - $checkRouting_staticActive" >>$HISTORYLOG
if [[ $checkSelf_haInstalled == "1" ]] && [[ $checkSelf_haNotStarted == "0" ]]; then
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkRouting_remoteDiffLocalQty - $checkRouting_remoteDiffLocalQty" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkRouting_remoteDiffRemoteQty - $checkRouting_remoteDiffRemoteQty" >>$HISTORYLOG
fi
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkRouting_bgpPeerQty - $checkRouting_bgpPeerQty" >>$HISTORYLOG


if [[ $checkSelf_ipv6Enabled == "1" ]] && [[ $checkSelf_ipv6Configured != "0" ]] && [[ $IDSENABLED == "0" ]]; then
	echo "checkRouting_defaultGatewayIpv6 $checkRouting_defaultGatewayIpv6" >>$RUNLOG
	echo "checkRouting_defaultGatewayMacIpv6 $checkRouting_defaultGatewayMacIpv6" >>$RUNLOG
	echo "checkRouting_staticActiveIpv6 $checkRouting_staticActiveIpv6" >>$RUNLOG
	echo "checkRouting_staticConfiguredIpv6 $checkRouting_staticConfiguredIpv6" >>$RUNLOG
	echo "checkRouting_defaultGatewayIpv6Qty $checkRouting_defaultGatewayIpv6Qty" >>$RUNLOG

	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkRouting_defaultGatewayIpv6 - $checkRouting_defaultGatewayIpv6" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkRouting_defaultGatewayIpv6Qty - $checkRouting_defaultGatewayIpv6Qty" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkRouting_defaultGatewayMacIpv6 - $checkRouting_defaultGatewayMacIpv6" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkRouting_staticConfiguredIpv6 - $checkRouting_staticConfiguredIpv6" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkRouting_staticActiveIpv6 - $checkRouting_staticActiveIpv6" >>$HISTORYLOG
fi


#RUN LOGIC
# if [[ $checkSelf_haInstalled == "1" ]] && [[ $checkSelf_haNotStarted == "0" ]]; then
	# if [[ $checkRouting_remoteDiff -gt "0" ]]; then
		# echo "Logic - remote route check: FAIL" >>$RUNLOG
		# echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Routes Synced between cluster members - $checkRouting_remoteDiff" >>$HISTORYLOG
		# checkRouting_problem="1"
		# checkRouting_problemInfo="$checkRouting_problemInfo [Routes not synced between members]"
	# else
		# echo "Logic - default gateway: PASS" >>$RUNLOG
		# echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Routes Synced between cluster members - $checkRouting_remoteDiff" >>$HISTORYLOG
	# fi
# fi

if [[ $checkRouting_defaultGatewayPing -eq "0" ]] && [[ $checkRouting_defaultGatewayMac == "<incomplete>" || $checkRouting_defaultGatewayMac == "" ]]; then
	echo "Logic - default gateway: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Default gateway - $checkRouting_defaultGateway $checkRouting_defaultGatewayMac" >>$HISTORYLOG
	checkRouting_problem="1"
	checkRouting_problemInfo="$checkRouting_problemInfo [Default Route Not Reachable]"
else
	echo "Logic - default gateway: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Default gateway - $checkRouting_defaultGateway $checkRouting_defaultGatewayMac" >>$HISTORYLOG
fi

if [[ $checkRouting_defaultGatewayPing -eq "1" ]] && [[ $checkRouting_defaultGatewayMac == "<incomplete>" || $checkRouting_defaultGatewayMac == "" ]]; then
	echo "Logic - default gateway ha forwarding to active: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Default gateway HA forwarding via Active - IP:$checkRouting_defaultGateway PingSuccess:$checkRouting_defaultGatewayPing MAC:$checkRouting_defaultGatewayMac" >>$HISTORYLOG
	checkRouting_workingInfo="$checkRouting_workingInfo [HA Forwarding Active]"
fi

if [[ $checkRouting_staticConfigured != $checkRouting_staticActive ]]; then
	echo "Logic - static route: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Static routes - Configured: $checkRouting_staticConfigured Active: $checkRouting_staticActive" >>$HISTORYLOG
	checkRouting_problem="1"
	checkRouting_problemInfo="$checkRouting_problemInfo [Not all configured($checkRouting_staticConfigured) static routes are active($checkRouting_staticActive)]"
else
	echo "Logic - static route: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Static routes - Configured: $checkRouting_staticConfigured Active: $checkRouting_staticActive" >>$HISTORYLOG
fi

if [[ $checkSelf_ipv6Enabled == "1" ]] && [[ $checkSelf_ipv6Configured != "0" ]] && [[ $IDSENABLED == "0" ]]; then
	if [[ $checkRouting_defaultGatewayMacIpv6 == "FAILED" ]] || [[ $checkRouting_defaultGatewayMacIpv6 == "" ]]; then
		echo "Logic - default gateway Ipv6: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Default gateway Ipv6 - $checkRouting_defaultGatewayIpv6 $checkRouting_defaultGatewayMacIpv6" >>$HISTORYLOG
		checkRouting_problem="1"
		checkRouting_problemInfo="$checkRouting_problemInfo [Default IPv6 Route Not Reachable]"
	else
		echo "Logic - default gateway Ipv6: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Default gateway Ipv6 - $checkRouting_defaultGatewayIpv6 $checkRouting_defaultGatewayMacIpv6" >>$HISTORYLOG
	fi

	if [[ $checkRouting_staticConfiguredIpv6 != $checkRouting_staticActiveIpv6 ]]; then
		echo "Logic - static route Ipv6: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Static routes Ipv6 - Configured: $checkRouting_staticConfiguredIpv6 Active: $checkRouting_staticActiveIpv6" >>$HISTORYLOG
		checkRouting_problem="1"
		checkRouting_problemInfo="$checkRouting_problemInfo [Not all IPv6 configured($checkRouting_staticConfiguredIpv6) static routes are active($checkRouting_staticActiveIpv6)]"
	else
		echo "Logic - static route Ipv6: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Static routes - Configured: $checkRouting_staticConfiguredIpv6 Active: $checkRouting_staticActiveIpv6" >>$HISTORYLOG
	fi
fi



#SYSLOG
if [[ $checkRouting_problem == "1" ]]; then
	sendSyslog "$functionName" "PROBLEM" "checkRouting_problemInfo" "VALUE=\"$checkRouting_problemInfo $checkRouting_warningInfo $checkRouting_workingInfo\""
elif [[ $checkRouting_warning == "1" ]]; then
	sendSyslog "$functionName" "WARNING" "checkRouting_warningInfo" "VALUE=\"$checkRouting_warningInfo $checkRouting_workingInfo\""	
else
	sendSyslog "$functionName" "WORKING" "checkRouting_workingInfo" "VALUE=\"$checkRouting_workingInfo\""
fi

sendSyslog "$functionName" "INFO" "checkRouting_defaultGateway" "VALUE=\"$checkRouting_defaultGateway\""
sendSyslog "$functionName" "INFO" "checkRouting_defaultGatewayMac" "VALUE=\"$checkRouting_defaultGatewayMac\""
sendSyslog "$functionName" "INFO" "checkRouting_defaultGatewayPing" "VALUE=\"$checkRouting_defaultGatewayPing\""
sendSyslog "$functionName" "INFO" "checkRouting_staticConfigured" "VALUE=\"$checkRouting_staticConfigured\""
sendSyslog "$functionName" "INFO" "checkRouting_staticActive" "VALUE=\"$checkRouting_staticActive\""
if [[ $checkSelf_ipv6Enabled == "1" ]] && [[ $checkSelf_ipv6Configured != "0" ]]; then
	sendSyslog "$functionName" "INFO" "checkRouting_defaultGatewayIpv6" "VALUE=\"$checkRouting_defaultGatewayIpv6\""
	sendSyslog "$functionName" "INFO" "checkRouting_defaultGatewayMacIpv6" "VALUE=\"$checkRouting_defaultGatewayMacIpv6\""
	sendSyslog "$functionName" "INFO" "checkRouting_staticConfiguredIpv6" "VALUE=\"$checkRouting_staticConfiguredIpv6\""
	sendSyslog "$functionName" "INFO" "checkRouting_staticActiveIpv6" "VALUE=\"$checkRouting_staticActiveIpv6\""
fi

#CLEANUP
rm $TEMPFILE_SHOWCONFIGROUTE $TEMPFILE_SHOWCONFIGROUTE6 $TEMPFILE_NETSTAT > /dev/null 2>&1

checkRouting_fEnd=$(date "+%s")
checkRouting_fRunTime=$(( checkRouting_fEnd - checkRouting_fStart ))
echo "checkRouting_fRunTime $checkRouting_fRunTime" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkRouting_warning - $checkRouting_warning" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkRouting_problem - $checkRouting_problem" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkRouting_problemInfo - $checkRouting_problemInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkRouting_warningInfo - $checkRouting_warningInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkRouting_workingInfo - $checkRouting_workingInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkRouting_runTime - $checkRouting_fRunTime" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkRouting_warning" "VALUE=\"$checkRouting_warning\""
sendSyslog "$functionName" "INFO" "checkRouting_problem" "VALUE=\"$checkRouting_problem\""
sendSyslog "$functionName" "INFO" "checkRouting_problemInfo" "VALUE=\"$checkRouting_problemInfo\""
sendSyslog "$functionName" "INFO" "checkRouting_warningInfo" "VALUE=\"$checkRouting_warningInfo\""
sendSyslog "$functionName" "INFO" "checkRouting_workingInfo" "VALUE=\"$checkRouting_workingInfo\""
sendSyslog "$functionName" "INFO" "checkRouting_runTime" "VALUE=\"$checkRouting_fRunTime\""
echo "checkRouting_problem $checkRouting_problem" >>$RUNLOG
echo "END==checkRouting" >>$RUNLOG
}

###################################################################################################
checkRoutingSP() {
echo "START==checkRoutingSP" >>$RUNLOG

#DEFAULTS
checkRoutingSP_fStart=$(date "+%s")
functionName=${FUNCNAME[0]}
checkRoutingSP_warning="0"
checkRoutingSP_problem="0"
checkRoutingSP_workingInfo=""
checkRoutingSP_warningInfo=""
checkRoutingSP_problemInfo=""
TEMPFILE_SHOWCONFIGROUTE="$TEMPDIR/$SCRIPT.$EPOCH.showconfigroute"
TEMPFILE_SHOWROUTE="$TEMPDIR/$SCRIPT.$EPOCH.showroute"
TEMPFILE_SHOWBGPPEERS="$TEMPDIR/$SCRIPT.$EPOCH.showbgppeers"

#COLLECT OUTPUTS
checkRoutingSP_defaultGateway=$(cat /config/active | grep "routed:instance:default:static:default:gateway:address" | awk -F ":" '{print $NF}' | awk '{print $1}' | head -1)
checkRoutingSP_defaultGatewayInterface=$(netstat -rn | grep -w 0.0.0.0 | grep "UG" | awk '{print $NF}' | uniq)
checkRoutingSP_defaultGatewayQty=$(cat /config/active | grep "routed:instance:default:static:default:gateway:address" | awk -F ":" '{print $NF}' | awk '{print $1}' | wc -l)
checkRoutingSP_bgpPeerQty=$(cat /config/active | grep routed:instance:default:bgp:group_type:external-peer | awk -F ":" '{print $12}' | grep "t" | sort -n | uniq | wc -l)

if [[ $checkRoutingSP_bgpPeerQty -eq "0" ]]; then
	if [[ $checkRoutingSP_defaultGatewayQty -gt "1" ]]; then
		checkRoutingSP_defaultGatewayMac=$(/sbin/arp -an | grep " ($checkRoutingSP_defaultGateway) " | head -1 | awk '{print $4}')
		echo "Multiple default routes: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Multiple Default Routes -" >>$HISTORYLOG
		checkRoutingSP_problem="1"
		checkRoutingSP_problemInfo="$checkRoutingSP_problemInfo [Multiple default routes configured]"
	elif [[ $checkRoutingSP_defaultGatewayQty -lt "1" ]]; then
		echo "No default routes: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - No Default Route -" >>$HISTORYLOG
		checkRoutingSP_problem="1"
		checkRoutingSP_problemInfo="$checkRoutingSP_problemInfo [No default route configured]"
	else
		ping -c 1 -w 1 $checkRoutingSP_defaultGateway > /dev/null 2>&1
		checkRoutingSP_defaultGatewayMac=$(/sbin/arp -an | grep "$checkRoutingSP_defaultGateway" | awk '{print $4}')
	fi
fi

checkRoutingSP_staticConfigured=$(cat /config/active | grep "routed:instance:default:static" | grep "gateway:address" | grep -v "v6addr" | wc -l)
checkRoutingSP_staticActive=$(netstat -rn | grep "U" | grep -v "U " | wc -l)

if [[ $checkSelf_ipv6Enabled == "1" ]] && [[ $checkSelf_ipv6Configured != "0" ]] && [[ $IDSENABLED == "0" ]]; then
	checkRoutingSP_defaultGatewayIpv6Qty=$(cat /config/active | grep "routed:instance:default:static:default6:gateway:address" | grep -v "preference" | awk -F ":" '{print $NF}' | awk '{print $1}' | wc -l)
	if [[ $checkRoutingSP_defaultGatewayIpv6Qty -gt "1" ]]; then
		checkRoutingSP_defaultGatewayMacIpv6=$(/sbin/ip -6 neigh show | grep "$checkRoutingSP_defaultGatewayIpv6" | awk '{print $5}')
		echo "Multiple IPv6 default routes: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Multiple IPv6 Default Routes -" >>$HISTORYLOG
		checkRoutingSP_problem="1"
		checkRoutingSP_problemInfo="$checkRoutingSP_problemInfo [Multiple IPv6 default routes configured]"
	elif [[ $checkRoutingSP_defaultGatewayIpv6Qty -lt "1" ]]; then
		echo "No IPv6 default routes: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - No IPv6 Default Route -" >>$HISTORYLOG
		checkRoutingSP_problem="1"
		checkRoutingSP_problemInfo="$checkRoutingSP_problemInfo [No IPv6 default route configured]"
	else
		checkRoutingSP_defaultGatewayIpv6=$(/sbin/ping6 `cat /config/active | grep "routed:instance:default:static:default6:gateway:address" | grep -v "preference" | awk -F ":" '{print $NF}' | awk '{print $1}' | head -1 | sed 's/.\{4\}/&\:/g' | rev | cut -c2- | rev` -c 1 | grep "64 bytes" | awk '{print $4}' | rev | cut -c2- | rev)
		ping6 -c 1 -w 1 $checkRoutingSP_defaultGatewayIpv6 > /dev/null 2>&1
		checkRoutingSP_defaultGatewayMacIpv6=$(/sbin/ip -6 neigh show | grep "$checkRoutingSP_defaultGatewayIpv6" | awk '{print $5}')
	fi
	checkRoutingSP_staticConfiguredIpv6=$(cat /config/active | grep "routed:instance:default:static" | grep "v6addr" | grep "gateway:address" | grep -v "preference" | wc -l)
	checkRoutingSP_staticActiveIpv6=$(/sbin/ip -6 route show | grep via | wc -l)
fi

###NEW ROUTE DETAILS OUTPUT
if [[ $LOCALSMO == "1" ]]; then
	if [[ $checkRoutingSP_bgpPeerQty -eq "0" ]]; then

		#IPV4 STATIC ROUTES
		cat /config/active | grep "instance:default:static:network" | grep gateway:address | grep -v "v6addr" | grep " t" | awk -F ":" '{print $6,$8,$11}' > $TEMPFILE_SHOWCONFIGROUTE
		cat /config/active | grep "instance:default:static:default" | grep gateway:address | grep -v "v6addr" | grep " t" | awk -F ":" '{print $5,$8}' >> $TEMPFILE_SHOWCONFIGROUTE
		IFS=$'\n'
		for LINE in $(cat $TEMPFILE_SHOWCONFIGROUTE); do
			TYPE="STATIC"
			AGE="n/a"
			COST="n/a"
			NETWORK=$(echo "$LINE" | awk '{print $1}')
			if [[ $NETWORK == "default" ]]; then
				NETWORK="0.0.0.0"
				CIDR="0"
				GATEWAY=$(echo "$LINE" | awk '{print $2}')
				INTERFACE=$(netstat -rn | grep -w $NETWORK | grep "UG" | awk '{print $NF}' | uniq)
				if [[ ! $INTERFACE ]]; then
					INTERFACE="n/a"
				fi
				ZONE="EXTERNAL"
			else
				CIDR=$(echo "$LINE" | awk '{print $2}')
				GATEWAY=$(echo "$LINE" | awk '{print $3}')
				INTERFACE=$(netstat -rn | grep -w $NETWORK | awk '{print $NF}' | uniq)
				
				if [[ $checkSelf_hwtype == "VM" ]]; then
					if [[ $INTERFACE == "eth0" ]]; then
						ZONE="MGMT"
					elif [[ $INTERFACE == "eth3" ]]; then
						ZONE="SYNC"
					elif [[ $INTERFACE == "" ]]; then
						ZONE="n/a"
					# elif [[ $INTERFACE =~ "CIN" ]]; then
						# ZONE="CHASSIS_INTERNAL"
					elif [[ $INTERFACE =~ "lo" ]]; then
						ZONE="LOOPBACK"
					elif [[ $INTERFACE == $checkRoutingSP_defaultGatewayInterface ]]; then
						ZONE="EXTERNAL"
					else
						ZONE="INTERNAL"
					fi		
				else
					if [[ $INTERFACE == "Mgmt" ]] || [[ $INTERFACE == "magg0" ]]; then
						ZONE="MGMT"
					elif [[ $INTERFACE == "Sync" ]]; then
						ZONE="SYNC"
					elif [[ $INTERFACE == "" ]]; then
						ZONE="n/a"
					elif [[ $INTERFACE =~ "lo" ]]; then
						ZONE="LOOPBACK"
					elif [[ $INTERFACE == $checkRoutingSP_defaultGatewayInterface ]]; then
						ZONE="EXTERNAL"
					else
						ZONE="INTERNAL"
					fi
				fi
			fi
			STATE="n/a"
			
			echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkRoutingSP_routeDetails - NETWORK=$NETWORK CIDR=$CIDR GATEWAY=$GATEWAY INTERFACE=$INTERFACE ZONE=$ZONE TYPE=$TYPE STATE=$STATE AGE=$AGE COST=$COST" >>$HISTORYLOG
			IFS=$ORIGIFS
			sendSyslog "$functionName" "INFO" "checkRoutingSP_routeDetails" "NETWORK=\"$NETWORK\" CIDR=\"$CIDR\" GATEWAY=\"$GATEWAY\" INTERFACE=\"$INTERFACE\" ZONE=\"$ZONE\" TYPE=\"$TYPE\" STATE=\"$STATE\" AGE=\"$AGE\" COST=\"$COST\"" "SMO"
			IFS=$'\n'

		done
		IFS=$ORIGIFS

		#IPV6 STATIC ROUTES
		if [[ $checkSelf_ipv6Enabled == "1" ]] && [[ $checkSelf_ipv6Configured == "1" ]]; then

			cat /config/active | grep "static:network" | grep gateway:address | grep "v6addr" | grep " t" | awk -F ":" '{print $7,$9,$13}' > $TEMPFILE_SHOWCONFIGROUTE
			cat /config/active | grep "static:default6" | grep gateway:address | grep "v6addr" | grep " t" | awk -F ":" '{print $5,$9}' >> $TEMPFILE_SHOWCONFIGROUTE
			IFS=$'\n'
			for LINE in $(cat $TEMPFILE_SHOWCONFIGROUTE); do
				NETWORK=$(echo "$LINE" | awk '{print $1}')
				if [[ $NETWORK == "default6" ]]; then
					NETWORK="::"
					CIDR="0"
					GATEWAY=$(/sbin/ip -6 route show | grep "default" | awk '{print $3}' | sort | uniq)
					INTERFACE=$(/sbin/ip -6 route show | grep "default" | awk '{print $5}' | sort | uniq)
					if [[ ! $INTERFACE ]]; then
						INTERFACE="n/a"
					fi
					ZONE="EXTERNAL"
				else
					CIDR=$(echo "$LINE" | awk '{print $2}')
					if [[ $CIDR -le "64" ]]; then
						NETWORK=$(echo "$LINE" | awk '{print $1}' | sed 's/..../&:/g; s/:$//' | sed -e 's/:0*/:/g' | cut -d':' -f1-6 | sed 's/::\+/::/g')
					fi
					GATEWAY=$(compressIpv6 `echo "$LINE" | awk '{print $3}'`)
					INTERFACE=$(/sbin/ip -6 route show | grep -w $NETWORK | awk '{print $5}' | sort | uniq)
					
					if [[ $checkSelf_hwtype == "VM" ]]; then
						if [[ $INTERFACE == "eth0" ]]; then
							ZONE="MGMT"
						elif [[ $INTERFACE == "eth3" ]]; then
							ZONE="SYNC"
						elif [[ $INTERFACE == "" ]]; then
							ZONE="n/a"
						elif [[ $INTERFACE =~ "lo" ]]; then
							ZONE="LOOPBACK"
						elif [[ $INTERFACE == $checkRoutingSP_defaultGatewayIpv6Interface ]]; then
							ZONE="EXTERNAL"
						else
							ZONE="INTERNAL"
						fi		
					else
						if [[ $INTERFACE == "Mgmt" ]] || [[ $INTERFACE == "magg0" ]]; then
							ZONE="MGMT"
						elif [[ $INTERFACE == "Sync" ]]; then
							ZONE="SYNC"
						elif [[ $INTERFACE == "" ]]; then
							ZONE="n/a"
						# elif [[ $INTERFACE =~ "CIN" ]]; then
							# ZONE="CHASSIS_INTERNAL"
						elif [[ $INTERFACE =~ "lo" ]]; then
							ZONE="LOOPBACK"
						elif [[ $INTERFACE == $checkRoutingSP_defaultGatewayIpv6Interface ]]; then
							ZONE="EXTERNAL"
						else
							ZONE="INTERNAL"
						fi
					fi
				fi
				STATE="n/a"
			
				echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkRoutingSP_routeDetails - NETWORK=$NETWORK CIDR=$CIDR GATEWAY=$GATEWAY INTERFACE=$INTERFACE ZONE=$ZONE TYPE=$TYPE STATE=$STATE AGE=$AGE COST=$COST" >>$HISTORYLOG
				IFS=$ORIGIFS
				sendSyslog "$functionName" "INFO" "checkRoutingSP_routeDetails" "NETWORK=\"$NETWORK\" CIDR=\"$CIDR\" GATEWAY=\"$GATEWAY\" INTERFACE=\"$INTERFACE\" ZONE=\"$ZONE\" TYPE=\"$TYPE\" STATE=\"$STATE\" AGE=\"$AGE\" COST=\"$COST\"" "SMO"
				IFS=$'\n'

			done
			IFS=$ORIGIFS

		fi

	else

		clish -c "show route all" | grep -v "CLINFR0771" | tail -n +5 > $TEMPFILE_SHOWROUTE
		
		IFS=$'\n'
		for LINE in $(cat $TEMPFILE_SHOWROUTE | grep "B\|S\|A\|C"); do
			TYPE=$(echo "$LINE" | awk '{print $1}' | tr -d '[:space:]')
			if [[ $TYPE == "B" ]]; then
				TYPE="BGP"
			elif [[ $TYPE == "S" ]]; then
				TYPE="STATIC"
			elif [[ $TYPE == "A" ]]; then
				TYPE="AGGREGATE"
			elif [[ $TYPE == "C" ]]; then
				TYPE="CONNECTED"
			fi
			
			if [[ $TYPE == "BGP" ]]; then
				IS_INACTIVE=$(echo "$LINE" | grep " i " | wc -l)
				if [[ $IS_INACTIVE -eq "1" ]]; then
					STATE="INACTIVE"
					NETWORK=$(echo "$LINE" | awk '{print $3}' | awk -F "/" '{print $1}')
					GATEWAY=$(echo "$LINE" | awk '{print $5}' | tr -d ',')
					INTERFACE=$(echo "$LINE" | awk '{print $6}' | tr -d ',')
					COST=$(echo "$LINE" | awk '{print $8}' | tr -d ',')
					AGE=$(echo "$LINE" | awk '{print $10}')

					if [[ $NETWORK == "0.0.0.0" ]]; then
						CIDR="0"
						if [[ ! $INTERFACE ]]; then
							INTERFACE="n/a"
						fi
						ZONE="EXTERNAL"
					else
						CIDR=$(echo "$LINE" | awk '{print $3}' | awk -F "/" '{print $2}')
						if [[ $INTERFACE =~ "Mgmt" ]] || [[ $INTERFACE =~ "mag" ]]; then
							ZONE="MGMT"
						elif [[ $INTERFACE == "Sync" ]]; then
							ZONE="SYNC"
						elif [[ $INTERFACE =~ "CIN" ]]; then
							ZONE="CHASSIS_INTERNAL"
						elif [[ $INTERFACE =~ "lo" ]]; then
							ZONE="LOOPBACK"
						elif [[ $INTERFACE == "" ]]; then
							ZONE="n/a"
						elif [[ $INTERFACE == $checkRoutingSP_defaultGatewayInterface ]]; then
							ZONE="EXTERNAL"
						else
							if [[ -f $IFZONE ]]; then
								ZONE=$(cat $IFZONE | grep $INTERFACE | awk '{print $2}')
							else
							ZONE="INTERNAL"
							fi
						fi
					fi
				else
					STATE="ACTIVE"
					NETWORK=$(echo "$LINE" | awk '{print $2}' | awk -F "/" '{print $1}')
					GATEWAY=$(echo "$LINE" | awk '{print $4}' | tr -d ',')
					INTERFACE=$(echo "$LINE" | awk '{print $5}' | tr -d ',')
					COST=$(echo "$LINE" | awk '{print $7}' | tr -d ',')
					AGE=$(echo "$LINE" | awk '{print $9}')

					if [[ $NETWORK == "0.0.0.0" ]]; then
						CIDR="0"
						if [[ ! $INTERFACE ]]; then
							INTERFACE="n/a"
						fi
						ZONE="EXTERNAL"
					else
						CIDR=$(echo "$LINE" | awk '{print $2}' | awk -F "/" '{print $2}')
						if [[ $INTERFACE =~ "Mgmt" ]] || [[ $INTERFACE =~ "mag" ]]; then
							ZONE="MGMT"
						elif [[ $INTERFACE == "Sync" ]]; then
							ZONE="SYNC"
						elif [[ $INTERFACE =~ "CIN" ]]; then
							ZONE="CHASSIS_INTERNAL"
						elif [[ $INTERFACE =~ "lo" ]]; then
							ZONE="LOOPBACK"
						elif [[ $INTERFACE == "" ]]; then
							ZONE="n/a"
						elif [[ $INTERFACE == $checkRoutingSP_defaultGatewayInterface ]]; then
							ZONE="EXTERNAL"
						else
							if [[ -f $IFZONE ]]; then
								ZONE=$(cat $IFZONE | grep $INTERFACE | awk '{print $2}')
							else
								ZONE="INTERNAL"
							fi
						fi
					fi
				fi
			fi
			
			
			
			if [[ $TYPE == "STATIC" ]]; then
				IS_BLACKHOLE=$(echo "$LINE" | grep "is a blackhole route" | wc -l)
				if [[ $IS_BLACKHOLE -eq "1" ]]; then
					STATE="BLACKHOLE"
					NETWORK=$(echo "$LINE" | awk '{print $2}' | awk -F "/" '{print $1}')
					GATEWAY="BLACKHOLE"
					INTERFACE="BLACKHOLE"
					COST="BLACKHOLE"
					AGE="BLACKHOLE"
					ZONE="BLACKHOLE"
					CIDR=$(echo "$LINE" | awk '{print $2}' | awk -F "/" '{print $2}')
				else
					STATE="ACTIVE"
					NETWORK=$(echo "$LINE" | awk '{print $2}' | awk -F "/" '{print $1}')
					GATEWAY=$(echo "$LINE" | awk '{print $4}' | tr -d ',')
					INTERFACE=$(echo "$LINE" | awk '{print $5}' | tr -d ',')
					COST=$(echo "$LINE" | awk '{print $7}' | tr -d ',')
					AGE=$(echo "$LINE" | awk '{print $9}')

					if [[ $NETWORK == "0.0.0.0" ]]; then
						CIDR="0"
						if [[ ! $INTERFACE ]]; then
							INTERFACE="n/a"
						fi
						ZONE="EXTERNAL"
					else
						CIDR=$(echo "$LINE" | awk '{print $2}' | awk -F "/" '{print $2}')
						if [[ $INTERFACE =~ "Mgmt" ]] || [[ $INTERFACE =~ "mag" ]]; then
							ZONE="MGMT"
						elif [[ $INTERFACE == "Sync" ]]; then
							ZONE="SYNC"
						elif [[ $INTERFACE =~ "CIN" ]]; then
							ZONE="CHASSIS_INTERNAL"
						elif [[ $INTERFACE =~ "lo" ]]; then
							ZONE="LOOPBACK"
						elif [[ $INTERFACE == "" ]]; then
							ZONE="n/a"
						elif [[ $INTERFACE == $checkRoutingSP_defaultGatewayInterface ]]; then
							ZONE="EXTERNAL"
						else
							if [[ -f $IFZONE ]]; then
								ZONE=$(cat $IFZONE | grep $INTERFACE | awk '{print $2}')
							else
								ZONE="INTERNAL"
							fi
						fi
					fi
				fi
			fi
			
			
			
			if [[ $TYPE == "CONNECTED" ]]; then
				STATE="ACTIVE"
				NETWORK=$(echo "$LINE" | awk '{print $2}' | awk -F "/" '{print $1}')
				GATEWAY="CONNECTED"
				INTERFACE=$(echo "$LINE" | awk '{print $NF}')
				COST="n/a"
				AGE="n/a"

				if [[ $NETWORK == "0.0.0.0" ]]; then
					CIDR="0"
					if [[ ! $INTERFACE ]]; then
						INTERFACE="n/a"
					fi
					ZONE="EXTERNAL"
				else
					CIDR=$(echo "$LINE" | awk '{print $2}' | awk -F "/" '{print $2}')
					if [[ $INTERFACE =~ "Mgmt" ]] || [[ $INTERFACE =~ "mag" ]]; then
						ZONE="MGMT"
					elif [[ $INTERFACE == "Sync" ]]; then
						ZONE="SYNC"
					elif [[ $INTERFACE =~ "CIN" ]]; then
						ZONE="CHASSIS_INTERNAL"
					elif [[ $INTERFACE =~ "lo" ]]; then
						ZONE="LOOPBACK"
					elif [[ $INTERFACE == "" ]]; then
						ZONE="n/a"
					elif [[ $INTERFACE == $checkRoutingSP_defaultGatewayInterface ]]; then
						ZONE="EXTERNAL"
					else
						if [[ -f $IFZONE ]]; then
							ZONE=$(cat $IFZONE | grep $INTERFACE | awk '{print $2}')
						else
							ZONE="INTERNAL"
						fi
					fi
				fi
			fi
				
			echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkRoutingSP_routeDetails - NETWORK=$NETWORK CIDR=$CIDR GATEWAY=$GATEWAY INTERFACE=$INTERFACE ZONE=$ZONE TYPE=$TYPE STATE=$STATE AGE=$AGE COST=$COST" >>$HISTORYLOG

			IFS=$ORIGIFS
			sendSyslog "$functionName" "INFO" "checkRoutingSP_routeDetails" "NETWORK=\"$NETWORK\" CIDR=\"$CIDR\" GATEWAY=\"$GATEWAY\" INTERFACE=\"$INTERFACE\" ZONE=\"$ZONE\" TYPE=\"$TYPE\" STATE=\"$STATE\" AGE=\"$AGE\" COST=\"$COST\"" "SMO"
			IFS=$'\n'
			
		done
		IFS=$ORIGIFS
	fi
fi

if [[ $LOCALSMO == "1" ]] && [[ $checkRoutingSP_bgpPeerQty -gt "0" ]]; then
	clish -c "show bgp peers" 2>&1 | grep -v "PeerID" | grep -v "Flags" | grep -v "CLINFR0771" | sed '/^$/d' > $TEMPFILE_SHOWBGPPEERS
	
	IFS=$'\n'
	for LINE in `cat $TEMPFILE_SHOWBGPPEERS` ; do
		PEERID=$(echo "$LINE" | awk '{print $1}')
		AS=$(echo "$LINE" | awk '{print $2}')
		ROUTES=$(echo "$LINE" | awk '{print $3}')
		ACTRTS=$(echo "$LINE" | awk '{print $4}')
		STATE=$(echo "$LINE" | awk '{print $5}')
		INUPDS=$(echo "$LINE" | awk '{print $6}')
		OUTUPDS=$(echo "$LINE" | awk '{print $7}')
		UPTIME=$(echo "$LINE" | awk '{print $8}')
		
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkRoutingSP_bgpPeerDetails - PEERID=$PEERID AS=$AS ROUTES=$ROUTES ACTRTS=$ACTRTS STATE=$STATE INUPDS=$INUPDS OUTUPDS=$OUTUPDS UPTIME=$UPTIME" >>$HISTORYLOG

		IFS=$ORIGIFS
		sendSyslog "$functionName" "INFO" "checkRoutingSP_bgpPeerDetails" "PEERID=\"$PEERID\" AS=\"$AS\" ROUTES=\"$ROUTES\" ACTRTS=\"$ACTRTS\" STATE=\"$STATE\" INUPDS=\"$INUPDS\" OUTUPDS=\"$OUTUPDS\" UPTIME=\"$UPTIME\""
		IFS=$'\n'
		
		
		if [[ $STATE != "Established" ]]; then
			echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - checkRoutingSP_bgpPeerDetails - PEERID: $PEERID STATE: $STATE" >>$HISTORYLOG
			checkRoutingSP_problem="1"
			checkRoutingSP_problemInfo="$checkRoutingSP_problemInfo [BGP Peer: $PEERID State: $STATE]"
		fi
	done
	
	IFS=$ORIGIFS
fi





#LOG OUTPUTS
echo "checkRoutingSP_defaultGateway $checkRoutingSP_defaultGateway" >>$RUNLOG
echo "checkRoutingSP_defaultGatewayMac $checkRoutingSP_defaultGatewayMac" >>$RUNLOG
echo "checkRoutingSP_staticActive $checkRoutingSP_staticActive" >>$RUNLOG
echo "checkRoutingSP_staticConfigured $checkRoutingSP_staticConfigured" >>$RUNLOG
echo "checkRoutingSP_bgpPeerQty $checkRoutingSP_bgpPeerQty" >>$RUNLOG

echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkRoutingSP_defaultGateway - $checkRoutingSP_defaultGateway" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkRoutingSP_defaultGatewayMac - $checkRoutingSP_defaultGatewayMac" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkRoutingSP_staticConfigured - $checkRoutingSP_staticConfigured" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkRoutingSP_staticActive - $checkRoutingSP_staticActive" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkRoutingSP_bgpPeerQty - $checkRoutingSP_bgpPeerQty" >>$HISTORYLOG

if [[ $checkSelf_ipv6Enabled == "1" ]] && [[ $checkSelf_ipv6Configured != "0" ]]; then
	echo "checkRoutingSP_defaultGatewayIpv6 $checkRoutingSP_defaultGatewayIpv6" >>$RUNLOG
	echo "checkRoutingSP_defaultGatewayMacIpv6 $checkRoutingSP_defaultGatewayMacIpv6" >>$RUNLOG
	echo "checkRoutingSP_staticActiveIpv6 $checkRoutingSP_staticActiveIpv6" >>$RUNLOG
	echo "checkRoutingSP_staticConfiguredIpv6 $checkRoutingSP_staticConfiguredIpv6" >>$RUNLOG

	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Default Gateway Ipv6 - $checkRoutingSP_defaultGatewayIpv6" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Default Gateway MAC Ipv6 - $checkRoutingSP_defaultGatewayMacIpv6" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Static Routes Configured Ipv6 - $checkRoutingSP_staticConfiguredIpv6" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Static Routes Active Ipv6 - $checkRoutingSP_staticActiveIpv6" >>$HISTORYLOG
fi

if [[ $LOCALSMO == "1" ]] && [[ $checkRoutingSP_bgpPeerQty -eq "0" ]]; then
	asg_route > $TEMPFILE 2>&1
	checkRoutingSP_asgrouteStatus=$(cat $TEMPFILE | grep Status | awk -F ": " '{print $2}' | tr -d '[:space:]')
	checkRoutingSP_asgrouteQty=$(cat $TEMPFILE | grep via | wc -l)
		
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - ASG Route Status - $checkRoutingSP_asgrouteStatus" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - ASG Route Static Qty - $checkRoutingSP_asgrouteQty" >>$HISTORYLOG
	
	#Run again maybe there was an issue in the asg_route command
	if [[ $checkRoutingSP_asgrouteStatus != "RoutesinfoisidenticalonallSGMs" ]] && [[ $checkRoutingSP_asgrouteStatus != "RoutesinfoisidenticalonallMembers" ]]; then
		sleep 30
		asg_route > $TEMPFILE 2>&1
		checkRoutingSP_asgrouteStatus=$(cat $TEMPFILE | grep Status | awk -F ": " '{print $2}' | tr -d '[:space:]')
		checkRoutingSP_asgrouteQty=$(cat $TEMPFILE | grep via | wc -l)
		
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - ASG Route Status - (RERUN) $checkRoutingSP_asgrouteStatus" >>$HISTORYLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - ASG Route Static Qty - (RERUN) $checkRoutingSP_asgrouteQty" >>$HISTORYLOG
	fi
	
	
	if [[ $checkRoutingSP_asgrouteStatus != "RoutesinfoisidenticalonallSGMs" ]] && [[ $checkRoutingSP_asgrouteStatus != "RoutesinfoisidenticalonallMembers" ]]; then
        echo "Logic - asg_route identical: FAIL" >>$RUNLOG
        echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Route Identical - Status: $checkRoutingSP_asgrouteStatus" >>$HISTORYLOG
        checkRoutingSP_problem="1"
		checkRoutingSP_problemInfo="$checkRoutingSP_problemInfo [Routes Not Identical on all SGMs]"
	else
        echo "Logic - asg_route identical: PASS" >>$RUNLOG
        echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Route Identical - Status: $checkRoutingSP_asgrouteStatus" >>$HISTORYLOG
	fi

fi


#CLEANUP
rm -rf $TEMPFILE $TEMPFILE_SHOWCONFIGROUTE $TEMPFILE_SHOWROUTE $TEMPFILE_SHOWBGPPEERS

#RUN LOGIC
if [[ $checkRoutingSP_bgpPeerQty -gt "0" ]]; then
	checkRoutingSP_workingInfo="$checkRoutingSP_workingInfo [BGP ($checkRoutingSP_bgpPeerQty peers configured)]"
fi

if [[ $checkRoutingSP_bgpPeerQty -eq "0" ]]; then
	if [[ $checkRoutingSP_defaultGatewayMac == "<incomplete>" ]] || [[ $checkRoutingSP_defaultGatewayMac == "" ]]; then
			echo "Logic - default gateway: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Default gateway - $checkRoutingSP_defaultGateway $checkRoutingSP_defaultGatewayMac" >>$HISTORYLOG
			checkRoutingSP_problem="1"
			checkRoutingSP_problemInfo="$checkRoutingSP_problemInfo [Default Route Not Reachable]"
	else
			echo "Logic - default gateway: PASS" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Default gateway - $checkRoutingSP_defaultGateway $checkRoutingSP_defaultGatewayMac" >>$HISTORYLOG
	fi
fi


if [[ $checkRoutingSP_bgpPeerQty -eq "0" ]]; then
	if [[ $checkRoutingSP_staticConfigured != $checkRoutingSP_staticActive ]]; then
			echo "Logic - static route: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Static routes - Configured: $checkRoutingSP_staticConfigured Active: $checkRoutingSP_staticActive" >>$HISTORYLOG
			checkRoutingSP_problem="1"
			checkRoutingSP_problemInfo="$checkRoutingSP_problemInfo [Not all configured($checkRoutingSP_staticConfigured) static routes are active($checkRoutingSP_staticActive)]"
	else
			echo "Logic - static route: PASS" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Static routes - Configured: $checkRoutingSP_staticConfigured Active: $checkRoutingSP_staticActive" >>$HISTORYLOG
	fi

else
	checkRoutingSP_workingInfo="$checkRoutingSP_workingInfo [BGP configured, skipping static-route configured versus active check]"
fi

if [[ $checkSelf_ipv6Enabled == "1" ]] && [[ $checkSelf_ipv6Configured != "0" ]]; then
	if [[ $checkRoutingSP_defaultGatewayMacIpv6 == "FAILED" ]] || [[ $checkRoutingSP_defaultGatewayMacIpv6 == "" ]]; then
		if [[ $LOCALCHASSIS == "1" ]] && [[ $checkClusterXLSP_stateCh1 == "ACTIVE" ]]; then
			echo "Logic - default gateway Ipv6: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Default gateway Ipv6 - $checkRoutingSP_defaultGatewayIpv6 $checkRoutingSP_defaultGatewayMacIpv6" >>$HISTORYLOG
			checkRoutingSP_problem="1"
			checkRoutingSP_problemInfo="$checkRoutingSP_problemInfo [Default IPv6 Route Not Reachable]"
		elif  [[ $LOCALCHASSIS == "2" ]] && [[ $checkClusterXLSP_stateCh2 == "ACTIVE" ]]; then
			echo "Logic - default gateway Ipv6: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Default gateway Ipv6 - $checkRoutingSP_defaultGatewayIpv6 $checkRoutingSP_defaultGatewayMacIpv6" >>$HISTORYLOG
			checkRoutingSP_problem="1"
			checkRoutingSP_problemInfo="$checkRoutingSP_problemInfo [Default IPv6 Route Not Reachable]"
		else
			echo "Logic - default gateway Ipv6: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Default gateway Ipv6 (Probably a CHKP bug) - $checkRoutingSP_defaultGatewayIpv6 $checkRoutingSP_defaultGatewayMacIpv6" >>$HISTORYLOG
		fi
	else
			echo "Logic - default gateway Ipv6: PASS" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Default gateway Ipv6 - $checkRoutingSP_defaultGatewayIpv6 $checkRoutingSP_defaultGatewayMacIpv6" >>$HISTORYLOG
	fi

	if [[ $checkRoutingSP_bgpPeerQty -eq "0" ]]; then
		if [[ $checkRoutingSP_staticConfiguredIpv6 != $checkRoutingSP_staticActiveIpv6 ]]; then
				echo "Logic - static route Ipv6: FAIL" >>$RUNLOG
				echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Static routes Ipv6 - Configured: $checkRoutingSP_staticConfiguredIpv6 Active: $checkRoutingSP_staticActiveIpv6" >>$HISTORYLOG
				checkRoutingSP_problem="1"
				checkRoutingSP_problemInfo="$checkRoutingSP_problemInfo [Not all IPv6 configured($checkRoutingSP_staticConfiguredIpv6) static routes are active($checkRoutingSP_staticActiveIpv6)]"
		else
				echo "Logic - static route Ipv6: PASS" >>$RUNLOG
				echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Static routes - Configured: $checkRoutingSP_staticConfiguredIpv6 Active: $checkRoutingSP_staticActiveIpv6" >>$HISTORYLOG
		fi
	
	else
		checkRoutingSP_workingInfo="$checkRoutingSP_workingInfo [BGP configured, skipping IPv6 static-route configured versus active check]"
	fi
fi



#SYSLOG
if [[ $checkRoutingSP_problem == "1" ]]; then
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "PROBLEM" "checkRoutingSP_problemInfo" "VALUE=\"$checkRoutingSP_problemInfo $checkRoutingSP_warningInfo $checkRoutingSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "PROBLEM" "checkRoutingSP_problemInfo" "VALUE=\"$checkRoutingSP_problemInfo $checkRoutingSP_warningInfo $checkRoutingSP_workingInfo\""
	fi
elif [[ $checkRoutingSP_warning == "1" ]]; then
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "WARNING" "checkRoutingSP_problemInfo" "VALUE=\"$checkRoutingSP_warningInfo $checkRoutingSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "WARNING" "checkRoutingSP_problemInfo" "VALUE=\"$checkRoutingSP_warningInfo $checkRoutingSP_workingInfo\""
	fi
else
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "WORKING" "checkRoutingSP_problemInfo" "VALUE=\"$checkRoutingSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "WORKING" "checkRoutingSP_problemInfo" "VALUE=\"$checkRoutingSP_workingInfo\""
	fi
fi

sendSyslog "$functionName" "INFO" "checkRoutingSP_defaultGateway" "VALUE=\"$checkRoutingSP_defaultGateway\""
sendSyslog "$functionName" "INFO" "checkRoutingSP_defaultGatewayMac" "VALUE=\"$checkRoutingSP_defaultGatewayMac\""
sendSyslog "$functionName" "INFO" "checkRoutingSP_staticConfigured" "VALUE=\"$checkRoutingSP_staticConfigured\""
sendSyslog "$functionName" "INFO" "checkRoutingSP_staticActive" "VALUE=\"$checkRoutingSP_staticActive\""
sendSyslog "$functionName" "INFO" "checkRoutingSP_bgpPeerQty" "VALUE=\"$checkRoutingSP_bgpPeerQty\""
if [[ $checkSelf_ipv6Enabled == "1" ]] && [[ $checkSelf_ipv6Configured != "0" ]]; then
	sendSyslog "$functionName" "INFO" "checkRoutingSP_defaultGatewayIpv6" "VALUE=\"$checkRoutingSP_defaultGatewayIpv6\""
	sendSyslog "$functionName" "INFO" "checkRoutingSP_defaultGatewayMacIpv6" "VALUE=\"$checkRoutingSP_defaultGatewayMacIpv6\""
	sendSyslog "$functionName" "INFO" "checkRoutingSP_staticConfiguredIpv6" "VALUE=\"$checkRoutingSP_staticConfiguredIpv6\""
	sendSyslog "$functionName" "INFO" "checkRoutingSP_staticActiveIpv6" "VALUE=\"$checkRoutingSP_staticActiveIpv6\""
fi


	

checkRoutingSP_fEnd=$(date "+%s")
checkRoutingSP_fRunTime=$(( checkRoutingSP_fEnd - checkRoutingSP_fStart ))
echo "checkRoutingSP_fRunTime $checkRoutingSP_fRunTime" >>$RUNLOG

echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkRoutingSP_warning - $checkRoutingSP_warning" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkRoutingSP_problem - $checkRoutingSP_problem" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkRoutingSP_problemInfo - $checkRoutingSP_problemInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkRoutingSP_warningInfo - $checkRoutingSP_warningInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkRoutingSP_workingInfo - $checkRoutingSP_workingInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkRoutingSP_runTime - $checkRoutingSP_fRunTime" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkRoutingSP_warning" "VALUE=\"$checkRoutingSP_warning\""
sendSyslog "$functionName" "INFO" "checkRoutingSP_problem" "VALUE=\"$checkRoutingSP_problem\""
sendSyslog "$functionName" "INFO" "checkRoutingSP_problemInfo" "VALUE=\"$checkRoutingSP_problemInfo\""
sendSyslog "$functionName" "INFO" "checkRoutingSP_warningInfo" "VALUE=\"$checkRoutingSP_warningInfo\""
sendSyslog "$functionName" "INFO" "checkRoutingSP_workingInfo" "VALUE=\"$checkRoutingSP_workingInfo\""
sendSyslog "$functionName" "INFO" "checkRoutingSP_runTime" "VALUE=\"$checkRoutingSP_fRunTime\""

#SUMMARY
if [[ $checkRoutingSP_problem == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - checkRoutingSP - SUMMARY - PROBLEM - $checkRoutingSP_problemInfo $checkRoutingSP_warningInfo $checkRoutingSP_workingInfo" >>$HISTORYLOG
elif [[ $checkRoutingSP_warning == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - checkRoutingSP - SUMMARY - WARNING - $checkRoutingSP_warningInfo $checkRoutingSP_workingInfo" >>$HISTORYLOG
else
	echo "$HISTORYLOGPREAMBLE - checkRoutingSP - SUMMARY - WORKING - $checkRoutingSP_workingInfo" >>$HISTORYLOG
fi
echo "checkRoutingSP_problem $checkRoutingSP_problem" >>$RUNLOG
echo "END==checkRoutingSP" >>$RUNLOG
}

###################################################################################################
checkBonding() {
echo "START==checkBonding" >>$RUNLOG

#DEFAULTS
checkBonding_fStart=$(date "+%s")
functionName=${FUNCNAME[0]}
checkBonding_warning="0"
checkBonding_problem="0"
checkBonding_workingInfo=""
checkBonding_warningInfo=""
checkBonding_problemInfo=""

#COLLECT OUTPUTS
checkBonding_quantityConfigured=$(cat /config/active | grep "bonding:group" | awk -F ":" '{print $3}' | awk '{print $1}' | sort -n | uniq | wc -l)
checkBonding_configuredIfName=$(cphaprob show_bond | grep -v interface | awk '{print $1}' | grep bond | tr '\n' ',' | sed 's/,$/\n/')
checkBonding_quantityProblem=$(cphaprob show_bond |grep "UP\!\|DOWN" | grep -v interface | wc -l)
checkBonding_problemIfName=$(cphaprob show_bond |grep "UP\!\|DOWN" | grep -v interface | awk '{print $1}' | tr '\n' ',' | sed 's/,$/\n/')




#LOG OUTPUTS
echo "checkBonding_quantityConfigured $checkBonding_quantityConfigured" >>$RUNLOG
echo "checkBonding_configuredIfName $checkBonding_configuredIfName" >>$RUNLOG
echo "checkBonding_quantityProblem $checkBonding_quantityProblem" >>$RUNLOG
echo "checkBonding_problemIfName $checkBonding_problemIfName" >>$RUNLOG

echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Quantity Configured - $checkBonding_quantityConfigured" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Configured Interfaces - $checkBonding_configuredIfName" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Quantity Problem - $checkBonding_quantityProblem" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Problem Interfaces - $checkBonding_problemIfName" >>$HISTORYLOG



#RUN LOGIC
if [[ $checkBonding_quantityProblem > "0" ]]; then
		echo "Logic - bond problem: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Bond Problem - $checkBonding_quantityConfigured $checkBonding_quantityProblem" >>$HISTORYLOG
		checkBonding_problem="1"
		checkBonding_problemInfo="$checkBonding_problemInfo [$checkBonding_problemIfName]"
else
		echo "Logic - bond problem: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Bond Problem - $checkBonding_quantityConfigured $checkBonding_quantityProblem" >>$HISTORYLOG
fi




#SYSLOG
if [[ $checkBonding_problem == "1" ]]; then
	sendSyslog "$functionName" "PROBLEM" "checkBonding_problemInfo" "VALUE=\"$checkBonding_problemInfo $checkBonding_warningInfo $checkBonding_workingInfo\""
elif [[ $checkBonding_warning == "1" ]]; then
	sendSyslog "$functionName" "WARNING" "checkBonding_warningInfo" "VALUE=\"$checkBonding_warningInfo $checkBonding_workingInfo\""	
else
	sendSyslog "$functionName" "WORKING" "checkBonding_workingInfo" "VALUE=\"$checkBonding_workingInfo\""
fi

sendSyslog "$functionName" "INFO" "checkBonding_quantityConfigured" "VALUE=\"$checkBonding_quantityConfigured\""
sendSyslog "$functionName" "INFO" "checkBonding_configuredIfName" "VALUE=\"$checkBonding_configuredIfName\""
sendSyslog "$functionName" "INFO" "checkBonding_quantityProblem" "VALUE=\"$checkBonding_quantityProblem\""
sendSyslog "$functionName" "INFO" "checkBonding_problemIfName" "VALUE=\"$checkBonding_problemIfName\""

checkBonding_fEnd=$(date "+%s")
checkBonding_fRunTime=$(( checkBonding_fEnd - checkBonding_fStart ))
echo "checkBonding_fRunTime $checkBonding_fRunTime" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBonding_warning - $checkBonding_warning" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBonding_problem - $checkBonding_problem" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBonding_problemInfo - $checkBonding_problemInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBonding_warningInfo - $checkBonding_warningInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBonding_workingInfo - $checkBonding_workingInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBonding_runTime - $checkBonding_fRunTime" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkBonding_warning" "VALUE=\"$checkBonding_warning\""
sendSyslog "$functionName" "INFO" "checkBonding_problem" "VALUE=\"$checkBonding_problem\""
sendSyslog "$functionName" "INFO" "checkBonding_problemInfo" "VALUE=\"$checkBonding_problemInfo\""
sendSyslog "$functionName" "INFO" "checkBonding_warningInfo" "VALUE=\"$checkBonding_warningInfo\""
sendSyslog "$functionName" "INFO" "checkBonding_workingInfo" "VALUE=\"$checkBonding_workingInfo\""
sendSyslog "$functionName" "INFO" "checkBonding_runTime" "VALUE=\"$checkBonding_fRunTime\""

echo "checkBonding_problem $checkBonding_problem" >>$RUNLOG
echo "END==checkBonding" >>$RUNLOG
}

###################################################################################################
checkInterface() {
echo "START==checkInterface" >>$RUNLOG

#DEFAULTS
checkInterface_fStart=$(date "+%s")
functionName=${FUNCNAME[0]}
checkInterface_warning="0"
checkInterface_problem="0"
checkInterface_workingInfo=""
checkInterface_warningInfo=""
checkInterface_problemInfo=""
checkInterface_countersProblemInfo=""
TEMPFILE=$TEMPDIR/$SCRIPT.$EPOCH.$functionName
if [[ $MDPSENABLED == "2" ]]; then
	dplane > /dev/null 2>&1
fi

#COLLECT OUTPUTS
IFS=$'\n'
for LINE in `netstat -i | grep "eth*" | grep -v "Iface\|brS" | awk '$4!=0' | awk '{print $1}'` ; do
	/sbin/ethtool -S $LINE >> $TEMPFILE 2>&1
done
if [[ $MDPSENABLED == "2" ]]; then
	mplane > /dev/null 2>&1
	for LINE in `netstat -i | grep "eth*" | grep -v "Iface\|brS" | awk '$4!=0' | awk '{print $1}'` ; do
		/sbin/ethtool -S $LINE >> $TEMPFILE 2>&1
	done
	dplane > /dev/null 2>&1
fi

IFS=$ORIGIFS
checkInterface_rxJumboFrameDrop=$(cat $TEMPFILE 2>&1 | grep -v "No such file" | grep "rx_oversize_pkts_phy\|rx_long_length_errors\|rx_length_errors" | awk '{print $NF}' | paste -sd+ | bc)

echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkInterface_rxJumboFrameDrop - $checkInterface_rxJumboFrameDrop" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkInterface_rxJumboFrameDrop" "VALUE=\"$checkInterface_rxJumboFrameDrop\""
/sbin/arp -an > $TEMPFILE



#MultiQueue Configuration
# TEMPVAR_MQ=$($FWDIR/bin/mq_mng --show)
# # checkInterface_mqTotalCores=$(printf "%s\n" "$TEMPVAR_MQ" | grep "Total" | awk '{print $2}')
# # checkInterface_mqMqCores=$(printf "%s\n" "$TEMPVAR_MQ" | grep "Total" | awk '{print $5}')
# # checkInterface_mqIfQty=$(printf "%s\n" "$TEMPVAR_MQ" | grep "Up" | wc -l)
# checkInterface_mqTotalCores=$(printvar TEMPVAR_MQ | grep "Total" | awk '{print $2}')
# checkInterface_mqMqCores=$(printvar TEMPVAR_MQ | grep "Total" | awk '{print $5}')
# checkInterface_mqIfQty=$(printvar TEMPVAR_MQ | grep "Up" | wc -l)
# IFS=$'\n'
# for LINE in `printf "%s\n" "$TEMPVAR_MQ" | grep "Up"` ; do
	# IFNAME=$(echo "$LINE" | awk '{print $1}')
	# TYPE=$(echo "$LINE" | awk '{print $2}')
	# MODE=$(echo "$LINE" | awk '{print $4$5}')
	# CORES=$(echo "$LINE" | awk '{print $6}')
	# COREQTY=$(echo $CORES | tr ',' '\n' | wc -l)
	# if [[ $MODE == *"Auto"* ]] && [[ $IFNAME != "Sync" ]] && [[ $checkSelf_activeSnd != $COREQTY ]]; then
		# checkInterface_problem="1"
		# checkInterface_problemInfo="$checkInterface_problemInfo [MQ not equal to SND interface $IFNAME cores $CORES]"
	# fi
	# if [[ $MODE == *"Manual"* ]] && [[ $checkSelf_activeMdps != $COREQTY ]]; then
		# checkInterface_problem="1"
		# checkInterface_problemInfo="$checkInterface_problemInfo [MQ not equal to MDPS interface $IFNAME cores $CORES]"
	# fi
	# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkInterface_mqIfDetails - IFNAME=$IFNAME TYPE=$TYPE MODE=$MODE CORES=$CORES" >>$HISTORYLOG
	# IFS=$ORIGIFS
	# sendSyslog "$functionName" "INFO" "checkInterface_mqIfDetails" "IFNAME=\"$IFNAME\" TYPE=\"$TYPE\" MODE=\"$MODE\" CORES=\"$CORES\""
	# IFS=$'\n'
# done
# IFS=$ORIGIFS





#RUN LOGIC
for IFNAME in `netstat -i | grep -v ":" | grep -v "Iface" | grep -v "Kernel" | awk '{print $1}' | grep -v "bond" | grep -v "brS" | grep -v "br" | grep -v "lo" | grep -v "bp" | grep -v "np" | grep -v "\." | grep -v "eth-idrc0" | grep -v "mdps_tun"` ; do
	SPEED=$(/sbin/ethtool $IFNAME | grep Speed | awk '{print $2}' | rev |  cut -c5- | rev)
	RX=$(netstat -i | grep -v ":" | grep -v "\." | grep -v "brS" | grep -w $IFNAME | awk '{print $4}')
	TX=$(netstat -i | grep -v ":" | grep -v "\." | grep -v "brS" | grep -w $IFNAME | awk '{print $8}')
	RXDRP=$(cat /proc/net/dev | grep -w $IFNAME | grep -v "\." | grep -v "brS" | awk -F ":" '{print $2}' | awk '{print $4}')
	RXERR=$(cat /proc/net/dev | grep -w $IFNAME | grep -v "\." | grep -v "brS" | awk -F ":" '{print $2}' | awk '{print $3}')
	TXDRP=$(cat /proc/net/dev | grep -w $IFNAME | grep -v "\." | grep -v "brS" | awk -F ":" '{print $2}' | awk '{print $12}')
	TXERR=$(cat /proc/net/dev | grep -w $IFNAME | grep -v "\." | grep -v "brS" | awk -F ":" '{print $2}' | awk '{print $11}')
	RXBYTE=$(/bin/cp-ifconfig.sh $IFNAME | grep "byte" | awk '{print $2}' | sed -n 's/bytes://p')
	TXBYTE=$(/bin/cp-ifconfig.sh $IFNAME | grep "byte" | awk '{print $6}' | sed -n 's/bytes://p')
	LINECOUNTERS="RX=$RX TX=$TX RXDRP=$RXDRP RXERR=$RXERR TXDRP=$TXDRP TXERR=$TXERR RXBYTE=$RXBYTE TXBYTE=$TXBYTE"
	
	LASTRUNRX=$(cat $LASTRUNHISTORYLOGOUTPUT | grep -w $IFNAME | grep checkInterface_counters | head -1 | awk '{print $13}' |sed 's/[^=]*=//')
		if [[ $LASTRUNRX == "" ]] || [[ $LASTRUNRX -gt $RX ]]; then
			LASTRUNRX=$RX
		fi
	LASTRUNTX=$(cat $LASTRUNHISTORYLOGOUTPUT | grep -w $IFNAME | grep checkInterface_counters | head -1 | awk '{print $14}' |sed 's/[^=]*=//')
		if [[ $LASTRUNTX == "" ]] || [[ $LASTRUNTX -gt $TX ]]; then
			LASTRUNTX=$TX
		fi
	LASTRUNRXDRP=$(cat $LASTRUNHISTORYLOGOUTPUT | grep -w $IFNAME | grep checkInterface_counters | head -1 | awk '{print $15}' |sed 's/[^=]*=//')
		if [[ $LASTRUNRXDRP == "" ]] || [[ $LASTRUNRXDRP -gt $RXDRP ]]; then
			LASTRUNRXDRP=$RXDRP
		fi
	LASTRUNRXERR=$(cat $LASTRUNHISTORYLOGOUTPUT | grep -w $IFNAME | grep checkInterface_counters | head -1 | awk '{print $16}' |sed 's/[^=]*=//')
		if [[ $LASTRUNRXERR == "" ]] || [[ $LASTRUNRXERR -gt $RXERR ]]; then
			LASTRUNRXERR=$RXERR
		fi
	LASTRUNTXDRP=$(cat $LASTRUNHISTORYLOGOUTPUT | grep -w $IFNAME | grep checkInterface_counters | head -1 | awk '{print $17}' |sed 's/[^=]*=//')
		if [[ $LASTRUNTXDRP == "" ]] || [[ $LASTRUNTXDRP -gt $TXDRP ]]; then
			LASTRUNTXDRP=$TXDRP
		fi
	LASTRUNTXERR=$(cat $LASTRUNHISTORYLOGOUTPUT | grep -w $IFNAME | grep checkInterface_counters | head -1 | awk '{print $18}' |sed 's/[^=]*=//')
		if [[ $LASTRUNTXERR == "" ]] || [[ $LASTRUNTXERR -gt $TXERR ]]; then
			LASTRUNTXERR=$TXERR
		fi
	LASTRUNRXBYTE=$(cat $LASTRUNHISTORYLOGOUTPUT | grep -w $IFNAME | grep checkInterface_counters | head -1 | awk '{print $19}' |sed 's/[^=]*=//')
		if [[ $LASTRUNRXBYTE == "" ]] || [[ $LASTRUNRXBYTE -gt $RXBYTE ]]; then
			LASTRUNRXBYTE=$RXBYTE
		fi
	LASTRUNTXBYTE=$(cat $LASTRUNHISTORYLOGOUTPUT | grep -w $IFNAME | grep checkInterface_counters | head -1 | awk '{print $20}' |sed 's/[^=]*=//')
		if [[ $LASTRUNTXBYTE == "" ]] || [[ $LASTRUNTXBYTE -gt $TXBYTE ]]; then
			LASTRUNTXBYTE=$TXBYTE
		fi
	LASTRUNLINECOUNTERS="LASTRUN RX=$LASTRUNRX TX=$LASTRUNTX RXDRP=$LASTRUNRXDRP RXERR=$LASTRUNRXERR TXDRP=$LASTRUNTXDRP TXERR=$LASTRUNTXERR RXBYTE=$LASTRUNRXBYTE TXBYTE=$LASTRUNTXBYTE"
	
	LASTRUNDIFFRX="$(( RX - LASTRUNRX ))"
	LASTRUNDIFFTX="$(( TX - LASTRUNTX ))"
	LASTRUNDIFFRXDRP="$(( RXDRP - LASTRUNRXDRP ))"
	LASTRUNDIFFRXERR="$(( RXERR - LASTRUNRXERR ))"
	LASTRUNDIFFTXDRP="$(( TXDRP - LASTRUNTXDRP ))"
	LASTRUNDIFFTXERR="$(( TXERR - LASTRUNTXERR ))"
	LASTRUNDIFFRXBYTE="$(( RXBYTE - LASTRUNRXBYTE ))"
	LASTRUNDIFFTXBYTE="$(( TXBYTE - LASTRUNTXBYTE ))"
	LASTRUNLINEDIFFCOUNTERS="DIFF RX=$LASTRUNDIFFRX TX=$LASTRUNDIFFTX RXDRP=$LASTRUNDIFFRXDRP RXERR=$LASTRUNDIFFRXERR TXDRP=$LASTRUNDIFFTXDRP TXERR=$LASTRUNDIFFTXERR RXBYTE=$LASTRUNDIFFRXBYTE TXBYTE=$LASTRUNDIFFTXBYTE"
	
	PPSRATERX="$(( (RX - LASTRUNRX) / SINCELASTRUN ))"
	PPSRATETX="$(( (TX - LASTRUNTX) / SINCELASTRUN ))"
	PPSRATERXDRP="$(( (RXDRP - LASTRUNRXDRP) / SINCELASTRUN ))"
	PPSRATERXERR="$(( (RXERR - LASTRUNRXERR) / SINCELASTRUN ))"
	PPSRATETXDRP="$(( (TXDRP - LASTRUNTXDRP) / SINCELASTRUN ))"
	PPSRATETXERR="$(( (TXERR - LASTRUNTXERR) / SINCELASTRUN ))"
	PPSRATERXBYTE="$(( (RXBYTE - LASTRUNRXBYTE) / SINCELASTRUN ))"
	PPSRATETXBYTE="$(( (TXBYTE - LASTRUNTXBYTE) / SINCELASTRUN ))"
	if [[ $SPEED == "1000" ]] || [[ $SPEED == "10000" ]] || [[ $SPEED == "40000" ]] || [[ $SPEED == "100000" ]]; then
		RXBIT=$(( PPSRATERXBYTE * 8 ))
		TXBIT=$(( PPSRATETXBYTE * 8 ))
		SPEEDBIT=$(( SPEED * 10000 ))
		RXSATURATIONPERCENTAGE=$(( RXBIT / SPEEDBIT ))
		if [[ $RXSATURATIONPERCENTAGE -ge "100" ]]; then
			RXSATURATIONPERCENTAGE="100"
		fi
		TXSATURATIONPERCENTAGE=$(( TXBIT / SPEEDBIT ))
		if [[ $TXSATURATIONPERCENTAGE -ge "100" ]]; then
			TXSATURATIONPERCENTAGE="100"
		fi
	else
		RXSATURATIONPERCENTAGE="NA"
		TXSATURATIONPERCENTAGE="NA"
	fi
	PPSRATECOUNTERS="PPSRATE RX=$PPSRATERX TX=$PPSRATETX RXDRP=$PPSRATERXDRP RXERR=$PPSRATERXERR TXDRP=$PPSRATETXDRP TXERR=$PPSRATETXERR RXBYTE=$PPSRATERXBYTE TXBYTE=$PPSRATETXBYTE RXSATURATIONPERCENTAGE=$RXSATURATIONPERCENTAGE TXSATURATIONPERCENTAGE=$TXSATURATIONPERCENTAGE"
		
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkInterface_counters $IFNAME $LINECOUNTERS" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkInterface_lastrunCounters $IFNAME $LASTRUNLINECOUNTERS" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkInterface_diffCounters $IFNAME $LASTRUNLINEDIFFCOUNTERS" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkInterface_ppsrateCounters $IFNAME $PPSRATECOUNTERS" >>$HISTORYLOG
	
	sendSyslog "$functionName" "INFO" "checkInterface_counters" "IFNAME=\"$IFNAME\" RX=\"$RX\" TX=\"$TX\" RXDRP=\"$RXDRP\" RXERR=\"$RXERR\" TXDRP=\"$TXDRP\" TXERR=\"$TXERR\" RXBYTE=\"$RXBYTE\" TXBYTE=\"$TXBYTE\""
	sendSyslog "$functionName" "INFO" "checkInterface_countersRate" "IFNAME=\"$IFNAME\" PPSRATE RX=\"$PPSRATERX\" TX=\"$PPSRATETX\" RXDRP=\"$PPSRATERXDRP\" RXERR=\"$PPSRATERXERR\" TXDRP=\"$PPSRATETXDRP\" TXERR=\"$PPSRATETXERR\" RXBYTE=\"$PPSRATERXBYTE\" TXBYTE=\"$PPSRATETXBYTE\" RXSATURATIONPERCENTAGE=\"$RXSATURATIONPERCENTAGE\" TXSATURATIONPERCENTAGE=\"$TXSATURATIONPERCENTAGE\""
	
	if [[ $IDSENABLED == "1" ]] ; then
		if [[ $PPSRATERX -eq "0" ]]; then
			echo "Logic - interface counters: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - RX Packets Zero - $IFNAME $LASTRUNDIFFLINECOUNTERS" >>$HISTORYLOG
			checkInterface_countersProblemInfo="$checkInterface_countersProblemInfo $IFNAME"
			
			checkInterface_counters="1"
			checkInterface_warningCounters="1"
			checkInterface_warningInfo="$checkInterface_problemInfo [RX Packets $IFNAME $PPSRATERX/sec (IDS)]"
		fi
		# if [[ $PPSRATETX -eq "0" ]]; then
			# echo "Logic - interface counters: FAIL" >>$RUNLOG
			# echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - TX Packets Zero - $IFNAME $LASTRUNDIFFLINECOUNTERS" >>$HISTORYLOG
			# checkInterface_countersProblemInfo="$checkInterface_countersProblemInfo $IFNAME"
			# checkInterface_counters="1"
			# checkInterface_problemCounters="1"
			# checkInterface_problemInfo="$checkInterface_problemInfo [TX Packets $IFNAME $PPSRATERXDRP/sec (IDS)]"
		# fi
		if [[ $PPSRATERXDRP -gt "10" ]]; then
			echo "Logic - interface counters: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - RX Drops Incrementing - $IFNAME $LASTRUNDIFFLINECOUNTERS" >>$HISTORYLOG
			checkInterface_countersProblemInfo="$checkInterface_countersProblemInfo $IFNAME"
			#checkInterface_counters="1"
			checkInterface_problemInfo="$checkInterface_problemInfo [RX Drops $IFNAME $PPSRATERXDRP/sec (IDS)]"
		fi
				
	else
		if [[ $PPSRATERXDRP -gt "100" ]]; then
			echo "Logic - interface counters: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - RX Drops Incrementing - $IFNAME $LASTRUNDIFFLINECOUNTERS" >>$HISTORYLOG
			checkInterface_countersProblemInfo="$checkInterface_countersProblemInfo $IFNAME"
			checkInterface_counters="1"
			checkInterface_problemCounters="1"
			checkInterface_problemInfo="$checkInterface_problemInfo [RX Drops $IFNAME $PPSRATERXDRP/sec]"
		fi	
	fi
	if [[ $PPSRATERXERR -gt "0" ]]; then
		echo "Logic - interface counters: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - RX Errors Incrementing - $IFNAME $LASTRUNDIFFLINECOUNTERS" >>$HISTORYLOG
		checkInterface_countersProblemInfo="$checkInterface_countersProblemInfo $IFNAME"
		checkInterface_counters="1"
		if [[ $PPSRATERXERR -ge "100" ]]; then
			checkInterface_problemCounters="1"
			checkInterface_problemInfo="$checkInterface_problemInfo [RX Errors $IFNAME $PPSRATERXERR/sec]"
		fi
		if [[ $PPSRATERXERR -gt "0" ]] && [[ $PPSRATERXERR -lt "100" ]]; then
			checkInterface_warningCounters="1"
			checkInterface_warningInfo="$checkInterface_warningInfo [RX Errors $IFNAME $PPSRATERXERR/sec]"
		fi
		
	fi	
	if [[ $PPSRATETXDRP -gt "0" ]]; then
		echo "Logic - interface counters: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - TX Drops Incrementing - $IFNAME $LASTRUNDIFFLINECOUNTERS" >>$HISTORYLOG
		checkInterface_countersProblemInfo="$checkInterface_countersProblemInfo $IFNAME"
		checkInterface_counters="1"
		checkInterface_problemCounters="1"
		checkInterface_problemInfo="$checkInterface_problemInfo [TX Drops $IFNAME $PPSRATETXDRP/sec]"
	fi	
	if [[ $PPSRATETXERR -gt "0" ]]; then
		echo "Logic - interface counters: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - TX Error Incrementing - $IFNAME $LASTRUNDIFFLINECOUNTERS" >>$HISTORYLOG
		checkInterface_countersProblemInfo="$checkInterface_countersProblemInfo $IFNAME"
		checkInterface_counters="1"
		checkInterface_problemCounters="1"
		checkInterface_problemInfo="$checkInterface_problemInfo [TX Errors $IFNAME $PPSRATETXERR/sec]"
	fi	
	
	if [[ $RXSATURATIONPERCENTAGE == "NA" ]] || [[ $TXSATURATIONPERCENTAGE == "NA" ]]; then
		echo "Logic - interface saturation: NA" >>$RUNLOG
	else
		if [[ $RXSATURATIONPERCENTAGE -gt "90" ]] || [[ $TXSATURATIONPERCENTAGE -gt "90" ]]; then
			echo "Logic - interface saturation: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Interface Saturation - $IFNAME RX=$RXSATURATIONPERCENTAGE TX=$TXSATURATIONPERCENTAGE" >>$HISTORYLOG
			checkInterface_saturationProblemInfo="$checkInterface_saturationProblemInfo $IFNAME"
			checkInterface_saturation="1"
			checkInterface_problemInfo="$checkInterface_problemInfo [Saturation $IFNAME(RX=$RXSATURATIONPERCENTAGE/TX=$TXSATURATIONPERCENTAGE)]"
		fi
		
	fi
done


for LINE in `netstat -i | grep -v ":" | grep -v "Iface" | grep -v "Kernel" | awk '{print $1}' | grep -v "bond" | grep -v "brS" | grep -v "br" | grep -v "lo" | grep -v "bp" | grep -v "np" | grep -v "\." | grep -v "eth-idrc0" | grep -v "mdps_tun"` ; do
	IFNAME=$(netstat -i | grep -v ":" | grep -v "\." | grep -v "brS" | grep $LINE | awk '{print $1}')
	SPEED=$(/sbin/ethtool $IFNAME | grep Speed | awk '{print $2}' | rev |  cut -c5- | rev)
	DUPLEX=$(/sbin/ethtool $IFNAME | grep Duplex | awk '{print $2}')
	LINK=$(clish -c "show interface $IFNAME" | grep -v CLINFR0771 | grep link-state | awk '{print $3}')
	LINEIF="SPEED=$SPEED DUPLEX=$DUPLEX LINK=$LINK"
	
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkInterface_status $IFNAME $LINEIF" >>$HISTORYLOG
	sendSyslog "$functionName" "INFO" "checkInterface_status" "IFNAME=\"$IFNAME\" SPEED=\"$SPEED\" DUPLEX=\"$DUPLEX\" LINK=\"$LINK\""
	
	if [[ $DUPLEX == "Half" ]] || [[ $SPEED -lt "1000" ]] || [[ $LINK == "down" ]]; then
		echo "Logic - interface status: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Interface Status - $IFNAME $LINEIF" >>$HISTORYLOG
			checkInterface_countersProblemInfo="$checkInterface_countersProblemInfo $IFNAME"
			checkInterface_counters="1"
			checkInterface_problemCounters="1"
			checkInterface_problemInfo="$checkInterface_problemInfo [Link/Speed/Duplex $IFNAME]"
	fi
done




for LINE in `cat /config/active | grep "interface:" | grep ":state on" | awk -F ":" '{print $2}' | grep -v "lo"` ; do
	IFNAME=$LINE
	BASEIFNAME=$(echo "$LINE" | awk -F "." '{print $1}')
	BASEIFNAMEVLANS=$(cat /config/active | grep "interface:" | grep "$IFNAME" | grep ":state on" | wc -l)
	IPV4ADDRESS=$(cat /config/active | grep "interface:" | grep "$IFNAME" | grep "ipaddr" | grep -v " t" | awk -F ":" '{print $4}')
	IPV6ADDRESS=$(cat /config/active | grep "interface:" | grep "$IFNAME" | grep "ip6addr" | grep -v " t" | awk -F ":" '{print $4}')
	BOND=$(cat /config/active | grep "bonding:group" | grep ":port:" | awk -F ":" '{print $5}' | awk '{print $1}' | grep $IFNAME | wc -l)
	BRIDGE=$(/bin/cp-ifconfig.sh | grep "Link" | awk '{print $1}' | grep "$IFNAME" | grep "br" | wc -l)
	LINEIF="BASEIFNAME=$BASEIFNAME IPV4ADDRESS=$IPV4ADDRESS IPV6ADDRESS=$IPV6ADDRESS BOND=$BOND BRIDGE=$BRIDGE"
	
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkInterface_state $IFNAME $LINEIF" >>$HISTORYLOG
	
	if [[ $BOND == "0" ]] && [[ $BRIDGE == "0" ]] && [[ $IFNAME != "eth-idrc0" ]]; then
		if [[ $BASEIFNAMEVLANS == "1"  ]]; then
			if [[ $IPV4ADDRESS == "" ]] && [[ $IPV6ADDRESS == "" ]]; then
				echo "Logic - interface state on but no IP address: FAIL" >>$RUNLOG
				echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Interface State on but no IP - $IFNAME" >>$HISTORYLOG
				checkInterface_stateProblemInfo="$checkInterface_stateProblemInfo $IFNAME"
				checkInterface_state="1"
				checkInterface_problemInfo="$checkInterface_problemInfo [State On, No IP Address: $IFNAME]"
			fi
		fi
	fi
done

IFS=$'\n'
for LINE in `cat /config/active | grep "interface:" | grep ":mask" | grep -v "derived" | grep -v "lo\|CIN" | awk -F ":" '{print $2,$4,$NF}' | awk '{print $1,$2,$4}'` ; do
	IFNAME=$(echo "$LINE" | awk '{print $1}')
	IPADDR=$(echo "$LINE" | awk '{print $2}')
	CIDR=$(echo "$LINE" | awk '{print $3}')
	if [[ $MDPSENABLED == "2" ]]; then
		FOUND=$(cat /config/active | grep "mdps:interface:management" | grep $IFNAME | wc -l)
		if [[ $FOUND -gt "0" ]]; then
			MAC=$(/bin/cp-ifconfig.sh $IFNAME | grep "HWaddr" | awk '{print $NF}')
		elif [[ $IFNAME == "Sync" ]]; then
			MAC=$(/bin/cp-ifconfig.sh $IFNAME | grep "HWaddr" | awk '{print $NF}')
		else
			dplane > /dev/null 2>&1
			MAC=$(/bin/cp-ifconfig.sh $IFNAME | grep "HWaddr" | awk '{print $NF}')
			mplane > /dev/null 2>&1
		fi
	else
		MAC=$(/bin/cp-ifconfig.sh $IFNAME | grep "HWaddr" | awk '{print $NF}')
	fi
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkInterface_ipDetail $IFNAME $IPADDR /$CIDR $MAC" >>$HISTORYLOG
	IFS=$ORIGIFS
	sendSyslog "$functionName" "INFO" "checkInterface_ipDetail" "IFNAME=\"$IFNAME\" IPADDR=\"$IPADDR\" CIDR=\"$CIDR\" MAC=\"$MAC\""
	IFS=$'\n'
done
IFS=$ORIGIFS


if [[ $checkSelf_haInstalled == "1" ]] && [[ $checkSelf_haNotStarted == "0" ]]; then
	IFS=$'\n'
	for LINE in `clish -c "show routed cluster-state detailed" | sed -n '/Interface/,/^$/p' | sed '1d;$d' | sed '/^$/d'` ; do
		IFNAME=$(echo "$LINE" | awk '{print $1}')
		IPADDR=$(echo "$LINE" | awk '{print $2}')
		IPADDRV6=$(echo "$LINE" | awk '{print $3}')
		if [[ $IPADDRV6 == "None" ]]; then
			IPADDRV6=""
		fi
		if [[ $MDPSENABLED == "2" ]]; then
			mplane > /dev/null 2>&1
			VMAC=$(cphaprob -a if | grep $IFNAME | grep "VMAC" | wc -l)
			if [[ $VMAC == "1" ]]; then
				MAC=$(cphaprob -a if | grep $IFNAME | grep "VMAC" | grep -v "sync" | awk '{print $NF}')
			else
				MAC=""
			fi
			dplane > /dev/null 2>&1
		else
			VMAC=$(cphaprob -a if | grep $IFNAME | grep "VMAC" | wc -l)
			if [[ $VMAC == "1" ]]; then
				MAC=$(cphaprob -a if | grep $IFNAME | grep "VMAC" | grep -v "sync" | awk '{print $NF}')
			else
				MAC=""
			fi
		fi

		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkInterface_ipDetail $IFNAME $IPADDR $IPADDRV6 $MAC (VIP)" >>$HISTORYLOG
		IFS=$ORIGIFS
		sendSyslog "$functionName" "INFO" "checkInterface_ipDetail" "IFNAME=\"$IFNAME\" IPADDR=\"$IPADDR\" IPADDRV6=\"$IPADDRV6\" MAC=\"$MAC\" VIP=\"Yes\""
		IFS=$'\n'
	done
	IFS=$ORIGIFS
fi









if [[ $checkInterface_counters == "1" ]]; then
		echo "Logic - interface counters FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Interface Counters - $checkInterface_countersProblemInfo" >>$HISTORYLOG
		if [[ $checkInterface_warningCounters == "1" ]]; then
			checkInterface_warning="1"
		fi
		if [[ $checkInterface_problemCounters == "1" ]]; then
			checkInterface_problem="1"
		fi
		
else
		echo "Logic - interface counters: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Interface Counters - $checkInterface_countersProblemInfo" >>$HISTORYLOG
fi

if [[ $checkInterface_saturation > "0" ]]; then
		echo "Logic - saturation: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Interface Saturation - $checkInterface_saturationProblemInfo" >>$HISTORYLOG
		checkInterface_problem="1"
else
		echo "Logic - saturation: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Interface Saturation - $checkInterface_saturationProblemInfo" >>$HISTORYLOG
fi	

if [[ $checkInterface_state > "0" ]]; then
		echo "Logic - interface state/configuration FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Interface Configuration - $checkInterface_stateProblemInfo" >>$HISTORYLOG
		checkInterface_problem="1"
else
		echo "Logic - interface state/configuration: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Interface Configuration - $checkInterface_stateProblemInfo" >>$HISTORYLOG
fi

IFS=$'\n'
for LINE in `cat $TEMPFILE | grep -v "incomplete"` ; do
	IP=$(echo "$LINE" | awk '{print $2}' | tr -d '()')
	MACADDR=$(echo "$LINE" | awk '{print $4}')
	INTERFACE=$(echo "$LINE" | awk '{print $NF}')
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkInterface_arpDetails $IP $MACADDR $INTERFACE" >>$HISTORYLOG
	IFS=$ORIGIFS
	sendSyslog "$functionName" "INFO" "checkInterface_arpDetails" "IP=\"$IP\" MACADDR=\"$MACADDR\" INTERFACE=\"$INTERFACE\""
	IFS=$'\n'
done
IFS=$ORIGIFS


#LOGGING
# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkInterface_mqTotalCores - $checkInterface_mqTotalCores" >>$HISTORYLOG
# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkInterface_mqMqCores - $checkInterface_mqMqCores" >>$HISTORYLOG


#SYSLOG
if [[ $checkInterface_problem == "1" ]]; then
	sendSyslog "$functionName" "PROBLEM" "checkInterface_problemInfo" "VALUE=\"$checkInterface_problemInfo $checkInterface_warningInfo $checkInterface_workingInfo\""
elif [[ $checkInterface_warning == "1" ]]; then
	sendSyslog "$functionName" "WARNING" "checkInterface_warningInfo" "VALUE=\"$checkInterface_warningInfo $checkInterface_workingInfo\""	
else
	sendSyslog "$functionName" "WORKING" "checkInterface_workingInfo" "VALUE=\"$checkInterface_workingInfo\""
fi
# sendSyslog "$functionName" "INFO" "checkInterface_mqDetails" "TOTAL_CORES=\"$checkInterface_mqTotalCores\" MQ_CORES=\"$checkInterface_mqMqCores\" IFQTY=\"$checkInterface_mqIfQty\""




#CLEANUP
rm $TEMPFILE

checkInterface_fEnd=$(date "+%s")
checkInterface_fRunTime=$(( checkInterface_fEnd - checkInterface_fStart ))
echo "checkInterface_fRunTime $checkInterface_fRunTime" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkInterface_warning - $checkInterface_warning" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkInterface_problem - $checkInterface_problem" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkInterface_problemInfo - $checkInterface_problemInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkInterface_warningInfo - $checkInterface_warningInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkInterface_workingInfo - $checkInterface_workingInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkInterface_runTime - $checkInterface_fRunTime" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkInterface_warning" "VALUE=\"$checkInterface_warning\""
sendSyslog "$functionName" "INFO" "checkInterface_problem" "VALUE=\"$checkInterface_problem\""
sendSyslog "$functionName" "INFO" "checkInterface_problemInfo" "VALUE=\"$checkInterface_problemInfo\""
sendSyslog "$functionName" "INFO" "checkInterface_warningInfo" "VALUE=\"$checkInterface_warningInfo\""
sendSyslog "$functionName" "INFO" "checkInterface_workingInfo" "VALUE=\"$checkInterface_workingInfo\""
sendSyslog "$functionName" "INFO" "checkInterface_runTime" "VALUE=\"$checkInterface_fRunTime\""
echo "checkInterface_warning $checkInterface_warning" >>$RUNLOG
echo "checkInterface_problem $checkInterface_problem" >>$RUNLOG
echo "END==checkInterface" >>$RUNLOG
}

###################################################################################################
checkInterfaceSP() {
echo "START==checkInterfaceSP" >>$RUNLOG

#DEFAULTS
checkInterfaceSP_fStart=$(date "+%s")
functionName=${FUNCNAME[0]}
checkInterfaceSP_warning="0"
checkInterfaceSP_problem="0"
checkInterfaceSP_workingInfo=""
checkInterfaceSP_warningInfo=""
checkInterfaceSP_problemInfo=""
checkInterfaceSP_countersProblemInfo=""
checkInterfaceSP_diagStatus="0"
checkInterfaceSP_diagStatusReason="n/a"
TEMPFILE=$TEMPDIR/$SCRIPT.$EPOCH.$functionName



#COLLECT OUTPUTS
# if [[ $LOCALSMO == "1" ]] && [[ $APPLIANCETYPE != "MAESTRO" ]]; then
	# drop_stat=rx_missed_errors
	# backplane_driver=`readlink /sys/class/net/BPEth0/device/driver 2>/dev/null`
	# backplane_driver=${backplane_driver##*/}
	# if [ "$backplane_driver" = "i40e" ]; then
	   # drop_stat=rx_dropped
	# fi

	# checkInterfaceSP_dropsRx=$(g_all cat /sys/class/net/BPEth*/statistics/$drop_stat | grep -v 1_  | grep -v 2_ | paste -sd+ | bc)
		
	# LASTRUNDROPSRX=$(cat $LASTRUNHISTORYLOGOUTPUT | grep "checkInterfaceSP_dropsRx" | grep -v "Rate" | head -1 | awk -F  " - " '{print $7}')
	# if [[ $LASTRUNDROPSRX == "" || $LASTRUNDROPSRX -lt "0" ]]; then
		# LASTRUNDROPSRX=$checkInterfaceSP_dropsRx
	# fi
	
	# LASTRUNDIFFDROPSRX="$(( checkInterfaceSP_dropsRx - LASTRUNDROPSRX ))"
	
	# PPSRATEDROPSDROPSRX="$(( (checkInterfaceSP_dropsRx - LASTRUNDROPSRX) / SINCELASTRUN ))"
	
	# echo "checkInterfaceSP_dropsRxRate $PPSRATEDROPSDROPSRX" >>$RUNLOG
	# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkInterfaceSP_dropsRxRate - $PPSRATEDROPSDROPSRX" >>$HISTORYLOG
	# sendSyslog "$functionName" "INFO" "checkInterfaceSP_dropsRxRate" "VALUE=\"$PPSRATEDROPSDROPSRX\"" "SMO"

# fi

if [[ $LOCALSMO == "1" ]]; then
	g_perf -a -v > $TEMPFILE 2>&1
	checkInterfaceSP_perfThroughput0=$(cat $TEMPFILE | grep "Throughput" | head -1 | awk -F "|" '{print $3}')
	checkInterfaceSP_perfThroughput1=$(cat $TEMPFILE | grep "Throughput" | head -1 | awk -F "|" '{print $3}' | awk '{print $1}')
		MULTIPLIERK=$(echo $checkInterfaceSP_perfThroughput0 | grep "K" | wc -l)
		MULTIPLIERM=$(echo $checkInterfaceSP_perfThroughput0 | grep "M" | wc -l)
		MULTIPLIERG=$(echo $checkInterfaceSP_perfThroughput0 | grep "G" | wc -l)
		if [[ $MULTIPLIERK == "1" ]]; then
			checkInterfaceSP_perfThroughput=$(echo $checkInterfaceSP_perfThroughput1*1000 | bc | awk -F "." '{print $1}')
		fi
		if [[ $MULTIPLIERM == "1" ]]; then
			checkInterfaceSP_perfThroughput=$(echo $checkInterfaceSP_perfThroughput1*1000000 | bc | awk -F "." '{print $1}')
		fi
		if [[ $MULTIPLIERG == "1" ]]; then
			checkInterfaceSP_perfThroughput=$(echo $checkInterfaceSP_perfThroughput1*1000000000 | bc | awk -F "." '{print $1}')
		fi
		if [[ $MULTIPLIERK == "0" ]] && [[ $MULTIPLIERM == "0" ]] && [[ $MULTIPLIERG == "0" ]]; then
			checkInterfaceSP_perfThroughput=$checkInterfaceSP_perfThroughput1
		fi
	checkInterfaceSP_perfRate0=$(cat $TEMPFILE | grep "Packet rate" | awk -F "|" '{print $3}')
	checkInterfaceSP_perfRate1=$(cat $TEMPFILE | grep "Packet rate" | awk -F "|" '{print $3}' | awk '{print $1}')
		MULTIPLIERK=$(echo $checkInterfaceSP_perfRate0 | grep "K" | wc -l)
		MULTIPLIERM=$(echo $checkInterfaceSP_perfRate0 | grep "M" | wc -l)
		MULTIPLIERG=$(echo $checkInterfaceSP_perfRate0 | grep "G" | wc -l)
		if [[ $MULTIPLIERK == "1" ]]; then
			checkInterfaceSP_perfRate=$(echo $checkInterfaceSP_perfRate1*1000 | bc | awk -F "." '{print $1}')
		fi
		if [[ $MULTIPLIERM == "1" ]]; then
			checkInterfaceSP_perfRate=$(echo $checkInterfaceSP_perfRate1*1000000 | bc | awk -F "." '{print $1}')
		fi
		if [[ $MULTIPLIERG == "1" ]]; then
			checkInterfaceSP_perfRate=$(echo $checkInterfaceSP_perfRate1*1000000000 | bc | awk -F "." '{print $1}')
		fi
		if [[ $MULTIPLIERK == "0" ]] && [[ $MULTIPLIERM == "0" ]] && [[ $MULTIPLIERG == "0" ]]; then
			checkInterfaceSP_perfRate=$checkInterfaceSP_perfRate0
		fi	
	
	for LINE in `echo $ALLSGM` ; do
		THROUGHPUT0=$(cat $TEMPFILE | grep "$LINE" | awk -F "|" '{print $3}')
		THROUGHPUT1=$(cat $TEMPFILE | grep "$LINE" | awk -F "|" '{print $3}' | awk '{print $1}')
			MULTIPLIERK=$(echo $THROUGHPUT0 | grep "K" | wc -l)
			MULTIPLIERM=$(echo $THROUGHPUT0 | grep "M" | wc -l)
			MULTIPLIERG=$(echo $THROUGHPUT0 | grep "G" | wc -l)
			if [[ $MULTIPLIERK == "1" ]]; then
				THROUGHPUT=$(echo $THROUGHPUT1*1000 | bc)
			fi
			if [[ $MULTIPLIERM == "1" ]]; then
				THROUGHPUT=$(echo $THROUGHPUT1*1000000 | bc)
			fi
			if [[ $MULTIPLIERG == "1" ]]; then
				THROUGHPUT=$(echo $THROUGHPUT1*1000000000 | bc)
			fi
			if [[ $MULTIPLIERK == "0" ]] && [[ $MULTIPLIERM == "0" ]] && [[ $MULTIPLIERG == "0" ]]; then
				THROUGHPUT=$THROUGHPUT1
			fi
		RATE0=$(cat $TEMPFILE | grep "$LINE" | awk -F "|" '{print $4}')
		RATE1=$(cat $TEMPFILE | grep "$LINE" | awk -F "|" '{print $4}' | awk '{print $1}')
			MULTIPLIERK=$(echo $RATE0 | grep "K" | wc -l)
			MULTIPLIERM=$(echo $RATE0 | grep "M" | wc -l)
			MULTIPLIERG=$(echo $RATE0 | grep "G" | wc -l)
			if [[ $MULTIPLIERK == "1" ]]; then
				RATE=$(echo $RATE1*1000 | bc)
			fi
			if [[ $MULTIPLIERM == "1" ]]; then
				RATE=$(echo $RATE1*1000 | bc)
			fi
			if [[ $MULTIPLIERG == "1" ]]; then
				RATE=$(echo $RATE1*1000 | bc)
			fi
			if [[ $MULTIPLIERK == "0" ]] && [[ $MULTIPLIERM == "0" ]] && [[ $MULTIPLIERG == "0" ]]; then
				RATE=$RATE1
			fi

		checkInterfaceSP_perfSgm="$checkInterfaceSP_perfSgm [$LINE/$THROUGHPUT/$RATE]"
		sendSyslog "$functionName" "INFO" "checkInteraceSP_perfSgm" "VALUE=\"$checkInteraceSP_perfSgm\" SGM=\"$LINE\" THROUGHPUT=\"$THROUGHPUT\" RATE=\"$RATE\""
	done
	
	
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkInterfaceSP_perfThroughput - $checkInterfaceSP_perfThroughput" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkInterfaceSP_perfRate - $checkInterfaceSP_perfRate" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO -checkInteraceSP_perfSgm - $checkInteraceSP_perfSgm" >>$HISTORYLOG
	sendSyslog "$functionName" "INFO" "checkInterfaceSP_perfThroughput" "VALUE=\"$checkInterfaceSP_perfThroughput\""
	sendSyslog "$functionName" "INFO" "checkInterfaceSP_perfRate" "VALUE=\"$checkInterfaceSP_perfRate\""
	sendSyslog "$functionName" "INFO" "checkInteraceSP_perfSgm" "VALUE=\"$checkInteraceSP_perfSgm\""
fi

if [[ $LOCALSMO == "1" ]]; then
	/sbin/arp -an | grep -v "192.0.2" | grep -v "198.51.100" > $TEMPFILE
	IFS=$'\n'
	for LINE in `cat $TEMPFILE | grep -v "incomplete"` ; do
		IP=$(echo "$LINE" | awk '{print $2}' | tr -d '()')
		MACADDR=$(echo "$LINE" | awk '{print $4}')
		INTERFACE=$(echo "$LINE" | awk '{print $NF}')
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkInterfaceSP_arpDetails $IP $MACADDR $INTERFACE" >>$HISTORYLOG
		IFS=$ORIGIFS
		sendSyslog "$functionName" "INFO" "checkInterfaceSP_arpDetails" "IP=\"$IP MACDDR=\"$MACADDR\" INTERFACE=\"$INTERFACE\"" "SMO"
		IFS=$'\n'
	done
	IFS=$ORIGIFS
fi


if [[ $LOCALSMO == "1" ]]; then
	IFS=$'\n'
	for LINE in `cat /config/active | grep "interface:" | grep ":mask" | grep -v "derived" | grep -v "lo\|CIN" | awk -F ":" '{print $2,$4,$NF}' | awk '{print $1,$2,$4}'` ; do
		# IFNAME=$(echo "$LINE" | awk '{print $3}')
		# IPADDR=$(echo "$LINE" | awk '{print $5}')
		# CIDR=$(echo "$LINE" | awk '{print $7}')
		IFNAME=$(echo "$LINE" | awk '{print $1}')
		IPADDR=$(echo "$LINE" | awk '{print $2}')
		CIDR=$(echo "$LINE" | awk '{print $3}')
		MAC=$(/sbin/ifconfig $IFNAME | grep "HWaddr" | awk '{print $NF}')
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkInterfaceSP_ipDetail $IFNAME $IPADDR /$CIDR $MAC" >>$HISTORYLOG
		IFS=$ORIGIFS
		sendSyslog "$functionName" "INFO" "checkInterfaceSP_ipDetail" "IFNAME=\"$IFNAME\" IPADDR=\"$IPADDR\" CIDR=\"$CIDR\" MAC=\"$MAC\"" "SMO"
		IFS=$'\n'
	done
	IFS=$ORIGIFS
fi



IFS=$'\n'
for LINE in `netstat -i | grep "ethsBP" | awk '$4!=0' | awk '{print $1}'` ; do
	/sbin/ethtool -S $LINE >> $TEMPFILE 2>&1
done
IFS=$ORIGIFS
checkInterfaceSP_rxJumboFrameDrop=$(cat $TEMPFILE 2>&1 | grep -v "No such file" | grep "rx_oversize_pkts_phy\|rx_long_length_errors\|rx_length_errors" | awk '{print $NF}' | paste -sd+ | bc)


IFS=$'\n'
for IFNAME in `netstat -i | grep -v ":" | grep "BPEth0\|BPEth1" | awk '{print $1}'` ; do
	SPEED=$(/sbin/ethtool $IFNAME | grep "Speed" | awk '{print $2}' | rev |  cut -c5- | rev)
	RX=$(netstat -i | grep -v ":" | grep -v "\." | grep -v "brS" | grep -w $IFNAME | awk '{print $4}')
	TX=$(netstat -i | grep -v ":" | grep -v "\." | grep -v "brS" | grep -w $IFNAME | awk '{print $8}')
	RXDRP=$(cat /proc/net/dev | grep -w $IFNAME | grep -v "\." | grep -v "brS" | awk -F ":" '{print $2}' | awk '{print $4}')
	RXERR=$(cat /proc/net/dev | grep -w $IFNAME | grep -v "\." | grep -v "brS" | awk -F ":" '{print $2}' | awk '{print $3}')
	TXDRP=$(cat /proc/net/dev | grep -w $IFNAME | grep -v "\." | grep -v "brS" | awk -F ":" '{print $2}' | awk '{print $12}')
	TXERR=$(cat /proc/net/dev | grep -w $IFNAME | grep -v "\." | grep -v "brS" | awk -F ":" '{print $2}' | awk '{print $11}')
	RXBYTE=$(/bin/cp-ifconfig.sh $IFNAME | grep "byte" | awk '{print $2}' | sed -n 's/bytes://p')
	TXBYTE=$(/bin/cp-ifconfig.sh $IFNAME | grep "byte" | awk '{print $6}' | sed -n 's/bytes://p')
	LINECOUNTERS="RX=$RX TX=$TX RXDRP=$RXDRP RXERR=$RXERR TXDRP=$TXDRP TXERR=$TXERR RXBYTE=$RXBYTE TXBYTE=$TXBYTE"
	
	LASTRUNRX=$(cat $LASTRUNHISTORYLOGOUTPUT | grep -w $IFNAME | grep checkInterfaceSP_counters | head -1 | awk '{print $13}' |sed 's/[^=]*=//')
		if [[ $LASTRUNRX == "" ]] || [[ $LASTRUNRX -gt $RX ]]; then
			LASTRUNRX=$RX
		fi
	LASTRUNTX=$(cat $LASTRUNHISTORYLOGOUTPUT | grep -w $IFNAME | grep checkInterfaceSP_counters | head -1 | awk '{print $14}' |sed 's/[^=]*=//')
		if [[ $LASTRUNTX == "" ]] || [[ $LASTRUNTX -gt $TX ]]; then
			LASTRUNTX=$TX
		fi
	LASTRUNRXDRP=$(cat $LASTRUNHISTORYLOGOUTPUT | grep -w $IFNAME | grep checkInterfaceSP_counters | head -1 | awk '{print $15}' |sed 's/[^=]*=//')
		if [[ $LASTRUNRXDRP == "" ]] || [[ $LASTRUNRXDRP -gt $RXDRP ]]; then
			LASTRUNRXDRP=$RXDRP
		fi
	LASTRUNRXERR=$(cat $LASTRUNHISTORYLOGOUTPUT | grep -w $IFNAME | grep checkInterfaceSP_counters | head -1 | awk '{print $16}' |sed 's/[^=]*=//')
		if [[ $LASTRUNRXERR == "" ]] || [[ $LASTRUNRXERR -gt $RXERR ]]; then
			LASTRUNRXERR=$RXERR
		fi
	LASTRUNTXDRP=$(cat $LASTRUNHISTORYLOGOUTPUT | grep -w $IFNAME | grep checkInterfaceSP_counters | head -1 | awk '{print $17}' |sed 's/[^=]*=//')
		if [[ $LASTRUNTXDRP == "" ]] || [[ $LASTRUNTXDRP -gt $TXDRP ]]; then
			LASTRUNTXDRP=$TXDRP
		fi
	LASTRUNTXERR=$(cat $LASTRUNHISTORYLOGOUTPUT | grep -w $IFNAME | grep checkInterfaceSP_counters | head -1 | awk '{print $18}' |sed 's/[^=]*=//')
		if [[ $LASTRUNTXERR == "" ]] || [[ $LASTRUNTXERR -gt $TXERR ]]; then
			LASTRUNTXERR=$TXERR
		fi
	LASTRUNRXBYTE=$(cat $LASTRUNHISTORYLOGOUTPUT | grep -w $IFNAME | grep checkInterfaceSP_counters | head -1 | awk '{print $19}' |sed 's/[^=]*=//')
		if [[ $LASTRUNRXBYTE == "" ]] || [[ $LASTRUNRXBYTE -gt $RXBYTE ]]; then
			LASTRUNRXBYTE=$RXBYTE
		fi
	LASTRUNTXBYTE=$(cat $LASTRUNHISTORYLOGOUTPUT | grep -w $IFNAME | grep checkInterfaceSP_counters | head -1 | awk '{print $20}' |sed 's/[^=]*=//')
		if [[ $LASTRUNTXBYTE == "" ]] || [[ $LASTRUNTXBYTE -gt $TXBYTE ]]; then
			LASTRUNTXBYTE=$TXBYTE
		fi
	LASTRUNLINECOUNTERS="LASTRUN RX=$LASTRUNRX TX=$LASTRUNTX RXDRP=$LASTRUNRXDRP RXERR=$LASTRUNRXERR TXDRP=$LASTRUNTXDRP TXERR=$LASTRUNTXERR RXBYTE=$LASTRUNRXBYTE TXBYTE=$LASTRUNTXBYTE"
	
	LASTRUNDIFFRX="$(( RX - LASTRUNRX ))"
	LASTRUNDIFFTX="$(( TX - LASTRUNTX ))"
	LASTRUNDIFFRXDRP="$(( RXDRP - LASTRUNRXDRP ))"
	LASTRUNDIFFRXERR="$(( RXERR - LASTRUNRXERR ))"
	LASTRUNDIFFTXDRP="$(( TXDRP - LASTRUNTXDRP ))"
	LASTRUNDIFFTXERR="$(( TXERR - LASTRUNTXERR ))"
	LASTRUNDIFFRXBYTE="$(( RXBYTE - LASTRUNRXBYTE ))"
	LASTRUNDIFFTXBYTE="$(( TXBYTE - LASTRUNTXBYTE ))"
	LASTRUNLINEDIFFCOUNTERS="DIFF RX=$LASTRUNDIFFRX TX=$LASTRUNDIFFTX RXDRP=$LASTRUNDIFFRXDRP RXERR=$LASTRUNDIFFRXERR TXDRP=$LASTRUNDIFFTXDRP TXERR=$LASTRUNDIFFTXERR RXBYTE=$LASTRUNDIFFRXBYTE TXBYTE=$LASTRUNDIFFTXBYTE"
	
	PPSRATERX="$(( (RX - LASTRUNRX) / SINCELASTRUN ))"
	PPSRATETX="$(( (TX - LASTRUNTX) / SINCELASTRUN ))"
	PPSRATERXDRP="$(( (RXDRP - LASTRUNRXDRP) / SINCELASTRUN ))"
	PPSRATERXERR="$(( (RXERR - LASTRUNRXERR) / SINCELASTRUN ))"
	PPSRATETXDRP="$(( (TXDRP - LASTRUNTXDRP) / SINCELASTRUN ))"
	PPSRATETXERR="$(( (TXERR - LASTRUNTXERR) / SINCELASTRUN ))"
	PPSRATERXBYTE="$(( (RXBYTE - LASTRUNRXBYTE) / SINCELASTRUN ))"
	PPSRATETXBYTE="$(( (TXBYTE - LASTRUNTXBYTE) / SINCELASTRUN ))"
	if [[ $SPEED == "1000" ]] || [[ $SPEED == "10000" ]] || [[ $SPEED == "40000" ]] || [[ $SPEED == "100000" ]]; then
		RXBIT=$(( PPSRATERXBYTE * 8 ))
		TXBIT=$(( PPSRATETXBYTE * 8 ))
		SPEEDBIT=$(( SPEED * 10000 ))
		RXSATURATIONPERCENTAGE=$(( RXBIT / SPEEDBIT ))
		if [[ $RXSATURATIONPERCENTAGE -ge "100" ]]; then
			RXSATURATIONPERCENTAGE="100"
		fi
		TXSATURATIONPERCENTAGE=$(( TXBIT / SPEEDBIT ))
		if [[ $TXSATURATIONPERCENTAGE -ge "100" ]]; then
			TXSATURATIONPERCENTAGE="100"
		fi
	else
		RXSATURATIONPERCENTAGE="NA"
		TXSATURATIONPERCENTAGE="NA"
	fi
	PPSRATECOUNTERS="PPSRATE RX=$PPSRATERX TX=$PPSRATETX RXDRP=$PPSRATERXDRP RXERR=$PPSRATERXERR TXDRP=$PPSRATETXDRP TXERR=$PPSRATETXERR RXBYTE=$PPSRATERXBYTE TXBYTE=$PPSRATETXBYTE RXSATURATIONPERCENTAGE=$RXSATURATIONPERCENTAGE TXSATURATIONPERCENTAGE=$TXSATURATIONPERCENTAGE"
		
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkInterfaceSP_counters $IFNAME $LINECOUNTERS" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkInterfaceSP_lastrunCounters $IFNAME $LASTRUNLINECOUNTERS" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkInterfaceSP_diffCounters $IFNAME $LASTRUNLINEDIFFCOUNTERS" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkInterfaceSP_ppsrateCounters $IFNAME $PPSRATECOUNTERS" >>$HISTORYLOG
	
	IFS=$ORIGIFS
	sendSyslog "$functionName" "INFO" "checkInterfaceSP_counters" "IFNAME=\"$IFNAME\" RX=\"$RX\" TX=\"$TX\" RXDRP=\"$RXDRP\" RXERR=\"$RXERR\" TXDRP=\"$TXDRP\" TXERR=\"$TXERR\" RXBYTE=\"$RXBYTE\" TXBYTE=\"$TXBYTE\""
	sendSyslog "$functionName" "INFO" "checkInterfaceSP_countersRate" "IFNAME=\"$IFNAME\" PPSRATE RX=\"$PPSRATERX\" TX=\"$PPSRATETX\" RXDRP=\"$PPSRATERXDRP\" RXERR=\"$PPSRATERXERR\" TXDRP=\"$PPSRATETXDRP\" TXERR=\"$PPSRATETXERR\" RXBYTE=\"$PPSRATERXBYTE\" TXBYTE=\"$PPSRATETXBYTE\" RXSATURATIONPERCENTAGE=\"$RXSATURATIONPERCENTAGE\" TXSATURATIONPERCENTAGE=\"$TXSATURATIONPERCENTAGE\""
	IFS=$'\n'
	
	# if [[ $IDSENABLED == "1" ]] ; then
		# if [[ $PPSRATERX -eq "0" ]]; then
			# echo "Logic - interface counters: FAIL" >>$RUNLOG
			# echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - RX Packets Zero - $IFNAME $LASTRUNDIFFLINECOUNTERS" >>$HISTORYLOG
			# checkInterfaceSP_countersProblemInfo="$checkInterfaceSP_countersProblemInfo $IFNAME"
			
			# checkInterfaceSP_counters="1"
			# checkInterfaceSP_warningCounters="1"
			# checkInterfaceSP_warningInfo="$checkInterfaceSP_problemInfo [RX Packets $IFNAME $PPSRATERX/sec (IDS)]"
		# fi
		# # if [[ $PPSRATETX -eq "0" ]]; then
			# # echo "Logic - interface counters: FAIL" >>$RUNLOG
			# # echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - TX Packets Zero - $IFNAME $LASTRUNDIFFLINECOUNTERS" >>$HISTORYLOG
			# # checkInterfaceSP_countersProblemInfo="$checkInterfaceSP_countersProblemInfo $IFNAME"
			# # checkInterfaceSP_counters="1"
			# # checkInterfaceSP_problemCounters="1"
			# # checkInterfaceSP_problemInfo="$checkInterfaceSP_problemInfo [TX Packets $IFNAME $PPSRATERXDRP/sec (IDS)]"
		# # fi
		# if [[ $PPSRATERXDRP -gt "10" ]]; then
			# echo "Logic - interface counters: FAIL" >>$RUNLOG
			# echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - RX Drops Incrementing - $IFNAME $LASTRUNDIFFLINECOUNTERS" >>$HISTORYLOG
			# checkInterfaceSP_countersProblemInfo="$checkInterfaceSP_countersProblemInfo $IFNAME"
			# #checkInterfaceSP_counters="1"
			# checkInterfaceSP_problemInfo="$checkInterfaceSP_problemInfo [RX Drops $IFNAME $PPSRATERXDRP/sec (IDS)]"
		# fi
				
	# else
		# if [[ $PPSRATERXDRP -gt "100" ]]; then
			# echo "Logic - interface counters: FAIL" >>$RUNLOG
			# echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - RX Drops Incrementing - $IFNAME $LASTRUNDIFFLINECOUNTERS" >>$HISTORYLOG
			# checkInterfaceSP_countersProblemInfo="$checkInterfaceSP_countersProblemInfo $IFNAME"
			# checkInterfaceSP_counters="1"
			# checkInterfaceSP_problemCounters="1"
			# checkInterfaceSP_problemInfo="$checkInterfaceSP_problemInfo [RX Drops $IFNAME $PPSRATERXDRP/sec]"
		# fi	
	# fi
	# if [[ $PPSRATERXERR -gt "0" ]]; then
		# echo "Logic - interface counters: FAIL" >>$RUNLOG
		# echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - RX Errors Incrementing - $IFNAME $LASTRUNDIFFLINECOUNTERS" >>$HISTORYLOG
		# checkInterfaceSP_countersProblemInfo="$checkInterfaceSP_countersProblemInfo $IFNAME"
		# checkInterfaceSP_counters="1"
		# if [[ $PPSRATERXERR -ge "100" ]]; then
			# checkInterfaceSP_problemCounters="1"
			# checkInterfaceSP_problemInfo="$checkInterfaceSP_problemInfo [RX Errors $IFNAME $PPSRATERXERR/sec]"
		# fi
		# if [[ $PPSRATERXERR -gt "0" ]] && [[ $PPSRATERXERR -lt "100" ]]; then
			# checkInterfaceSP_warningCounters="1"
			# checkInterfaceSP_warningInfo="$checkInterfaceSP_warningInfo [RX Errors $IFNAME $PPSRATERXERR/sec]"
		# fi
		
	# fi	
	# if [[ $PPSRATETXDRP -gt "0" ]]; then
		# echo "Logic - interface counters: FAIL" >>$RUNLOG
		# echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - TX Drops Incrementing - $IFNAME $LASTRUNDIFFLINECOUNTERS" >>$HISTORYLOG
		# checkInterfaceSP_countersProblemInfo="$checkInterfaceSP_countersProblemInfo $IFNAME"
		# checkInterfaceSP_counters="1"
		# checkInterfaceSP_problemCounters="1"
		# checkInterfaceSP_problemInfo="$checkInterfaceSP_problemInfo [TX Drops $IFNAME $PPSRATETXDRP/sec]"
	# fi	
	# if [[ $PPSRATETXERR -gt "0" ]]; then
		# echo "Logic - interface counters: FAIL" >>$RUNLOG
		# echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - TX Error Incrementing - $IFNAME $LASTRUNDIFFLINECOUNTERS" >>$HISTORYLOG
		# checkInterfaceSP_countersProblemInfo="$checkInterfaceSP_countersProblemInfo $IFNAME"
		# checkInterfaceSP_counters="1"
		# checkInterfaceSP_problemCounters="1"
		# checkInterfaceSP_problemInfo="$checkInterfaceSP_problemInfo [TX Errors $IFNAME $PPSRATETXERR/sec]"
	# fi	
	
	# if [[ $RXSATURATIONPERCENTAGE == "NA" ]] || [[ $TXSATURATIONPERCENTAGE == "NA" ]]; then
		# echo "Logic - interface saturation: NA" >>$RUNLOG
	# else
		# if [[ $RXSATURATIONPERCENTAGE -gt "90" ]] || [[ $TXSATURATIONPERCENTAGE -gt "90" ]]; then
			# echo "Logic - interface saturation: FAIL" >>$RUNLOG
			# echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Interface Saturation - $IFNAME RX=$RXSATURATIONPERCENTAGE TX=$TXSATURATIONPERCENTAGE" >>$HISTORYLOG
			# checkInterfaceSP_saturationProblemInfo="$checkInterfaceSP_saturationProblemInfo $IFNAME"
			# checkInterfaceSP_saturation="1"
			# checkInterfaceSP_problemInfo="$checkInterfaceSP_problemInfo [Saturation $IFNAME(RX=$RXSATURATIONPERCENTAGE/TX=$TXSATURATIONPERCENTAGE)]"
		# fi
		
	# fi
done
IFS=$ORIGIFS



#LOG OUTPUTS
# if [[ $LOCALSMO == "1" ]] && [[ $APPLIANCETYPE != "MAESTRO" ]]; then
	# echo "checkInterfaceSP_dropsRx $checkInterfaceSP_dropsRx" >>$RUNLOG
	# echo "checkInterfaceSP_dropsQdisc $checkInterfaceSP_dropsQdisc" >>$RUNLOG
	# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkInterfaceSP_dropsRx - $checkInterfaceSP_dropsRx" >>$HISTORYLOG
# fi
# echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkInterfaceSP_rxJumboFrameDrop - $checkInterfaceSP_rxJumboFrameDrop" >>$HISTORYLOG



#RUN LOGIC
if [[ $checkInterfaceSP_diagStatus != "0" ]]; then
	echo "Logic - diag status: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - diag status - $checkInterfaceSP_diagStatus" >>$HISTORYLOG
	checkInterfaceSP_problem="1"
	checkInterfaceSP_problemInfo="$checkInterfaceSP_problemInfo [$checkInterfaceSP_diagStatusReason]"
else
	echo "Logic - diag status: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - diag status - $checkInterfaceSP_diagStatus" >>$HISTORYLOG
fi



#SYSLOG
# if [[ $LOCALSMO == "1" ]] && [[ $APPLIANCETYPE != "MAESTRO" ]]; then
	# sendSyslog "$functionName" "INFO" "checkInterfaceSP_dropsRx" "VALUE=\"$checkInterfaceSP_dropsRx\""
# fi
sendSyslog "$functionName" "INFO" "checkInterfaceSP_rxJumboFrameDrop" "VALUE=\"$checkInterfaceSP_rxJumboFrameDrop\""



#CLEANUP
rm -rf $TEMPFILE

	
checkInterfaceSP_fEnd=$(date "+%s")
checkInterfaceSP_fRunTime=$(( checkInterfaceSP_fEnd - checkInterfaceSP_fStart ))
echo "checkInterfaceSP_fRunTime $checkInterfaceSP_fRunTime" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkInterfaceSP_warning - $checkInterfaceSP_warning" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkInterfaceSP_problem - $checkInterfaceSP_problem" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkInterfaceSP_problemInfo - $checkInterfaceSP_problemInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkInterfaceSP_warningInfo - $checkInterfaceSP_warningInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkInterfaceSP_workingInfo - $checkInterfaceSP_workingInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkInterfaceSP_runTime - $checkInterfaceSP_fRunTime" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkInterfaceSP_warning" "VALUE=\"$checkInterfaceSP_warning\""
sendSyslog "$functionName" "INFO" "checkInterfaceSP_problem" "VALUE=\"$checkInterfaceSP_problem\""
sendSyslog "$functionName" "INFO" "checkInterfaceSP_problemInfo" "VALUE=\"$checkInterfaceSP_problemInfo\""
sendSyslog "$functionName" "INFO" "checkInterfaceSP_warningInfo" "VALUE=\"$checkInterfaceSP_warningInfo\""
sendSyslog "$functionName" "INFO" "checkInterfaceSP_workingInfo" "VALUE=\"$checkInterfaceSP_workingInfo\""
sendSyslog "$functionName" "INFO" "checkInterfaceSP_runTime" "VALUE=\"$checkInterfaceSP_fRunTime\""

#SUMMARY
if [[ $checkInterfaceSP_problem == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - checkInterfaceSP - SUMMARY - PROBLEM - $checkInterfaceSP_problemInfo $checkInterfaceSP_warningInfo $checkInterfaceSP_workingInfo" >>$HISTORYLOG
elif [[ $checkInterfaceSP_warning == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - checkInterfaceSP - SUMMARY - WARNING - $checkInterfaceSP_warningInfo $checkInterfaceSP_workingInfo" >>$HISTORYLOG
else
	echo "$HISTORYLOGPREAMBLE - checkInterfaceSP - SUMMARY - WORKING - $checkInterfaceSP_workingInfo" >>$HISTORYLOG
fi
echo "checkInterfaceSP_problem $checkInterfaceSP_problem" >>$RUNLOG
echo "END==checkInterfaceSP" >>$RUNLOG
}

###################################################################################################
checkAsgSP() {
echo "START==checkAsgSP" >>$RUNLOG

#DEFAULTS
checkAsgSP_fStart=$(date "+%s")
functionName=${FUNCNAME[0]}
checkAsgSP_warning="0"
checkAsgSP_problem="0"
checkAsgSP_workingInfo=""
checkAsgSP_warningInfo=""
checkAsgSP_problemInfo=""
checkAsgSP_countersProblemInfo=""
TEMPFILE_stat=$TEMPDIR/$SCRIPT.$functionName.stat
TEMPFILE_perf=$TEMPDIR/$SCRIPT.$functionName.perf
TEMPFILE_dist=$TEMPDIR/$SCRIPT.$functionName.dist
TEMPFILE_DIAG=$TEMPDIR/$SCRIPT.$functionName.diag
ALLLOCALSGMQTY=$(g_all echo "Test" | grep -v Test | tr ':' ' ' | grep "$LOCALCHASSIS1" | wc -l)
AVGPCT=$(echo "scale=0; 100 / $ALLLOCALSGMQTY" | bc)
DEVIATIONPCT=$(echo "scale=0; $AVGPCT * .75" | bc | awk -F "." '{print $1}')
AVGDEVPCT="90"
ALLLOCALSGM1=$ALLLOCALSGM

#COLLECT OUTPUTS
asg stat -v > $TEMPFILE_stat 2>&1
if [[ $checkSelf_hwtype == "MAESTRO" ]]; then
	checkAsgSP_chassis1GradeUp=$(cat $TEMPFILE_stat | grep "Grade" | awk -F "|" '{print $3}' | awk '{print $1}' | tr -dc '0-9')
	checkAsgSP_chassis1GradeReq=$(cat $TEMPFILE_stat | grep "Grade" | awk -F "|" '{print $3}' | awk '{print $3}' | tr -dc '0-9')
	chechAsgSP_chassis1GradeDiff="$(( checkAsgSP_chassis1GradeReq - checkAsgSP_chassis1GradeUp ))"
	checkAsgSP_chassisGrade="Ch1Up=$checkAsgSP_chassis1GradeUp Ch1Req=$checkAsgSP_chassis1GradeReq Ch1Diff=$chechAsgSP_chassis1GradeDiff"
	checkAsgSP_chassisProblems=$(cat $TEMPFILE_stat | grep "\!" | awk -F "|" '{print $2}' | awk '{ sub(/[ \t]+$/, ""); print }' | tr '\n' ' ')
else
	checkAsgSP_chassis1GradeUp=$(cat $TEMPFILE_stat | grep "Grade" | awk -F "|" '{print $3}' | awk '{print $1}' | tr -dc '0-9')
	if [[ $checkAsgSP_chassis1GradeUp == "" ]]; then
		checkAsgSP_chassis1GradeUp=$(cat $TEMPFILE_stat | grep "Grade" | awk -F "|" '{print $4}' | awk '{print $1}')
		if [[ $checkAsgSP_chassis1GradeUp == "N/A" ]]; then
			checkAsgSP_chassis1GradeUp="0"
		fi
	fi
	checkAsgSP_chassis1GradeReq=$(cat $TEMPFILE_stat | grep "Grade" | awk -F "|" '{print $3}' | awk '{print $3}' | tr -dc '0-9')
	if [[ $checkAsgSP_chassis1GradeReq == "" ]]; then
		checkAsgSP_chassis1GradeReq=$(cat $TEMPFILE_stat | grep "Grade" | awk -F "|" '{print $4}' | awk '{print $1}')
		if [[ $checkAsgSP_chassis1GradeReq == "N/A" ]]; then
			checkAsgSP_chassis1GradeReq=$checkAsgSP_chassis2GradeReq
		fi
	fi
	chechAsgSP_chassis1GradeDiff="$(( checkAsgSP_chassis1GradeReq - checkAsgSP_chassis1GradeUp ))"
	checkAsgSP_chassis2GradeUp=$(cat $TEMPFILE_stat | grep "Grade" | awk -F "|" '{print $4}' | awk '{print $1}' | tr -dc '0-9')
	if [[ $checkAsgSP_chassis2GradeUp == "" ]]; then
		checkAsgSP_chassis2GradeUp=$(cat $TEMPFILE_stat | grep "Grade" | awk -F "|" '{print $4}' | awk '{print $1}')
		if [[ $checkAsgSP_chassis2GradeUp == "N/A" ]]; then
			checkAsgSP_chassis2GradeUp="0"
		fi
	fi
	checkAsgSP_chassis2GradeReq=$(cat $TEMPFILE_stat | grep "Grade" | awk -F "|" '{print $4}' | awk '{print $3}' | tr -dc '0-9')
	if [[ $checkAsgSP_chassis2GradeReq == "" ]]; then
		checkAsgSP_chassis2GradeReq=$(cat $TEMPFILE_stat | grep "Grade" | awk -F "|" '{print $4}' | awk '{print $1}')
		if [[ $checkAsgSP_chassis2GradeReq == "N/A" ]]; then
			checkAsgSP_chassis2GradeReq=$checkAsgSP_chassis1GradeReq
		fi
	fi
	chechAsgSP_chassis2GradeDiff="$(( checkAsgSP_chassis2GradeReq - checkAsgSP_chassis2GradeUp ))"
	checkAsgSP_chassisGradeMinGap=$(cat $TEMPFILE_stat | grep "Minimum" | awk '{print $8}')
	checkAsgSP_chassisGrade="Ch1Up=$checkAsgSP_chassis1GradeUp Ch1Req=$checkAsgSP_chassis1GradeReq Ch1Diff=$chechAsgSP_chassis1GradeDiff Ch2Up=$checkAsgSP_chassis2GradeUp Ch2Req=$checkAsgSP_chassis2GradeReq Ch2Diff=$chechAsgSP_chassis2GradeDiff MinGap=$checkAsgSP_chassisGradeMinGap"
	checkAsgSP_chassisProblems=$(cat $TEMPFILE_stat | grep "\!" | awk -F "|" '{print $2}' | awk '{ sub(/[ \t]+$/, ""); print }' | tr '\n' ' ')
	
fi
rm -rf $TEMPFILE_stat


if [[ $LOCALSMO == "1" ]]; then
	checkAsgSP_distUtilVerifyProblemCount=$(cat /etc/motd | grep "Distribution Mode" | wc -l)
	if [[ $checkAsgSP_distUtilVerifyProblemCount -gt "0" ]]; then
		checkAsgSP_problem="1"
		checkAsgSP_problemInfo="$checkAsgSP_problemInfo [Distribution Mode Problem]"
	fi
fi

if [[ $LOCALSMO == "1" ]]; then
	g_perf -v > $TEMPFILE_perf 2>&1
	if [[ $? != "0" ]]; then
		checkAsgSP_perfConcurrent="0"
		checkAsgSP_perfRate="0"
		checkAsgSP_perfThroughput="0"
		checkAsgSP_warning="1"
		checkAsgSP_warningInfo="$checkAsgSP_warningInfo [asg perf failed]"
	else
		checkAsgSP_perfConcurrentMultiplier=$(cat $TEMPFILE_perf | grep "Concurrent connections" | awk -F "|" '{print $3}' | awk '{print $2}')
		if [[ $checkAsgSP_perfConcurrentMultiplier == "K" ]]; then
			checkAsgSP_perfConcurrent0=$(cat $TEMPFILE_perf | grep "Concurrent connections" | awk -F "|" '{print $3}' | awk '{print $1}')
			checkAsgSP_perfConcurrent=$(echo "scale=0; $checkAsgSP_perfConcurrent0 * 1000" | bc | awk -F "." '{print $1}')
		elif [[ $checkAsgSP_perfConcurrentMultiplier == "M" ]]; then
			checkAsgSP_perfConcurrent0=$(cat $TEMPFILE_perf | grep "Concurrent connections" | awk -F "|" '{print $3}' | awk '{print $1}')
			checkAsgSP_perfConcurrent=$(echo "scale=0; $checkAsgSP_perfConcurrent0 * 1000000" | bc | awk -F "." '{print $1}')
		elif [[ $checkAsgSP_perfConcurrentMultiplier == "G" ]]; then
			checkAsgSP_perfConcurrent0=$(cat $TEMPFILE_perf | grep "Concurrent connections" | awk -F "|" '{print $3}' | awk '{print $1}')
			checkAsgSP_perfConcurrent=$(echo "scale=0; $checkAsgSP_perfConcurrent0 * 1000000000" | bc | awk -F "." '{print $1}')
		else
			checkAsgSP_perfConcurrent=$(cat $TEMPFILE_perf | grep "Concurrent connections" | awk -F "|" '{print $3}' | awk '{print $1}' | awk -F "." '{print $1}')
		fi
		
		checkAsgSP_perfRateMultiplier=$(cat $TEMPFILE_perf | grep "Connection rate" | awk -F "|" '{print $3}' | awk '{print $2}')
		if [[ $checkAsgSP_perfRateMultiplier == "K" ]]; then
			checkAsgSP_perfRate0=$(cat $TEMPFILE_perf | grep "Connection rate" | awk -F "|" '{print $3}' | awk '{print $1}')
			checkAsgSP_perfRate=$(echo "scale=0; $checkAsgSP_perfRate0 * 1000" | bc | awk -F "." '{print $1}')
		elif [[ $checkAsgSP_perfRateMultiplier == "M" ]]; then
			checkAsgSP_perfRate0=$(cat $TEMPFILE_perf | grep "Connection rate" | awk -F "|" '{print $3}' | awk '{print $1}')
			checkAsgSP_perfRate=$(echo "scale=0; $checkAsgSP_perfRate0 * 1000000" | bc | awk -F "." '{print $1}')
		elif [[ $checkAsgSP_perfRateMultiplier == "G" ]]; then
			checkAsgSP_perfRate0=$(cat $TEMPFILE_perf | grep "Connection rate" | awk -F "|" '{print $3}' | awk '{print $1}')
			checkAsgSP_perfRate=$(echo "scale=0; $checkAsgSP_perfRate0 * 1000000000" | bc | awk -F "." '{print $1}')
		else
			checkAsgSP_perfRate=$(cat $TEMPFILE_perf | grep "Connection rate" | awk -F "|" '{print $3}' | awk '{print $1}' | awk -F "." '{print $1}')
		fi
		

		checkAsgSP_perfThroughputMultiplier=$(cat $TEMPFILE_perf | grep "Throughput" | awk -F "|" '{print $3}' | awk '{print $2}' | head -1)
		if [[ $checkAsgSP_perfThroughputMultiplier == "K" ]]; then
			checkAsgSP_perfThroughput0=$(cat $TEMPFILE_perf | grep "Throughput" | awk -F "|" '{print $3}' | awk '{print $1}' | head -1)
			checkAsgSP_perfThroughput=$(echo "scale=0; $checkAsgSP_perfThroughput0 * 1000" | bc | awk -F "." '{print $1}')
		elif [[ $checkAsgSP_perfThroughputMultiplier == "M" ]]; then
			checkAsgSP_perfThroughput0=$(cat $TEMPFILE_perf | grep "Throughput" | awk -F "|" '{print $3}' | awk '{print $1}' | head -1)
			checkAsgSP_perfThroughput=$(echo "scale=0; $checkAsgSP_perfThroughput0 * 1000000" | bc | awk -F "." '{print $1}')
		elif [[ $checkAsgSP_perfThroughputMultiplier == "G" ]]; then
			checkAsgSP_perfThroughput0=$(cat $TEMPFILE_perf | grep "Throughput" | awk -F "|" '{print $3}' | awk '{print $1}' | head -1)
			checkAsgSP_perfThroughput=$(echo "scale=0; $checkAsgSP_perfThroughput0 * 1000000000" | bc | awk -F "." '{print $1}')
		else
			checkAsgSP_perfThroughput=$(cat $TEMPFILE_perf | grep "Throughput" | awk -F "|" '{print $3}' | awk '{print $1}' | awk -F "." '{print $1}' | head -1)
		fi
	
		
		#THROUGHTPUT
		for LINE in `echo $ALLLOCALSGM1` ; do
			THROUGHPUTMULTIPLIER=$(cat $TEMPFILE_perf | grep "$LINE" | awk -F "|" '{print $3}' | awk '{print $2}')
			if [[ $THROUGHPUTMULTIPLIER == "K" ]]; then
				THROUGHPUT0=$(cat $TEMPFILE_perf | grep "$LINE" | awk -F "|" '{print $3}' | awk '{print $1}')
				THROUGHPUT=$(echo "scale=0; $THROUGHPUT0 * 1000" | bc | awk -F "." '{print $1}')
			elif [[ $THROUGHPUTMULTIPLIER == "M" ]]; then
				THROUGHPUT0=$(cat $TEMPFILE_perf | grep "$LINE" | awk -F "|" '{print $3}' | awk '{print $1}')
				THROUGHPUT=$(echo "scale=0; $THROUGHPUT0 * 1000000" | bc | awk -F "." '{print $1}')
			elif [[ $THROUGHPUTMULTIPLIER == "G" ]]; then
				THROUGHPUT0=$(cat $TEMPFILE_perf | grep "$LINE" | awk -F "|" '{print $3}' | awk '{print $1}')
				THROUGHPUT=$(echo "scale=0; $THROUGHPUT0 * 1000000000" | bc | awk -F "." '{print $1}')
			else
				THROUGHPUT=$(cat $TEMPFILE_perf | grep "$LINE" | awk -F "|" '{print $3}' | awk '{print $1}' | awk -F "." '{print $1}')
			fi
			TOTALTHROUGHPUTMULTIPLIER=$(cat $TEMPFILE_perf | grep "Total" | awk -F "|" '{print $3}' | awk '{print $2}')
			if [[ $TOTALTHROUGHPUTMULTIPLIER == "K" ]]; then
				TOTALTHROUGHPUT0=$(cat $TEMPFILE_perf | grep "Total" | awk -F "|" '{print $3}' | awk '{print $1}')
				TOTALTHROUGHPUT=$(echo "scale=0; $TOTALTHROUGHPUT0 * 1000" | bc | awk -F "." '{print $1}')
			elif [[ $TOTALTHROUGHPUTMULTIPLIER == "M" ]]; then
				TOTALTHROUGHPUT0=$(cat $TEMPFILE_perf | grep "Total" | awk -F "|" '{print $3}' | awk '{print $1}')
				TOTALTHROUGHPUT=$(echo "scale=0; $TOTALTHROUGHPUT0 * 1000000" | bc | awk -F "." '{print $1}')
			elif [[ $TOTALTHROUGHPUTMULTIPLIER == "G" ]]; then
				TOTALTHROUGHPUT0=$(cat $TEMPFILE_perf | grep "Total" | awk -F "|" '{print $3}' | awk '{print $1}')
				TOTALTHROUGHPUT=$(echo "scale=0; $TOTALTHROUGHPUT0 * 1000000000" | bc | awk -F "." '{print $1}')
			else
				TOTALTHROUGHPUT=$(cat $TEMPFILE_perf | grep "Total" | awk -F "|" '{print $3}' | awk '{print $1}' | awk -F "." '{print $1}')
			fi
			
			THROUGHPUTPERCENTOFTOTAL=$(percentofvalue $THROUGHPUT $TOTALTHROUGHPUT)
							
			checkAsgSP_perfThroughputDetail="$checkAsgSP_perfThroughputDetail [$LINE/$THROUGHPUT/$THROUGHPUTPERCENTOFTOTAL pct]"
			sendSyslog "$functionName" "INFO" "checkAsgSP_perfThroughputDetail" "SGM=\"$LINE\" THROUGHPUT=\"$THROUGHPUT\" THROUGHPUTPERCENTOFTOTAL=\"$THROUGHPUTPERCENTOFTOTAL\""
			#Alert only if higher then 1000Mbps
			if [[ $THROUGHPUTPERCENTOFTOTAL != "NA" ]] && [[ $THROUGHPUTPERCENTOFTOTAL -gt $AVGDEVPCT ]] && [[ $THROUGHPUT -gt "1000000000" ]]; then
				#Throughput won't effect performance
				#checkAsgSP_problem="1"
				checkAsgSP_problemInfo="$checkAsgSP_problemInfo [DXL Balance(Throughput) ($LINE/$THROUGHPUT/$THROUGHPUTPERCENTOFTOTAL pct)]"
			fi
		done
		
		#PACKET RATE
		for LINE in `echo $ALLLOCALSGM1` ; do
			PACKETRATEMULTIPLIER=$(cat $TEMPFILE_perf | grep "$LINE" | awk -F "|" '{print $4}' | awk '{print $2}')
			if [[ $PACKETRATEMULTIPLIER == "K" ]]; then
				PACKETRATE0=$(cat $TEMPFILE_perf | grep "$LINE" | awk -F "|" '{print $4}' | awk '{print $1}')
				PACKETRATE=$(echo "scale=0; $PACKETRATE0 * 1000" | bc | awk -F "." '{print $1}')
			elif [[ $PACKETRATEMULTIPLIER == "M" ]]; then
				PACKETRATE0=$(cat $TEMPFILE_perf | grep "$LINE" | awk -F "|" '{print $4}' | awk '{print $1}')
				PACKETRATE=$(echo "scale=0; $PACKETRATE0 * 1000000" | bc | awk -F "." '{print $1}')
			elif [[ $PACKETRATEMULTIPLIER == "G" ]]; then
				PACKETRATE0=$(cat $TEMPFILE_perf | grep "$LINE" | awk -F "|" '{print $4}' | awk '{print $1}')
				PACKETRATE=$(echo "scale=0; $PACKETRATE0 * 1000000000" | bc | awk -F "." '{print $1}')
			else
				PACKETRATE=$(cat $TEMPFILE_perf | grep "$LINE" | awk -F "|" '{print $4}' | awk '{print $1}' | awk -F "." '{print $1}')
			fi
			TOTALPACKETRATEMULTIPLIER=$(cat $TEMPFILE_perf | grep "Total" | awk -F "|" '{print $4}' | awk '{print $2}')
			if [[ $TOTALPACKETRATEMULTIPLIER == "K" ]]; then
				TOTALPACKETRATE0=$(cat $TEMPFILE_perf | grep "Total" | awk -F "|" '{print $4}' | awk '{print $1}')
				TOTALPACKETRATE=$(echo "scale=0; $TOTALPACKETRATE0 * 1000" | bc | awk -F "." '{print $1}')
			elif [[ $TOTALPACKETRATEMULTIPLIER == "M" ]]; then
				TOTALPACKETRATE0=$(cat $TEMPFILE_perf | grep "Total" | awk -F "|" '{print $4}' | awk '{print $1}')
				TOTALPACKETRATE=$(echo "scale=0; $TOTALPACKETRATE0 * 1000000" | bc | awk -F "." '{print $1}')
			elif [[ $TOTALPACKETRATEMULTIPLIER == "G" ]]; then
				TOTALPACKETRATE0=$(cat $TEMPFILE_perf | grep "Total" | awk -F "|" '{print $4}' | awk '{print $1}')
				TOTALPACKETRATE=$(echo "scale=0; $TOTALPACKETRATE0 * 1000000000" | bc | awk -F "." '{print $1}')
			else
				TOTALPACKETRATE=$(cat $TEMPFILE_perf | grep "Total" | awk -F "|" '{print $4}' | awk '{print $1}' | awk -F "." '{print $1}')
			fi
					
			TOTALPACKETRATEPERCENTOFTOTAL=$(percentofvalue $PACKETRATE $TOTALPACKETRATE)
							
			checkAsgSP_perfPacketRate="$checkAsgSP_perfPacketRate [$LINE/$PACKETRATE/$TOTALPACKETRATEPERCENTOFTOTAL pct]"
			sendSyslog "$functionName" "INFO" "checkAsgSP_perfPacketRate" "SGM=\"$LINE\" PACKETRATE=\"$PACKETRATE\" TOTALPACKETRATEPERCENTOFTOTAL=\"$TOTALPACKETRATEPERCENTOFTOTAL\""
			#Alert only if higher then 500K/sec
			if [[ $TOTALPACKETRATEPERCENTOFTOTAL != "NA" ]] && [[ $TOTALPACKETRATEPERCENTOFTOTAL -gt $AVGDEVPCT ]] && [[ $PACKETRATE -gt "500000" ]]; then
				checkAsgSP_problem="1"
				checkAsgSP_problemInfo="$checkAsgSP_problemInfo [DXL Balance(Packet Rate) ($LINE/$PACKETRATE/$TOTALPACKETRATEPERCENTOFTOTAL pct)]"
			fi
		done
			
		#CONNECTION RATE
		for LINE in `echo $ALLLOCALSGM1` ; do
			CONNECTIONRATEMULTIPLIER=$(cat $TEMPFILE_perf | grep "$LINE" | awk -F "|" '{print $5}' | awk '{print $2}')
			if [[ $CONNECTIONRATEMULTIPLIER == "K" ]]; then
				CONNECTIONRATE0=$(cat $TEMPFILE_perf | grep "$LINE" | awk -F "|" '{print $5}' | awk '{print $1}')
				CONNECTIONRATE=$(echo "scale=0; $CONNECTIONRATE0 * 1000" | bc | awk -F "." '{print $1}')
			elif [[ $CONNECTIONRATEMULTIPLIER == "M" ]]; then
				CONNECTIONRATE0=$(cat $TEMPFILE_perf | grep "$LINE" | awk -F "|" '{print $5}' | awk '{print $1}')
				CONNECTIONRATE=$(echo "scale=0; $CONNECTIONRATE0 * 1000000" | bc | awk -F "." '{print $1}')
			elif [[ $CONNECTIONRATEMULTIPLIER == "G" ]]; then
				CONNECTIONRATE0=$(cat $TEMPFILE_perf | grep "$LINE" | awk -F "|" '{print $5}' | awk '{print $1}')
				CONNECTIONRATE=$(echo "scale=0; $CONNECTIONRATE0 * 1000000000" | bc | awk -F "." '{print $1}')
			else
				CONNECTIONRATE=$(cat $TEMPFILE_perf | grep "$LINE" | awk -F "|" '{print $5}' | awk '{print $1}' | awk -F "." '{print $1}')
			fi
			TOTALCONNECTIONRATEMULTIPLIER=$(cat $TEMPFILE_perf | grep "Total" | awk -F "|" '{print $5}' | awk '{print $2}')
			if [[ $TOTALCONNECTIONRATEMULTIPLIER == "K" ]]; then
				TOTALCONNECTIONRATE0=$(cat $TEMPFILE_perf | grep "Total" | awk -F "|" '{print $5}' | awk '{print $1}')
				TOTALCONNECTIONRATE=$(echo "scale=0; $TOTALCONNECTIONRATE0 * 1000" | bc | awk -F "." '{print $1}')
			elif [[ $TOTALCONNECTIONRATEMULTIPLIER == "M" ]]; then
				TOTALCONNECTIONRATE0=$(cat $TEMPFILE_perf | grep "Total" | awk -F "|" '{print $5}' | awk '{print $1}')
				TOTALCONNECTIONRATE=$(echo "scale=0; $TOTALCONNECTIONRATE0 * 1000000" | bc | awk -F "." '{print $1}')
			elif [[ $TOTALCONNECTIONRATEMULTIPLIER == "G" ]]; then
				TOTALCONNECTIONRATE0=$(cat $TEMPFILE_perf | grep "Total" | awk -F "|" '{print $5}' | awk '{print $1}')
				TOTALCONNECTIONRATE=$(echo "scale=0; $TOTALCONNECTIONRATE0 * 1000000000" | bc | awk -F "." '{print $1}')
			else
				TOTALCONNECTIONRATE=$(cat $TEMPFILE_perf | grep "Total" | awk -F "|" '{print $5}' | awk '{print $1}' | awk -F "." '{print $1}')
			fi
			
			
			TOTALCONNECTIONRATEPERCENTOFTOTAL=$(percentofvalue $CONNECTIONRATE $TOTALCONNECTIONRATE)
							
			checkAsgSP_perfConnectionRate="$checkAsgSP_perfConnectionRate [$LINE/$CONNECTIONRATE/$TOTALCONNECTIONRATEPERCENTOFTOTAL pct]"
			checkAsgSP_perfConnectionRateInfo="$checkAsgSP_perfConnectionRateInfo [$LINE: $CONNECTIONRATE Conns/sec, $TOTALCONNECTIONRATEPERCENTOFTOTAL pct/total]"
			sendSyslog "$functionName" "INFO" "checkAsgSP_perfConnectionRate" "SGM=\"$LINE\" CONNECTIONRATE=\"$CONNECTIONRATE\" TOTALCONNECTIONRATEPERCENTOFTOTAL=\"$TOTALCONNECTIONRATEPERCENTOFTOTAL\""
			
			#Alert only if higher then 1K/sec
			if [[ $TOTALCONNECTIONRATEPERCENTOFTOTAL != "NA" ]] && [[ $TOTALCONNECTIONRATEPERCENTOFTOTAL -gt $AVGDEVPCT ]] && [[ $CONNECTIONRATE -gt "10000" ]]; then
				checkAsgSP_problem="1"
				checkAsgSP_problemInfo="$checkAsgSP_problemInfo [DXL Balance(Conn Rate) ($LINE/$CONNECTIONRATE/$TOTALCONNECTIONRATEPERCENTOFTOTAL pct)]"
			fi
		done

		#CONNECTION CONCURRENT
		for LINE in `echo $ALLLOCALSGM1` ; do
			CONNECTIONCONCURRENTMULTIPLIER=$(cat $TEMPFILE_perf | grep "$LINE" | awk -F "|" '{print $6}' | awk '{print $2}')
			if [[ $CONNECTIONCONCURRENTMULTIPLIER == "K" ]]; then
				CONNECTIONCONCURRENT0=$(cat $TEMPFILE_perf | grep "$LINE" | awk -F "|" '{print $6}' | awk '{print $1}')
				CONNECTIONCONCURRENT=$(echo "scale=0; $CONNECTIONCONCURRENT0 * 1000" | bc | awk -F "." '{print $1}')
			elif [[ $CONNECTIONCONCURRENTMULTIPLIER == "M" ]]; then
				CONNECTIONCONCURRENT0=$(cat $TEMPFILE_perf | grep "$LINE" | awk -F "|" '{print $6}' | awk '{print $1}')
				CONNECTIONCONCURRENT=$(echo "scale=0; $CONNECTIONCONCURRENT0 * 1000000" | bc | awk -F "." '{print $1}')
			elif [[ $CONNECTIONCONCURRENTMULTIPLIER == "G" ]]; then
				CONNECTIONCONCURRENT0=$(cat $TEMPFILE_perf | grep "$LINE" | awk -F "|" '{print $6}' | awk '{print $1}')
				CONNECTIONCONCURRENT=$(echo "scale=0; $CONNECTIONCONCURRENT0 * 1000000000" | bc | awk -F "." '{print $1}')
			else
				CONNECTIONCONCURRENT=$(cat $TEMPFILE_perf | grep "$LINE" | awk -F "|" '{print $6}' | awk '{print $1}' | awk -F "." '{print $1}')
			fi
			TOTALCONNECTIONCONCURRENTMULTIPLIER=$(cat $TEMPFILE_perf | grep "Total" | awk -F "|" '{print $6}' | awk '{print $2}')
			if [[ $TOTALCONNECTIONCONCURRENTMULTIPLIER == "K" ]]; then
				TOTALCONNECTIONCONCURRENT0=$(cat $TEMPFILE_perf | grep "Total" | awk -F "|" '{print $6}' | awk '{print $1}')
				TOTALCONNECTIONCONCURRENT=$(echo "scale=0; $TOTALCONNECTIONCONCURRENT0 * 1000" | bc | awk -F "." '{print $1}')
			elif [[ $TOTALCONNECTIONCONCURRENTMULTIPLIER == "M" ]]; then
				TOTALCONNECTIONCONCURRENT0=$(cat $TEMPFILE_perf | grep "Total" | awk -F "|" '{print $6}' | awk '{print $1}')
				TOTALCONNECTIONCONCURRENT=$(echo "scale=0; $TOTALCONNECTIONCONCURRENT0 * 1000000" | bc | awk -F "." '{print $1}')
			elif [[ $TOTALCONNECTIONCONCURRENTMULTIPLIER == "G" ]]; then
				TOTALCONNECTIONCONCURRENT0=$(cat $TEMPFILE_perf | grep "Total" | awk -F "|" '{print $6}' | awk '{print $1}')
				TOTALCONNECTIONCONCURRENT=$(echo "scale=0; $TOTALCONNECTIONCONCURRENT0 * 1000000000" | bc | awk -F "." '{print $1}')
			else
				TOTALCONNECTIONCONCURRENT=$(cat $TEMPFILE_perf | grep "Total" | awk -F "|" '{print $6}' | awk '{print $1}' | awk -F "." '{print $1}')
			fi
			
			TOTALCONNECTIONCONCURRENTPERCENTOFTOTAL=$(percentofvalue $CONNECTIONCONCURRENT $TOTALCONNECTIONCONCURRENT)
							
			checkAsgSP_perfConnectionConcurrent="$checkAsgSP_perfConnectionConcurrent [$LINE/$CONNECTIONCONCURRENT/$TOTALCONNECTIONCONCURRENTPERCENTOFTOTAL pct]"
			sendSyslog "$functionName" "INFO" "checkAsgSP_perfConnectionConcurrent" "SGM=\"$LINE\" CONNECTIONCONCURRENT=\"$CONNECTIONCONCURRENT\" TOTALCONNECTIONCONCURRENTPERCENTOFTOTAL=\"$TOTALCONNECTIONCONCURRENTPERCENTOFTOTAL\""
			
			#Alert only if higher then 5000
			if [[ $TOTALCONNECTIONCONCURRENTPERCENTOFTOTAL != "NA" ]] && [[ $TOTALCONNECTIONCONCURRENTPERCENTOFTOTAL -gt $AVGDEVPCT ]] && [[ $CONNECTIONCONCURRENT -gt "5000" ]]; then
				checkAsgSP_problem="1"
				checkAsgSP_problemInfo="$checkAsgSP_problemInfo [DXL Balance(Conn Current) ($LINE/$CONNECTIONCONCURRENT/$TOTALCONNECTIONCONCURRENTPERCENTOFTOTAL pct)]"
			fi
		done
	fi
	
	for LINE in `asg stat -i all_sync_ips | grep $ACTIVECHASSIS1 | awk '{print $2}'` ; do
		ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 $LINE 'cat /proc/fw_*/corexl_stats' 2>/dev/null >> $TEMPFILE_gallenqueue
	done
	checkAsgSP_corexlEnqueueFailIn=$(cat $TEMPFILE_gallenqueue | grep inbound | grep -v 1_ | grep -v 2_ | grep -v f2p | grep -v "No such file or directory" | cut -d ':' -f 2 | paste -sd+ | bc)
	checkAsgSP_corexlEnqueueFailOut=$(cat $TEMPFILE_gallenqueue | grep outbound | grep -v 1_ | grep -v 2_ | grep -v f2p | grep -v "No such file or directory" | cut -d ':' -f 2 | paste -sd+ | bc)
	rm -f $TEMPFILE_gallenqueue > /dev/null 2>&1

	LASTRUNENQUEUEFAILIN=$(cat $CURRENTRUNHISTORYLOGOUTPUT | grep "checkAsgSP_corexlEnqueueFailIn" | awk -F " - " '{print $7}' | head -1)
	if [[ $LASTRUNENQUEUEFAILIN == "" ]]; then
		LASTRUNENQUEUEFAILIN=$checkConnectionsSP_corexlEnqueueFailIn
	fi
	LASTRUNENQUEUEFAILOUT=$(cat $CURRENTRUNHISTORYLOGOUTPUT | grep "checkAsgSP_corexlEnqueueFailOut" | awk -F " - " '{print $7}' | head -1)
	if [[ $LASTRUNENQUEUEFAILOUT == "" ]]; then
		LASTRUNENQUEUEFAILOUT=$checkConnectionsSP_corexlEnqueueFailOut
	fi		
	LASTRUNLINECOUNTERS="LASTRUN INBOUND=$LASTRUNENQUEUEFAILIN OUTBOUND=$LASTRUNENQUEUEFAILOUT"


	LASTRUNENQUEUEFAILINDIFF="$(( checkAsgSP_corexlEnqueueFailIn - LASTRUNENQUEUEFAILIN ))"
	LASTRUNENQUEUEFAILOUTDIFF="$(( checkAsgSP_corexlEnqueueFailOut - LASTRUNENQUEUEFAILOUT ))"
	LASTRUNLINEDIFFCOUNTERS="DIFF INBOUND=$LASTRUNENQUEUEFAILINDIFF OUTBOUND=$LASTRUNENQUEUEFAILOUTDIFF"

	RATEENQUEUEFAILIN="$(( LASTRUNENQUEUEFAILINDIFF / SINCELASTRUN ))"
	if [[ $RATEENQUEUEFAILIN -lt "0" ]]; then
		RATEENQUEUEFAILIN="0"
	fi
	RATEENQUEUEFAILOUT="$(( LASTRUNENQUEUEFAILOUTDIFF / SINCELASTRUN ))"
	if [[ $RATEENQUEUEFAILOUT -lt "0" ]]; then
		RATEENQUEUEFAILOUT="0"
	fi
	RATECOUNTERS="RATE INBOUND=$RATEENQUEUEFAILIN OUTBOUND=$RATEENQUEUEFAILOUT"

	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkAsgSP_corexlEnqueueFail $LASTRUNLINECOUNTERS" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkAsgSP_corexlEnqueueFail $LASTRUNLINEDIFFCOUNTERS" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkAsgSP_corexlEnqueueFail $RATECOUNTERS" >>$HISTORYLOG

	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkAsgSP_perfConcurrent - $checkAsgSP_perfConcurrent" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkAsgSP_perfRate - $checkAsgSP_perfRate" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkAsgSP_corexlEnqueueFailIn - $checkAsgSP_corexlEnqueueFailIn" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkAsgSP_corexlEnqueueFailOut - $checkAsgSP_corexlEnqueueFailOut" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Perf Math - AVGPCT=$AVGPCT DEVIATIONPCT=$DEVIATIONPCT AVGDEVPCT=$AVGDEVPCT" >>$HISTORYLOG
	
	sendSyslog "$functionName" "INFO" "checkAsgSP_perfConcurrent" "VALUE=\"$checkAsgSP_perfConcurrent\"" "SMO"
	sendSyslog "$functionName" "INFO" "checkAsgSP_perfRate" "VALUE=\"$checkAsgSP_perfRate\"" "SMO"
	sendSyslog "$functionName" "INFO" "checkAsgSP_corexlEnqueueFail" "INBOUND=\"$checkAsgSP_corexlEnqueueFailIn\" OUTBOUND=\"$checkAsgSP_corexlEnqueueFailOut\"" "SMO"
	sendSyslog "$functionName" "INFO" "checkAsgSP_corexlEnqueueFailRate" "INBOUND=\"$RATEENQUEUEFAILIN\" OUTBOUND=\"$RATEENQUEUEFAILOUT\"" "SMO"
	rm -rf $TEMPFILE_perf
fi


if [[ $LOCALSMO == "1" ]]; then
	cat /var/log/asg_diag_last_run.txt > $TEMPFILE_DIAG
	checkAsgSP_diagDate=$(cat $TEMPFILE_DIAG | head -1 | tr -d ',')
	IFS=$'\n'
	for LINE in `cat $TEMPFILE_DIAG | sed -n '/Tests Status/,$p' | grep "Passed\|Failed" | grep -v "Passed:"` ; do
		NUM=$(echo "$LINE" | awk -F "|" '{print $2}' | tr -d ' ')
		NAME=$(echo "$LINE" | awk -F "|" '{print $3}' | tr -d ' ')
		RESULT=$(echo "$LINE" | awk -F "|" '{print $4}' | tr -d ' ' | tr -d ' ()!')
		DETAILS=$(echo "$LINE" | awk -F "|" '{print $5}' | tr '\n' ' ' | tr -d ' ()!0-9')
		if [[ $DETAILS == "" ]]; then
			DETAILS="N/A"
		fi
		echo "checkAsgSP_diag $NUM $NAME $RESULT $DETAILS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkAsgSP_diag - $NUM $NAME $RESULT $DETAILS $RUNTIME" >>$HISTORYLOG
		IFS=$ORIGIFS
		sendSyslog "$functionName" "INFO" "checkAsgSP_diag" "NUM=\"$NUM\" NAME=\"$NAME\" RESULT=\"$RESULT\" DETAILS=\"$DETAILS\" RUNTIME=\"$checkAsgSP_diagDate\"" "SMO"
		IFS=$'\n'
	done
	IFS=$ORIGIFS
	rm $TEMPFILE_DIAG
fi

#LOG OUTPUTS
echo "checkAsgSP_chassisGrade $checkAsgSP_chassisGrade" >>$RUNLOG
echo "checkAsgSP_corr $checkAsgSP_corr" >>$RUNLOG
echo "checkAsgSP_distUtilVerifyProblemCount $checkAsgSP_distUtilVerifyProblemCount" >>$RUNLOG
echo "checkAsgSP_distUtilVerifyProblemList $checkAsgSP_distUtilVerifyProblemList" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - ASG Stat Chassis Grade - $checkAsgSP_chassisGrade" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkAsgSP_distUtilVerifyProblemCount - $checkAsgSP_distUtilVerifyProblemCount" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkAsgSP_distUtilVerifyProblemList - $checkAsgSP_distUtilVerifyProblemList" >>$HISTORYLOG
if [[ $LOCALSMO == "1" ]]; then
	echo "checkAsgSP_perfThroughputDetail $checkAsgSP_perfThroughputDetail" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Perf Throughput - $checkAsgSP_perfThroughputDetail" >>$HISTORYLOG
	echo "checkAsgSP_perfPacketRate $checkAsgSP_perfPacketRate" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Perf Packet Rate - $checkAsgSP_perfPacketRate" >>$HISTORYLOG
	echo "checkAsgSP_perfConnectionRate $checkAsgSP_perfConnectionRate" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Perf Connection Rate - $checkAsgSP_perfConnectionRate" >>$HISTORYLOG
	echo "checkAsgSP_perfConnectionConcurrent $checkAsgSP_perfConnectionConcurrent" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Perf Connection Concurrent - $checkAsgSP_perfConnectionConcurrent" >>$HISTORYLOG
fi


#RUN LOGIC
if [[ $chechAsgSP_chassis1GradeDiff -gt "0" ]] || [[ $chechAsgSP_chassis2GradeDiff -gt "0" ]]; then
        echo "Logic - chassis grade: FAIL" >>$RUNLOG
        echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - ASG Stat Chassis Grade - $chechAsgSP_chassisGrade" >>$HISTORYLOG
        checkAsgSP_problem="1"
		checkAsgSP_problemInfo="$checkAsgSP_problemInfo [Chassis Grade]"
else
        echo "Logic - diag status: PASS" >>$RUNLOG
        echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - ASG Stat Chassis Grade - $chechAsgSP_chassisGrade" >>$HISTORYLOG	
fi


if [[ $checkAsgSP_problem == "1" ]]; then
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "PROBLEM" "checkAsgSP_problemInfo" "VALUE=\"$checkAsgSP_problemInfo $checkAsgSP_warningInfo $checkAsgSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "PROBLEM" "checkAsgSP_problemInfo" "VALUE=\"$checkAsgSP_problemInfo $checkAsgSP_warningInfo $checkAsgSP_workingInfo\""
	fi
elif [[ $checkAsgSP_warning == "1" ]]; then
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "WARNING" "checkAsgSP_problemInfo" "VALUE=\"$checkAsgSP_warningInfo $checkAsgSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "WARNING" "checkAsgSP_problemInfo" "VALUE=\"$checkAsgSP_warningInfo $checkAsgSP_workingInfo\""
	fi
else
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "WORKING" "checkAsgSP_problemInfo" "VALUE=\"$checkAsgSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "WORKING" "checkAsgSP_problemInfo" "VALUE=\"$checkAsgSP_workingInfo\""
	fi
fi
if [[ $LOCALSMO == "1" ]]; then
	sendSyslog "$functionName" "INFO" "checkAsgSP_perfThroughput" "VALUE=\"$checkAsgSP_perfThroughput\"" "SMO"
	sendSyslog "$functionName" "INFO" "checkAsgSP_perfThroughputDetail" "VALUE=\"$checkAsgSP_perfThroughputDetail\"" "SMO"
	sendSyslog "$functionName" "INFO" "checkAsgSP_perfPacketRate" "VALUE=\"$checkAsgSP_perfPacketRate\"" "SMO"
	sendSyslog "$functionName" "INFO" "checkAsgSP_perfConnectionRate" "VALUE=\"$checkAsgSP_perfConnectionRate\"" "SMO"
	sendSyslog "$functionName" "INFO" "checkAsgSP_perfConnectionConcurrent" "VALUE=\"$checkAsgSP_perfConnectionConcurrent\"" "SMO"
	sendSyslog "$functionName" "INFO" "checkAsgSP_distUtilVerifyProblemCount" "VALUE=\"$checkAsgSP_distUtilVerifyProblemCount\"" "SMO"
	if [[ $checkAsgSP_distUtilVerifyProblemCount -gt "0" ]]; then
		sendSyslog "$functionName" "INFO" "checkAsgSP_distUtilVerifyProblemList" "VALUE=\"$checkAsgSP_distUtilVerifyProblemList\"" "SMO"
	fi
fi


#SUMMARY
if [[ $checkAsgSP_problem == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - checkAsgSP - SUMMARY - PROBLEM - $checkAsgSP_problemInfo $checkAsgSP_warningInfo $checkAsgSP_workingInfo" >>$HISTORYLOG
elif [[ $checkAsgSP_warning == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - checkAsgSP - SUMMARY - WARNING - $checkAsgSP_warningInfo $checkAsgSP_workingInfo" >>$HISTORYLOG
else
	echo "$HISTORYLOGPREAMBLE - checkAsgSP - SUMMARY - WORKING - $checkAsgSP_workingInfo" >>$HISTORYLOG
fi
	
checkAsgSP_fEnd=$(date "+%s")
checkAsgSP_fRunTime=$(( checkAsgSP_fEnd - checkAsgSP_fStart ))
echo "checkAsgSP_fRunTime $checkAsgSP_fRunTime" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkAsgSP_warning - $checkAsgSP_warning" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkAsgSP_problem - $checkAsgSP_problem" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkAsgSP_problemInfo - $checkAsgSP_problemInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkAsgSP_warningInfo - $checkAsgSP_warningInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkAsgSP_workingInfo - $checkAsgSP_workingInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkAsgSP_runTime - $checkAsgSP_fRunTime" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkAsgSP_warning" "VALUE=\"$checkAsgSP_warning\""
sendSyslog "$functionName" "INFO" "checkAsgSP_problem" "VALUE=\"$checkAsgSP_problem\""
sendSyslog "$functionName" "INFO" "checkAsgSP_problemInfo" "VALUE=\"$checkAsgSP_problemInfo\""
sendSyslog "$functionName" "INFO" "checkAsgSP_warningInfo" "VALUE=\"$checkAsgSP_warningInfo\""
sendSyslog "$functionName" "INFO" "checkAsgSP_workingInfo" "VALUE=\"$checkAsgSP_workingInfo\""
sendSyslog "$functionName" "INFO" "checkAsgSP_runTime" "VALUE=\"$checkAsgSP_fRunTime\""

echo "checkAsgSP_problem $checkAsgSP_problem" >>$RUNLOG
echo "END==checkAsgSP" >>$RUNLOG
}

###################################################################################################
checkConnectionTable() {
echo "START==checkConnectionTable" >>$RUNLOG

#DEFAULTS
checkConnectionTable_fStart=$(date "+%s")
functionName=${FUNCNAME[0]}
checkConnectionTable_warning="0"
checkConnectionTable_problem="0"
checkConnectionTable_workingInfo=""
checkConnectionTable_warningInfo=""
checkConnectionTable_problemInfo=""

#Remove old files
if [[ $SYSARG3 != "debug" ]]; then
	find $TEMPDIR/$SCRIPT.connections.* -type f -not -name '$SCRIPT.connections.$LASTRUNSUCCESSEPOCH' -delete > /dev/null 2>&1
fi

#COLLECT OUTPUTS
fw tab -t connections -u 2>&1 | grep -v "cp.macro" > $CONNECTIONSOUTPUTFILERAW

cat $CONNECTIONSOUTPUTFILERAW | grep ";" | sed -n "/; [0-9a-z]\{8\}, [0-9a-z]\{5\}[0].*$/p"| sed -e '1,3d' | awk '{print $2" "$4" "$5" "$6" "$9}' | sort -n | uniq | sed -r '/^\s*$/d' | sed 's/,//g' | sed 's/;//g' | sed s/./0/37 | sed s/./0/38  | sed s/./0/39 | sed s/./0/40 > $CONNECTIONSOUTPUTFILE


if [[ $IDSENABLED != "1" ]]; then
	#Top5 SOURCE
	IFS=$'\n'
	QTY="0"
	for LINE in `cat $CONNECTIONSOUTPUTFILE | awk '{print $1}' | sort -n | uniq -c | sort -r | head -5` ; do
		QTY=$(echo "$LINE" | awk '{print $1}')
		DETAIL0=$(printf "%d." $(echo `echo "$LINE" | awk '{print $2}'` | sed 's/../0x& /g' | tr ' ' '\n' | tac) | sed 's/\.$/\n/')
		DETAIL=$(echo $DETAIL0 | awk -F "." '{print $4"."$3"."$2"."$1}')
		checkConnectionTable_topFiveSource="$checkConnectionTable_topFiveSource [$QTY/$DETAIL]"
		checkConnectionTable_topFiveSourceQty="$(( checkConnectionTable_topFiveSourceQty + QTY ))"
	done
	IFS=$ORIGIFS

	#Top5 DESTINATION
	IFS=$'\n'
	QTY="0"
	for LINE in `cat $CONNECTIONSOUTPUTFILE | awk '{print $2}' | sort -n | uniq -c | sort -r | head -5` ; do
		QTY=$(echo "$LINE" | awk '{print $1}')
		DETAIL0=$(printf "%d." $(echo `echo "$LINE" | awk '{print $2}'` | sed 's/../0x& /g' | tr ' ' '\n' | tac) | sed 's/\.$/\n/')
		DETAIL=$(echo $DETAIL0 | awk -F "." '{print $4"."$3"."$2"."$1}')
		checkConnectionTable_topFiveDestination="$checkConnectionTable_topFiveDestination [$QTY/$DETAIL]"
		checkConnectionTable_topFiveDestinationQty="$(( checkConnectionTable_topFiveDestinationQty + QTY ))"
	done
	IFS=$ORIGIFS
		
	#Top5 SERVICE
	IFS=$'\n'
	QTY="0"
	for LINE in `cat $CONNECTIONSOUTPUTFILE | awk '{print $3,$4}' | sort -n | uniq -c | sort -r | head -5` ; do
		QTY=$(echo "$LINE" | awk '{print $1}')
		DETAILPORT0=$(echo "$LINE" | awk '{print $2}')
		DETAILPORT=$(printf "%d" `echo "0x"$DETAILPORT0`)
		DETAILPROTO0=$(echo "$LINE" | awk '{print $3}')
		DETAILPROTO=$(printf "%d" `echo "0x"$DETAILPROTO0`)
		checkConnectionTable_topFiveService="$checkConnectionTable_topFiveService [$QTY/$DETAILPROTO-$DETAILPORT]"
		checkConnectionTable_topFiveServiceQty="$(( checkConnectionTable_topFiveServiceQty + QTY ))"
	done
	IFS=$ORIGIFS

	#Top5 RULE
	IFS=$'\n'
	QTY="0"
	for LINE in `cat $CONNECTIONSOUTPUTFILE | awk '{print $5}' | sort -n | uniq -c | sort -r | head -5` ; do
		QTY=$(echo "$LINE" | awk '{print $1}')
		DETAIL0=$(echo "$LINE" | awk '{print $2}')
		DETAIL=$(printf "%d" `echo "0x"$DETAIL0`)
		checkConnectionTable_topFiveRule="$checkConnectionTable_topFiveRule [$QTY/$DETAIL]"
		checkConnectionTable_topFiveRuleQty="$(( checkConnectionTable_topFiveRuleQty + QTY ))"
	done
	IFS=$ORIGIFS
fi

checkConnectionTable_uniqueQty=$(cat $CONNECTIONSOUTPUTFILE | wc -l)
#checkConnectionTable_current=$(snmp .1.3.6.1.4.1.2620.1.1.25.3)
checkConnectionTable_current=$(stattestget 1.3.6.1.4.1.2620.1.1.25.3)


#LOG OUTPUTS
echo "checkConnectionTable_uniqueQty $checkConnectionTable_uniqueQty" >>$RUNLOG
echo "checkConnectionTable_current $checkConnectionTable_current" >>$RUNLOG
if [[ $IDSENABLED != "1" ]]; then
	echo "checkConnectionTable_topFiveSource $checkConnectionTable_topFiveSource" >>$RUNLOG
	echo "checkConnectionTable_topFiveDestination $checkConnectionTable_topFiveDestination" >>$RUNLOG
	echo "checkConnectionTable_topFiveService $checkConnectionTable_topFiveService" >>$RUNLOG
	echo "checkConnectionTable_topFiveRule $checkConnectionTable_topFiveRule" >>$RUNLOG
fi
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Quantity - $checkConnectionTable_uniqueQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Current - $checkConnectionTable_current" >>$HISTORYLOG

if [[ $IDSENABLED != "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionTable_topFiveSource - $checkConnectionTable_topFiveSource" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionTable_topFiveDestination - $checkConnectionTable_topFiveDestination" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionTable_topFiveService - $checkConnectionTable_topFiveService" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionTable_topFiveRule - $checkConnectionTable_topFiveRule" >>$HISTORYLOG
fi



#RUN LOGIC
if [[ $checkConnectionTable_uniqueQty == "0" ]]; then
	echo "Logic - quantity: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - checkConnectionTable - PROBLEM - Quantity - $checkConnectionTable_uniqueQty" >>$HISTORYLOG
	checkConnectionTable_problem="1"
	checkConnectionTable_problemInfo="$checkConnectionTable_problemInfo [Connection table has zero entries]"
else
	echo "Logic - quantity: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - checkConnectionTable - WORKING - Quantity - $checkConnectionTable_uniqueQty" >>$HISTORYLOG
fi



#SYSLOG
if [[ $checkConnectionTable_problem == "1" ]]; then
	sendSyslog "$functionName" "PROBLEM" "checkConnectionTable_problemInfo" "VALUE=\"$checkConnectionTable_problemInfo $checkConnectionTable_warningInfo $checkConnectionTable_workingInfo\""
elif [[ $checkConnectionTable_warning == "1" ]]; then
	sendSyslog "$functionName" "WARNING" "checkConnectionTable_warningInfo" "VALUE=\"$checkConnectionTable_warningInfo $checkConnectionTable_workingInfo\""	
else
	sendSyslog "$functionName" "WORKING" "checkConnectionTable_workingInfo" "VALUE=\"$checkConnectionTable_workingInfo\""
fi

sendSyslog "$functionName" "INFO" "checkConnectionTable_uniqueQty" "VALUE=\"$checkConnectionTable_uniqueQty\""
sendSyslog "$functionName" "INFO" "checkConnectionTable_current" "VALUE=\"$checkConnectionTable_current\""
if [[ $IDSENABLED != "1" ]]; then
	sendSyslog "$functionName" "INFO" "checkConnectionTable_topFiveSource" "VALUE=\"$checkConnectionTable_topFiveSource\""
	sendSyslog "$functionName" "INFO" "checkConnectionTable_topFiveDestination" "VALUE=\"$checkConnectionTable_topFiveDestination\""
	sendSyslog "$functionName" "INFO" "checkConnectionTable_topFiveService" "VALUE=\"$checkConnectionTable_topFiveService\""
	sendSyslog "$functionName" "INFO" "checkConnectionTable_topFiveRule" "VALUE=\"$checkConnectionTable_topFiveRule\""
fi




checkConnectionTable_fEnd=$(date "+%s")
checkConnectionTable_fRunTime=$(( checkConnectionTable_fEnd - checkConnectionTable_fStart ))
echo "checkConnectionTable_fRunTime $checkConnectionTable_fRunTime" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionTable_warning - $checkConnectionTable_warning" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionTable_problem - $checkConnectionTable_problem" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionTable_problemInfo - $checkConnectionTable_problemInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionTable_warningInfo - $checkConnectionTable_warningInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionTable_workingInfo - $checkConnectionTable_workingInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionTable_runTime - $checkConnectionTable_fRunTime" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkConnectionTable_warning" "VALUE=\"$checkConnectionTable_warning\""
sendSyslog "$functionName" "INFO" "checkConnectionTable_problem" "VALUE=\"$checkConnectionTable_problem\""
sendSyslog "$functionName" "INFO" "checkConnectionTable_problemInfo" "VALUE=\"$checkConnectionTable_problemInfo\""
sendSyslog "$functionName" "INFO" "checkConnectionTable_warningInfo" "VALUE=\"$checkConnectionTable_warningInfo\""
sendSyslog "$functionName" "INFO" "checkConnectionTable_workingInfo" "VALUE=\"$checkConnectionTable_workingInfo\""
sendSyslog "$functionName" "INFO" "checkConnectionTable_runTime" "VALUE=\"$checkConnectionTable_fRunTime\""
echo "END==checkConnectionTable" >>$RUNLOG
}

###################################################################################################
checkConnectionTableSP() {
echo "START==checkConnectionTableSP" >>$RUNLOG

#DEFAULTS
checkConnectionTableSP_fStart=$(date "+%s")
functionName=${FUNCNAME[0]}
checkConnectionTableSP_warning="0"
checkConnectionTableSP_problem="0"
checkConnectionTableSP_workingInfo=""
checkConnectionTableSP_warningInfo=""
checkConnectionTableSP_problemInfo=""

#Remove old files from every SGM
find $TEMPDIR/$SCRIPT.connections.* -type f -not -name '$SCRIPT.connections.$LASTRUNSUCCESSEPOCH' -delete > /dev/null 2>&1
rm /var/log/tmp/fw_health_check.sh.checkConnectionTableSP.temp > /dev/null 2>&1


#COLLECT OUTPUTS
if [[ $LOCALCHASSIS == $ACTIVECHASSIS ]]; then
	fw tab -t connections -u | grep ";" | sed -n "/; [0-9a-z]\{8\}, [0-9a-z]\{5\}[0].*$/p" | awk '{print $2" "$4" "$5" "$6" "$9}'  | sort -n | uniq | sed -r '/^\s*$/d' | tr -d ',;' | sed s/./0/37 | sed s/./0/38  | sed s/./0/39 | sed s/./0/40 > /var/log/tmp/fw_health_check.sh.checkConnectionTableSP.temp
else
	checkConnectionTableSP_problemInfo="$checkConnectionTableSP_problemInfo Skipped, Not An Active SGM"
fi


if [[ $LOCALSMO == "1" ]]; then

	for LINE in `asg stat -i all_sync_ips | grep $ACTIVECHASSIS1 | grep -v "$LOCALSGM1 " | awk '{print $2}'` ; do
		ssh -o ConnectTimeout=5 $LINE 'cat /var/log/tmp/fw_health_check.sh.checkConnectionTableSP.temp' 2>/dev/null >> $CONNECTIONSOUTPUTFILERAW
	done

	if [[ $SYSARG3 == "debug" ]]; then echo "START SORT"; date "+%s"; fi
	cat $CONNECTIONSOUTPUTFILERAW | sort -n | uniq > $CONNECTIONSOUTPUTFILE


	#Copy to all SGMs incase of failover
	asg_cp2blades $CONNECTIONSOUTPUTFILE > /dev/null 2>&1

	checkConnectionTableSP_uniqueQty=$(cat $CONNECTIONSOUTPUTFILE | wc -l)
	#checkConnectionTableSP_current=$(snmpwalk -r 1 -v2c -c $SNMPCOMMUNITY localhost 1.3.6.1.4.1.2620.1.1.25.3.0 | sed 's/.*: //' | tr -d '"')
	#checkConnectionTableSP_current=$(snmp .1.3.6.1.4.1.2620.1.1.25.3.0)
	checkConnectionTableSP_current=$(stattestget 1.3.6.1.4.1.2620.1.1.25.3)

	#LOG OUTPUTS
	echo "checkConnectionTableSP_uniqueQty $checkConnectionTableSP_uniqueQty" >>$RUNLOG
	echo "checkConnectionTableSP_current $checkConnectionTableSP_current" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Quantity - $checkConnectionTableSP_uniqueQty" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Current - $checkConnectionTableSP_current" >>$HISTORYLOG
fi


#RUN LOGIC
if [[ $checkConnectionTableSP_uniqueQty == "0" ]]; then
        echo "Logic - quantity: FAIL" >>$RUNLOG
        echo "$HISTORYLOGPREAMBLE - checkConnectionTableSP - PROBLEM - Quantity - $checkConnectionTableSP_uniqueQty" >>$HISTORYLOG
        checkConnectionTableSP_problem="1"
		checkConnectionTableSP_problemInfo="$checkConnectionTableSP_problemInfo [Connection table has zero entries]"
		else
        echo "Logic - quantity: PASS" >>$RUNLOG
        echo "$HISTORYLOGPREAMBLE - checkConnectionTableSP - WORKING - Quantity - $checkConnectionTableSP_uniqueQty" >>$HISTORYLOG
fi

#SYSLOG
if [[ $checkConnectionTableSP_problem == "1" ]]; then
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "PROBLEM" "checkConnectionTableSP_problemInfo" "VALUE=\"$checkConnectionTableSP_problemInfo $checkConnectionTableSP_warningInfo $checkConnectionTableSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "PROBLEM" "checkConnectionTableSP_problemInfo" "VALUE=\"$checkConnectionTableSP_problemInfo $checkConnectionTableSP_warningInfo $checkConnectionTableSP_workingInfo\""
	fi
elif [[ $checkConnectionTableSP_warning == "1" ]]; then
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "WARNING" "checkConnectionTableSP_problemInfo" "VALUE=\"$checkConnectionTableSP_warningInfo $checkConnectionTableSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "WARNING" "checkConnectionTableSP_problemInfo" "VALUE=\"$checkConnectionTableSP_warningInfo $checkConnectionTableSP_workingInfo\""
	fi
else
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "WORKING" "checkConnectionTableSP_problemInfo" "VALUE=\"$checkConnectionTableSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "WORKING" "checkConnectionTableSP_problemInfo" "VALUE=\"$checkConnectionTableSP_workingInfo\""
	fi
fi

if [[ $LOCALSMO == "1" ]]; then
	sendSyslog "$functionName" "INFO" "checkConnectionTableSP_uniqueQty" "VALUE=\"$checkConnectionTableSP_uniqueQty\"" "SMO"
	sendSyslog "$functionName" "INFO" "checkConnectionTableSP_current" "VALUE=\"$checkConnectionTableSP_current\"" "SMO"
fi

checkConnectionTableSP_fEnd=$(date "+%s")
checkConnectionTableSP_fRunTime=$(( checkConnectionTableSP_fEnd - checkConnectionTableSP_fStart ))
echo "checkConnectionTableSP_fRunTime $checkConnectionTableSP_fRunTime" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionTableSP_warning - $checkConnectionTableSP_warning" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionTableSP_problem - $checkConnectionTableSP_problem" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionTableSP_problemInfo - $checkConnectionTableSP_problemInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionTableSP_warningInfo - $checkConnectionTableSP_warningInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionTableSP_workingInfo - $checkConnectionTableSP_workingInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkConnectionTableSP_runTime - $checkConnectionTableSP_fRunTime" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkConnectionTableSP_warning" "VALUE=\"$checkConnectionTableSP_warning\""
sendSyslog "$functionName" "INFO" "checkConnectionTableSP_problem" "VALUE=\"$checkConnectionTableSP_problem\""
sendSyslog "$functionName" "INFO" "checkConnectionTableSP_problemInfo" "VALUE=\"$checkConnectionTableSP_problemInfo\""
sendSyslog "$functionName" "INFO" "checkConnectionTableSP_warningInfo" "VALUE=\"$checkConnectionTableSP_warningInfo\""
sendSyslog "$functionName" "INFO" "checkConnectionTableSP_workingInfo" "VALUE=\"$checkConnectionTableSP_workingInfo\""
sendSyslog "$functionName" "INFO" "checkConnectionTableSP_runTime" "VALUE=\"$checkConnectionTableSP_fRunTime\""


#SUMMARY
if [[ $checkConnectionTableSP_problem == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - checkConnectionTableSP - SUMMARY - PROBLEM - $checkConnectionTableSP_problemInfo $checkConnectionTableSP_warningInfo $checkConnectionTableSP_workingInfo" >>$HISTORYLOG
elif [[ $checkConnectionTableSP_warning == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - checkConnectionTableSP - SUMMARY - WARNING - $checkConnectionTableSP_warningInfo $checkConnectionTableSP_workingInfo" >>$HISTORYLOG
else
	echo "$HISTORYLOGPREAMBLE - checkConnectionTableSP - SUMMARY - WORKING - $checkConnectionTableSP_workingInfo" >>$HISTORYLOG
fi
echo "END==checkConnectionTableSP" >>$RUNLOG
}

###################################################################################################
checkDrops(){
echo "START==checkDrops" >>$RUNLOG

#DEFAULTS
checkDrops_fStart=$(date "+%s")
functionName=${FUNCNAME[0]}
checkDrops_warning="0"
checkDrops_problem="0"
checkDrops_workingInfo=""
checkDrops_warningInfo=""
checkDrops_problemInfo=""
TEMPFILE_RAW=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.raw
TEMPFILE_SUMMARIZEDFORMATTED0=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.summarizedformatted0
TEMPFILE_SUMMARIZEDFORMATTED=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.summarizedformatted
TEMPFILE_SUMMARIZEDFORMATTEDEXPANDED=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.summarizedformattedexpanded
TEMPFILE_FORMATTED=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.formatted
TEMPFILE_MERGE=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.merge
TEMPFILE_COMPARE=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.compare
TEMPFILE_FOUND0=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.found0
TEMPFILE_FOUND=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.found
touch $TEMPFILE_FOUND

#COLLECT OUTPUTS
fw ctl zdebug drop > $TEMPFILE_RAW 2>&1 &
PID=$!
disown
ZDEBUGTIME="10"
while [ $ZDEBUGTIME != "0" ]
do
	let ZDEBUGTIME=$ZDEBUGTIME-1
	sleep 1
done
kill -9 $PID
ZDEBUGTIME="10"



#FILTER RAW INTO UNIQ LINES in SUMMARIZED FORMATTED
cat $TEMPFILE_RAW | grep "dropped" | grep -v "free_drop_template" | sort | uniq -c | sed 's/^ *//' > $TEMPFILE_SUMMARIZEDFORMATTED0
grep "fw_log_drop_ex" $TEMPFILE_SUMMARIZEDFORMATTED0 | sed -e 's/\([0-9]\{1,5\}\) ;\[cpu_\([0-9]\{1,2\}\)\];\[fw4_\([0-9]\{1,2\}\)\];fw_log_drop_ex: Packet proto.\([0-9]\{1,3\}\) \([0-9]\{1,3\}.[0-9]\{1,3\}.[0-9]\{1,3\}.[0-9]\{1,3\}\):\([0-9]\{1,5\}\) -> \([0-9]\{1,3\}.[0-9]\{1,3\}.[0-9]\{1,3\}.[0-9]\{1,3\}\):\([0-9]\{1,5\}\) dropped by \(.*\);$/\1#\2#\3#\5#\6#\7#\8#\4#\9#/g' >> $TEMPFILE_SUMMARIZEDFORMATTED
grep "fw_log_drop_conn" $TEMPFILE_SUMMARIZEDFORMATTED0 | grep "dir" | sed -e 's/\([0-9]\{1,5\}\) ;\[cpu_\([0-9]\{1,2\}\)\];\[fw4_\([0-9]\{1,2\}\)\];fw_log_drop_conn: Packet.*dir [0-9], \([0-9]\{1,3\}.[0-9]\{1,3\}.[0-9]\{1,3\}.[0-9]\{1,3\}\):\([0-9]\{1,5\}\) -> \([0-9]\{1,3\}.[0-9]\{1,3\}.[0-9]\{1,3\}.[0-9]\{1,3\}\):\([0-9]\{1,5\}\) IPP \([0-9]\{1,3\}\)>, dropped by \(.*\);$/\1#\2#\3#\4#\5#\6#\7#\8#\9#/g' >> $TEMPFILE_SUMMARIZEDFORMATTED
grep "fw_log_drop_conn" $TEMPFILE_SUMMARIZEDFORMATTED0 | grep -v "dir" | sed -e 's/\([0-9]\{1,5\}\) ;\[cpu_\([0-9]\{1,2\}\)\];\[fw4_\([0-9]\{1,2\}\)\];fw_log_drop_conn:.*dropped by \(.*\);$/\1#\2#\3######\4#/g' >> $TEMPFILE_SUMMARIZEDFORMATTED

#EXPANDED SUMMARIZED and FORMATTED for COUNTING
touch $TEMPFILE_SUMMARIZEDFORMATTEDEXPANDED

#FIND Errors
checkDrops_error=$(cat $TEMPFILE_SUMMARIZEDFORMATTED | grep "dir" | wc -l)

checkDrops_totalQty="0"
checkDrops_totalRate="0"
if [[ -f $TEMPFILE_SUMMARIZEDFORMATTED ]]; then
	IFS=$'\n'
	QTY="0"
	for LINE in `cat $TEMPFILE_SUMMARIZEDFORMATTED | grep "#"` ; do
		COUNTER=0
		QTY=$(echo "$LINE" | awk -F "#" '{print $1}')
		while [[ $COUNTER -lt $QTY ]]; do
			echo "$LINE" >> $TEMPFILE_SUMMARIZEDFORMATTEDEXPANDED
			let COUNTER=$COUNTER+1
		done
	done
	IFS=$ORIGIFS

	checkDrops_totalQty=$(cat $TEMPFILE_SUMMARIZEDFORMATTEDEXPANDED | wc -l)
	checkDrops_totalRate="$(( checkDrops_totalQty / ZDEBUGTIME ))"

	#Top5 CPU
	IFS=$'\n'
	QTY="0"
	for LINE in `cat $TEMPFILE_SUMMARIZEDFORMATTEDEXPANDED | sort -t# -k 2 | grep -v "##" | awk -F "#" '{print $2}' | tr -d ',' | sort | uniq -c | sort -r | head -5` ; do
		QTY=$(echo "$LINE" | awk '{print $1}')
		DETAIL=$(echo "$LINE" | awk '{print $2}')
		RATE="$(( QTY / ZDEBUGTIME ))"
		checkDrops_topFiveCpu="$checkDrops_topFiveCpu [$RATE/$QTY/$DETAIL]"
	done
	IFS=$ORIGIFS

	#Top5 DroppedBy Functions/Reason
	IFS=$'\n'
	QTY="0"

	for LINE in `cat $TEMPFILE_SUMMARIZEDFORMATTEDEXPANDED | sort -t# -k 9 | awk -F "#" '{print "|"$9}' | tr -d ',' | sort | uniq -c | sort -r | head -5` ; do
		QTY=$(echo "$LINE" | awk '{print $1}')
		DETAIL=$(echo "$LINE" | awk -F "|" '{print $2}')
		RATE="$(( QTY / ZDEBUGTIME ))"
		checkDrops_topFiveDroppedBy="$checkDrops_topFiveDroppedBy [$RATE/$QTY/$DETAIL]"
		if [[ $DETAIL =~ "cphwd_pslglue_handle_packet_cb" ]] || [[ $DETAIL =~ "fw_first_packet_xlation" ]]; then
			if [[ $IDSENABLED != "1" ]]; then
				#checkDrops_problem="1"
				checkDrops_problemInfo="$checkDrops_problemInfo [Reason: $DETAIL (Rate: $RATE/sec)]"
				echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Critical Reason - $DETAIL (Rate: $RATE/sec)" >>$HISTORYLOG
			fi
			IFS=$ORIGIFS
				sendSyslog "$functionName" "INFO" "checkDrops_topFiveDroppedByCritical" "RATE=\"$RATE\" QTY=\"$QTY\" DETAIL=\"$DETAIL\""
			IFS=$'\n'
		fi
	done
	IFS=$ORIGIFS

	#Top5 Sources
	IFS=$'\n'
	QTY="0"
	for LINE in `cat $TEMPFILE_SUMMARIZEDFORMATTEDEXPANDED | sort -t# -k 4 | grep -v "##" | awk -F "#" '{print $4}' | tr -d ',' | sort | uniq -c | sort -r | head -5` ; do
		QTY=$(echo "$LINE" | awk '{print $1}')
		DETAIL=$(echo "$LINE" | awk '{print $2}')
		RATE="$(( QTY / ZDEBUGTIME ))"
		checkDrops_topFiveSource="$checkDrops_topFiveSource [$RATE/$QTY/$DETAIL]"
	done
	IFS=$ORIGIFS

	#Top5 Destination
	IFS=$'\n'
	QTY="0"
	for LINE in `cat $TEMPFILE_SUMMARIZEDFORMATTEDEXPANDED | sort -t# -k 6 | grep -v "##" | awk -F "#" '{print $6}' | tr -d ',' | sort | uniq -c | sort -r | head -5` ; do
		QTY=$(echo "$LINE" | awk '{print $1}')
		DETAIL=$(echo "$LINE" | awk '{print $2}')
		RATE="$(( QTY / ZDEBUGTIME ))"
		checkDrops_topFiveDestination="$checkDrops_topFiveDestination [$RATE/$QTY/$DETAIL]"
	done
	IFS=$ORIGIFS

	#Top5 Protocol
	IFS=$'\n'
	QTY="0"
	for LINE in `cat $TEMPFILE_SUMMARIZEDFORMATTEDEXPANDED | sort -t# -k 7 | grep -v "##" | awk -F "#" '{print $7"_"$8}' | tr -d ',' | sort | uniq -c | sort -r | head -5` ; do
		QTY=$(echo "$LINE" | awk '{print $1}')
		DETAIL=$(echo "$LINE" | awk '{print $2}')
		RATE="$(( QTY / ZDEBUGTIME ))"
		checkDrops_topFiveProtocol="$checkDrops_topFiveProtocol [$RATE/$QTY/$DETAIL]"
	done
	IFS=$ORIGIFS
fi



#FORMAT RAW to RULEBASE SCHEMA in DECIMAL
cat $TEMPFILE_RAW | grep "proto" | grep "rule\|Rule" | awk '{print $4" "$6" "$3}'| sort | uniq | sed 's/proto=//' | sed 's/:/ /' | sed 's/:/ /' | awk '{print $1" "$3" "$4" "$5}' | sort | uniq > $TEMPFILE_FORMATTED
checkDrops_uniqueQty="0"
touch $TEMPFILE_MERGE
#CONVERT DECIMAL TO HEX and ADD TO COMPARE FILE
cat $TEMPFILE_FORMATTED | awk -F"[ |.]" '{printf "%02x%02x%02x%02x %02x%02x%02x%02x %08x %08x\n",$1,$2,$3,$4,$5,$6,$7,$8,$9,$10}' > $TEMPFILE_MERGE
checkDrops_uniqueQty=$(cat $TEMPFILE_MERGE | wc -l)

#CONFIRM CONNECTION TABLE EXISTS or FIND ALTERNATE
if [[ ! -f $LASTRUNCONNECTIONSOUTPUTFILE ]]; then
	checkDrops_lastRunAlternateFile=$(ls -altr $TEMPDIR/$SCRIPT.connections.* | tail -1 | awk '{print $9}')
	if [[ $checkDrops_lastRunAlternateFile != "" ]]; then
		echo "checkDrops_lastRunAlternateFile $checkDrops_lastRunAlternateFile" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Older Connections File - $checkDrops_lastRunAlternateFile instead of $LASTRUNCONNECTIONSOUTPUTFILE" >>$HISTORYLOG
		checkDrops_problemInfo="$checkDrops_problemInfo [Using older connections table ($checkDrops_lastRunAlternateFile) instead of expected ($LASTRUNCONNECTIONSOUTPUTFILE)]"
		$LASTRUNCONNECTIONSOUTPUTFILE=$checkDrops_lastRunAlternateFile
	fi
fi
	
#START MATCHING AGAINST PREVIOUS CONNECTIONS TABLE
if [[ ! -f $LASTRUNCONNECTIONSOUTPUTFILE ]]; then
	echo "No connection table found: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - checkDrops - PROBLEM - Connections Table - $LASTRUNCONNECTIONSOUTPUTFILE" >>$HISTORYLOG
	checkDrops_problemInfo="$checkDrops_problemInfo [No previous connection table output found]"
	if [[ $IDSENABLED != "1" ]]; then
		checkDrops_warning="1"
	fi
	checkDrops_lastRunConnectionsQty="0"
else
	checkDrops_lastRunConnectionsQty=$(cat $LASTRUNCONNECTIONSOUTPUTFILE | wc -l)
	checkDrops_found="0"
	checkDrops_foundMinusNA="0"
	
	#PROCESS CONN TABLE ADD TO COMPARE FILE
	cat $LASTRUNCONNECTIONSOUTPUTFILE | awk '{print $1,$2,$3,$4}' | sort -u >> $TEMPFILE_MERGE
	
	#PROCESS COMPARE FILE LOOK FOR DUPLICATES to INDICATED MATCH
	cat $TEMPFILE_MERGE | sort | uniq -c | sed -e 's/^.*1 [0-9a-z]\{8\} [0-9a-z]\{8\} [0-9a-z]\{8\} [0-9a-z]\{8\}$//g' | sed '/^\s*$/d'| awk '{print $2,$3,$4,$5}' >> $TEMPFILE_COMPARE

	#WHERE MATCHES EXIST find RULE NUMBER from CONN TABLE convert to HEX
	grep -f $TEMPFILE_COMPARE $LASTRUNCONNECTIONSOUTPUTFILE | sed -e 's/^\([0-9a-z]\{2\}\)\([0-9a-z]\{2\}\)\([0-9a-z]\{2\}\)\([0-9a-z]\{2\}\)\(.*$\)/0x\1 0x\2 0x\3 0x\4\5/g' | sed -e 's/^\(0x.*0x.*0x.*0x.\{2\}\) \([0-9a-z]\{2\}\)\([0-9a-z]\{2\}\)\([0-9a-z]\{2\}\)\([0-9a-z]\{2\}\)\(.*$\)/\1 0x\2 0x\3 0x\4 0x\5 \6/g' | sed -e 's/\(^0x.\{2\} 0x.\{2\} 0x.\{2\} 0x.\{2\} 0x.\{2\} 0x.\{2\} 0x.\{2\} 0x.\{2\}\)  \([0-9a-z]\{8\}\) \([0-9a-z]\{8\}\) \([0-9a-z]\{8\}\)$/\1 0x\2 0x\3 0x\4/g' > $TEMPFILE_FOUND0

	#CONVERT HEX TO DECIMAL
	if [[ -f $TEMPFILE_FOUND0 ]]; then
		IFS=$'\n'
		QTY="0"
		for LINE in `cat $TEMPFILE_FOUND0` ; do
			SRC1=$(printf "%d" `echo "$LINE" | awk '{print $1}'`)
			SRC2=$(printf "%d" `echo "$LINE" | awk '{print $2}'`)
			SRC3=$(printf "%d" `echo "$LINE" | awk '{print $3}'`)
			SRC4=$(printf "%d" `echo "$LINE" | awk '{print $4}'`)
			DST1=$(printf "%d" `echo "$LINE" | awk '{print $5}'`)
			DST2=$(printf "%d" `echo "$LINE" | awk '{print $6}'`)
			DST3=$(printf "%d" `echo "$LINE" | awk '{print $7}'`)
			DST4=$(printf "%d" `echo "$LINE" | awk '{print $8}'`)
			DPORT=$(printf "%d" `echo "$LINE" | awk '{print $9}'`)
			PROTO=$(printf "%d" `echo "$LINE" | awk '{print $10}'`)
			if [[ $PROTO == "6" ]]; then
				PROTO="TCP"
			fi
			if [[ $PROTO == "17" ]]; then
				PROTO="UDP"
			fi
			if [[ $PROTO == "1" ]]; then
				PROTO="ICMP"
			fi
			if [[ $PROTO != "TCP" ]] && [[ $PROTO != "UDP" ]] && [[ $PROTO != "ICMP" ]]; then
				PROTO="IP$PROTO"
			fi
			RULE=$(printf "%d" `echo "$LINE" | awk '{print $11}'`)
			echo "$SRC1.$SRC2.$SRC3.$SRC4 $DST1.$DST2.$DST3.$DST4 $DPORT $PROTO $RULE" >> $TEMPFILE_FOUND
			checkDrops_foundDetail0=$(cat $TEMPFILE_SUMMARIZEDFORMATTED | grep "$SRC1.$SRC2.$SRC3.$SRC4" | grep "$DST1.$DST2.$DST3.$DST4" | grep "$DPORT" | head -1)
			IFS=$ORIGIFS
			sendSyslog "$functionName" "INFO" "checkDrops_foundDetail" "CMD=\"$CMD\" SRC=\"$SRC1.$SRC2.$SRC3.$SRC4\" DST=\"$DST1.$DST2.$DST3.$DST4\" DPORT=\"$DPORT\" PROTO=\"$PROTO\" RULE=\"$RULE\" DETAIL=\"$checkDrops_foundDetail0\""
			IFS=$'\n'
			echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Found Detail - [$SRC1.$SRC2.$SRC3.$SRC4 $DST1.$DST2.$DST3.$DST4 $DPORT $PROTO $RULE] [$checkDrops_foundDetail0]" >>$HISTORYLOG
		done
		IFS=$ORIGIFS
			
		checkDrops_found=$(cat $TEMPFILE_FOUND | wc -l)

	else
		checkDrops_found="0"
	fi

	
	#LOG OUTPUTS
	echo "checkDrops_uniqueQty $checkDrops_uniqueQty" >>$RUNLOG
	echo "checkDrops_totalQty $checkDrops_totalQty" >>$RUNLOG
	echo "checkDrops_totalRate $checkDrops_totalRate" >>$RUNLOG
	echo "checkDrops_error $checkDrops_error" >>$RUNLOG
	echo "checkDrops_found $checkDrops_found" >>$RUNLOG
	echo "checkDrops_topFiveDroppedBy $checkDrops_topFiveDroppedBy" >>$RUNLOG
	echo "checkDrops_topFiveSource $checkDrops_topFiveSource" >>$RUNLOG
	echo "checkDrops_topFiveDestination $checkDrops_topFiveDestination" >>$RUNLOG
	echo "checkDrops_topFiveProtocol $checkDrops_topFiveProtocol" >>$RUNLOG
	echo "checkDrops_topFiveCpuWorker $checkDrops_topFiveCpuWorker" >>$RUNLOGTAR
	
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Unique Quantity - $checkDrops_uniqueQty" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Total Quantity - $checkDrops_totalQty" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Total Rate - $checkDrops_totalRate" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Error - $checkDrops_error" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Found - $checkDrops_found" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkDrops_topFiveDroppedBy - $checkDrops_topFiveDroppedBy" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkDrops_topFiveSource - $checkDrops_topFiveSource" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkDrops_topFiveDestination - $checkDrops_topFiveDestination" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkDrops_topFiveProtocol - $checkDrops_topFiveProtocol" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkDrops_topFiveCpu - $checkDrops_topFiveCpu" >>$HISTORYLOG

	#SYSLOG
	sendSyslog "$functionName" "INFO" "checkDrops_uniqueQty" "VALUE=\"$checkDrops_uniqueQty\""
	sendSyslog "$functionName" "INFO" "checkDrops_totalQty" "VALUE=\"$checkDrops_totalQty\""
	sendSyslog "$functionName" "INFO" "checkDrops_totalRate" "VALUE=\"$checkDrops_totalRate\""
	sendSyslog "$functionName" "INFO" "checkDrops_error" "VALUE=\"$checkDrops_error\""
	sendSyslog "$functionName" "INFO" "checkDrops_found" "VALUE=\"$checkDrops_found\""
	sendSyslog "$functionName" "INFO" "checkDrops_topFiveDroppedBy" "VALUE=\"$checkDrops_topFiveDroppedBy\""
	sendSyslog "$functionName" "INFO" "checkDrops_topFiveSource" "VALUE=\"$checkDrops_topFiveSource\""
	sendSyslog "$functionName" "INFO" "checkDrops_topFiveDestination" "VALUE=\"$checkDrops_topFiveDestination\""
	sendSyslog "$functionName" "INFO" "checkDrops_topFiveProtocol" "VALUE=\"$checkDrops_topFiveProtocol\""
	sendSyslog "$functionName" "INFO" "checkDrops_topFiveCpu" "VALUE=\"$checkDrops_topFiveCpu\""


	#RUN LOGIC
	if [[ $checkDrops_found -gt "0" ]]; then
		if [[ $IDSENABLED == "1" ]]; then
			checkDrops_problemInfo="$checkDrops_problemInfo [Found ($checkDrops_found) drops that match previously accepted connections, but ignored due to IDS configuration]"
			echo "Logic - found: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - checkDrops - PROBLEM - Found - $checkDrops_found" >>$HISTORYLOG
		else
			checkDrops_problem="1"
			checkDrops_problemInfo="$checkDrops_problemInfo [Found ($checkDrops_found) drops that match previously accepted connections]"
			echo "Logic - found: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - checkDrops - PROBLEM - Found - $checkDrops_found" >>$HISTORYLOG
		fi
	else
		echo "Logic - found: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - checkDrops - WORKING - Found - $checkDrops_found" >>$HISTORYLOG
	fi
	
fi
checkDrops_problemInfo="$checkDrops_problemInfo [Total Drop Rate: $checkDrops_totalRate/sec]"
checkDrops_problemInfo="$checkDrops_problemInfo [Eval($ZDEBUGTIME secs): $checkDrops_totalQty ($checkDrops_uniqueQty unique) individual dropped packets, checked against $checkDrops_lastRunConnectionsQty connections]"


#SYSLOG
if [[ $checkDrops_problem == "1" ]]; then
	sendSyslog "$functionName" "PROBLEM" "checkDrops_problemInfo" "VALUE=\"$checkDrops_problemInfo $checkDrops_warningInfo $checkDrops_workingInfo\""
elif [[ $checkDrops_warning == "1" ]]; then
	sendSyslog "$functionName" "WARNING" "checkDrops_warningInfo" "VALUE=\"$checkDrops_warningInfo $checkDrops_workingInfo\""	
else
	sendSyslog "$functionName" "WORKING" "checkDrops_workingInfo" "VALUE=\"$checkDrops_workingInfo\""
fi


sendSyslog "$functionName" "INFO" "$checkDrops_totalQty" "VALUE=\"$checkDrops_totalQty\""
sendSyslog "$functionName" "INFO" "$checkDrops_totalRate" "VALUE=\"$checkDrops_totalRate\""
sendSyslog "$functionName" "INFO" "$checkDrops_uniqueQty" "VALUE=\"$checkDrops_uniqueQty\""
sendSyslog "$functionName" "INFO" "$checkDrops_found" "VALUE=\"$checkDrops_found\""
sendSyslog "$functionName" "INFO" "$checkDrops_topFiveDroppedBy" "VALUE=\"$checkDrops_topFiveDroppedBy\""
sendSyslog "$functionName" "INFO" "$checkDrops_topFiveSource" "VALUE=\"$checkDrops_topFiveSource\""
sendSyslog "$functionName" "INFO" "$checkDrops_topFiveDestination" "VALUE=\"$checkDrops_topFiveDestination\""
sendSyslog "$functionName" "INFO" "$checkDrops_topFiveProtocol" "VALUE=\"$checkDrops_topFiveProtocol\""
sendSyslog "$functionName" "INFO" "$checkDrops_topFiveCpu" "VALUE=\"$checkDrops_topFiveCpu\""



#HANDLE LEGACY CODE UNTIL FIXED
touch $DROPSFOUNDFILE
cat $TEMPFILE_FOUND > $DROPSFOUNDFILE

#CLEANUP
if [[ $checkDrops_found -gt "0" ]] && [[ $IDSENABLED != "1" ]]; then
	tar cvf $TEMPDIR/$SCRIPT.$EPOCH.$functionName.tar $LASTRUNCONNECTIONSOUTPUTFILE $TEMPFILE_RAW $TEMPFILE_SUMMARIZEDFORMATTED0 $TEMPFILE_SUMMARIZEDFORMATTED $TEMPFILE_SUMMARIZEDFORMATTEDEXPANDED $TEMPFILE_FORMATTED $TEMPFILE_MERGE $TEMPFILE_COMPARE $TEMPFILE_FOUND $TEMPFILE_FOUND0 > /dev/null 2>&1
fi

rm $TEMPFILE_RAW $TEMPFILE_SUMMARIZEDFORMATTED0 $TEMPFILE_SUMMARIZEDFORMATTED $TEMPFILE_SUMMARIZEDFORMATTEDEXPANDED $TEMPFILE_FORMATTED $TEMPFILE_MERGE $TEMPFILE_COMPARE $TEMPFILE_FOUND $TEMPFILE_FOUND0 > /dev/null 2>&1


checkDrops_fEnd=$(date "+%s")
checkDrops_fRunTime=$(( checkDrops_fEnd - checkDrops_fStart ))
echo "checkDrops_fRunTime $checkDrops_fRunTime" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkDrops_warning - $checkDrops_warning" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkDrops_problem - $checkDrops_problem" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkDrops_problemInfo - $checkDrops_problemInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkDrops_warningInfo - $checkDrops_warningInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkDrops_workingInfo - $checkDrops_workingInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkDrops_runTime - $checkDrops_fRunTime" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkDrops_warning" "VALUE=\"$checkDrops_warning\""
sendSyslog "$functionName" "INFO" "checkDrops_problem" "VALUE=\"$checkDrops_problem\""
sendSyslog "$functionName" "INFO" "checkDrops_problemInfo" "VALUE=\"$checkDrops_problemInfo\""
sendSyslog "$functionName" "INFO" "checkDrops_warningInfo" "VALUE=\"$checkDrops_warningInfo\""
sendSyslog "$functionName" "INFO" "checkDrops_workingInfo" "VALUE=\"$checkDrops_workingInfo\""
sendSyslog "$functionName" "INFO" "checkDrops_runTime" "VALUE=\"$checkDrops_fRunTime\""
echo "$checkDrops_problem" >> $TEMPDIR/$SCRIPT.$EPOCH.var.checkDrops_problem
echo "$checkDrops_problemInfo" >> $TEMPDIR/$SCRIPT.$EPOCH.var.checkDrops_problemInfo
echo "checkDrops_warning $checkDrops_warning" >>$RUNLOG
echo "checkDrops_problem $checkDrops_problem" >>$RUNLOG
echo "END==checkDrops" >>$RUNLOG
}

###################################################################################################
checkDropsSP(){
echo "START==checkDropsSP" >>$RUNLOG

#DEFAULTS
checkDropsSP_fStart=$(date "+%s")
functionName=${FUNCNAME[0]}
checkDropsSP_warning="0"
checkDropsSP_problem="0"
checkDropsSP_workingInfo=""
checkDropsSP_warningInfo=""
checkDropsSP_problemInfo=""
TEMPFILE_RAWSGM=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.rawsgm
TEMPFILE_RAW=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.raw
TEMPFILE_SUMMARIZEDFORMATTED0=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.summarizedformatted0
TEMPFILE_SUMMARIZEDFORMATTED=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.summarizedformatted
TEMPFILE_SUMMARIZEDFORMATTEDEXPANDED=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.summarizedformattedexpanded
TEMPFILE_FORMATTED=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.formatted
TEMPFILE_MERGE=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.merge
TEMPFILE_COMPARE=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.compare
TEMPFILE_FOUND0=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.found0
TEMPFILE_FOUND=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.found
touch $TEMPFILE_FOUND


#COLLECT OUTPUTS
#g_fw ctl zdebug drop > $TEMPFILE_RAW 2>&1 &
fw ctl zdebug drop > $TEMPFILE_RAWSGM 2>&1 &
PID=$!
disown
ZDEBUGTIME="10"
while [ $ZDEBUGTIME != "0" ]
do
        let ZDEBUGTIME=$ZDEBUGTIME-1
        sleep 1
done
kill -9 $PID > /dev/null 2>&1
ZDEBUGTIME="10"

#ADD SGM PREFIX
prefix=$(echo "[$LOCALSGM]")
file=$TEMPFILE_RAWSGM
while read -r line
do
 echo "${prefix}$line"
done <$file > newfile
mv newfile $file


if [[ $LOCALSMO == "1" ]]; then

g_cat $TEMPFILE_RAWSGM > $TEMPFILE_RAW

	#ACCOUNT FOR SP FAILOVER SINCE LAST RUN --- deprecated due to asg_cp2blades of conn table
	#checkDropsSP_previousClusterXLStatus=$(cat $LASTRUNHISTORYLOGOUTPUT | grep "checkClusterXL" | grep "INFO" | awk -F " - " '{print $7}')
	#checkDropsSP_currentClusterXLStatus=$(cat $HISTORYLOG | grep $EPOCH | grep "checkClusterXL" | grep "INFO" | awk -F " - " '{print $7}')
	#if [[ $checkDropsSP_previousClusterXLStatus != $checkDropsSP_currentClusterXLStatus ]]; then
	#	checkDropsSP_clusterXLStatusChanged="1"
	#else
		checkDropsSP_clusterXLStatusChanged="0"
	#fi


	#FILTER RAW INTO UNIQ LINES in SUMMARIZED FORMATTED
	cat $TEMPFILE_RAW | tr -dc 'a-z,0-9,\n [],A-Z,_:;.><-=\-' | grep "dropped" | grep -v "free_drop_template" | sort | uniq -c | sed 's/^ *//' > $TEMPFILE_SUMMARIZEDFORMATTED0
	grep "fw_log_drop_ex" $TEMPFILE_SUMMARIZEDFORMATTED0 | sed -e 's/\([0-9]\{1,4\}.*\);\[cpu_\([0-9]\{1,2\}\)\];\[fw4_\([0-9]\{1,2\}\)\];fw_log_drop_ex: Packet proto.\([0-9]\{1,3\}\) \([0-9]\{1,3\}.[0-9]\{1,3\}.[0-9]\{1,3\}.[0-9]\{1,3\}\):\([0-9]\{1,5\}\) -> \([0-9]\{1,3\}.[0-9]\{1,3\}.[0-9]\{1,3\}.[0-9]\{1,3\}\):\([0-9]\{1,5\}\) dropped by \(.*\);$/\1#\2#\3#\5#\6#\7#\8#\4#\9#/g' | sed -e 's/\([0-9]\{1,5\}\).*\([0-9]_[0-9]\{1,2\}\)]\(.*$\)/\1#\2\3/g' >> $TEMPFILE_SUMMARIZEDFORMATTED
	grep "fw_log_drop_conn" $TEMPFILE_SUMMARIZEDFORMATTED0 | grep "dir" | sed -e 's/\([0-9]\{1,4\}.*\);\[cpu_\([0-9]\{1,2\}\)\];\[fw4_\([0-9]\{1,2\}\)\];fw_log_drop_conn: Packet.*dir [0-9], \([0-9]\{1,3\}.[0-9]\{1,3\}.[0-9]\{1,3\}.[0-9]\{1,3\}\):\([0-9]\{1,5\}\) -> \([0-9]\{1,3\}.[0-9]\{1,3\}.[0-9]\{1,3\}.[0-9]\{1,3\}\):\([0-9]\{1,5\}\) IPP \([0-9]\{1,2\}\)>, dropped by \(.*\);$/\1#\2#\3#\4#\5#\6#\7#\8#\9#/g' | sed -e 's/\([0-9]\{1,5\}\).*\([0-9]_[0-9]\{1,2\}\)\]\(.*$\)/\1#\2\3/g' >> $TEMPFILE_SUMMARIZEDFORMATTED
	grep "fw_log_drop_conn" $TEMPFILE_SUMMARIZEDFORMATTED0 | grep -v "dir" | sed -e 's/\([0-9]\{1,4\}.*\);\[cpu_\([0-9]\{1,2\}\)\];\[fw4_\([0-9]\{1,2\}\)\];fw_log_drop_conn:.*dropped by \(.*\);$/\1#\2#\3#\4#/g' | sed -e 's/\([0-9]\{1,5\}\).*\([0-9]_[0-9]\{1,2\}\)\]\(.*$\)/\1#\2\3/g'  >> $TEMPFILE_SUMMARIZEDFORMATTED


	#EXPANDED SUMMARIZED and FORMATTED for COUNTING
	touch $TEMPFILE_SUMMARIZEDFORMATTEDEXPANDED

	#FIND Errors and REMOVE
	checkDropsSP_error=$(cat $TEMPFILE_SUMMARIZEDFORMATTED | grep "dir" | wc -l)
	cat $TEMPFILE_SUMMARIZEDFORMATTED | grep -v "dir" > $TEMPFILE_SUMMARIZEDFORMATTED

	checkDropsSP_totalQty="0"
	checkDropsSP_totalRate="0"
	if [[ -f $TEMPFILE_SUMMARIZEDFORMATTED ]]; then
		IFS=$'\n'
		QTY="0"
		for LINE in `cat $TEMPFILE_SUMMARIZEDFORMATTED | grep "#"` ; do
			COUNTER=0
			QTY=$(echo "$LINE" | awk -F "#" '{print $1}')
			while [[ $COUNTER -lt $QTY ]]; do
				echo "$LINE" >> $TEMPFILE_SUMMARIZEDFORMATTEDEXPANDED
				let COUNTER=$COUNTER+1
			done
		done
		IFS=$ORIGIFS

		checkDropsSP_totalQty=$(cat $TEMPFILE_SUMMARIZEDFORMATTEDEXPANDED | wc -l)
		checkDropsSP_totalRate="$(( checkDropsSP_totalQty / ZDEBUGTIME ))"

		#Top5 SGM
		IFS=$'\n'
		QTY="0"
		for LINE in `cat $TEMPFILE_SUMMARIZEDFORMATTEDEXPANDED | sort -t# -k 2 | grep -v "##" | awk -F "#" '{print $2}' | tr -d ',' | sort | uniq -c | sort -r | head -5` ; do
			QTY=$(echo "$LINE" | awk '{print $1}')
			DETAIL=$(echo "$LINE" | awk '{print $2}')
			RATE="$(( QTY / 10 ))"
			checkDropsSP_topFiveSgm="$checkDropsSP_topFiveSgm [$RATE/$QTY/$DETAIL]"
		done
		IFS=$ORIGIFS
		
		#Top5 CPU
		IFS=$'\n'
		QTY="0"
		for LINE in `cat $TEMPFILE_SUMMARIZEDFORMATTEDEXPANDED | sort -t# -k 3 | grep -v "##" | awk -F "#" '{print $3}' | tr -d ',' | sort | uniq -c | sort -r | head -5` ; do
			QTY=$(echo "$LINE" | awk '{print $1}')
			DETAIL=$(echo "$LINE" | awk '{print $2}')
			RATE="$(( QTY / ZDEBUGTIME ))"
			checkDropsSP_topFiveCpu="$checkDropsSP_topFiveCpu [$RATE/$QTY/$DETAIL]"
		done
		IFS=$ORIGIFS

		#Top5 DroppedBy Functions/Reason
		IFS=$'\n'
		QTY="0"

		for LINE in `cat $TEMPFILE_SUMMARIZEDFORMATTEDEXPANDED | sort -t# -k 10 | awk -F "#" '{print "|"$10}' | tr -d ',' | sort | uniq -c | sort -r | head -5` ; do
			QTY=$(echo "$LINE" | awk '{print $1}')
			DETAIL=$(echo "$LINE" | awk -F "|" '{print $2}')
			RATE="$(( QTY / ZDEBUGTIME ))"
			checkDropsSP_topFiveDroppedBy="$checkDropsSP_topFiveDroppedBy [$RATE/$QTY/$DETAIL]"
			if [[ $DETAIL == "cphwd_pslglue_handle_packet_cb" ]] || [[ $DETAIL == "fw_first_packet_xlation" ]] || [[ $DETAIL == "fwmultik_enqueue_packet_kernel" ]]; then
				#checkDropsSP_problem="1"
				checkDropsSP_problemInfo="$checkDropsSP_problemInfo [Reason: $DETAIL (Rate: $RATE/sec)]"
				echo "Found Problem Drop Reason: FAIL ($DETAIL)" >>$RUNLOG
				echo "$HISTORYLOGPREAMBLE - checkDropsSP - PROBLEM - Drop Reason - [$RATE/$QTY/$DETAIL]" >>$HISTORYLOG
				IFS=$ORIGIFS
					sendSyslog "$functionName" "INFO" "checkDropsSP_topFiveDroppedByCritical" "RATE=\"$RATE\" QTY=\"$QTY\" DETAIL=\"$DETAIL\"" "SMO"
				IFS=$'\n'
			fi
		done
		IFS=$ORIGIFS

		#Top5 Sources
		IFS=$'\n'
		QTY="0"
		for LINE in `cat $TEMPFILE_SUMMARIZEDFORMATTEDEXPANDED | sort -t# -k 5 | grep -v "##" | awk -F "#" '{print $5}' | tr -d ',' | sort | uniq -c | sort -r | head -5` ; do
			QTY=$(echo "$LINE" | awk '{print $1}')
			DETAIL=$(echo "$LINE" | awk '{print $2}')
			RATE="$(( QTY / ZDEBUGTIME ))"
			checkDropsSP_topFiveSource="$checkDropsSP_topFiveSource [$RATE/$QTY/$DETAIL]"
		done
		IFS=$ORIGIFS

		#Top5 Destination
		IFS=$'\n'
		QTY="0"
		for LINE in `cat $TEMPFILE_SUMMARIZEDFORMATTEDEXPANDED | sort -t# -k 7 | grep -v "##" | awk -F "#" '{print $7}' | tr -d ',' | sort | uniq -c | sort -r | head -5` ; do
			QTY=$(echo "$LINE" | awk '{print $1}')
			DETAIL=$(echo "$LINE" | awk '{print $2}')
			RATE="$(( QTY / ZDEBUGTIME ))"
			checkDropsSP_topFiveDestination="$checkDropsSP_topFiveDestination [$RATE/$QTY/$DETAIL]"
		done
		IFS=$ORIGIFS

		#Top5 Protocol
		IFS=$'\n'
		QTY="0"
		for LINE in `cat $TEMPFILE_SUMMARIZEDFORMATTEDEXPANDED | sort -t# -k 8 | grep -v "##" | awk -F "#" '{print $8"_"$9}' | tr -d ',' | sort | uniq -c | sort -r | head -5` ; do
			QTY=$(echo "$LINE" | awk '{print $1}')
			DETAIL=$(echo "$LINE" | awk '{print $2}')
			RATE="$(( QTY / ZDEBUGTIME ))"
			checkDropsSP_topFiveProtocol="$checkDropsSP_topFiveProtocol [$RATE/$QTY/$DETAIL]"
		done
		IFS=$ORIGIFS
	fi

	#FORMAT RAW to RULEBASE SCHEMA in DECIMAL
	cat $TEMPFILE_RAW  | grep "proto" | grep "rule\|Rule" | grep -v "NAT" | awk '{print $4" "$6" "$3}'| sort | uniq | sed 's/proto=//' | sed 's/:/ /' | sed 's/:/ /' | awk '{print $1" "$3" "$4" "$5}' | sort | uniq > $TEMPFILE_FORMATTED
	checkDropsSP_uniqueQty="0"
	touch $TEMPFILE_MERGE
	cat $TEMPFILE_FORMATTED | awk -F"[ |.]" '{printf "%02x%02x%02x%02x %02x%02x%02x%02x %08x %08x\n",$1,$2,$3,$4,$5,$6,$7,$8,$9,$10}' > $TEMPFILE_MERGE
	checkDropsSP_uniqueQty=$(cat $TEMPFILE_MERGE | wc -l)

	#CONFIRM CONNECTION TABLE EXISTS or FIND ALTERNATE
	if [[ ! -f $LASTRUNCONNECTIONSOUTPUTFILE ]]; then
		checkDropsSP_lastRunAlternateFile=$(ls -altr $TEMPDIR/$SCRIPT.connections.* | tail -1 | awk '{print $9}')
		if [[ $checkDropsSP_lastRunAlternateFile != "" ]]; then
			echo "checkDropsSP_lastRunAlternateFile $checkDropsSP_lastRunAlternateFile" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Older Connections File - $checkDropsSP_lastRunAlternateFile instead of $LASTRUNCONNECTIONSOUTPUTFILE" >>$HISTORYLOG
			checkDrops_problemInfo="$checkDropsSP_problemInfo [Using older connections table ($checkDropsSP_lastRunAlternateFile) instead of expected ($LASTRUNCONNECTIONSOUTPUTFILE)]"
			$LASTRUNCONNECTIONSOUTPUTFILE=$checkDropsSP_lastRunAlternateFile
		fi
	fi

	#START MATCHING AGAINST PREVIOUS CONNECTIONS TABLE
	if [[ $checkDropsSP_clusterXLStatusChanged == "1" ]]; then
		checkDropsSP_problemInfo="$checkDropsSP_problemInfo [Chassis failover since last run, no previous connection table output found]"
		checkDropsSP_problem="0"
		checkDropsSP_lastRunConnectionsQty="0"
	else
		if [[ ! -f $LASTRUNCONNECTIONSOUTPUTFILE ]] && [[ ! -f $checkDropsSP_lastRunAlternateFile ]]; then
			echo "No connection table found: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - checkDropsSP - PROBLEM - Connections Tables - Expected: $LASTRUNCONNECTIONSOUTPUTFILE Alternate: $checkDropsSP_lastRunAlternateFile" >>$HISTORYLOG
			checkDropsSP_problemInfo="$checkDropsSP_problemInfo [No previous connection table output found]"
			checkDropsSP_warning="1"
			checkDropsSP_lastRunConnectionsQty="0"
		else
			checkDropsSP_lastRunConnectionsQty=$(cat $LASTRUNCONNECTIONSOUTPUTFILE | wc -l)
			checkDropsSP_found="0"
			checkDropsSP_foundMinusNA="0"

			#PROCESS CONN TABLE ADD TO COMPARE FILE
			cat $LASTRUNCONNECTIONSOUTPUTFILE | awk '{print $1,$2,$3,$4}' | sort -u >> $TEMPFILE_MERGE
			
			#PROCESS COMPARE FILE LOOK FOR DUPLICATES to INDICATED MATCH
			cat $TEMPFILE_MERGE | sort | uniq -c | sed -e 's/^.*1 [0-9a-z]\{8\} [0-9a-z]\{8\} [0-9a-z]\{8\} [0-9a-z]\{8\}$//g' | sed '/^\s*$/d' | awk '{print $2,$3,$4,$5}' >> $TEMPFILE_COMPARE

			#WHERE MATCHES EXIST find RULE NUMBER from CONN TABLE convert to HEX
			grep -f $TEMPFILE_COMPARE $LASTRUNCONNECTIONSOUTPUTFILE | sed -e 's/^\([0-9a-z]\{2\}\)\([0-9a-z]\{2\}\)\([0-9a-z]\{2\}\)\([0-9a-z]\{2\}\)\(.*$\)/0x\1 0x\2 0x\3 0x\4\5/g' | sed -e 's/^\(0x.*0x.*0x.*0x.\{2\}\) \([0-9a-z]\{2\}\)\([0-9a-z]\{2\}\)\([0-9a-z]\{2\}\)\([0-9a-z]\{2\}\)\(.*$\)/\1 0x\2 0x\3 0x\4 0x\5 \6/g' | sed -e 's/\(^0x.\{2\} 0x.\{2\} 0x.\{2\} 0x.\{2\} 0x.\{2\} 0x.\{2\} 0x.\{2\} 0x.\{2\}\)  \([0-9a-z]\{8\}\) \([0-9a-z]\{8\}\) \([0-9a-z]\{8\}\)$/\1 0x\2 0x\3 0x\4/g' > $TEMPFILE_FOUND0

			#CONVERT HEX TO DECIMAL
			if [[ -f $TEMPFILE_FOUND0 ]]; then
				#printf "%d.%d.%d.%d %d.%d.%d.%d %d %d %d\n" $TEMPFILE_FOUND0 | sed -e 's/\([0-9]\{1,3\}.[0-9]\{1,3\}.[0-9]\{1,3\}.[0-9]\{1,3\}\) \([0-9]\{1,3\}.[0-9]\{1,3\}.[0-9]\{1,3\}.[0-9]\{1,3\}\) \([0-9]\{1,5\}\) 17 \([0-9]\{1,5\}\)/\1 \2 \3 UDP \4/g'|sed -e 's/\([0-9]\{1,3\}.[0-9]\{1,3\}.[0-9]\{1,3\}.[0-9]\{1,3\}\) \([0-9]\{1,3\}.[0-9]\{1,3\}.[0-9]\{1,3\}.[0-9]\{1,3\}\) \([0-9]\{1,5\}\) 6 \([0-9]\{1,5\}\)/\1 \2 \3 TCP \4/g' | sed -e 's/\([0-9]\{1,3\}.[0-9]\{1,3\}.[0-9]\{1,3\}.[0-9]\{1,3\}\) \([0-9]\{1,3\}.[0-9]\{1,3\}.[0-9]\{1,3\}.[0-9]\{1,3\}\) \([0-9]\{1,5\}\) 1 \([0-9]\{1,5\}\)/\1 \2 \3 ICMP \4/g' | sed -e 's/\([0-9]\{1,3\}.[0-9]\{1,3\}.[0-9]\{1,3\}.[0-9]\{1,3\}\) \([0-9]\{1,3\}.[0-9]\{1,3\}.[0-9]\{1,3\}.[0-9]\{1,3\}\) \([0-9]\{1,5\}\) \([0-9]\{1,3\}\) \([0-9]\{1,5\}\)/\1 \2 \3 PROTOCOL=\4 \5/g' > $TEMPFILE_FOUND
				
				IFS=$'\n'
				QTY="0"
				for LINE in `cat $TEMPFILE_FOUND0` ; do
					SRC1=$(printf "%d" `echo "$LINE" | awk '{print $1}'`)
					SRC2=$(printf "%d" `echo "$LINE" | awk '{print $2}'`)
					SRC3=$(printf "%d" `echo "$LINE" | awk '{print $3}'`)
					SRC4=$(printf "%d" `echo "$LINE" | awk '{print $4}'`)
					DST1=$(printf "%d" `echo "$LINE" | awk '{print $5}'`)
					DST2=$(printf "%d" `echo "$LINE" | awk '{print $6}'`)
					DST3=$(printf "%d" `echo "$LINE" | awk '{print $7}'`)
					DST4=$(printf "%d" `echo "$LINE" | awk '{print $8}'`)
					DPORT=$(printf "%d" `echo "$LINE" | awk '{print $9}'`)
					PROTO=$(printf "%d" `echo "$LINE" | awk '{print $10}'`)
					if [[ $PROTO == "6" ]]; then
						PROTO="TCP"
					fi
					if [[ $PROTO == "17" ]]; then
						PROTO="UDP"
					fi
					if [[ $PROTO == "1" ]]; then
						PROTO="ICMP"
					fi
					if [[ $PROTO != "TCP" ]] && [[ $PROTO != "UDP" ]] && [[ $PROTO != "ICMP" ]]; then
						PROTO="IP$PROTO"
					fi
					RULE=$(printf "%d" `echo "$LINE" | awk '{print $11}'`)
					echo "$SRC1.$SRC2.$SRC3.$SRC4 $DST1.$DST2.$DST3.$DST4 $DPORT $PROTO $RULE" >> $TEMPFILE_FOUND
					checkDropsSP_foundDetail0=$(cat $TEMPFILE_SUMMARIZEDFORMATTED | grep "$SRC1.$SRC2.$SRC3.$SRC4" | grep "$DST1.$DST2.$DST3.$DST4" | grep "$DPORT" | head -1)
					IFS=$ORIGIFS
					sendSyslog "$functionName" "INFO" "checkDropsSP_foundDetail" "SRC=\"$SRC1.$SRC2.$SRC3.$SRC4\" DST=\"$DST1.$DST2.$DST3.$DST4\" DPORT=\"$DPORT\" PROTO=\"$PROTO\" RULE=\"$RULE\" DETAIL=\"$checkDropsSP_foundDetail0\"" "SMO"
					IFS=$'\n'
					echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Found Detail - [$SRC1.$SRC2.$SRC3.$SRC4 $DST1.$DST2.$DST3.$DST4 $DPORT $PROTO $RULE] [$checkDropsSP_foundDetail0]" >>$HISTORYLOG
				done
				IFS=$ORIGIFS
					
				checkDropsSP_found=$(cat $TEMPFILE_FOUND | wc -l)

			else
				checkDropsSP_found="0"
			fi
			

		
		fi
	fi

	#LOG OUTPUTS

	echo "checkDropsSP_previousClusterXLStatus checkDropsSP_currentClusterXLStatus $checkDropsSP_previousClusterXLStatus $checkDropsSP_currentClusterXLStatus" >>$RUNLOG
	echo "checkDropsSP_uniqueQty $checkDropsSP_uniqueQty" >>$RUNLOG
	echo "checkDropsSP_totalQty $checkDropsSP_totalQty" >>$RUNLOG
	echo "checkDropsSP_totalRate $checkDropsSP_totalRate" >>$RUNLOG
	echo "checkDropsSP_error $checkDropsSP_error" >>$RUNLOG
	echo "checkDropsSP_found $checkDropsSP_found" >>$RUNLOG
	echo "checkDropsSP_topFiveDroppedBy $checkDropsSP_topFiveDroppedBy" >>$RUNLOG
	echo "checkDropsSP_topFiveSource $checkDropsSP_topFiveSource" >>$RUNLOG
	echo "checkDropsSP_topFiveDestination $checkDropsSP_topFiveDestination" >>$RUNLOG
	echo "checkDropsSP_topFiveProtocol $checkDropsSP_topFiveProtocol" >>$RUNLOG
	echo "checkDropsSP_topFiveCpuWorker $checkDropsSP_topFiveCpuWorker" >>$RUNLOG
	echo "checkDropsSP_topFiveSgm $checkDropsSP_topFiveSgm" >>$RUNLOG
		
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - ClusterXL Status - [$checkDropsSP_previousClusterXLStatus] [$checkDropsSP_currentClusterXLStatus]" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Unique Quantity - $checkDropsSP_uniqueQty" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Total Quantity - $checkDropsSP_totalQty" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Total Rate - $checkDropsSP_totalRate" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Error - $checkDropsSP_error" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Found - $checkDropsSP_found" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkDropsSP_topFiveDroppedBy - $checkDropsSP_topFiveDroppedBy" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkDropsSP_topFiveSource - $checkDropsSP_topFiveSource" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkDropsSP_topFiveDestination - $checkDropsSP_topFiveDestination" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkDropsSP_topFiveProtocol - $checkDropsSP_topFiveProtocol" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkDropsSP_topFiveCpu - $checkDropsSP_topFiveCpu" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkDropsSP_topFiveSgm - $checkDropsSP_topFiveSgm" >>$HISTORYLOG

	#RUN LOGIC
	if [[ $checkDropsSP_found -gt "0" ]]; then
		checkDropsSP_problem="1"
		checkDropsSP_problemInfo="$checkDropsSP_problemInfo [Found ($checkDropsSP_found) drops that match previously accepted connections]"
		echo "Logic - found: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - checkDropsSP - PROBLEM - Found - $checkDropsSP_found" >>$HISTORYLOG
	else
		echo "Logic - found: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - checkDropsSP - WORKING - Found - $checkDropsSP_found" >>$HISTORYLOG
	fi


	checkDropsSP_problemInfo="$checkDropsSP_problemInfo [Total Rate: $checkDropsSP_totalRate/sec]"
	checkDropsSP_problemInfo="$checkDropsSP_problemInfo [Eval($ZDEBUGTIME secs): $checkDropsSP_totalQty ($checkDropsSP_uniqueQty unique) individual dropped packets, checked against $checkDropsSP_lastRunConnectionsQty connections]"



	echo "$checkDropsSP_problem" >> $TEMPDIR/$SCRIPT.$EPOCH.var.checkDropsSP_problem
	echo "$checkDropsSP_problemInfo" >> $TEMPDIR/$SCRIPT.$EPOCH.var.checkDropsSP_problemInfo

	#HANDLE LEGACY CODE UNTIL FIXED
	touch $DROPSFOUNDFILE
	cat $TEMPFILE_FOUND > $DROPSFOUNDFILE
	
	if [[ $SYSARG3 != "debug" ]]; then
		g_all "find $TEMPDIR/$SCRIPT.*.$functionName.rawsgm -type f -not -name '$TEMPFILE_RAWSGM' -delete > /dev/null 2>&1" > /dev/null 2>&1
	fi


fi

#SYSLOG
if [[ $checkDropsSP_problem == "1" ]]; then
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "PROBLEM" "checkDropsSP_problemInfo" "VALUE=\"$checkDropsSP_problemInfo $checkDropsSP_warningInfo $checkDropsSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "PROBLEM" "checkDropsSP_problemInfo" "VALUE=\"$checkDropsSP_problemInfo $checkDropsSP_warningInfo $checkDropsSP_workingInfo\""
	fi
elif [[ $checkDropsSP_warning == "1" ]]; then
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "WARNING" "checkDropsSP_problemInfo" "VALUE=\"$checkDropsSP_warningInfo $checkDropsSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "WARNING" "checkDropsSP_problemInfo" "VALUE=\"$checkDropsSP_warningInfo $checkDropsSP_workingInfo\""
	fi
else
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "WORKING" "checkDropsSP_problemInfo" "VALUE=\"$checkDropsSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "WORKING" "checkDropsSP_problemInfo" "VALUE=\"$checkDropsSP_workingInfo\""
	fi
fi
sendSyslog "$functionName" "INFO" "checkDropsSP_uniqueQty" "VALUE=\"$checkDropsSP_uniqueQty\""
sendSyslog "$functionName" "INFO" "checkDropsSP_totalQty" "VALUE=\"$checkDropsSP_totalQty\""
sendSyslog "$functionName" "INFO" "checkDropsSP_totalRate" "VALUE=\"$checkDropsSP_totalRate\""
sendSyslog "$functionName" "INFO" "checkDropsSP_error" "VALUE=\"$checkDropsSP_error\""
sendSyslog "$functionName" "INFO" "checkDropsSP_found" "VALUE=\"$checkDropsSP_found\""
sendSyslog "$functionName" "INFO" "checkDropsSP_topFiveDroppedBy" "VALUE=\"$checkDropsSP_topFiveDroppedBy\""
sendSyslog "$functionName" "INFO" "checkDropsSP_topFiveSource" "VALUE=\"$checkDropsSP_topFiveSource\""
sendSyslog "$functionName" "INFO" "checkDropsSP_topFiveDestination" "VALUE=\"$checkDropsSP_topFiveDestination\""
sendSyslog "$functionName" "INFO" "checkDropsSP_topFiveProtocol" "VALUE=\"$checkDropsSP_topFiveProtocol\""
sendSyslog "$functionName" "INFO" "checkDropsSP_topFiveCpu" "VALUE=\"$checkDropsSP_topFiveCpu\""
sendSyslog "$functionName" "INFO" "checkDropsSP_topFiveSgm" "VALUE=\"$checkDropsSP_topFiveSgm\""




#CLEANUP
if [[ $checkDropsSP_found -gt "0" ]] && [[ $IDSENABLED != "1" ]]; then
	tar cvf $TEMPDIR/$SCRIPT.$EPOCH.$functionName.tar $LASTRUNCONNECTIONSOUTPUTFILE $TEMPFILE_RAW $TEMPFILE_SUMMARIZEDFORMATTED0 $TEMPFILE_SUMMARIZEDFORMATTED $TEMPFILE_SUMMARIZEDFORMATTEDEXPANDED $TEMPFILE_FORMATTED $TEMPFILE_MERGE $TEMPFILE_COMPARE $TEMPFILE_FOUND $TEMPFILE_FOUND0
fi

rm $TEMPFILE_RAW $TEMPFILE_SUMMARIZEDFORMATTED0 $TEMPFILE_SUMMARIZEDFORMATTED $TEMPFILE_SUMMARIZEDFORMATTEDEXPANDED $TEMPFILE_FORMATTED $TEMPFILE_MERGE $TEMPFILE_COMPARE $TEMPFILE_FOUND $TEMPFILE_FOUND0 > /dev/null 2>&1




checkDropsSP_fEnd=$(date "+%s")
checkDropsSP_fRunTime=$(( checkDropsSP_fEnd - checkDropsSP_fStart ))
echo "checkDropsSP_fRunTime $checkDropsSP_fRunTime" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkDropsSP_warning - $checkDropsSP_warning" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkDropsSP_problem - $checkDropsSP_problem" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkDropsSP_problemInfo - $checkDropsSP_problemInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkDropsSP_warningInfo - $checkDropsSP_warningInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkDropsSP_workingInfo - $checkDropsSP_workingInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkDropsSP_runTime - $checkDropsSP_fRunTime" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkDropsSP_warning" "VALUE=\"$checkDropsSP_warning\""
sendSyslog "$functionName" "INFO" "checkDropsSP_problem" "VALUE=\"$checkDropsSP_problem\""
sendSyslog "$functionName" "INFO" "checkDropsSP_problemInfo" "VALUE=\"$checkDropsSP_problemInfo\""
sendSyslog "$functionName" "INFO" "checkDropsSP_warningInfo" "VALUE=\"$checkDropsSP_warningInfo\""
sendSyslog "$functionName" "INFO" "checkDropsSP_workingInfo" "VALUE=\"$checkDropsSP_workingInfo\""
sendSyslog "$functionName" "INFO" "checkDropsSP_runTime" "VALUE=\"$checkDropsSP_fRunTime\""

#SUMMARY
if [[ $checkDropsSP_problem == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - checkDropsSP - SUMMARY - PROBLEM - $checkDropsSP_problemInfo $checkDropsSP_warningInfo $checkDropsSP_workingInfo" >>$HISTORYLOG
elif [[ $checkDropsSP_warning == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - checkDropsSP - SUMMARY - WARNING - $checkDropsSP_warningInfo $checkDropsSP_workingInfo" >>$HISTORYLOG
else
	echo "$HISTORYLOGPREAMBLE - checkDropsSP - SUMMARY - WORKING - $checkDropsSP_workingInfo" >>$HISTORYLOG
fi


echo "checkDropsSP_warning $checkDropsSP_warning" >>$RUNLOG
echo "checkDropsSP_problem $checkDropsSP_problem" >>$RUNLOG
echo "END==checkDropsSP" >>$RUNLOG
}

###################################################################################################
checkBackup(){
echo "START==checkBackup" >>$RUNLOG

#DEFAULTS
checkBackup_fStart=$(date "+%s")
functionName=${FUNCNAME[0]}
checkBackup_warning="0"
checkBackup_problem="0"
checkBackup_workingInfo=""
checkBackup_warningInfo=""
checkBackup_problemInfo=""

#COLLECT OUTPUTS
checkBackup_snapshotScheduledEnabled=$(cat /config/active | grep "snapshot-scheduled:default_snap t" | wc -l)
if [[ $checkBackup_snapshotScheduledEnabled -eq "1" ]]; then
	checkBackup_snapshotScheduledTarget=$(cat /config/active | grep "snapshot-scheduled:default_snap:target" | awk '{print $NF}')
	checkBackup_snapshotScheduledUsername=$(cat /config/active | grep "snapshot-scheduled:default_snap:username" | awk '{print $NF}')
	checkBackup_snapshotScheduledUploadPath=$(cat /config/active | grep "snapshot-scheduled:default_snap:uploadPath" | awk '{print $NF}')
	checkBackup_snapshotScheduledIp=$(cat /config/active | grep "snapshot-scheduled:default_snap:ip" | awk '{print $NF}')
	checkBackup_snapshotScheduledRecurrence=$(cat /config/active | grep "cron:admin:job:__snapshot__default_snap:daysinweek" | awk '{print $NF}')
	if [[ -e /var/log/tmp_snapshots/log/exported ]]; then
		checkBackup_snapshotExportedName=$(tail -1 /var/log/tmp_snapshots/log/exported | awk -F ":" '{print $NF}')
	else
		checkBackup_snapshotExportedName="n/a"
	fi
	if [[ -e /var/log/tmp_snapshots/log/log ]]; then
		checkBackup_snapshotExportedStatus=$(tail -1 /var/log/tmp_snapshots/log/log)
		checkBackup_snapshotExportedStatusWorking=$(tail -1 /var/log/tmp_snapshots/log/log | grep "export ended successfully" | wc -l)
		checkBackup_logLastEdit=$(date -d "`stat -c %y "/var/log/tmp_snapshots/log/log"`" +"%s")
	else
		checkBackup_snapshotExportedStatus="n/a"
		checkBackup_snapshotExportedStatusWorking="n/a"
		checkBackup_logLastEdit="0"
	fi	
	checkBackup_logLastEditDiff="$(( EPOCH - checkBackup_logLastEdit ))"
	checkBackup_logLastEditTimeSince=$(conv_time $checkBackup_logLastEditDiff)
	if [[ $checkBackup_snapshotScheduledRecurrence == "all" ]]; then
		if [[ $checkBackup_logLastEditDiff -gt "90000" ]]; then
			checkBackup_logFailureReason=$(cat /var/log/messages* | grep scheduled_snapshot | grep set_binding | grep -v shell | head -1 | awk -F "error = " '{print $NF}')
		fi
	else
		if [[ $checkBackup_logLastEditDiff -gt "605000" ]]; then
			checkBackup_logFailureReason=$(cat /var/log/messages* | grep scheduled_snapshot | grep set_binding | grep -v shell | head -1 | awk -F "error = " '{print $NF}')
		fi
	fi
	
	
fi

checkBackup_scriptEnabled=$(crontab -l -u hpna | grep -v "#" | grep fw_backup.sh | wc -l)
if [[ $checkBackup_scriptEnabled -eq "1" ]]; then
	checkBackup_localFileQty=$(ls -al $BACKUPLOCATION/*.tar 2>&1 | grep -v "No such file" | wc -l)
	checkBackup_localFileName=$(ls -1tr $BACKUPLOCATION/*.tar 2>&1 | grep -v "No such file" | tail -1)
	checkBackup_localFileName1=$(ls -1tr $BACKUPLOCATION/*.tar 2>&1 | grep -v "No such file" | tail -1 | awk -F "/" '{print $NF}' | awk -F "." '{print $1}')
	checkBackup_localFileEpoch=$(ls -1tr $BACKUPLOCATION/*.tar 2>&1 | grep -v "No such file" | tail -1 | awk -F "/" '{print $NF}' | awk -F "." '{print $1}'| awk -F "_" '{print $1}')
	checkBackup_localFileEpochDiff="$(( EPOCH - checkBackup_localFileEpoch ))"
	checkBackup_localFileNameDate=$(clish -c "show snapshot $checkBackup_localFileName1 all" | grep "date" | awk -F "date" '{print $2}')
	checkBackup_localFileNameSize=$(clish -c "show snapshot $checkBackup_localFileName1 all" | grep "size" | awk -F "size" '{print $2}')
	checkBackup_scriptTime=$(cat $BACKUPLOCATION/fw_backup.sh.lastsuccess 2>&1 | grep -v "No such file" | tail -1 | awk -F " - " '{print $1}')
	checkBackup_scriptTimeDiff="$(( EPOCH - checkBackup_scriptTime ))"
	checkBackup_scriptTimeSince=$(conv_time $checkBackup_scriptTimeDiff)
	checkBackup_scriptStatus=$(cat $BACKUPLOCATION/fw_backup.sh.lastsuccess 2>&1 | grep -v "No such file" | tail -1 | awk -F " - " '{print $2}')
	checkBackup_scriptDetails=$(cat $BACKUPLOCATION/fw_backup.sh.lastsuccess 2>&1 | grep -v "No such file" | tail -1 | awk -F " - " '{print $3}')
fi

checkBackup_running=$(ps aux | grep "/bin/image" | grep -v "grep" | grep -v "free" | wc -l)
if [[ $checkBackup_running -gt "0" ]]; then
	checkBackup_runningPid=$(ps aux | grep "/bin/image" | grep -v "grep" | grep -v "free" | awk '{print $2}')
	checkBackup_runningStarttime=$(date --date="`ps -eo pid,lstart | awk -v p="$checkBackup_runningPid" '$1==p' | awk '{print $2,$3,$4,$5,$6}'`" +%s)
	checkBackup_runningTimesince=$(since_time_epoch $checkBackup_runningStarttime)
fi


#LOG OUTPUTS
if [[ $checkBackup_scriptEnabled -eq "1" ]]; then
	echo "checkBackup_localFileQty $checkBackup_localFileQty" >>$RUNLOG
	echo "checkBackup_localFileName $checkBackup_localFileName" >>$RUNLOG
	echo "checkBackup_localFileNameDate $checkBackup_localFileNameDate" >>$RUNLOG
	echo "checkBackup_localFileNameSize $checkBackup_localFileNameSize" >>$RUNLOG
	echo "checkBackup_scriptTime $checkBackup_scriptTime" >>$RUNLOG
	echo "checkBackup_scriptTimeDiff $checkBackup_scriptTimeDiff" >>$RUNLOG
	echo "checkBackup_scriptTimeSince $checkBackup_scriptTimeSince" >>$RUNLOG
	echo "checkBackup_scriptStatus $checkBackup_scriptStatus" >>$RUNLOG
	echo "checkBackup_scriptDetails $checkBackup_scriptDetails" >>$RUNLOG
fi
echo "checkBackup_running $checkBackupSP_running" >>$RUNLOG
if [[ $checkBackup_running -gt "0" ]]; then
	echo "checkBackup_runningStarttime $checkBackup_runningStarttime" >>$RUNLOG
	echo "checkBackup_runningPid $checkBackup_runningPid" >>$RUNLOG
	echo "checkBackup_runningTimesince $checkBackup_runningTimesince" >>$RUNLOG
fi

echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackup_snapshotScheduledEnabled - $checkBackup_snapshotScheduledEnabled" >>$HISTORYLOG
if [[ $checkBackup_snapshotScheduledEnabled -eq "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackup_snapshotScheduledTarget - $checkBackup_snapshotScheduledTarget" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackup_snapshotScheduledUsername - $checkBackup_snapshotScheduledUsername" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackup_snapshotScheduledUploadPath - $checkBackup_snapshotScheduledUploadPath" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackup_snapshotScheduledIp - $checkBackup_snapshotScheduledIp" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackup_snapshotScheduledRecurrence - $checkBackup_snapshotScheduledRecurrence" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackup_snapshotExportedName - $checkBackup_snapshotExportedName" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackup_snapshotExportedStatus - $checkBackup_snapshotExportedStatus" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackup_logLastEdit - $checkBackup_logLastEdit ($checkBackup_logLastEditTimeSince)" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackup_logFailureReason - $checkBackup_logFailureReason" >>$HISTORYLOG
fi
if [[ $checkBackup_scriptEnabled -eq "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackup_localFileName - $checkBackup_localFileName" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackup_localFileNameDate - $checkBackup_localFileNameDate" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackup_localFileNameSize - $checkBackup_localFileNameSize" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackup_localFileEpoch - $checkBackup_localFileEpoch" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackup_localFileEpochDiff - $checkBackup_localFileEpochDiff" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackup_scriptTime - $checkBackup_scriptTime" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackup_scriptTimeSince - $checkBackup_scriptTimeSince" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackup_scriptStatus - $checkBackup_scriptStatus" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackup_scriptDetails - $checkBackup_scriptDetails" >>$HISTORYLOG
fi
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackup_running - $checkBackup_running" >>$HISTORYLOG
if [[ $checkBackup_running -gt "0" ]]; then
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackup_runningPid - $checkBackup_runningPid" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackup_runningStarttime - $checkBackup_runningStarttime" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackup_runningTimesince - $checkBackup_runningTimesince" >>$HISTORYLOG
fi


	
#RUN LOGIC
if [[ $checkBackup_running -gt "0" ]] && [[ $checkBackup_runningTimesince -lt "7200" ]]; then
	echo "Logic - backup running: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackup_running - $checkBackup_runningTimesince secs" >>$HISTORYLOG
	checkBackup_problemInfo="$checkBackup_problemInfo [Backup Running $checkBackup_runningTimesince secs]"
elif [[ $checkBackup_running -gt "0" ]] && [[ $checkBackup_runningTimesince -ge "7200" ]]; then
	echo "Logic - backup running: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - checkBackup_running - $checkBackup_runningTimesince secs" >>$HISTORYLOG
	checkBackup_warning="1"
	checkBackup_warningInfo="$checkBackup_warningInfo [Backup Running $checkBackup_runningTimesince secs]"
else
	echo "Logic - backup running: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkBackup_running - $checkBackup_running" >>$HISTORYLOG
fi


if [[ $checkBackup_snapshotScheduledEnabled -eq "1" ]]; then
	if [[ $checkBackup_snapshotScheduledRecurrence == "all" ]] && [[ $checkBackup_logLastEditDiff -gt "90000" ]]; then
		echo "Logic - local file: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Snapshot Export - Last Successful Execution in seconds - $checkBackup_logLastEditTimeSince ($checkBackup_logLastEditDiff)" >>$HISTORYLOG
		checkBackup_problem="1"
		checkBackup_problemInfo="$checkBackup_problemInfo [Scheduled Snapshot - Failed Execute/Too Old ($checkBackup_logLastEditTimeSince - $checkBackup_logFailureReason)]"
	elif [[ $checkBackup_logLastEditDiff -gt "605000" ]]; then
		echo "Logic - local file: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Snapshot Export - Last Successful Execution in seconds - $checkBackup_logLastEditTimeSince ($checkBackup_logLastEditDiff)" >>$HISTORYLOG
		checkBackup_problem="1"
		checkBackup_problemInfo="$checkBackup_problemInfo [Scheduled Snapshot - Failed Execute/Too Old ($checkBackup_logLastEditTimeSince - $checkBackup_logFailureReason)]"
	elif [[ $checkBackup_snapshotExportedStatusWorking -eq "0" ]]; then
		echo "Logic - local file: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - Snapshot Export - $checkBackup_snapshotExportedStatus - $checkBackup_snapshotExportedName" >>$HISTORYLOG
		checkBackup_warning="1"
		checkBackup_warningInfo="$checkBackup_warningInfo [Scheduled Snapshot - Failed Export]"
	else
		echo "Logic - local file: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Local File - $checkBackup_localFileName" >>$HISTORYLOG
		checkBackup_workingInfo="$checkBackup_workingInfo [Scheduled Snapshot Successful ($checkBackup_snapshotExportedName)]"
	fi
fi





#SYSLOG
if [[ $checkBackup_problem == "1" ]]; then
	sendSyslog "$functionName" "PROBLEM" "checkBackup_problemInfo" "VALUE=\"$checkBackup_problemInfo $checkBackup_warningInfo $checkBackup_workingInfo\""
elif [[ $checkBackup_warning == "1" ]]; then
	sendSyslog "$functionName" "WARNING" "checkBackup_warningInfo" "VALUE=\"$checkBackup_warningInfo $checkBackup_workingInfo\""	
else
	sendSyslog "$functionName" "WORKING" "checkBackup_workingInfo" "VALUE=\"$checkBackup_workingInfo\""
fi
sendSyslog "$functionName" "INFO" "checkBackup_snapshotScheduledEnabled" "VALUE=\"$checkBackup_snapshotScheduledEnabled\""
if [[ $checkBackup_snapshotScheduledEnabled -eq "1" ]]; then
	sendSyslog "$functionName" "INFO" "checkBackup_snapshotExportedName" "VALUE=\"$checkBackup_snapshotExportedName\""
	sendSyslog "$functionName" "INFO" "checkBackup_snapshotExportedStatus" "VALUE=\"$checkBackup_snapshotExportedStatus\""
	sendSyslog "$functionName" "INFO" "checkBackup_logFailureReason" "VALUE=\"$checkBackup_logFailureReason\""
	sendSyslog "$functionName" "INFO" "checkBackup_snapshotScheduledTargetDetails" "TARGET=\"$checkBackup_snapshotScheduledTarget\" USERNAME=\"$checkBackup_snapshotScheduledUsername\" PATH=\"$checkBackup_snapshotScheduledUploadPath\" IP=\"$checkBackup_snapshotScheduledIp\""
fi
if [[ $checkBackup_scriptEnabled -eq "1" ]]; then
	sendSyslog "$functionName" "INFO" "checkBackup_localSnapshot" "NAME=\"$checkBackup_localFileName1\" DATE=\"$checkBackup_localFileNameDate\" SIZE=\"$checkBackup_localFileNameSize\""
	sendSyslog "$functionName" "INFO" "checkBackup_backupScriptOutput" "SINCE=\"$checkBackup_scriptTimeSince\" DATE=\"$checkBackup_scriptTime\" DETAILS=\"$checkBackup_scriptDetails\""
fi


checkBackup_fEnd=$(date "+%s")
checkBackup_fRunTime=$(( checkBackup_fEnd - checkBackup_fStart ))
echo "checkBackup_fRunTime $checkBackup_fRunTime" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackup_warning - $checkBackup_warning" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackup_problem - $checkBackup_problem" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackup_problemInfo - $checkBackup_problemInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackup_warningInfo - $checkBackup_warningInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackup_workingInfo - $checkBackup_workingInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackup_runTime - $checkBackup_fRunTime" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkBackup_warning" "VALUE=\"$checkBackup_warning\""
sendSyslog "$functionName" "INFO" "checkBackup_problem" "VALUE=\"$checkBackup_problem\""
sendSyslog "$functionName" "INFO" "checkBackup_problemInfo" "VALUE=\"$checkBackup_problemInfo\""
sendSyslog "$functionName" "INFO" "checkBackup_warningInfo" "VALUE=\"$checkBackup_warningInfo\""
sendSyslog "$functionName" "INFO" "checkBackup_workingInfo" "VALUE=\"$checkBackup_workingInfo\""
sendSyslog "$functionName" "INFO" "checkBackup_runTime" "VALUE=\"$checkBackup_fRunTime\""
echo "checkBackup_warning $checkBackup_warning" >>$RUNLOG
echo "checkBackup_problem $checkBackup_problem" >>$RUNLOG
echo "END==checkBackup" >>$RUNLOG
}

###################################################################################################
checkBackupSP(){
echo "START==checkBackupSP" >>$RUNLOG

# /bin/image free
# /bin/image get progress name snapshot

#DEFAULTS
checkBackupSP_fStart=$(date "+%s")
functionName=${FUNCNAME[0]}
checkBackupSP_warning="0"
checkBackupSP_problem="0"
checkBackupSP_workingInfo=""
checkBackupSP_warningInfo=""
checkBackupSP_problemInfo=""


if [[ $LOCALSMO == "1" ]]; then
	#COLLECT OUTPUTS
	checkBackupSP_snapshotScheduledEnabled=$(cat /config/active | grep "snapshot-scheduled:default_snap t" | wc -l)
	if [[ $checkBackupSP_snapshotScheduledEnabled -eq "1" ]]; then
		checkBackupSP_snapshotScheduledTarget=$(cat /config/active | grep "snapshot-scheduled:default_snap:target" | awk '{print $NF}')
		checkBackupSP_snapshotScheduledUsername=$(cat /config/active | grep "snapshot-scheduled:default_snap:username" | awk '{print $NF}')
		checkBackupSP_snapshotScheduledUploadPath=$(cat /config/active | grep "snapshot-scheduled:default_snap:uploadPath" | awk '{print $NF}')
		checkBackupSP_snapshotScheduledIp=$(cat /config/active | grep "snapshot-scheduled:default_snap:ip" | awk '{print $NF}')
		checkBackupSP_snapshotScheduledRecurrence=$(cat /config/active | grep "cron:admin:job:__snapshot__default_snap:daysinweek" | awk '{print $NF}')
		if [[ -e /var/log/tmp_snapshots/log/exported ]]; then
			checkBackupSP_snapshotExportedName=$(tail -1 /var/log/tmp_snapshots/log/exported | awk -F ":" '{print $NF}')
		else
			checkBackupSP_snapshotExportedName="n/a"
		fi
		if [[ -e /var/log/tmp_snapshots/log/log ]]; then
			checkBackupSP_snapshotExportedStatus=$(tail -1 /var/log/tmp_snapshots/log/log)
			checkBackupSP_snapshotExportedStatusWorking=$(tail -1 /var/log/tmp_snapshots/log/log | grep "export ended successfully" | wc -l)
			checkBackupSP_logLastEdit=$(date -d "`stat -c %y "/var/log/tmp_snapshots/log/log"`" +"%s")
		else
			checkBackupSP_snapshotExportedStatus="n/a"
			checkBackupSP_snapshotExportedStatusWorking="n/a"
			checkBackupSP_logLastEdit="0"
		fi
		checkBackupSP_logLastEditDiff="$(( EPOCH - checkBackupSP_logLastEdit ))"
		checkBackupSP_logLastEditTimeSince=$(conv_time $checkBackupSP_logLastEditDiff)
		if [[ $checkBackupSP_snapshotScheduledRecurrence == "all" ]]; then
			if [[ $checkBackupSP_logLastEditDiff -gt "90000" ]]; then
				checkBackupSP_logFailureReason=$(cat /var/log/messages* | grep scheduled_snapshot | grep set_binding | grep -v shell | head -1 | awk -F "error = " '{print $NF}')
			fi
		else
			if [[ $checkBackupSP_logLastEditDiff -gt "605000" ]]; then
				checkBackupSP_logFailureReason=$(cat /var/log/messages* | grep scheduled_snapshot | grep set_binding | grep -v shell | head -1 | awk -F "error = " '{print $NF}')
			fi
		fi
		if [[ $checkBackupSP_snapshotScheduledRecurrence == "all" && $checkBackupSP_logLastEditDiff -gt "90000" ]] || [[ $checkBackupSP_logLastEditDiff -gt "605000" ]]; then
		checkBackupSP_logLastEditOther="0"
			if [[ $LOCALSGM == "1_01" ]]; then
				EXIST=$(gexec -g0 -b 2_01 -c 'ls -al /var/log/tmp_snapshots/log/log 2>&1 | grep -v "No such file" | wc -l')
				if [[ $EXIST -eq "1" ]]; then
					checkBackupSP_logLastEditOther=$(gexec -g0 -b 2_01 -c 'date -d "`stat -c %y "/var/log/tmp_snapshots/log/log"`" +"%s"')
				fi
			elif [[ $LOCALSGM == "2_01" ]]; then
				EXIST=$(gexec -g0 -b 1_01 -c 'ls -al /var/log/tmp_snapshots/log/log 2>&1 | grep -v "No such file" | wc -l')
				if [[ $EXIST -eq "1" ]]; then
					checkBackupSP_logLastEditOther=$(gexec -g0 -b 1_01 -c 'date -d "`stat -c %y "/var/log/tmp_snapshots/log/log"`" +"%s"')
				fi
			fi
			checkBackupSP_logLastEditDiffOther="$(( EPOCH - checkBackupSP_logLastEditOther ))"
			checkBackupSP_logLastEditTimeSinceOther=$(conv_time $checkBackupSP_logLastEditDiffOther)
		fi
		
		
		
	fi



	checkBackupSP_scriptEnabled=$(crontab -l -u hpna | grep -v "#" | grep fw_backup.sh | wc -l)
	if [[ $checkBackupSP_scriptEnabled -eq "1" ]]; then

		checkBackupSP_localFileQty=$(ls -al $BACKUPLOCATION/*.tar 2>&1 | grep -v "No such file" | wc -l)
		checkBackupSP_localFileName=$(ls -1tr $BACKUPLOCATION/*.tar 2>&1 | grep -v "No such file" | tail -1)
		checkBackupSP_localFileName1=$(ls -1tr $BACKUPLOCATION/*.tar 2>&1 | grep -v "No such file" | tail -1 | awk -F "/" '{print $NF}' | awk -F "." '{print $1}')
		checkBackupSP_localFileEpoch=$(ls -1tr $BACKUPLOCATION/*.tar 2>&1 | grep -v "No such file" | tail -1 | awk -F "/" '{print $NF}' | awk -F "." '{print $1}'| awk -F "_" '{print $1}')
		checkBackupSP_localFileEpochDiff="$(( EPOCH - checkBackupSP_localFileEpoch ))"
		if [[ $checkBackupSP_localFileEpochDiff -gt "173520" ]]; then
			checkBackupSP_localFileEpoch=$(g_all "ls -1tr /var/log/FWBACKUP/*.tar | tail -1" | awk -F "/" '{print $NF}' | awk -F "." '{print $1}'| awk -F "_" '{print $1}' | tr -d '*' | sort -n | tail -1)
			checkBackupSP_localFileEpochDiff="$(( EPOCH - checkBackupSP_localFileEpoch ))"
			checkBackupSP_localFileQty=$(g_all "ls -al $BACKUPLOCATION/*.tar" | wc -l)
			if [[ $checkBackupSP_localFileQty -gt "0" ]]; then
				echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Failover issue - Looking on other SGMs besides current SMO" >>$HISTORYLOG
				checkBackupSP_problemInfo="$checkBackupSP_problemInfo [Backup found on non-SMO]"
			fi
		fi
		checkBackupSP_localFileNameDate=$(clish -c "show snapshot $checkBackupSP_localFileName1 all" | grep "date" | awk -F "date" '{print $2}')
		checkBackupSP_localFileNameSize=$(clish -c "show snapshot $checkBackupSP_localFileName1 all" | grep "size" | awk -F "size" '{print $2}')
		if [[ $checkBackupSP_localFileEpochDiff -gt "173520" ]]; then
			checkBackupSP_scriptTime=$(g_cat $BACKUPLOCATION/fw_backup.sh.lastsuccess 2>&1 | grep -v "No such file" | grep " - " | sort -n | tail -1 | awk -F " - " '{print $1}')
			checkBackupSP_scriptTimeDiff="$(( EPOCH - checkBackupSP_scriptTime ))"
			checkBackupSP_scriptTimeSince=$(conv_time $checkBackupSP_scriptTimeDiff)
			checkBackupSP_scriptStatus=$(g_cat $BACKUPLOCATION/fw_backup.sh.lastsuccess 2>&1 | grep -v "No such file" | grep " - " | sort -n | tail -1 | awk -F " - " '{print $2}')
			checkBackupSP_scriptDetails=$(g_cat $BACKUPLOCATION/fw_backup.sh.lastsuccess 2>&1 | grep -v "No such file" | grep " - " | sort -n | tail -1 | awk -F " - " '{print $3}')
		else
			checkBackupSP_scriptTime=$(cat $BACKUPLOCATION/fw_backup.sh.lastsuccess 2>&1 | grep -v "No such file" | tail -1 | awk -F " - " '{print $1}')
			checkBackupSP_scriptTimeDiff="$(( EPOCH - checkBackupSP_scriptTime ))"
			checkBackupSP_scriptTimeSince=$(conv_time $checkBackupSP_scriptTimeDiff)
			checkBackupSP_scriptStatus=$(cat $BACKUPLOCATION/fw_backup.sh.lastsuccess 2>&1 | grep -v "No such file" | tail -1 | awk -F " - " '{print $2}')
			checkBackupSP_scriptDetails=$(cat $BACKUPLOCATION/fw_backup.sh.lastsuccess 2>&1 | grep -v "No such file" | tail -1 | awk -F " - " '{print $3}')
		fi
		checkBackupSP_running=$(ps aux | grep "/bin/image" | grep -v "grep" | grep -v "free" | wc -l)
		if [[ $checkBackupSP_running -gt "0" ]]; then
			checkBackupSP_runningPid=$(ps aux | grep "/bin/image" | grep -v "grep" | grep -v "free" | awk '{print $2}')
			checkBackupSP_runningStarttime=$(date --date="`ps -eo pid,lstart | awk -v p="$checkBackupSP_runningPid" '$1==p' | awk '{print $2,$3,$4,$5,$6}'`" +%s)
			checkBackupSP_runningTimesince=$(since_time_epoch $checkBackupSP_runningStarttime)
		fi
	fi
	
	
	#LOG OUTPUTS
	if [[ $checkBackupSP_scriptEnabled -eq "1" ]]; then
		echo "checkBackupSP_localFileQty $checkBackupSP_localFileQty" >>$RUNLOG
		echo "checkBackupSP_localFileName $checkBackupSP_localFileName" >>$RUNLOG
		echo "checkBackupSP_localFileNameDate $checkBackupSP_localFileNameDate" >>$RUNLOG
		echo "checkBackupSP_localFileNameSize $checkBackupSP_localFileNameSize" >>$RUNLOG
		echo "checkBackupSP_scriptTime $checkBackupSP_scriptTime" >>$RUNLOG
		echo "checkBackupSP_scriptTimeDiff $checkBackupSP_scriptTimeDiff" >>$RUNLOG
		echo "checkBackupSP_scriptTimeSince $checkBackupSP_scriptTimeSince" >>$RUNLOG
		echo "checkBackupSP_scriptStatus $checkBackupSP_scriptStatus" >>$RUNLOG
		echo "checkBackupSP_scriptDetails $checkBackupSP_scriptDetails" >>$RUNLOG
	fi
	echo "checkBackupSP_running $checkBackupSP_running" >>$RUNLOG
	if [[ $checkBackupSP_running -gt "0" ]]; then
		echo "checkBackupSP_runningStarttime $checkBackupSP_runningStarttime" >>$RUNLOG
		echo "checkBackupSP_runningPid $checkBackupSP_runningPid" >>$RUNLOG
		echo "checkBackupSP_runningTimesince $checkBackupSP_runningTimesince" >>$RUNLOG
	fi
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSP_snapshotScheduledEnabled - $checkBackupSP_snapshotScheduledEnabled" >>$HISTORYLOG
	if [[ $checkBackupSP_snapshotScheduledEnabled -eq "1" ]]; then
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSP_snapshotScheduledTarget - $checkBackupSP_snapshotScheduledTarget" >>$HISTORYLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSP_snapshotScheduledUsername - $checkBackupSP_snapshotScheduledUsername" >>$HISTORYLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSP_snapshotScheduledUploadPath - $checkBackupSP_snapshotScheduledUploadPath" >>$HISTORYLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSP_snapshotScheduledIp - $checkBackupSP_snapshotScheduledIp" >>$HISTORYLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSP_snapshotScheduledRecurrence - $checkBackupSP_snapshotScheduledRecurrence" >>$HISTORYLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSP_snapshotExportedName - $checkBackupSP_snapshotExportedName" >>$HISTORYLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSP_snapshotExportedStatus - $checkBackupSP_snapshotExportedStatus" >>$HISTORYLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSP_logLastEdit - $checkBackupSP_logLastEdit ($checkBackupSP_logLastEditTimeSince)" >>$HISTORYLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSP_logLastEditOther - $checkBackupSP_logLastEditOther ($checkBackupSP_logLastEditTimeSinceOther)" >>$HISTORYLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSP_logFailureReason - $checkBackupSP_logFailureReason" >>$HISTORYLOG
	fi
	if [[ $checkBackupSP_scriptEnabled -eq "1" ]]; then
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSP_localFileName - $checkBackupSP_localFileName" >>$HISTORYLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSP_localFileNameDate - $checkBackupSP_localFileNameDate" >>$HISTORYLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSP_localFileNameSize - $checkBackupSP_localFileNameSize" >>$HISTORYLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSP_scriptTime - $checkBackupSP_scriptTime" >>$HISTORYLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSP_scriptTimeSince - $checkBackupSP_scriptTimeSince" >>$HISTORYLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSP_scriptStatus - $checkBackupSP_scriptStatus" >>$HISTORYLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSP_scriptDetails - $checkBackupSP_scriptDetails" >>$HISTORYLOG
	fi
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSP_running - $checkBackupSP_running" >>$HISTORYLOG
	if [[ $checkBackupSP_running -gt "0" ]]; then
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSP_runningPid - $checkBackupSP_runningPid" >>$HISTORYLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSP_runningStarttime - $checkBackupSP_runningStarttime" >>$HISTORYLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSP_runningTimesince - $checkBackupSP_runningTimesince" >>$HISTORYLOG
	fi

	#RUN LOGIC
	if [[ $checkBackupSP_scriptEnabled -eq "1" ]] && [[ $checkBackupSP_running -gt "0" ]] && [[ $checkBackupSP_runningTimesince -lt "7200" ]]; then
		echo "Logic - backup running: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSP_running - $checkBackupSP_runningTimesince secs" >>$HISTORYLOG
		checkBackupSP_problemInfo="$checkBackupSP_problemInfo [Backup Running $checkBackupSP_runningTimesince secs]"
	elif [[ $checkBackupSP_scriptEnabled -eq "1" ]] && [[ $checkBackupSP_running -gt "0" ]] && [[ $checkBackupSP_runningTimesince -ge "7200" ]]; then
		echo "Logic - backup running: FAIL" >>$RUNLOG
		checkBackupSP_warning="1"
		echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - checkBackupSP_running - $checkBackupSP_runningTimesince secs" >>$HISTORYLOG
		checkBackupSP_warningInfo="$checkBackupSP_warningInfo [Backup Running $checkBackupSP_runningTimesince secs]"
	else
		echo "Logic - backup running: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkBackupSP_running - $checkBackupSP_running" >>$HISTORYLOG
	fi
	
	if [[ $checkBackupSP_scriptEnabled -eq "1" ]] && [[ $checkBackupSP_running -eq "0" ]]; then
		if [[ $checkBackupSP_localFileQty == "0" ]]; then
			echo "Logic - local file: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Local File - $checkBackupSP_localFileName" >>$HISTORYLOG
			checkBackupSP_problem="1"
		else
			echo "Logic - local file: PASS" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Local File - $checkBackupSP_localFileName" >>$HISTORYLOG
		fi

		if [[ $checkBackupSP_localFileEpochDiff -gt "173520" ]]; then
			echo "Logic - snapshot old: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Snapshot is old - $checkBackupSP_localFileNameDate" >>$HISTORYLOG
			checkBackupSP_warning="1"
			checkBackupSP_warningInfo="$checkBackupSP_problemInfo [Local Snapshot is too old ($checkBackupSP_localFileName1 $checkBackupSP_localFileNameDate)]"
		else
			echo "Logic - primaryClmStatus: PASS" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Snapshot Current - $checkBackupSP_localFileName1 $checkBackupSP_localFileNameDate" >>$HISTORYLOG
			checkBackupSP_workingInfo="$checkBackupSP_workingInfo [Local Snapshot is current ($checkBackupSP_localFileName1 $checkBackupSP_localFileNameDate)]"
		fi

		if [[ $checkBackupSP_scriptStatus != "WORKING" ]]; then
			echo "Logic - backup script: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - Backup Script - $checkBackupSP_scriptStatus $checkBackupSP_scriptDetails" >>$HISTORYLOG
			checkBackupSP_warning="1"
			checkBackupSP_warningInfo="$checkBackupSP_warningInfo [Backup Script (Status: $checkBackupSP_scriptStatus $checkBackupSP_scriptDetails Last Run: $checkBackupSP_scriptTimeSince)]"
		else
			echo "Logic - backup script: PASS" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Backup Script - $checkBackupSP_scriptStatus $checkBackupSP_scriptDetails" >>$HISTORYLOG
			checkBackupSP_workingInfo="$checkBackupSP_workingInfo [Backup Script (Status: $checkBackupSP_scriptStatus $checkBackupSP_scriptDetails Last Run: $checkBackupSP_scriptTimeSince)]"
		fi
	fi


	if [[ $checkBackupSP_snapshotScheduledEnabled -eq "1" ]]; then
		if [[ $checkBackupSP_snapshotScheduledRecurrence == "all" && $checkBackupSP_logLastEditDiff -gt "90000" ]]; then
			if [[ $checkBackupSP_logLastEditDiffOther -gt "90000" ]]; then
				echo "Logic - local file: FAIL" >>$RUNLOG
				echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Snapshot Export - Last Successful Execution in seconds - $checkBackupSP_logLastEditTimeSince ($checkBackupSP_logLastEditDiff)" >>$HISTORYLOG
				checkBackupSP_warning="1"
				checkBackupSP_warningInfo="$checkBackupSP_problemInfo [Scheduled Snapshot Failed Execute/Too Old ($checkBackupSP_logLastEditTimeSince-$checkBackupSP_logFailureReason)]"
			else
				echo "Logic - local file: FAIL" >>$RUNLOG
				echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Snapshot Export - Last Successful Execution in seconds-$checkBackupSP_logLastEditTimeSince ($checkBackupSP_logLastEditDiff) Other Chassis: $checkBackupSP_logLastEditTimeSinceOther ($checkBackupSP_logLastEditDiff)" >>$HISTORYLOG
				checkBackupSP_warning="1"
				checkBackupSP_warningInfo="$checkBackupSP_problemInfo [Scheduled Snapshot Failed Execute/Too Old ($checkBackupSP_logLastEditTimeSince) but found on other chassis ($checkBackupSP_logLastEditTimeSinceOther)]"			
			fi
		elif [[ $checkBackupSP_logLastEditDiff -gt "605000" ]]; then
			if [[ $checkBackupSP_logLastEditDiffOther -gt "605000" ]]; then
				echo "Logic - local file: FAIL" >>$RUNLOG
				echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Snapshot Export - Last Successful Execution in seconds - $checkBackupSP_logLastEditTimeSince ($checkBackupSP_logLastEditDiff)" >>$HISTORYLOG
				checkBackupSP_problem="1"
				checkBackupSP_problemInfo="$checkBackupSP_problemInfo [Scheduled Snapshot Failed Execute/Too Old ($checkBackupSP_logLastEditTimeSince-$checkBackupSP_logFailureReason)]"
			else
				echo "Logic - local file: FAIL" >>$RUNLOG
				echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Snapshot Export - Last Successful Execution in seconds-$checkBackupSP_logLastEditTimeSince ($checkBackupSP_logLastEditDiff) Other Chassis: $checkBackupSP_logLastEditTimeSinceOther ($checkBackupSP_logLastEditDiff)" >>$HISTORYLOG
				checkBackupSP_warning="1"
				checkBackupSP_warningInfo="$checkBackupSP_problemInfo [Scheduled Snapshot Failed Execute/Too Old ($checkBackupSP_logLastEditTimeSince) but found on other chassis ($checkBackupSP_logLastEditTimeSinceOther)]"			
			fi		
		elif [[ $checkBackupSP_snapshotExportedStatusWorking -eq "0" ]]; then
			echo "Logic - local file: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - Snapshot Export - $checkBackupSP_snapshotExportedStatus - $checkBackupSP_snapshotExportedName" >>$HISTORYLOG
			checkBackupSP_warning="1"
			checkBackupSP_warningInfo="$checkBackupSP_warningInfo [Scheduled Snapshot Failed Export]"
		else
			echo "Logic - local file: PASS" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Local File - $checkBackupSP_localFileName" >>$HISTORYLOG
			checkBackupSP_workingInfo="$checkBackupSP_workingInfo [Scheduled Snapshot Successful ($checkBackupSP_snapshotExportedName)]"
		fi
	fi

	#SYSLOG
	if [[ $checkBackupSP_scriptEnabled -eq "1" ]]; then
		sendSyslog "$functionName" "INFO" "checkBackupSP_localSnapshot" "NAME=\"$checkBackupSP_localFileName1\" DATE=\"$checkBackupSP_localFileNameDate\" SIZE=\"$checkBackupSP_localFileNameSize\""
		sendSyslog "$functionName" "INFO" "checkBackupSP_backupScriptOutput" "SINCE=\"$checkBackupSP_scriptTimeSince\" DATE=\"$checkBackupSP_scriptTime\" DETAILS=\"$checkBackupSP_scriptDetails\""
	fi
	if [[ $checkBackupSP_snapshotScheduledEnabled -eq "1" ]]; then
		sendSyslog "$functionName" "INFO" "checkBackupSP_snapshotExportedName" "VALUE=\"$checkBackupSP_snapshotExportedName\""
		sendSyslog "$functionName" "INFO" "checkBackupSP_snapshotExportedStatus" "VALUE=\"$checkBackupSP_snapshotExportedStatus\""
		sendSyslog "$functionName" "INFO" "checkBackupSP_snapshotScheduledTargetDetails" "TARGET=\"$checkBackupSP_snapshotScheduledTarget\" USERNAME=\"$checkBackupSP_snapshotScheduledUsername\" PATH=\"$checkBackupSP_snapshotScheduledUploadPath\" IP=\"$checkBackupSP_snapshotScheduledIp\""
	fi



	
else

	checkBackupSP_problemInfo="Skipped, Run from SMO Only"

fi


#SYSLOG
if [[ $checkBackupSP_problem == "1" ]]; then
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "PROBLEM" "checkBackupSP_problemInfo" "VALUE=\"$checkBackupSP_problemInfo $checkBackupSP_warningInfo $checkBackupSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "PROBLEM" "checkBackupSP_problemInfo" "VALUE=\"$checkBackupSP_problemInfo $checkBackupSP_warningInfo $checkBackupSP_workingInfo\""
	fi
elif [[ $checkBackupSP_warning == "1" ]]; then
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "WARNING" "checkBackupSP_problemInfo" "VALUE=\"$checkBackupSP_warningInfo $checkBackupSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "WARNING" "checkBackupSP_problemInfo" "VALUE=\"$checkBackupSP_warningInfo $checkBackupSP_workingInfo\""
	fi
else
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "WORKING" "checkBackupSP_problemInfo" "VALUE=\"$checkBackupSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "WORKING" "checkBackupSP_problemInfo" "VALUE=\"$checkBackupSP_workingInfo\""
	fi
fi






checkBackupSP_fEnd=$(date "+%s")
checkBackupSP_fRunTime=$(( checkBackupSP_fEnd - checkBackupSP_fStart ))
echo "checkBackupSP_fRunTime $checkBackupSP_fRunTime" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSP_warning - $checkBackupSP_warning" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSP_problem - $checkBackupSP_problem" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSP_problemInfo - $checkBackupSP_problemInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSP_warningInfo - $checkBackupSP_warningInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSP_workingInfo - $checkBackupSP_workingInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSP_runTime - $checkBackupSP_fRunTime" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkBackupSP_warning" "VALUE=\"$checkBackupSP_warning\""
sendSyslog "$functionName" "INFO" "checkBackupSP_problem" "VALUE=\"$checkBackupSP_problem\""
sendSyslog "$functionName" "INFO" "checkBackupSP_problemInfo" "VALUE=\"$checkBackupSP_problemInfo\""
sendSyslog "$functionName" "INFO" "checkBackupSP_warningInfo" "VALUE=\"$checkBackupSP_warningInfo\""
sendSyslog "$functionName" "INFO" "checkBackupSP_workingInfo" "VALUE=\"$checkBackupSP_workingInfo\""
sendSyslog "$functionName" "INFO" "checkBackupSP_runTime" "VALUE=\"$checkBackupSP_fRunTime\""


#SUMMARY
if [[ $checkBackupSP_problem == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - checkBackupSP - SUMMARY - PROBLEM - $checkBackupSP_problemInfo $checkBackupSP_warningInfo $checkBackupSP_workingInfo" >>$HISTORYLOG
elif [[ $checkBackupSP_warning == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - checkBackupSP - SUMMARY - WARNING - $checkBackupSP_warningInfo $checkBackupSP_workingInfo" >>$HISTORYLOG
else
	echo "$HISTORYLOGPREAMBLE - checkBackupSP - SUMMARY - WORKING - $checkBackupSP_workingInfo" >>$HISTORYLOG
fi

echo "checkBackupSP_warning $checkBackupSP_warning" >>$RUNLOG
echo "checkBackupSP_problem $checkBackupSP_problem" >>$RUNLOG
echo "END==checkBackupSP" >>$RUNLOG
}

###################################################################################################
checkBackupSM(){
echo "START==checkBackupSM" >>$RUNLOG

#DEFAULTS
checkBackupSM_fStart=$(date "+%s")
functionName=${FUNCNAME[0]}
checkBackupSM_warning="0"
checkBackupSM_problem="0"
checkBackupSM_workingInfo=""
checkBackupSM_warningInfo=""
checkBackupSM_problemInfo=""

#COLLECT OUTPUTS
checkBackupSM_snapshotScheduledEnabled=$(cat /config/active | grep "snapshot-scheduled:default_snap t" | wc -l)
if [[ $checkBackupSM_snapshotScheduledEnabled -eq "1" ]]; then
	checkBackupSM_snapshotScheduledTarget=$(cat /config/active | grep "snapshot-scheduled:default_snap:target" | awk '{print $NF}')
	checkBackupSM_snapshotScheduledUsername=$(cat /config/active | grep "snapshot-scheduled:default_snap:username" | awk '{print $NF}')
	checkBackupSM_snapshotScheduledUploadPath=$(cat /config/active | grep "snapshot-scheduled:default_snap:uploadPath" | awk '{print $NF}')
	checkBackupSM_snapshotScheduledIp=$(cat /config/active | grep "snapshot-scheduled:default_snap:ip" | awk '{print $NF}')
	checkBackupSM_snapshotExportedName=$(tail -1 /var/log/tmp_snapshots/log/exported | awk -F ":" '{print $NF}')
	checkBackupSM_snapshotExportedStatus=$(tail -1 /var/log/tmp_snapshots/log/log)
	checkBackupSM_snapshotExportedStatusWorking=$(tail -1 /var/log/tmp_snapshots/log/log | grep "export ended successfully" | wc -l)
	checkBackupSM_logLastEdit=$(date -d "`stat -c %y "/var/log/tmp_snapshots/log/log"`" +"%s")
	checkBackupSM_logLastEditDiff="$(( EPOCH - checkBackupSM_logLastEdit ))"
	checkBackupSM_logLastEditTimeSince=$(conv_time $checkBackupSM_logLastEditDiff)
fi
checkBackupSM_scriptEnabled=$(crontab -l -u hpna | grep -v "#" | grep fw_backup.sh | wc -l)
if [[ $checkBackupSM_scriptEnabled -eq "1" ]]; then
	checkBackupSM_localFileQty=$(ls -al $BACKUPLOCATION/*.tar 2>&1 | grep -v "No such file" | wc -l)
	checkBackupSM_localFileName=$(ls -1tr $BACKUPLOCATION/*.tar 2>&1 | grep -v "No such file" | tail -1)
	checkBackupSM_localFileName1=$(ls -1tr $BACKUPLOCATION/*.tar 2>&1 | grep -v "No such file" | tail -1 | awk -F "/" '{print $NF}' | awk -F "." '{print $1}')
	checkBackupSM_localFileEpoch=$(ls -1tr $BACKUPLOCATION/*.tar 2>&1 | grep -v "No such file" | tail -1 | awk -F "/" '{print $NF}' | awk -F "." '{print $1}'| awk -F "_" '{print $1}')
	checkBackupSM_localFileEpochDiff="$(( EPOCH - checkBackupSM_localFileEpoch ))"
	checkBackupSM_localFileNameDate=$(clish -c "show snapshot $checkBackupSM_localFileName1 all" | grep "date" | awk -F "date" '{print $2}')
	checkBackupSM_localFileNameSize=$(clish -c "show snapshot $checkBackupSM_localFileName1 all" | grep "size" | awk -F "size" '{print $2}')
	checkBackupSM_scriptTime=$(cat $BACKUPLOCATION/fw_backup.sh.lastsuccess 2>&1 | grep -v "No such file" | tail -1 | awk -F " - " '{print $1}')
	checkBackupSM_scriptTimeDiff="$(( EPOCH - checkBackupSM_scriptTime ))"
	checkBackupSM_scriptTimeSince=$(conv_time $checkBackupSM_scriptTimeDiff)
	checkBackupSM_scriptStatus=$(cat $BACKUPLOCATION/fw_backup.sh.lastsuccess 2>&1 | grep -v "No such file" | tail -1 | awk -F " - " '{print $2}')
	checkBackupSM_scriptDetails=$(cat $BACKUPLOCATION/fw_backup.sh.lastsuccess 2>&1 | grep -v "No such file" | tail -1 | awk -F " - " '{print $3}')
fi

#LOG OUTPUTS
if [[ $checkBackupSM_scriptEnabled -eq "1" ]]; then
	echo "checkBackupSM_localFileQty $checkBackupSM_localFileQty" >>$RUNLOG
	echo "checkBackupSM_localFileName $checkBackupSM_localFileName" >>$RUNLOG
	echo "checkBackupSM_localFileNameDate $checkBackupSM_localFileNameDate" >>$RUNLOG
	echo "checkBackupSM_localFileNameSize $checkBackupSM_localFileNameSize" >>$RUNLOG
	echo "checkBackupSM_scriptTime $checkBackupSM_scriptTime" >>$RUNLOG
	echo "checkBackupSM_scriptTimeDiff $checkBackupSM_scriptTimeDiff" >>$RUNLOG
	echo "checkBackupSM_scriptTimeSince $checkBackupSM_scriptTimeSince" >>$RUNLOG
	echo "checkBackupSM_scriptStatus $checkBackupSM_scriptStatus" >>$RUNLOG
	echo "checkBackupSM_scriptDetails $checkBackupSM_scriptDetails" >>$RUNLOG
fi

echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSM_snapshotScheduledEnabled - $checkBackupSM_snapshotScheduledEnabled" >>$HISTORYLOG
if [[ $checkBackupSM_snapshotScheduledEnabled -eq "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSM_snapshotScheduledTarget - $checkBackupSM_snapshotScheduledTarget" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSM_snapshotScheduledUsername - $checkBackupSM_snapshotScheduledUsername" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSM_snapshotScheduledUploadPath - $checkBackupSM_snapshotScheduledUploadPath" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSM_snapshotScheduledIp - $checkBackupSM_snapshotScheduledIp" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSM_snapshotExportedName - $checkBackupSM_snapshotExportedName" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSM_snapshotExportedStatus - $checkBackupSM_snapshotExportedStatus" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSM_logLastEdit - $checkBackupSM_logLastEdit ($checkBackupSM_logLastEditTimeSince)" >>$HISTORYLOG
fi
if [[ $checkBackupSM_scriptEnabled -eq "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSM_localFileName - $checkBackupSM_localFileName" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSM_localFileNameDate - $checkBackupSM_localFileNameDate" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSM_localFileNameSize - $checkBackupSM_localFileNameSize" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSM_scriptTime - $checkBackupSM_scriptTime" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSM_scriptTimeSince - $checkBackupSM_scriptTimeSince" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSM_scriptStatus - $checkBackupSM_scriptStatus" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSM_scriptDetails - $checkBackupSM_scriptDetails" >>$HISTORYLOG
fi



#RUN LOGIC
if [[ $checkBackupSM_scriptEnabled -eq "1" ]]; then
	if [[ $checkBackupSM_localFileQty == "0" ]]; then
			echo "Logic - local file: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Local File - $checkBackupSM_localFileName" >>$HISTORYLOG
			checkBackupSM_problem="1"
	else
			echo "Logic - local file: PASS" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Local File - $checkBackupSM_localFileName" >>$HISTORYLOG
	fi

	if [[ $checkBackupSM_localFileEpochDiff -gt "173520" ]]; then
			echo "Logic - snapshot old: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Snapshot is old - $checkBackupSM_localFileNameDate" >>$HISTORYLOG
			checkBackupSM_problem="1"
			checkBackupSM_problemInfo="$checkBackupSM_problemInfo [Local Snapshot is too old ($checkBackupSM_localFileName1 $checkBackupSM_localFileNameDate)]"
	else
			echo "Logic - primaryClmStatus: PASS" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Snapshot Current - $checkBackupSM_localFileName1 $checkBackupSM_localFileNameDate" >>$HISTORYLOG
			checkBackupSM_workingInfo="$checkBackupSM_workingInfo [Local Snapshot is current ($checkBackupSM_localFileName1 $checkBackupSM_localFileNameDate)]"
	fi

	if [[ $checkBackupSM_scriptStatus != "WORKING" ]]; then
			echo "Logic - backup script: FAIL" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Backup Script - $checkBackupSM_scriptStatus $checkBackupSM_scriptDetails" >>$HISTORYLOG
			checkBackupSM_warning="1"
			checkBackupSM_warningInfo="$checkBackupSM_warningInfo [Backup Script (Status: $checkBackupSM_scriptStatus $checkBackupSM_scriptDetails Last Run: $checkBackupSM_scriptTimeSince)]"
	else
			echo "Logic - backup script: PASS" >>$RUNLOG
			echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Backup Script - $checkBackupSM_scriptStatus $checkBackupSM_scriptDetails" >>$HISTORYLOG
			checkBackupSM_workingInfo="$checkBackupSM_workingInfo [Backup Script (Status: $checkBackupSM_scriptStatus $checkBackupSM_scriptDetails Last Run: $checkBackupSM_scriptTimeSince)]"
	fi
fi
if [[ $checkBackupSM_snapshotScheduledEnabled -eq "1" ]]; then
	if [[ $checkBackupSM_logLastEditDiff -gt "90000" ]]; then
		echo "Logic - local file: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Snapshot Export - Last Successful Execution in seconds - $checkBackupSM_logLastEditTimeSince ($checkBackupSM_logLastEditDiff)" >>$HISTORYLOG
		checkBackupSM_problem="1"
		checkBackupSM_problemInfo="$checkBackupSM_problemInfo [Scheduled Snapshot - Failed Execute/Too Old ($checkBackupSM_logLastEditTimeSince)]"
	elif [[ $checkBackupSM_snapshotExportedStatusWorking -eq "0" ]]; then
		echo "Logic - local file: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - Snapshot Export - $checkBackupSM_snapshotExportedStatus - $checkBackupSM_snapshotExportedName" >>$HISTORYLOG
		checkBackupSM_warning="1"
		checkBackupSM_warningInfo="$checkBackupSM_warningInfo [Scheduled Snapshot - Failed Export]"
	else
		echo "Logic - local file: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Local File - $checkBackupSM_localFileName" >>$HISTORYLOG
		checkBackupSM_workingInfo="$checkBackupSM_workingInfo [Scheduled Snapshot Successful ($checkBackupSM_snapshotExportedName)]"
	fi
fi

#SYSLOG
if [[ $checkBackupSM_problem == "1" ]]; then
	sendSyslog "$functionName" "PROBLEM" "checkBackupSM_problemInfo" "VALUE=\"$checkBackupSM_problemInfo $checkBackupSM_warningInfo $checkBackupSM_workingInfo\""
elif [[ $checkBackupSM_warning == "1" ]]; then
	sendSyslog "$functionName" "WARNING" "checkBackupSM_warningInfo" "VALUE=\"$checkBackupSM_warningInfo $checkBackupSM_workingInfo\""	
else
	sendSyslog "$functionName" "WORKING" "checkBackupSM_workingInfo" "VALUE=\"$checkBackupSM_workingInfo\""
fi
if [[ $checkBackupSM_scriptEnabled -eq "1" ]]; then
	sendSyslog "$functionName" "INFO" "checkBackupSM_localSnapshot" "NAME=\"$checkBackupSM_localFileName1\" DATE=\"$checkBackupSM_localFileNameDate\" SIZE=\"$checkBackupSM_localFileNameSize\""
	sendSyslog "$functionName" "INFO" "checkBackupSM_backupScriptOutput" "SINCE=\"$checkBackupSM_scriptTimeSince\" DATE=\"$checkBackupSM_scriptTime\" STATUS=\"$checkBackupSM_scriptStatus\" DETAILS=\"$checkBackupSM_scriptDetails\""
fi
sendSyslog "$functionName" "INFO" "checkBackupSM_snapshotScheduledEnabled" "VALUE=\"$checkBackupSM_snapshotScheduledEnabled\""
sendSyslog "$functionName" "INFO" "checkBackupSM_scriptEnabled" "VALUE=\"$checkBackupSM_scriptEnabled\""
if [[ $checkBackupSM_snapshotScheduledEnabled -eq "1" ]]; then
	sendSyslog "$functionName" "INFO" "checkBackupSM_snapshotExportedName" "VALUE=\"$checkBackupSM_snapshotExportedName\""
	sendSyslog "$functionName" "INFO" "checkBackupSM_snapshotExportedStatus" "VALUE=\"$checkBackupSM_snapshotExportedStatus\""
	sendSyslog "$functionName" "INFO" "checkBackupSM_snapshotScheduledTargetDetails" "TARGET=\"$checkBackupSM_snapshotScheduledTarget\" USERNAME=\"$checkBackupSM_snapshotScheduledUsername\" PATH=\"$checkBackupSM_snapshotScheduledUploadPath\" IP=\"$checkBackupSM_snapshotScheduledIp\""
fi


checkBackupSM_fEnd=$(date "+%s")
checkBackupSM_fRunTime=$(( checkBackupSM_fEnd - checkBackupSM_fStart ))
echo "checkBackupSM_fRunTime $checkBackupSM_fRunTime" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSM_warning - $checkBackupSM_warning" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSM_problem - $checkBackupSM_problem" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSM_problemInfo - $checkBackupSM_problemInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSM_warningInfo - $checkBackupSM_warningInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSM_workingInfo - $checkBackupSM_workingInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkBackupSM_runTime - $checkBackupSM_fRunTime" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkBackupSM_warning" "VALUE=\"$checkBackupSM_warning\""
sendSyslog "$functionName" "INFO" "checkBackupSM_problem" "VALUE=\"$checkBackupSM_problem\""
sendSyslog "$functionName" "INFO" "checkBackupSM_problemInfo" "VALUE=\"$checkBackupSM_problemInfo\""
sendSyslog "$functionName" "INFO" "checkBackupSM_warningInfo" "VALUE=\"$checkBackupSM_warningInfo\""
sendSyslog "$functionName" "INFO" "checkBackupSM_workingInfo" "VALUE=\"$checkBackupSM_workingInfo\""
sendSyslog "$functionName" "INFO" "checkBackupSM_runTime" "VALUE=\"$checkBackupSM_fRunTime\""
echo "checkBackupSM_warning $checkBackupSM_warning" >>$RUNLOG
echo "checkBackupSM_problem $checkBackupSM_problem" >>$RUNLOG
echo "END==checkBackupSM" >>$RUNLOG
}

###################################################################################################
checkNatTable() {
echo "START==checkNatTable" >>$RUNLOG

#DEFAULTS
checkNatTable_fStart=$(date "+%s")
functionName=${FUNCNAME[0]}
checkNatTable_warning="0"
checkNatTable_problem="0"
checkNatTable_workingInfo=""
checkNatTable_warningInfo=""
checkNatTable_problemInfo=""
TEMPFILE=$TEMPDIR/$SCRIPT.$EPOCH.$functionName
FORCE_CHECK_NAT_TABLE=$(ls -al /home/admin/force_check_nat_table 2>&1 | grep -v "No such file" | wc -l)
DYNAMIC_NAT_ENABLED=$(fw ctl get int fwx_nat_dynamic_port_allocation 2>&1 | grep -v "Get operation failed" | awk '{print $3}')
GNAT_ENABLED=$(fw ctl get int fwx_gnat_enabled 2>&1 | grep -v "Get operation failed" | awk '{print $3}')
WORKERS=$(cat $FWDIR/boot/boot.conf | grep "KERN_INSTANCE_NUM" | awk '{print $2}')

#If R81.10 or NAT templates enabled dont divide by 2.. If gnat, dont consider fwx_alloc use fwx_alloc_global

if [[ $GNAT_ENABLED == "1" ]]; then
	PORTTHRESHOLD="50000"
elif [[ $DYNAMIC_NAT_ENABLED == "1" ]]; then
	PORTTHRESHOLD="25000"
else
	PORTTHRESHOLD="$(( 50000 / 2 / WORKERS ))"
fi

checkNatTable_thresholdWarning="$(( ($PORTTHRESHOLD * 80) / 100 ))"
checkNatTable_threshold=$PORTTHRESHOLD
if [[ $GNAT_ENABLED == "1" ]]; then
	checkNatTable_currentVals=$(fw tab -t fwx_alloc_global -s | tail -1 | awk '{print $4}' | tr -d ' ')
else
	checkNatTable_currentVals=$(fw tab -t fwx_alloc -s | tail -1 | awk '{print $4}' | tr -d ' ')
	if [[ $checkNatTable_currentVals == *"VALS"* ]]; then
		checkNatTable_currentVals="0"
	fi
fi

if [[ $FORCE_CHECK_NAT_TABLE -eq "1" ]] || [[ $checkNatTable_currentVals -gt $checkNatTable_threshold ]]; then


	# NEED TO ACCOMODATE TCP vs. UDP instead of considering them the same currently
	
	if [[ $GNAT_ENABLED -eq "1" ]]; then
		fw tab -t fwx_alloc_global -u -v | grep -v "<00000000," | grep "<" | sed 's/fw_//g' | tr -d '[]<>,;' | awk '{print "GNAT,"$2","$4}' >> $TEMPFILE
	else
		fw tab -t fwx_alloc -u -v | grep -v "<00000000," | grep "<" | sed 's/fw_//g' | tr -d '[]<>,;' | awk '{print $1","$3","$5}' >> $TEMPFILE
	fi
	
	checkNatTable_uniqueIpQty=$(cat $TEMPFILE | awk -F "," '{print $2}' | sort -n | uniq | wc -l)
	checkNatTable_workingInfo="$checkNatTable_workingInfo [Unique IPs: $checkNatTable_uniqueIpQty]"

	IFS=$'\n'
	for LINE in $(cat $TEMPFILE | awk -F "," '{print $2}' | sort -n | uniq -c | sort -nr); do
		HEXIP=$(echo "$LINE" | awk '{print $2}')
		IP=$(hex2dot $HEXIP)
		HIGH=$(cat $TEMPFILE | grep $HEXIP | awk -F "," '{print $1,$2,$3}' | sort -n | uniq -c | sort -nr | head -n 1)
		QTYTOTAL=$(echo "$LINE" | awk '{print $1}')
		QTYHIGH=$(echo $HIGH | awk '{print $1}')
		WORKERHIGH=$(echo $HIGH | awk '{print $2}')
		DSTHIGH=$(hex2dot `echo $HIGH | awk '{print $4}'`)
		UTILIZATION=$(percentofvalue $QTYHIGH $checkNatTable_threshold)
		echo "checkNatTable_uniqueIpDetail IP=$IP QTYTOTAL=$QTYTOTAL QTYHIGH=$QTYHIGH WORKERHIGH=$WORKERHIGH DST=$DSTHIGH" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkNatTable_uniqueIpDetail - IP=$IP QTYTOTAL=$QTYTOTAL QTYHIGH=$QTYHIGH WORKERHIGH=$WORKERHIGH DST=$DSTHIGH THRESHOLD=$checkNatTable_threshold UTILIZATION=$UTILIZATION" >>$HISTORYLOG
		IFS=$ORIGIFS
		sendSyslog "$functionName" "INFO" "checkNatTable_uniqueIpDetail" "IP=\"$IP\" QTYTOTAL=\"$QTYTOTAL\" QTYHIGH=\"$QTYHIGH\" WORKERHIGH=\"$WORKERHIGH\" DSTHIGH=\"$DSTHIGH\" THRESHOLD=\"$checkNatTable_threshold\" UTILIZATION=\"$UTILIZATION\""
		IFS=$'\n'
		
		if [[ $QTYHIGH -ge $checkNatTable_thresholdWarning ]] && [[ $QTYHIGH -lt $PORTTHRESHOLD ]]; then
				checkNatTable_warning="1"
				checkNatTable_warningInfo="$checkNatTable_problemInfo [Port Limit($PORTTHRESHOLD): $IP (QTY:$QTYHIGH WORKER:$WORKERHIGH DST:$DSTHIGH)]"
		elif [[ $QTYHIGH -ge $PORTTHRESHOLD ]]; then
				checkNatTable_problem="1"
				checkNatTable_problemInfo="$checkNatTable_problemInfo [Port Limit($PORTTHRESHOLD): $IP (QTY:$QTYHIGH WORKER:$WORKERHIGH DST:$DSTHIGH)]"
		fi
		if [[ $checkSelf_haInstalled == "1" ]] && [[ $checkSelf_haNotStarted == "0" ]]; then
			OID=$(echo "$CLUSTERNAME _IP_$IP" | tr -d ' ')
		else
			OID=$(echo "$HOSTNAMESIMPLIFIED _IP_$IP" | tr -d ' ')
		fi
		checkNatTable_detail="$HOSTNAMESIMPLIFIED,CheckPoint,NAT_Utilization,$OID,$EPOCH,Port_Usage,$QTYHIGH"
		if [[ $SYSARG3 != "debug" ]]; then
			echo $checkNatTable_detail >> $RUNLOG
		else
			echo $checkNatTable_detail >> $TEMPDIR/$SCRIPT.$EPOCH.$functionName.xstat
		fi
		IFS=$ORIGIFS
		sendSyslog "$functionName" "INFO" "checkNatTable_detail" "VALUE=\"$checkNatTable_detail\""
		IFS=$'\n'
	done
	IFS=$ORIGIFS

	#LOG OUTPUTS
	echo "checkNatTable_threshold $checkNatTable_threshold" >>$RUNLOG
	echo "checkNatTable_uniqueIpQty $checkNatTable_uniqueIpQty" >>$RUNLOG
	if [[ $FORCE_CHECK_NAT_TABLE -eq "1" ]]; then
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - FORCE_CHECK_NAT_TABLE - $FORCE_CHECK_NAT_TABLE" >>$HISTORYLOG
	fi
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkNatTable_threshold - $checkNatTable_threshold" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkNatTable_thresholdWarning - $checkNatTable_thresholdWarning" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkNatTable_uniqueIpQty - $checkNatTable_uniqueIpQty" >>$HISTORYLOG

	#RUN LOGIC
	if [[ $checkNatTable_uniqueQty == "0" ]]; then
		echo "Logic - quantity: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - checkNatTable - PROBLEM - Quantity - $checkNatTable_uniqueQty" >>$HISTORYLOG
		checkNatTable_problem="1"
	else
		echo "Logic - quantity: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - checkNatTable - WORKING - Quantity - $checkNatTable_uniqueQty" >>$HISTORYLOG
	fi


	sendSyslog "$functionName" "INFO" "checkNatTable_threshold" "VALUE=\"$checkNatTable_threshold\""
	sendSyslog "$functionName" "INFO" "checkNatTable_uniqueIpQty" "VALUE=\"$checkNatTable_uniqueIpQty\""

else 
	checkNatTable_uniqueIpQty="0"
	sendSyslog "$functionName" "INFO" "checkNatTable_threshold" "VALUE=\"$checkNatTable_threshold\""
	sendSyslog "$functionName" "INFO" "checkNatTable_uniqueIpQty" "VALUE=\"$checkNatTable_uniqueIpQty\""
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkNatTable_currentVals - SKIPPED ANALYSIS THRESHOLD=$checkNatTable_threshold VALS=$checkNatTable_currentVals" >>$HISTORYLOG
	checkNatTable_workingInfo="$checkNatTable_workingInfo Skipped, Not Enough NAT entries"
fi


if [[ $checkSelf_majorVer == "R81.10" || $checkSelf_majorVer == "R81.20" ]]; then
	#checkNatTable_natPoolIndexQty=$(snmp .1.3.6.1.4.1.2620.1.56.1301.3.1.1 | sed 's/,$//' | tr ',' '\n' | wc -l)
	#WORKAROUND UNTIL SR 6-0004137162 IS FIXED
	stattest get 1.3.6.1.4.1.2620.1.56.1301.3.1.1.1 > /dev/null 2>&1
	checkNatTable_natPoolIndexQty=$(stattestget 1.3.6.1.4.1.2620.1.56.1301.3.1.1 | wc -l)
	COUNTER=1
	IFS=$'\n'
	while [[ $COUNTER -le $checkNatTable_natPoolIndexQty ]]; do
		# HIDEIP=$(snmp .1.3.6.1.4.1.2620.1.56.1301.3.1.3.$COUNTER | tr -d '[:space:]')
		# DSTIP=$(snmp .1.3.6.1.4.1.2620.1.56.1301.3.1.4.$COUNTER | tr -d '[:space:]')
		# PORTUSAGE=$(snmp .1.3.6.1.4.1.2620.1.56.1301.3.1.7.$COUNTER | tr -d '[:space:]')
		# PORTCAPACITY=$(snmp .1.3.6.1.4.1.2620.1.56.1301.3.1.8.$COUNTER | tr -d '[:space:]')
		# PORTPCT=$(snmp .1.3.6.1.4.1.2620.1.56.1301.3.1.9.$COUNTER | tr -d '[:space:]')
		HIDEIP=$(stattestget 1.3.6.1.4.1.2620.1.56.1301.3.1.3.$COUNTER)
		DSTIP=$(stattestget 1.3.6.1.4.1.2620.1.56.1301.3.1.4.$COUNTER )
		PORTUSAGE=$(stattestget 1.3.6.1.4.1.2620.1.56.1301.3.1.7.$COUNTER)
		PORTCAPACITY=$(stattestget 1.3.6.1.4.1.2620.1.56.1301.3.1.8.$COUNTER)
		PORTPCT=$(stattestget 1.3.6.1.4.1.2620.1.56.1301.3.1.9.$COUNTER)
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkNatTable_natPoolDetails - RANK=$COUNTER HIDEIP=$HIDEIP DSTIP=$DSTIP PORTUSAGE=$PORTUSAGE PORTCAPACITY=$PORTCAPACITY PORTPCT=$PORTPCT" >>$HISTORYLOG
		IFS=$ORIGIFS
		sendSyslog "$functionName" "INFO" "checkNatTable_natPoolDetails" "RANK=\"$COUNTER\" HIDEIP=\"$HIDEIP\" DSTIP=\"$DSTIP\" PORTUSAGE=\"$PORTUSAGE\" PORTCAPACITY=\"$PORTCAPACITY\" PORTPCT=\"$PORTPCT\""
		IFS=$'\n'
		let COUNTER=$COUNTER+1
	done
	IFS=$ORIGIFS
fi




#SYSLOG
if [[ $checkNatTable_problem == "1" ]]; then
	sendSyslog "$functionName" "PROBLEM" "checkNatTable_problemInfo" "VALUE=\"$checkNatTable_problemInfo $checkNatTable_warningInfo $checkNatTable_workingInfo\""
elif [[ $checkNatTable_warning == "1" ]]; then
	sendSyslog "$functionName" "WARNING" "checkNatTable_warningInfo" "VALUE=\"$checkNatTable_warningInfo $checkNatTable_workingInfo\""	
else
	sendSyslog "$functionName" "WORKING" "checkNatTable_workingInfo" "VALUE=\"$checkNatTable_workingInfo\""
fi


#CLEANUP
rm -f $TEMPFILE > /dev/null 2>&1



checkNatTable_fEnd=$(date "+%s")
checkNatTable_fRunTime=$(( checkNatTable_fEnd - checkNatTable_fStart ))
echo "checkNatTable_fRunTime $checkNatTable_fRunTime" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkNatTable_warning - $checkNatTable_warning" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkNatTable_problem - $checkNatTable_problem" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkNatTable_problemInfo - $checkNatTable_problemInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkNatTable_warningInfo - $checkNatTable_warningInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkNatTable_workingInfo - $checkNatTable_workingInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkNatTable_runTime - $checkNatTable_fRunTime" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkNatTable_warning" "VALUE=\"$checkNatTable_warning\""
sendSyslog "$functionName" "INFO" "checkNatTable_problem" "VALUE=\"$checkNatTable_problem\""
sendSyslog "$functionName" "INFO" "checkNatTable_problemInfo" "VALUE=\"$checkNatTable_problemInfo\""
sendSyslog "$functionName" "INFO" "checkNatTable_warningInfo" "VALUE=\"$checkNatTable_warningInfo\""
sendSyslog "$functionName" "INFO" "checkNatTable_workingInfo" "VALUE=\"$checkNatTable_workingInfo\""
sendSyslog "$functionName" "INFO" "checkNatTable_runTime" "VALUE=\"$checkNatTable_fRunTime\""
echo "END==checkNatTable" >>$RUNLOG
}

###################################################################################################
checkNatTableSP() {
echo "START==checkNatTableSP" >>$RUNLOG

#DEFAULTS
checkNatTableSP_fStart=$(date "+%s")
functionName=${FUNCNAME[0]}
checkNatTableSP_warning="0"
checkNatTableSP_problem="0"
checkNatTableSP_workingInfo=""
checkNatTableSP_warningInfo=""
checkNatTableSP_problemInfo=""
TEMPFILE_RAW=$TEMPDIR/$SCRIPT.$functionName.raw
TEMPFILE_FULL=$TEMPDIR/$SCRIPT.$functionName.full
GNAT_ENABLED=$(fw ctl get int fwx_gnat_enabled 2>&1 | grep -v "Get operation failed" | awk '{print $3}')
DYNAMIC_NAT_ENABLED=$(fw ctl get int fwx_nat_dynamic_port_allocation 2>&1 | grep -v "Get operation failed" | awk '{print $3}')
DXL_GENERAL_MODE_ENABLED=$(dxl stat | grep "General Mode" | grep "Enabled" | wc -l)
WORKERS=$(cat $FWDIR/boot/boot.conf | grep "KERN_INSTANCE_NUM" | awk '{print $2}')
SGMS="12"




if [[ $GNAT_ENABLED == "1" ]]; then
	PORTTHRESHOLD="50000"
elif [[ $DYNAMIC_NAT_ENABLED == "1" ]]; then
	PORTTHRESHOLD="25000"
elif [[ $DXL_GENERAL_MODE_ENABLED == "1" ]]; then
	PORTTHRESHOLD="$(( 50000 / SGMS / WORKERS ))"
elif [[ $DXL_GENERAL_MODE_ENABLED == "0" ]]; then
	PORTTHRESHOLD="$(( 50000 / WORKERS ))"
else
	PORTTHRESHOLD="$(( (50000 / 2) / WORKERS ))"
fi

checkNatTableSP_thresholdWarning="$(( (PORTTHRESHOLD * 80) / 100 ))"
checkNatTableSP_threshold=$PORTTHRESHOLD
checkNatTableSP_currentVals=$(fw tab -t fwx_alloc -s | tail -1 | awk '{print $4}' | tr -d ' ')


if [[ $checkNatTableSP_currentVals -gt $checkNatTableSP_threshold ]]; then
	fStartMs=$(date +%s%3N)
	rm -f $TEMPFILE_RAW $TEMPFILE_FULL > /dev/null 2>&1
	
	if [[ $LOCALCHASSIS == $ACTIVECHASSIS ]]; then
		fw tab -t fwx_alloc -u -v | grep -v "<00000000," | grep "<" | sed 's/fw_//g' | tr -d '[]<>,;' | awk -v sgm="$LOCALSGM," '{print sgm$1","$3","$5}' > $TEMPFILE_RAW
	else
		touch $TEMPFILE_RAW
		checkNatTableSP_workingInfo="$checkNatTableSP_workingInfo Skipped, Not An Active SGM"
	fi
	
	
	if [[ $LOCALCHASSIS == $ACTIVECHASSIS ]]; then
		IFS=$'\n'
		for LINE in $(cat $TEMPFILE_RAW | grep -v ":" | awk -F "," '{print $3}' | sort -n | uniq -c | sort -nr); do
			HEXIP=$(echo "$LINE" | awk '{print $2}')
			IP=$(hex2dot $HEXIP)
			QTYTOTAL=$(echo "$LINE" | awk '{print $1}')
			HIGH=$(cat $TEMPFILE_RAW | grep -v ":" | grep "$HEXIP" | awk -F "," '{print $1,$2,$3,$4}' | sort -n | uniq -c | sort -nr | head -n 1)
			QTYHIGH=$(echo "$HIGH" | awk '{print $1}')
			SGMHIGH=$(echo "$HIGH" | awk '{print $2}')
			WORKERHIGH=$(echo "$HIGH" | awk '{print $3}')
			DSTHIGH=$(hex2dot `echo "$HIGH" | awk '{print $5}'`)
			UTILIZATION="NA"
			echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkNatTableSP_uniqueIpDetailLocal - IP=$IP QTYTOTAL=$QTYTOTAL QTYHIGH=$QTYHIGH WORKERHIGH=$WORKERHIGH SGMHIGH=$SGMHIGH DSTHIGH=$DSTHIGH THRESHOLD=$checkNatTableSP_threshold UTILIZATION=$UTILIZATION" >>$HISTORYLOG
		done
		IFS=$ORIGIFS
	fi


	if [[ $LOCALSMO == "1" ]]; then
		rm -f $TEMPFILE_FULL
		touch $TEMPFILE_FULL
		IFS=$'\n'
		for LINE in `echo $ALLSGMEXCEPTSMOLIST | tr '[:space:]' '\n' | grep $LOCALCHASSIS1` ; do
			gexec -g0 -b $LINE -c "cat $HISTORYLOG | grep -w $EPOCH | grep -w checkNatTableSP_uniqueIpDetailLocal" >> $TEMPFILE_FULL
		done
		IFS=$ORIGIFS
		cat $HISTORYLOG | grep -w $EPOCH | grep -w "checkNatTableSP_uniqueIpDetailLocal" >> $TEMPFILE_FULL
		checkNatTableSP_uniqueIpQty=$(cat $TEMPFILE_FULL | awk -F " - " '{print $NF}' | awk '{print $1}' | awk -F "=" '{print $NF}' | sort -n | uniq | wc -l)
		checkNatTableSP_workingInfo="$checkNatTableSP_workingInfo [Unique IPs: $checkNatTableSP_uniqueIpQty]"
		IFS=$'\n'
		for IP in $(cat $TEMPFILE_FULL | awk -F " - " '{print $NF}' | awk '{print $1}' | awk -F "=" '{print $NF}' | sort -n | uniq); do
			QTYTOTAL=$(cat $TEMPFILE_FULL | awk -F " - " '{print $NF}' | grep -w "$IP" | awk '{print $2}' | awk -F "=" '{print $NF}' | paste -sd+ | bc)
			HIGH=$(cat $TEMPFILE_FULL | awk -F " - " '{print $NF}' | grep -w "$IP" | tr '=' ' ' | sort -k4,4nr | head -1)
			QTYHIGH=$(echo "$HIGH" | awk '{print $6}')
			SGMHIGH=$(echo "$HIGH" | awk '{print $10}')
			WORKERHIGH=$(echo "$HIGH" | awk '{print $8}')
			DSTHIGH=$(echo "$HIGH" | awk '{print $12}')
			UTILIZATION=$(percentofvalue $QTYHIGH $checkNatTableSP_threshold)
			echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkNatTableSP_uniqueIpDetail - IP=$IP QTYTOTAL=$QTYTOTAL QTYHIGH=$QTYHIGH WORKERHIGH=$WORKERHIGH SGMHIGH=$SGMHIGH DSTHIGH=$DSTHIGH THRESHOLD=$checkNatTableSP_threshold UTILIZATION=$UTILIZATION" >>$HISTORYLOG
			IFS=$ORIGIFS
			sendSyslog "$functionName" "INFO" "checkNatTableSP_uniqueIpDetail" "IP=\"$IP\" QTYTOTAL=\"$QTYTOTAL\" QTYHIGH=\"$QTYHIGH\" WORKERHIGH=\"$WORKERHIGH\" SGMHIGH=\"$SGMHIGH\" DSTHIGH=\"$DSTHIGH\" THRESHOLD=\"$checkNatTableSP_threshold\" UTILIZATION=\"$UTILIZATION\"" "SMO"
			IFS=$'\n'
			if [[ $QTYHIGH -ge $checkNatTableSP_thresholdWarning ]] && [[ $QTYHIGH -lt $PORTTHRESHOLD ]]; then
				checkNatTableSP_warning="1"
				checkNatTableSP_warningInfo="$checkNatTableSP_workingInfo [Port Limit($PORTTHRESHOLD): $IP (QTY:$QTYHIGH WORKER:$WORKERHIGH SGM:$SGMHIGH DST:$DSTHIGH)]"
			elif [[ $QTYHIGH -ge $PORTTHRESHOLD ]]; then
				checkNatTableSP_problem="1"
				checkNatTableSP_problemInfo="$checkNatTableSP_problemInfo [Port Limit($PORTTHRESHOLD): $IP (QTY:$QTYHIGH WORKER:$WORKERHIGH SGM:$SGMHIGH DST:$DSTHIGH)]"
			fi
		done
		IFS=$ORIGIFS
		
		sendSyslog "$functionName" "INFO" "checkNatTableSP_threshold" "VALUE=\"$checkNatTableSP_threshold\"" "SMO"
		sendSyslog "$functionName" "INFO" "checkNatTableSP_uniqueIpQty" "VALUE=\"$checkNatTableSP_uniqueIpQty\"" "SMO"

	fi
	fEndMs=$(date +%s%3N)
	fTotalMs=$(( fEndMs - fStartMs ))
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkNatTableSP_fTotalMs - $fTotalMs (new-nat)" >>$HISTORYLOG
else 
	checkNatTableSP_uniqueIpQty="0"
	sendSyslog "$functionName" "INFO" "checkNatTableSP_threshold" "VALUE=\"$checkNatTableSP_threshold\"" "SMO"
	sendSyslog "$functionName" "INFO" "checkNatTableSP_uniqueIpQty" "VALUE=\"$checkNatTableSP_uniqueIpQty\"" "SMO"
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkNatTableSP_currentVals - SKIPPED ANALYSIS THRESHOLD=$checkNatTableSP_threshold VALS=$checkNatTableSP_currentVals" >>$HISTORYLOG
	checkNatTableSP_problemInfo="$checkNatTableSP_problemInfo Skipped, Not Enough NAT entries"
fi






if [[ $LOCALSMO == "1" ]] && [[ $checkSelf_majorVer == "R81.10" || $checkSelf_majorVer == "R81.20" ]]; then
	#checkNatTableSP_natPoolIndexQty=$(snmp .1.3.6.1.4.1.2620.1.56.1301.3.1.1 | sed 's/,$//' | tr ',' '\n' | wc -l)
	#WORKAROUND UNTIL SR 6-0004137162 IS FIXED
	stattest get 1.3.6.1.4.1.2620.1.56.1301.3.1.1.1 > /dev/null 2>&1
	checkNatTableSP_natPoolIndexQty=$(stattestget 1.3.6.1.4.1.2620.1.56.1301.3.1.1 | wc -l)
	COUNTER=1
	IFS=$'\n'
	while [[ $COUNTER -le "2" ]]; do
		# HIDEIP=$(snmp .1.3.6.1.4.1.2620.1.56.1301.3.1.3.$COUNTER | tr -d '[:space:]')
		# DSTIP=$(snmp .1.3.6.1.4.1.2620.1.56.1301.3.1.4.$COUNTER | tr -d '[:space:]')
		# PORTUSAGE=$(snmp .1.3.6.1.4.1.2620.1.56.1301.3.1.7.$COUNTER | tr -d '[:space:]')
		# PORTCAPACITY=$(snmp .1.3.6.1.4.1.2620.1.56.1301.3.1.8.$COUNTER | tr -d '[:space:]')
		# PORTPCT=$(snmp .1.3.6.1.4.1.2620.1.56.1301.3.1.9.$COUNTER | tr -d '[:space:]')
		HIDEIP=$(stattestget 1.3.6.1.4.1.2620.1.56.1301.3.1.3.$COUNTER)
		DSTIP=$(stattestget 1.3.6.1.4.1.2620.1.56.1301.3.1.4.$COUNTER )
		PORTUSAGE=$(stattestget 1.3.6.1.4.1.2620.1.56.1301.3.1.7.$COUNTER)
		PORTCAPACITY=$(stattestget 1.3.6.1.4.1.2620.1.56.1301.3.1.8.$COUNTER)
		PORTPCT=$(stattestget 1.3.6.1.4.1.2620.1.56.1301.3.1.9.$COUNTER)
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkNatTableSP_natPoolDetails - RANK=$COUNTER HIDEIP=$HIDEIP DSTIP=$DSTIP PORTUSAGE=$PORTUSAGE PORTCAPACITY=$PORTCAPACITY PORTPCT=$PORTPCT" >>$HISTORYLOG
		IFS=$ORIGIFS
		sendSyslog "$functionName" "INFO" "checkNatTableSP_natPoolDetails" "RANK=\"$COUNTER\" HIDEIP=\"$HIDEIP\" DSTIP=\"$DSTIP\" PORTUSAGE=\"$PORTUSAGE\" PORTCAPACITY=\"$PORTCAPACITY\" PORTPCT=\"$PORTPCT\""
		IFS=$'\n'
		let COUNTER=$COUNTER+1
	done
	IFS=$ORIGIFS
fi


#LOG OUTPUTS
echo "checkNatTableSP_uniqueIpQty $checkNatTableSP_uniqueIpQty" >>$RUNLOG
echo "checkNatTableSP_threshold $checkNatTableSP_threshold" >>$RUNLOG
echo "checkNatTableSP_currentVals $checkNatTableSP_currentVals" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkNatTableSP_uniqueIpQty - $checkNatTableSP_uniqueIpQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkNatTableSP_threshold - $checkNatTableSP_threshold" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkNatTableSP_thresholdWarning - $checkNatTableSP_thresholdWarning" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkNatTableSP_currentVals - $checkNatTableSP_currentVals" >>$HISTORYLOG


#RUN LOGIC
	
#SYSLOG
if [[ $checkNatTableSP_problem == "1" ]]; then
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "PROBLEM" "checkNatTableSP_problemInfo" "VALUE=\"$checkNatTableSP_problemInfo $checkNatTableSP_warningInfo $checkNatTableSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "PROBLEM" "checkNatTableSP_problemInfo" "VALUE=\"$checkNatTableSP_problemInfo $checkNatTableSP_warningInfo $checkNatTableSP_workingInfo\""
	fi
elif [[ $checkNatTableSP_warning == "1" ]]; then
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "WARNING" "checkNatTableSP_problemInfo" "VALUE=\"$checkNatTableSP_warningInfo $checkNatTableSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "WARNING" "checkNatTableSP_problemInfo" "VALUE=\"$checkNatTableSP_warningInfo $checkNatTableSP_workingInfo\""
	fi
else
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "WORKING" "checkNatTableSP_problemInfo" "VALUE=\"$checkNatTableSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "WORKING" "checkNatTableSP_problemInfo" "VALUE=\"$checkNatTableSP_workingInfo\""
	fi
fi





checkNatTableSP_fEnd=$(date "+%s")
checkNatTableSP_fRunTime=$(( checkNatTableSP_fEnd - checkNatTableSP_fStart ))
echo "checkNatTableSP_fRunTime $checkNatTableSP_fRunTime" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkNatTableSP_warning - $checkNatTableSP_warning" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkNatTableSP_problem - $checkNatTableSP_problem" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkNatTableSP_problemInfo - $checkNatTableSP_problemInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkNatTableSP_warningInfo - $checkNatTableSP_warningInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkNatTableSP_workingInfo - $checkNatTableSP_workingInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkNatTableSP_runTime - $checkNatTableSP_fRunTime" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkNatTableSP_warning" "VALUE=\"$checkNatTableSP_warning\""
sendSyslog "$functionName" "INFO" "checkNatTableSP_problem" "VALUE=\"$checkNatTableSP_problem\""
sendSyslog "$functionName" "INFO" "checkNatTableSP_problemInfo" "VALUE=\"$checkNatTableSP_problemInfo\""
sendSyslog "$functionName" "INFO" "checkNatTableSP_warningInfo" "VALUE=\"$checkNatTableSP_warningInfo\""
sendSyslog "$functionName" "INFO" "checkNatTableSP_workingInfo" "VALUE=\"$checkNatTableSP_workingInfo\""
sendSyslog "$functionName" "INFO" "checkNatTableSP_runTime" "VALUE=\"$checkNatTableSP_fRunTime\""

#SUMMARY
if [[ $checkNatTableSP_problem == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - checkNatTableSP - SUMMARY - PROBLEM - $checkNatTableSP_problemInfo $checkNatTableSP_warningInfo $checkNatTableSP_workingInfo" >>$HISTORYLOG
elif [[ $checkNatTableSP_warning == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - checkNatTableSP - SUMMARY - WARNING - $checkNatTableSP_warningInfo $checkNatTableSP_workingInfo" >>$HISTORYLOG
else
	echo "$HISTORYLOGPREAMBLE - checkNatTableSP - SUMMARY - WORKING - $checkNatTableSP_workingInfo" >>$HISTORYLOG
fi
echo "END==checkNatTableSP" >>$RUNLOG
}

###################################################################################################
checkScore(){
echo "START==checkScore" >>$RUNLOG

#DEFAULTS
checkScore_fStart=$(date "+%s")
functionName=${FUNCNAME[0]}
checkScore_warning="0"
checkScore_problem="0"
checkScore_workingInfo=""
checkScore_warningInfo=""
checkScore_problemInfo=""
checkScore_capacityThreshold="80"
TEMPFILE=$TEMPDIR/$SCRIPT.$EPOCH.$functionName
TEMPFILE2=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.filtered
TEMPFILE_MULTIK=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.multik
TEMPFILE_FWAFFINITY=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.fwaffinity
TEMPFILE_SND=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.snd

#COLLECT OUTPUTS
cat $HISTORYLOG | grep $EPOCH > $TEMPFILE


if [[ $checkSelf_samEnabled == "1" ]]; then
	checkScore_platform="$checkSelf_hwmodel (SAM-enabled)"
else
	checkScore_platform=$checkSelf_hwmodel
fi
checkScore_software="$checkSelf_majorVer $checkSelf_minorVer ($checkSelf_enabledBlades)"

######################### CPU:WORKER

checkScore_cpuFwworkerCurQty="0"
checkScore_cpuFwworkerCurTotal="0"
checkScore_cpuFwworkerCurFailQty="0"
checkScore_cpuFwworkerCurFailMax="0"
checkScore_cpuFwworkerCurFailMaxTotal="0"
checkScore_cpuFwworkerCurFailInfo=""
#for CPU in `snmpwalk -r 1 -v2c -c $SNMPCOMMUNITY localhost .1.3.6.1.4.1.2620.1.56.101.2.1.9 | grep "CoreXL_FW" | awk '{print $1}' | awk -F "." '{print $9}'` ; do
for CPU in `stattest get 1.3.6.1.4.1.2620.1.56.101.2.1.9 | grep -B3 "CoreXL_FW" | grep OID | awk -F "." '{print $NF}'` ; do
	CORE=$CPU
	#consider overall usage
	# BUG in CPVIEW outputs
	#UTILIZATION=$(snmpwalk -r 1 -v2c -c $SNMPCOMMUNITY localhost .1.3.6.1.4.1.2620.1.56.101.2.1.3.$CPU | awk '{print $NF}')
	#UTILIZATION=$(snmpwalk -r 1 -v2c -c $SNMPCOMMUNITY localhost  .1.3.6.1.4.1.2620.1.6.7.5.1.5.$CPU | awk '{print $NF}')
	UTILIZATION=$(stattestget 1.3.6.1.4.1.2620.1.6.7.5.1.5.$CPU)
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_cpuFwworker - CPU=$CPU UTILIZATION=$UTILIZATION" >>$HISTORYLOG
	let checkScore_cpuFwworkerCurTotal=$checkScore_cpuFwworkerCurTotal+$UTILIZATION
	let checkScore_cpuFwworkerCurQty=$checkScore_cpuFwworkerCurQty+1
	###Determine if any exceed threshold, how many exceed, and average exceed
	if [[ $UTILIZATION -gt $checkScore_cpuFwworkerCurFailMax ]]; then
			checkScore_cpuFwworkerCurFailMax=$UTILIZATION
	fi
	if [[ $UTILIZATION -ge $checkScore_capacityThreshold ]]; then
		let checkScore_cpuFwworkerCurFailQty=$checkScore_cpuFwworkerCurFailQty+1
		let checkScore_cpuFwworkerCurFailMaxTotal=$checkScore_cpuFwworkerCurFailMaxTotal+$UTILIZATION
		checkScore_cpuFwworkerCurFailInfo="$checkScore_cpuFwworkerCurFailInfo [FW: $CORE=$UTILIZATION]"
	fi
done
IFS=$ORIGIFS
checkScore_cpuFwworkerCurAvg=$(average_of $checkScore_cpuFwworkerCurTotal $checkScore_cpuFwworkerCurQty)
if [[ $checkScore_cpuFwworkerCurFailQty != "0" ]]; then
	checkScore_cpuFwworkerCurFailMaxAvg=$(average_of $checkScore_cpuFwworkerCurFailMaxTotal $checkScore_cpuFwworkerCurFailQty)
else
	checkScore_cpuFwworkerCurFailMaxAvg="0"
fi
checkScore_cpuFwworkerCapacityMacro=$checkScore_cpuFwworkerCurAvg
checkScore_cpuFwworkerCapacityMicro=$checkScore_cpuFwworkerCurFailMax
if [[ $checkScore_cpuFwworkerCurQty -eq "0" ]]; then
	
	checkScore_cpuFwworkerCurQty="0"
	checkScore_cpuFwworkerCurTotal="0"
	checkScore_cpuFwworkerCurFailQty="0"
	checkScore_cpuFwworkerCurFailMax="0"
	checkScore_cpuFwworkerCurFailMaxTotal="0"
	checkScore_cpuFwworkerCurFailInfo=""
	
	IFS=$'\n'
	for CPU in `fw ctl multik stat | grep "Yes" | awk -F "|" '{print $3}' | tr -d ' ' | sort -n` ; do
		CORE=$CPU
		let CPU=CPU+1
		#consider overall usage
		#UTILIZATION=$(snmpwalk -r 1 -v2c -c $SNMPCOMMUNITY localhost .1.3.6.1.4.1.2620.1.6.7.5.1.5.$CPU | awk '{print $NF}')
		UTILIZATION=$(stattestget 1.3.6.1.4.1.2620.1.6.7.5.1.5.$CPU)
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_cpuFwworker - CPU=$CPU UTILIZATION=$UTILIZATION" >>$HISTORYLOG
		let checkScore_cpuFwworkerCurTotal=$checkScore_cpuFwworkerCurTotal+$UTILIZATION
		let checkScore_cpuFwworkerCurQty=$checkScore_cpuFwworkerCurQty+1
		###Determine if any exceed threshold, how many exceed, and average exceed
		if [[ $UTILIZATION -gt $checkScore_cpuFwworkerCurFailMax ]]; then
				checkScore_cpuFwworkerCurFailMax=$UTILIZATION
		fi
		if [[ $UTILIZATION -ge $checkScore_capacityThreshold ]]; then
			let checkScore_cpuFwworkerCurFailQty=$checkScore_cpuFwworkerCurFailQty+1
			let checkScore_cpuFwworkerCurFailMaxTotal=$checkScore_cpuFwworkerCurFailMaxTotal+$UTILIZATION
			checkScore_cpuFwworkerCurFailInfo="$checkScore_cpuFwworkerCurFailInfo [FW: $CORE=$UTILIZATION]"
		fi
	done
	IFS=$ORIGIFS
		
	checkScore_workingInfo="$checkScore_workingInfo [Using alternate CoreXL Score due to snmp bug]"
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_cpuFwworkerCurQty - $checkScore_cpuFwworkerCurQty [Using alternate CoreXL Score due to snmp bug]" >>$HISTORYLOG

	checkScore_cpuFwworkerCurAvg=$(average_of $checkScore_cpuFwworkerCurTotal $checkScore_cpuFwworkerCurQty)
	if [[ $checkScore_cpuFwworkerCurFailQty != "0" ]]; then
		checkScore_cpuFwworkerCurFailMaxAvg=$(average_of $checkScore_cpuFwworkerCurFailMaxTotal $checkScore_cpuFwworkerCurFailQty)
	else
		checkScore_cpuFwworkerCurFailMaxAvg="0"
	fi
	checkScore_cpuFwworkerCapacityMacro=$checkScore_cpuFwworkerCurAvg
	checkScore_cpuFwworkerCapacityMicro=$checkScore_cpuFwworkerCurFailMax


fi

######################### CONNECTIONS

###Get current connection entries
checkScore_connsCurrentQty=$(cat $TEMPFILE | grep "checkConnections_current" | grep -v "Ipv6" | awk -F " - " '{print $7}')
###Get current connection rate
checkScore_connsCurrentRate=$(cat $TEMPFILE | grep "checkConnections_rate" | awk -F " - " '{print $7}')
checkScore_connsCurrentRateQty=$checkScore_connsCurrentRate
checkScore_connsCurrentRateTemplatedQty=$(( (checkScore_connsCurrentRate * checkConnections_connsFromTemplatesPct) / 100 ))
checkScore_connsCurrentRateNotTemplatedQty=$(( checkScore_connsCurrentRate - checkScore_connsCurrentRateTemplatedQty ))
checkScore_packetsCurrentRateQty=$(cat $TEMPFILE | grep "checkInterface_ppsrateCounters" | awk -F " - " '{print $NF}' | awk '{print $4}' | awk -F "=" '{print $NF}' | paste -sd+ | bc)
checkScore_packetsCurrentRateAccelQty=$(( (checkConnections_packetRate * checkSecureXL_statsAccPct) / 100 ))
checkScore_packetsCurrentRateNotAccelQty=$(( checkConnections_packetRate - checkScore_packetsCurrentRateAccelQty ))


######################### Throughput
checkScore_throughputBytes=$(cat $TEMPFILE | grep "checkInterface_ppsrateCounters" | awk -F " - " '{print $NF}' | awk '{print $10}' | awk -F "=" '{print $NF}' | paste -sd+ | bc)
checkScore_throughput=$(( checkScore_throughputBytes * 8 ))




######################### CPU

###Get Number of CPUs
checkScore_cpuQty=$(cat $TEMPFILE | grep "checkPerformance" | grep "checkPerformance_cpuCounters" | wc -l)
###Add current CPU for all cores together
checkScore_cpuTotalUsage=$(cat $TEMPFILE | grep "checkPerformance" | grep "checkPerformance_cpuCounters" | awk -F " - " '{print $7}' | awk '{print $5}' | awk -F "=" '{print $2}' | paste -sd+ | bc)
###Calculate Average CPU for cores
checkScore_cpuAvgUsage=$(average_of $checkScore_cpuTotalUsage $checkScore_cpuQty)
###Determine if any exceed threshold, how many exceed, and average exceed
checkScore_cpuFailQty="0"
checkScore_cpuFailMax="0"
checkScore_cpuFailMaxTotal="0"
checkScore_cpuFailInfo=""
IFS=$'\n'
for LINE in `cat $TEMPFILE | grep "checkPerformance" | grep "checkPerformance_cpuCounters" | awk -F " - " '{print $7}'` ; do
	CPU=$(echo "$LINE" | awk '{print $1}' | awk -F "=" '{print $2}')
	USAGE=$(echo "$LINE" | awk '{print $5}' | awk -F "=" '{print $2}')
	if [[ $USAGE -gt $checkScore_cpuFailMax ]]; then
			checkScore_cpuFailMax=$USAGE
	fi
	if [[ $USAGE -ge $checkScore_capacityThreshold ]]; then
		let checkScore_cpuFailQty=$checkScore_cpuFailQty+1
		let checkScore_cpuFailMaxTotal=$checkScore_cpuFailMaxTotal+$CPU
	fi
done
IFS=$ORIGIFS
if [[ $checkScore_cpuFailQty != "0" ]]; then
	checkScore_cpuFailMaxAvg=$(average_of $checkScore_cpuFailMaxTotal $checkScore_cpuFailQty)
else
	checkScore_cpuFailMaxAvg="0"
fi

checkScore_cpuCapacityMacro=$checkScore_cpuAvgUsage
checkScore_cpuCapacityMicro=$checkScore_cpuFailMax


######################### SND

if [[ $MDPSENABLED -eq "2" ]]; then
	mplane > /dev/null 2>&1
fi

## evaluate system usage only
checkScore_sndCpuQty="0"
checkScore_sndFwworkerCurQty=$checkScore_cpuFwworkerCurQty
checkScore_sndTotalUsage="0"
checkScore_sndFailQty="0"
checkScore_sndFailMax="0"
checkScore_sndFailMaxTotal="0"
checkScore_sndFailInfo=""
checkScore_sndQty="0"
checkScore_sndCurFailMax="0"

IFS=$'\n'

#6-0003737955 OTHER for MDPS routing separation configurations
#for CPU in `snmpwalk -r 1 -v2c -c $SNMPCOMMUNITY localhost .1.3.6.1.4.1.2620.1.56.101.2.1.9 | grep "CoreXL_SND\|OTHER" | awk '{print $1}' | awk -F "." '{print $9}'` ; do
for CPU in `stattest get 1.3.6.1.4.1.2620.1.56.101.2.1.9 | grep -B3 "CoreXL_SND\|OTHER" | grep "OID" | awk -F "." '{print $NF}'` ; do
	CORE=$CPU
	###consider system only
	#BUG IN cpview MIB tree
	#UTILIZATION=$(snmpwalk -r 1 -v2c -c $SNMPCOMMUNITY localhost .1.3.6.1.4.1.2620.1.56.101.2.1.5.$CPU | awk '{print $NF}')
	#UTILIZATION=$(snmpwalk -r 1 -v2c -c $SNMPCOMMUNITY localhost  .1.3.6.1.4.1.2620.1.6.7.5.1.3.$CPU | awk '{print $NF}')
	UTILIZATION=$(stattestget 1.3.6.1.4.1.2620.1.6.7.5.1.3.$CPU)
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_snd - CPU=$CPU UTILIZATION=$UTILIZATION" >>$HISTORYLOG
	let checkScore_sndTotalUsage=$checkScore_sndTotalUsage+$UTILIZATION
	let checkScore_sndQty=$checkScore_sndQty+1
	###Determine if any exceed threshold, how many exceed, and average exceed
	if [[ $UTILIZATION -gt $checkScore_sndCurFailMax ]]; then
			checkScore_sndCurFailMax=$UTILIZATION
	fi
	checkScore_sndFailMax=$checkScore_sndCurFailMax
	if [[ $UTILIZATION -ge $checkScore_capacityThreshold ]]; then
		let checkScore_sndCurFailQty=$checkScore_sndCurFailQty+1
		let checkScore_sndCurFailMaxTotal=$checkScore_sndCurFailMaxTotal+$UTILIZATION
		checkScore_sndCurFailInfo="$checkScore_sndCurFailInfo [FW: $CORE=$UTILIZATION]"
	fi
done
IFS=$ORIGIFS
checkScore_sndAvgUsage=$(average_of $checkScore_sndTotalUsage $checkScore_sndQty)
if [[ $checkScore_sndFailQty != "0" ]]; then
	checkScore_sndFailMaxAvg=$(average_of $checkScore_sndFailMaxTotal $checkScore_sndFailQty)
else
	checkScore_sndFailMaxAvg="0"
fi
checkScore_sndCapacityMacro=$checkScore_sndAvgUsage
checkScore_sndCapacityMicro=$checkScore_sndFailMax
if [[ $checkScore_sndQty -eq "0" ]]; then

	checkScore_sndCpuQty="0"
	checkScore_sndFwworkerCurQty=$checkScore_cpuFwworkerCurQty
	checkScore_sndTotalUsage="0"
	checkScore_sndFailQty="0"
	checkScore_sndFailMax="0"
	checkScore_sndFailMaxTotal="0"
	checkScore_sndFailInfo=""
	checkScore_sndQty="0"
	checkScore_sndCurFailMax="0"

	
	checkScore_sndCpuQty=$(cat /proc/cpuinfo | grep "Xeon" | wc -l)
	CPU="1"
	while [[ $CPU -le $checkScore_sndCpuQty ]]; do 
		#check if corexl or mdps
		CPU_IS_WORKER="0"
		IFS=$'\n'
		for LINE in `fw ctl multik stat | grep "Yes" | awk -F "|" '{print $3}' | tr -d ' ' | sort -n` ; do
			let LINE=LINE+1
			if [[ $LINE -eq $CPU ]]; then
				CPU_IS_WORKER="1"
			fi
		done
		
		if [[ $CPU_IS_WORKER -eq "0" ]]; then
	
			CORE=$CPU
			#consider system usage
			#UTILIZATION=$(snmpwalk -r 1 -v2c -c $SNMPCOMMUNITY localhost .1.3.6.1.4.1.2620.1.6.7.5.1.3.$CPU | awk '{print $NF}')
			UTILIZATION=$(stattestget 1.3.6.1.4.1.2620.1.6.7.5.1.3.$CPU)
			echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_snd - CPU=$CPU UTILIZATION=$UTILIZATION" >>$HISTORYLOG
			let checkScore_sndTotalUsage=$checkScore_sndTotalUsage+$UTILIZATION
			let checkScore_sndQty=$checkScore_sndQty+1
			###Determine if any exceed threshold, how many exceed, and average exceed
			if [[ $UTILIZATION -gt $checkScore_sndCurFailMax ]]; then
					checkScore_sndCurFailMax=$UTILIZATION
			fi
			checkScore_sndFailMax=$checkScore_sndCurFailMax
			if [[ $UTILIZATION -ge $checkScore_capacityThreshold ]]; then
				let checkScore_sndCurFailQty=$checkScore_sndCurFailQty+1
				let checkScore_sndCurFailMaxTotal=$checkScore_sndCurFailMaxTotal+$UTILIZATION
				checkScore_sndCurFailInfo="$checkScore_sndCurFailInfo [FW: $CORE=$UTILIZATION]"
			fi
		fi
		let CPU=CPU+1
		
	done
	IFS=$ORIGIFS		


	checkScore_sndAvgUsage=$(average_of $checkScore_sndTotalUsage $checkScore_sndQty)
	if [[ $checkScore_sndFailQty != "0" ]]; then
		checkScore_sndFailMaxAvg=$(average_of $checkScore_sndFailMaxTotal $checkScore_sndFailQty)
	else
		checkScore_sndFailMaxAvg="0"
	fi
	checkScore_sndCapacityMacro=$checkScore_sndAvgUsage
	checkScore_sndCapacityMicro=$checkScore_sndFailMax

	checkScore_workingInfo="$checkScore_workingInfo [Using alternate SND Score due to snmp bug]"
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_sndQty - $checkScore_sndQty [Using alternate SND Score due to snmp bug]" >>$HISTORYLOG
fi




#### MDPS evaluate total USAGE
if  [[ $MDPSENABLED -gt "0" ]]; then
	checkScore_mdpsCurQty="0"
	checkScore_mdpsCurTotal="0"
	checkScore_mdpsCurFailQty="0"
	checkScore_mdpsCurFailMax="0"
	checkScore_mdpsCurFailMaxTotal="0"
	checkScore_mdpsCurFailInfo=""
	#for CPU in `snmpwalk -r 1 -v2c -c $SNMPCOMMUNITY localhost .1.3.6.1.4.1.2620.1.56.101.2.1.9 | grep "MDPS\|FWD" | awk '{print $1}' | awk -F "." '{print $9}'` ; do
	for CPU in `stattest get 1.3.6.1.4.1.2620.1.56.101.2.1.9 | grep -B3 "MDPS\|FWD" | grep "OID" | awk -F "." '{print $NF}'` ; do
		CORE=$CPU
		#consider overall usage
		#Bug in cpview tree
		#UTILIZATION=$(snmpwalk -r 1 -v2c -c $SNMPCOMMUNITY localhost .1.3.6.1.4.1.2620.1.56.101.2.1.3.$CPU | awk '{print $NF}')
		UTILIZATION=$(stattestget 1.3.6.1.4.1.2620.1.6.7.5.1.5.$CPU)
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_mdps - CPU=$CPU UTILIZATION=$UTILIZATION" >>$HISTORYLOG
		let checkScore_mdpsCurTotal=$checkScore_mdpsCurTotal+$UTILIZATION
		let checkScore_mdpsCurQty=$checkScore_mdpsCurQty+1
		###Determine if any exceed threshold, how many exceed, and average exceed
		if [[ $UTILIZATION -gt $checkScore_mdpsCurFailMax ]]; then
				checkScore_mdpsCurFailMax=$UTILIZATION
		fi
		if [[ $UTILIZATION -ge $checkScore_capacityThreshold ]]; then
			let checkScore_mdpsCurFailQty=$checkScore_mdpsCurFailQty+1
			let checkScore_mdpsCurFailMaxTotal=$checkScore_mdpsCurFailMaxTotal+$UTILIZATION
			checkScore_mdpsCurFailInfo="$checkScore_mdpsCurFailInfo [FW: $CORE=$UTILIZATION]"
		fi
	done
	IFS=$ORIGIFS
	checkScore_mdpsCurAvg=$(average_of $checkScore_mdpsCurTotal $checkScore_mdpsCurQty)
	if [[ $checkScore_mdpsCurFailQty != "0" ]]; then
		checkScore_mdpsCurFailMaxAvg=$(average_of $checkScore_mdpsCurFailMaxTotal $checkScore_mdpsCurFailQty)
	else
		checkScore_mdpsCurFailMaxAvg="0"
	fi
	checkScore_mdpsCapacityMacro=$checkScore_mdpsCurAvg
	checkScore_mdpsCapacityMicro=$checkScore_mdpsCurFailMax
fi



#### Summarize Drops 
checkScore_dropInterfaceRxDrpRate=$(cat $TEMPFILE | grep "Interface" | grep "checkInterface_ppsrateCounters" | awk -F " - " '{print $6}' | awk '{print $6}' | awk -F "=" '{print $NF}' | paste -sd+ | bc)
checkScore_dropInterfaceRxErrRate=$(cat $TEMPFILE | grep "Interface" | grep "checkInterface_ppsrateCounters" | awk -F " - " '{print $6}' | awk '{print $7}' | awk -F "=" '{print $NF}' | paste -sd+ | bc)
checkScore_dropInterfaceTxDrpRate=$(cat $TEMPFILE | grep "Interface" | grep "checkInterface_ppsrateCounters" | awk -F " - " '{print $6}' | awk '{print $8}' | awk -F "=" '{print $NF}' | paste -sd+ | bc)
checkScore_dropInterfaceTxErrRate=$(cat $TEMPFILE | grep "Interface" | grep "checkInterface_ppsrateCounters" | awk -F " - " '{print $6}' | awk '{print $9}' | awk -F "=" '{print $NF}' | paste -sd+ | bc)
checkScore_dropInterfaceRate=$(( checkScore_dropInterfaceRxDrpRate + checkScore_dropInterfaceRxErrRate + checkScore_dropInterfaceTxDrpRate + checkScore_dropInterfaceTxErrRate ))
checkScore_dropSecurexlRate=$checkSecureXL_statsDropTemplateRate
checkScore_dropCorexlRate=$(( checkConnections_corexlEnqueueFailInRate + checkConnections_corexlEnqueueFailOutRate + checkConnections_corexlEnqueueFailF2pRate ))
checkScore_dropPolicyRate=$(cat $TEMPFILE | grep -w "checkPolicy_policyDroppedRate" | awk -F " - " '{print $7}')
checkScore_dropTotalRate=$(( checkScore_dropInterfaceRate + checkScore_dropSecurexlRate + checkScore_dropCorexlRate + checkScore_dropPolicyRate ))
if [[ $checkScore_dropTotalRate -lt "0" ]]; then
	checkScore_dropTotalRate="0"
fi


checkScore_workingInfo="$checkScore_workingInfo [Drop Rate $checkScore_dropTotalRate sec]"


#LOG OUTPUTS
echo "checkScore_software $checkScore_software" >>$RUNLOG
echo "checkScore_capacityThreshold $checkScore_capacityThreshold" >>$RUNLOG
echo "checkScore_platform $checkScore_platform" >>$RUNLOG
echo "checkScore_cpuFwworkerCurQty $checkScore_cpuFwworkerCurQty" >>$RUNLOG
echo "checkScore_cpuFwworkerCurTotal $checkScore_cpuFwworkerCurTotal" >>$RUNLOG
echo "checkScore_cpuFwworkerCurAvg $checkScore_cpuFwworkerCurAvg" >>$RUNLOG
echo "checkScore_cpuFwworkerCurFailQty $checkScore_cpuFwworkerCurFailQty" >>$RUNLOG
echo "checkScore_cpuFwworkerCurFailMax $checkScore_cpuFwworkerCurFailMax" >>$RUNLOG
echo "checkScore_cpuFwworkerCurFailMaxTotal $checkScore_cpuFwworkerCurFailMaxTotal" >>$RUNLOG
echo "checkScore_cpuFwworkerCurFailMaxAvg $checkScore_cpuFwworkerCurFailMaxAvg" >>$RUNLOG
echo "checkScore_cpuFwworkerCurFailInfo $checkScore_cpuFwworkerCurFailInfo" >>$RUNLOG
echo "checkScore_cpuFwworkerCapacityMacro $checkScore_cpuFwworkerCapacityMacro" >>$RUNLOG
echo "checkScore_cpuFwworkerCapacityMicro $checkScore_cpuFwworkerCapacityMicro" >>$RUNLOG
echo "checkScore_connsCurrentQty $checkScore_connsCurrentQty" >>$RUNLOG
echo "checkScore_connsCurrentRate $checkScore_connsCurrentRate" >>$RUNLOG
echo "checkScore_cpuQty $checkScore_cpuQty" >>$RUNLOG
echo "checkScore_cpuTotalUsage $checkScore_cpuTotalUsage" >>$RUNLOG
echo "checkScore_cpuAvgUsage $checkScore_cpuAvgUsage" >>$RUNLOG
echo "checkScore_cpuFailQty $checkScore_cpuFailQty" >>$RUNLOG
echo "checkScore_cpuFailMax $checkScore_cpuFailMax" >>$RUNLOG
echo "checkScore_cpuFailMaxTotal $checkScore_cpuFailMaxTotal" >>$RUNLOG
echo "checkScore_cpuFailMaxAvg $checkScore_cpuFailMaxAvg" >>$RUNLOG
echo "checkScore_cpuFailInfo $checkScore_cpuFailInfo" >>$RUNLOG
echo "checkScore_cpuCapacityMacro $checkScore_cpuCapacityMacro" >>$RUNLOG
echo "checkScore_cpuCapacityMicro $checkScore_cpuapacityMicro" >>$RUNLOG
echo "checkScore_sndCpuQty $checkScore_sndCpuQty" >>$RUNLOG
echo "checkScore_sndQty $checkScore_sndQty" >>$RUNLOG
echo "checkScore_sndTotalUsage $checkScore_sndTotalUsage" >>$RUNLOG
echo "checkScore_sndAvgUsage $checkScore_sndAvgUsage" >>$RUNLOG
echo "checkScore_sndFailQty $checkScore_sndFailQty" >>$RUNLOG
echo "checkScore_sndFailMax $checkScore_sndFailMax" >>$RUNLOG
echo "checkScore_sndFailMaxTotal $checkScore_sndFailMaxTotal" >>$RUNLOG
echo "checkScore_sndFailMaxAvg $checkScore_sndFailMaxAvg" >>$RUNLOG
echo "checkScore_sndFailInfo $checkScore_sndFailInfo" >>$RUNLOG
echo "checkScore_sndCapacityMacro $checkScore_sndCapacityMacro" >>$RUNLOG
echo "checkScore_sndCapacityMicro $checkScore_sndapacityMicro" >>$RUNLOG
echo "checkScore_connsCurrentRateTemplatedQty $checkScore_connsCurrentRateTemplatedQty" >>$RUNLOG
echo "checkScore_connsCurrentRateNotTemplatedQty $checkScore_connsCurrentRateNotTemplatedQty" >>$RUNLOG
echo "checkScore_packetsCurrentRateAccelQty $checkScore_packetsCurrentRateAccelQty" >>$RUNLOG
echo "checkScore_packetsCurrentRateNotAccelQty $checkScore_packetsCurrentRateNotAccelQty" >>$RUNLOG
echo "checkScore_cpuSystemTotalUsage $checkScore_cpuSystemTotalUsage" >>$RUNLOG
echo "checkScore_connsCurrentRateQty $checkScore_connsCurrentRateQty" >>$RUNLOG
echo "checkScore_packetsCurrentRateQty $checkScore_packetsCurrentRateQty" >>$RUNLOG
echo "checkScore_throughput $checkScore_throughput" >>$RUNLOG
echo "checkScore_dropInterfaceRxDrpRate $checkScore_dropInterfaceRxDrpRate" >>$RUNLOG
echo "checkScore_dropInterfaceRxErrRate $checkScore_dropInterfaceRxErrRate" >>$RUNLOG
echo "checkScore_dropInterfaceTxDrpRate $checkScore_dropInterfaceTxDrpRate" >>$RUNLOG
echo "checkScore_dropInterfaceTxErrRate $checkScore_dropInterfaceTxErrRate" >>$RUNLOG
echo "checkScore_dropInterfaceRate $checkScore_dropInterfaceRate" >>$RUNLOG
echo "checkScore_dropSecurexlRate $checkScore_dropSecurexlRate" >>$RUNLOG
echo "checkScore_dropCorexlRate $checkScore_dropCorexlRate" >>$RUNLOG
echo "checkScore_dropPolicyRate $checkScore_dropPolicyRate" >>$RUNLOG
echo "checkScore_dropPolicyIpsRate $checkScore_dropPolicyIpsRate" >>$RUNLOG
echo "checkScore_dropTotalRate $checkScore_dropTotalRate" >>$RUNLOG
if [[ $MDPSENABLED != "0" ]]; then
	echo "checkScore_mdpsCurQty $checkScore_mdpsCurQty" >>$RUNLOG
	echo "checkScore_mdpsCurTotal $checkScore_mdpsCurTotal" >>$RUNLOG
	echo "checkScore_mdpsCurAvg $checkScore_mdpsCurAvg" >>$RUNLOG
	echo "checkScore_mdpsCurFailQty $checkScore_mdpsCurFailQty" >>$RUNLOG
	echo "checkScore_mdpsCurFailMax $checkScore_mdpsCurFailMax" >>$RUNLOG
	echo "checkScore_mdpsCurFailMaxTotal $checkScore_mdpsCurFailMaxTotal" >>$RUNLOG
	echo "checkScore_mdpsCurFailMaxAvg $checkScore_mdpsCurFailMaxAvg" >>$RUNLOG
	echo "checkScore_mdpsCurFailInfo $checkScore_mdpsCurFailInfo" >>$RUNLOG
	echo "checkScore_mdpsCapacityMacro $checkScore_mdpsCapacityMacro" >>$RUNLOG
	echo "checkScore_mdpsCapacityMicro $checkScore_mdpsCapacityMicro" >>$RUNLOG
fi

echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_software - $checkScore_software" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_capacityThreshold - $checkScore_capacityThreshold" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_platform - $checkScore_platform" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_cpuFwworkerCurQty - $checkScore_cpuFwworkerCurQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_cpuFwworkerCurTotal - $checkScore_cpuFwworkerCurTotal" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_cpuFwworkerCurAvg - $checkScore_cpuFwworkerCurAvg" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_cpuFwworkerCurFailQty - $checkScore_cpuFwworkerCurFailQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_cpuFwworkerCurFailMax - $checkScore_cpuFwworkerCurFailMax" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_cpuFwworkerCurFailMaxAvg - $checkScore_cpuFwworkerCurFailMaxAvg" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_cpuFwworkerCurFailInfo - $checkScore_cpuFwworkerCurFailInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_cpuFwworkerCapacityMacro - $checkScore_cpuFwworkerCapacityMacro" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_cpuFwworkerCapacityMicro - $checkScore_cpuFwworkerCapacityMicro" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_connsCurrentQty - $checkScore_connsCurrentQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_connsCurrentRate - $checkScore_connsCurrentRate" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_cpuQty - $checkScore_cpuQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_cpuTotalUsage - $checkScore_cpuTotalUsage" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_cpuAvgUsage - $checkScore_cpuAvgUsage" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_cpuFailQty - $checkScore_cpuFailQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_cpuFailMaxTotal - $checkScore_cpuFailMaxTotal" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_cpuFailMax - $checkScore_cpuFailMax" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_cpuFailMaxAvg - $checkScore_cpuFailMaxAvg" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_cpuFailInfo - $checkScore_cpuFailInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_cpuCapacityMacro - $checkScore_cpuCapacityMacro" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_cpuCapacityMicro - $checkScore_cpuCapacityMicro" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_sndQty - $checkScore_sndQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_sndTotalUsage - $checkScore_sndTotalUsage" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_sndAvgUsage - $checkScore_sndAvgUsage" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_sndFailQty - $checkScore_sndFailQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_sndFailMaxTotal - $checkScore_sndFailMaxTotal" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_sndFailMax - $checkScore_sndFailMax" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_sndFailMaxAvg - $checkScore_sndFailMaxAvg" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_sndFailInfo - $checkScore_sndFailInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_sndCapacityMacro - $checkScore_sndCapacityMacro" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_sndCapacityMicro - $checkScore_sndCapacityMicro" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_connsCurrentRateTemplatedQty - $checkScore_connsCurrentRateTemplatedQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_connsCurrentRateNotTemplatedQty - $checkScore_connsCurrentRateNotTemplatedQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_packetsCurrentRateAccelQty - $checkScore_packetsCurrentRateAccelQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_packetsCurrentRateNotAccelQty - $checkScore_packetsCurrentRateNotAccelQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_cpuSystemTotalUsage - $checkScore_cpuSystemTotalUsage" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_connsCurrentRateQty - $checkScore_connsCurrentRateQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_packetsCurrentRateQty - $checkScore_packetsCurrentRateQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_throughput - $checkScore_throughput" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_dropInterfaceRxDrpRate - $checkScore_dropInterfaceRxDrpRate" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_dropInterfaceRxErrRate - $checkScore_dropInterfaceRxErrRate" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_dropInterfaceTxDrpRate - $checkScore_dropInterfaceTxDrpRate" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_dropInterfaceTxErrRate - $checkScore_dropInterfaceTxErrRate" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_dropInterfaceRate - $checkScore_dropInterfaceRate" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_dropSecurexlRate - $checkScore_dropSecurexlRate" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_dropCorexlRate - $checkScore_dropCorexlRate" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_dropPolicyRate - $checkScore_dropPolicyRate" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_dropPolicyIpsRate - $checkScore_dropPolicyIpsRate" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_dropTotalRate - $checkScore_dropTotalRate" >>$HISTORYLOG
if [[ $MDPSENABLED != "0" ]]; then
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_mdpsCurQty - $checkScore_mdpsCurQty" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_mdpsCurTotal - $checkScore_mdpsCurTotal" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_mdpsCurAvg - $checkScore_mdpsCurAvg" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_mdpsCurFailQty - $checkScore_mdpsCurFailQty" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_mdpsCurFailMax - $checkScore_mdpsCurFailMax" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_mdpsCurFailMaxAvg - $checkScore_mdpsCurFailMaxAvg" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_mdpsCurFailInfo - $checkScore_mdpsCurFailInfo" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_mdpsCapacityMacro - $checkScore_mdpsCapacityMacro" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_mdpsCapacityMicro - $checkScore_mdpsCapacityMicro" >>$HISTORYLOG
fi

#RUN LOGIC
if [[ $checkScore_cpuFwworkerCapacityMacro -gt $checkScore_capacityThreshold ]]; then
	echo "Logic - FWWorker Macro: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - checkScore_cpuFwworkerCapacityMacro - $checkScore_cpuFwworkerCapacityMacro" >>$HISTORYLOG
	checkScore_problem="1"
	checkScore_problemInfo="$checkScore_problemInfo [FW(Macro) $checkScore_cpuFwworkerCapacityMacro pct]"
else
	echo "Logic - FWWorker Macro: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkScore_cpuFwworkerCapacityMacro - $checkScore_cpuFwworkerCapacityMacro" >>$HISTORYLOG
	checkScore_workingInfo="$checkScore_workingInfo [FW(Macro) $checkScore_cpuFwworkerCapacityMacro pct]"
fi
echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkScore_cpuFwworkerCapacityMicro - $checkScore_cpuFwworkerCapacityMicro" >>$HISTORYLOG
checkScore_workingInfo="$checkScore_workingInfo [FW(Micro) $checkScore_cpuFwworkerCapacityMicro pct]"
if [[ $checkScore_connsCapacity -gt $checkScore_capacityThreshold ]]; then
	echo "Logic - Connections: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - checkScore_connsCapacity - $checkScore_connsCapacity" >>$HISTORYLOG
else
	echo "Logic - Connections: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkScore_connsCapacity - $checkScore_connsCapacity" >>$HISTORYLOG
fi
if [[ $checkScore_cpuCapacityMacro -gt $checkScore_capacityThreshold ]]; then
	echo "Logic - CPU Core Macro: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - checkScore_cpuCapacityMacro - $checkScore_cpuCapacityMacro" >>$HISTORYLOG
else
	echo "Logic - CPU Core Macro: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkScore_cpuCapacityMacro - $checkScore_cpuCapacityMacro" >>$HISTORYLOG
fi
if [[ $checkScore_cpuCapacityMicro -gt $checkScore_capacityThreshold ]]; then
	echo "Logic - CPU Core Micro: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - checkScore_cpuCapacityMicro - $checkScore_cpuCapacityMicro" >>$HISTORYLOG
else
	echo "Logic - CPU Core Micro: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkScore_cpuCapacityMicro - $checkScore_cpuCapacityMicro" >>$HISTORYLOG
fi
if [[ $checkScore_sndCapacityMacro -gt $checkScore_capacityThreshold ]]; then
	echo "Logic - SND Core Macro: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - checkScore_sndCapacityMacro - $checkScore_sndCapacityMacro" >>$HISTORYLOG
	checkScore_problem="1"
	checkScore_problemInfo="$checkScore_problemInfo [SND(Macro) $checkScore_sndCapacityMacro pct]"
else
	echo "Logic - SND Core Macro: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkScore_sndCapacityMacro - $checkScore_sndCapacityMacro" >>$HISTORYLOG
	checkScore_workingInfo="$checkScore_workingInfo [SND(Macro) $checkScore_sndCapacityMacro pct]"
fi
if [[ $checkScore_sndCapacityMicro -gt $checkScore_capacityThreshold ]]; then
	echo "Logic - SND Core Micro: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - checkScore_sndCapacityMicro - $checkScore_sndCapacityMicro" >>$HISTORYLOG
	checkScore_warning="1"
	checkScore_warningInfo="$checkScore_warningInfo [SND(Micro) $checkScore_sndCapacityMicro pct]"
else
	echo "Logic - SND Core Micro: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkScore_sndCapacityMicro - $checkScore_sndCapacityMicro" >>$HISTORYLOG
	checkScore_workingInfo="$checkScore_workingInfo [SND(Micro) $checkScore_sndCapacityMicro pct]"
fi
if [[ $MDPSENABLED == "1" ]] || [[ $MDPSENABLED == "2" ]]; then
	if [[ $checkScore_mdpsCapacityMacro -gt $checkScore_capacityThreshold ]]; then
		echo "Logic - MDPS Core Macro: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - checkScore_mdpsCapacityMacro - $checkScore_mdpsCapacityMacro" >>$HISTORYLOG
		checkScore_warning="1"
		checkScore_warningInfo="$checkScore_problemInfo [MDPS(Macro) $checkScore_mdpsCapacityMacro pct]"
	else
		echo "Logic - MDPS Core Macro: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkScore_mdpsCapacityMacro - $checkScore_mdpsCapacityMacro" >>$HISTORYLOG
		checkScore_workingInfo="$checkScore_workingInfo [MDPS(Macro) $checkScore_mdpsCapacityMacro pct]"
	fi
	if [[ $checkScore_mdpsCapacityMicro -gt $checkScore_capacityThreshold ]]; then
		echo "Logic - MDPS Core Micro: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - checkScore_mdpsCapacityMicro - $checkScore_mdpsCapacityMicro" >>$HISTORYLOG
		checkScore_warning="1"
		checkScore_warningInfo="$checkScore_problemInfo [MDPS(Micro) $checkScore_mdpsCapacityMicro pct]"
	else
		echo "Logic - MDPS Core Micro: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkScore_mdpsCapacityMicro - $checkScore_mdpsCapacityMicro" >>$HISTORYLOG
		checkScore_workingInfo="$checkScore_workingInfo [MDPS(Micro) $checkScore_mdpsCapacityMicro pct]"
	fi
fi

#SYSLOG
if [[ $checkScore_problem == "1" ]]; then
	sendSyslog "$functionName" "PROBLEM" "checkScore_problemInfo" "VALUE=\"$checkScore_problemInfo $checkScore_warningInfo $checkScore_workingInfo\""
elif [[ $checkScore_warning == "1" ]]; then
	sendSyslog "$functionName" "WARNING" "checkScore_warningInfo" "VALUE=\"$checkScore_warningInfo $checkScore_workingInfo\""	
else
	sendSyslog "$functionName" "WORKING" "checkScore_workingInfo" "VALUE=\"$checkScore_workingInfo\""
fi

sendSyslog "$functionName" "INFO" "checkScore_software" "VALUE=\"$checkScore_software\""
sendSyslog "$functionName" "INFO" "checkScore_capacityThreshold" "VALUE=\"$checkScore_capacityThreshold\""
sendSyslog "$functionName" "INFO" "checkScore_platform" "VALUE=\"$checkScore_platform\""
sendSyslog "$functionName" "INFO" "checkScore_cpuFwworkerCurQty" "VALUE=\"$checkScore_cpuFwworkerCurQty\""
sendSyslog "$functionName" "INFO" "checkScore_cpuFwworkerCurTotal" "VALUE=\"$checkScore_cpuFwworkerCurTotal\""
sendSyslog "$functionName" "INFO" "checkScore_cpuFwworkerCurAvg" "VALUE=\"$checkScore_cpuFwworkerCurAvg\""
sendSyslog "$functionName" "INFO" "checkScore_cpuFwworkerCurFailQty" "VALUE=\"$checkScore_cpuFwworkerCurFailQty\""
sendSyslog "$functionName" "INFO" "checkScore_cpuFwworkerCurFailMax" "VALUE=\"$checkScore_cpuFwworkerCurFailMax\""
sendSyslog "$functionName" "INFO" "checkScore_cpuFwworkerCurFailMaxAvg" "VALUE=\"$checkScore_cpuFwworkerCurFailMaxAvg\""
sendSyslog "$functionName" "INFO" "checkScore_cpuFwworkerCurFailInfo" "VALUE=\"$checkScore_cpuFwworkerCurFailInfo\""
sendSyslog "$functionName" "INFO" "checkScore_cpuFwworkerCapacityMacro" "VALUE=\"$checkScore_cpuFwworkerCapacityMacro\""
sendSyslog "$functionName" "INFO" "checkScore_cpuFwworkerCapacityMicro" "VALUE=\"$checkScore_cpuFwworkerCapacityMicro\""
sendSyslog "$functionName" "INFO" "checkScore_connsCurrentQty" "VALUE=\"$checkScore_connsCurrentQty\""
sendSyslog "$functionName" "INFO" "checkScore_connsCurrentRate" "VALUE=\"$checkScore_connsCurrentRate\""
sendSyslog "$functionName" "INFO" "checkScore_sndQty" "VALUE=\"$checkScore_sndQty\""
sendSyslog "$functionName" "INFO" "checkScore_sndTotalUsage" "VALUE=\"$checkScore_sndTotalUsage\""
sendSyslog "$functionName" "INFO" "checkScore_sndAvgUsage" "VALUE=\"$checkScore_sndAvgUsage\""
sendSyslog "$functionName" "INFO" "checkScore_sndFailQty" "VALUE=\"$checkScore_sndFailQty\""
sendSyslog "$functionName" "INFO" "checkScore_sndFailMaxTotal" "VALUE=\"$checkScore_sndFailMaxTotal\""
sendSyslog "$functionName" "INFO" "checkScore_dropInterfaceRxErrRate" "VALUE=\"$checkScore_dropInterfaceRxErrRate\""
sendSyslog "$functionName" "INFO" "checkScore_sndFailMax" "VALUE=\"$checkScore_sndFailMax\""
sendSyslog "$functionName" "INFO" "checkScore_sndFailMaxAvg" "VALUE=\"$checkScore_sndFailMaxAvg\""
sendSyslog "$functionName" "INFO" "checkScore_sndFailInfo" "VALUE=\"$checkScore_sndFailInfo\""
sendSyslog "$functionName" "INFO" "checkScore_sndCapacityMacro" "VALUE=\"$checkScore_sndCapacityMacro\""
sendSyslog "$functionName" "INFO" "checkScore_sndCapacityMicro" "VALUE=\"$checkScore_sndCapacityMicro\""
sendSyslog "$functionName" "INFO" "checkScore_connsCurrentRateTemplatedQty" "VALUE=\"$checkScore_connsCurrentRateTemplatedQty\""
sendSyslog "$functionName" "INFO" "checkScore_connsCurrentRateNotTemplatedQty" "VALUE=\"$checkScore_connsCurrentRateNotTemplatedQty\""
sendSyslog "$functionName" "INFO" "checkScore_packetsCurrentRateAccelQty" "VALUE=\"$checkScore_packetsCurrentRateAccelQty\""
sendSyslog "$functionName" "INFO" "checkScore_packetsCurrentRateNotAccelQty" "VALUE=\"$checkScore_packetsCurrentRateNotAccelQty\""
sendSyslog "$functionName" "INFO" "checkScore_connsCurrentRateQty" "VALUE=\"$checkScore_connsCurrentRateQty\""
sendSyslog "$functionName" "INFO" "checkScore_packetsCurrentRateQty" "VALUE=\"$checkScore_packetsCurrentRateQty\""
sendSyslog "$functionName" "INFO" "checkScore_throughput" "VALUE=\"$checkScore_throughput\""
sendSyslog "$functionName" "INFO" "checkScore_dropInterfaceRxDrpRate" "VALUE=\"$checkScore_dropInterfaceRxDrpRate\""
sendSyslog "$functionName" "INFO" "checkScore_dropInterfaceTxDrpRate" "VALUE=\"$checkScore_dropInterfaceTxDrpRate\""
sendSyslog "$functionName" "INFO" "checkScore_dropInterfaceTxErrRate" "VALUE=\"$checkScore_dropInterfaceTxErrRate\""
sendSyslog "$functionName" "INFO" "checkScore_dropInterfaceRate" "VALUE=\"$checkScore_dropInterfaceRate\""
sendSyslog "$functionName" "INFO" "checkScore_dropSecurexlRate" "VALUE=\"$checkScore_dropSecurexlRate\""
sendSyslog "$functionName" "INFO" "checkScore_dropCorexlRate" "VALUE=\"$checkScore_dropCorexlRate\""
sendSyslog "$functionName" "INFO" "checkScore_dropPolicyRate" "VALUE=\"$checkScore_dropPolicyRate\""
sendSyslog "$functionName" "INFO" "checkScore_dropPolicyIpsRate" "VALUE=\"$checkScore_dropPolicyIpsRate\""
sendSyslog "$functionName" "INFO" "checkScore_dropTotalRate" "VALUE=\"$checkScore_dropTotalRate\""
if [[ $MDPSENABLED == "1" ]]; then
	sendSyslog "$functionName" "INFO" "checkScore_mdpsCurQty" "VALUE=\"$checkScore_mdpsCurQty\""
	sendSyslog "$functionName" "INFO" "checkScore_mdpsCurTotal" "VALUE=\"$checkScore_mdpsCurTotal\""
	sendSyslog "$functionName" "INFO" "checkScore_mdpsCurAvg" "VALUE=\"$checkScore_mdpsCurAvg\""
	sendSyslog "$functionName" "INFO" "checkScore_mdpsCurFailQty" "VALUE=\"$checkScore_mdpsCurFailQty\""
	sendSyslog "$functionName" "INFO" "checkScore_mdpsCurFailMax" "VALUE=\"$checkScore_mdpsCurFailMax\""
	sendSyslog "$functionName" "INFO" "checkScore_mdpsCurFailMaxAvg" "VALUE=\"$checkScore_mdpsCurFailMaxAvg\""
	sendSyslog "$functionName" "INFO" "checkScore_mdpsCurFailInfo" "VALUE=\"$checkScore_mdpsCurFailInfo\""
	sendSyslog "$functionName" "INFO" "checkScore_mdpsCapacityMacro" "VALUE=\"$checkScore_mdpsCapacityMacro\""
	sendSyslog "$functionName" "INFO" "checkScore_mdpsCapacityMicro" "VALUE=\"$checkScore_mdpsCapacityMicro\""
fi


#CLEANUP
rm $TEMPFILE $TEMPFILE_MULTIK $TEMPFILE2 $TEMPFILE_FWAFFINITY $TEMPFILE_SND > /dev/null 2>&1


checkScore_fEnd=$(date "+%s")
checkScore_fRunTime=$(( checkScore_fEnd - checkScore_fStart ))
echo "checkScore_fRunTime $checkScore_fRunTime" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_warning - $checkScore_warning" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_problem - $checkScore_problem" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_problemInfo - $checkScore_problemInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_warningInfo - $checkScore_warningInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_workingInfo - $checkScore_workingInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScore_runTime - $checkScore_fRunTime" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkScore_warning" "VALUE=\"$checkScore_warning\""
sendSyslog "$functionName" "INFO" "checkScore_problem" "VALUE=\"$checkScore_problem\""
sendSyslog "$functionName" "INFO" "checkScore_problemInfo" "VALUE=\"$checkScore_problemInfo\""
sendSyslog "$functionName" "INFO" "checkScore_warningInfo" "VALUE=\"$checkScore_warningInfo\""
sendSyslog "$functionName" "INFO" "checkScore_workingInfo" "VALUE=\"$checkScore_workingInfo\""
sendSyslog "$functionName" "INFO" "checkScore_runTime" "VALUE=\"$checkScore_fRunTime\""
echo "checkScore_warning $checkScore_warning" >>$RUNLOG
echo "checkScore_problem $checkScore_problem" >>$RUNLOG
echo "END==checkScore" >>$RUNLOG
}

###################################################################################################
checkScoreSP(){
echo "START==checkScoreSP" >>$RUNLOG

#DEFAULTS
checkScoreSP_fStart=$(date "+%s")
functionName=${FUNCNAME[0]}
checkScoreSP_warning="0"
checkScoreSP_problem="0"
checkScoreSP_workingInfo=""
checkScoreSP_warningInfo=""
checkScoreSP_problemInfo=""
checkScoreSP_capacityThreshold="80"
checkScoreSP_activeSgmsQty=$ACTIVESGMQTY
TEMPFILE=$TEMPDIR/$SCRIPT.$EPOCH.$functionName
TEMPFILE2=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.filtered
TEMPFILE_FULL=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.full
TEMPFILE_FULL_CPU=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.cpu
TEMPFILE_FULL2=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.full2
TEMPFILE_MULTIK=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.multik
TEMPFILE_FWAFFINITY=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.affinity
FILESIZE="0"

#COLLECT OUTPUTS
cat $HISTORYLOG | grep $EPOCH > $TEMPFILE

#COLLECT FROM OTHER ACTIVE SGMS
for LINE in `asg stat -i all_sync_ips | grep $ACTIVECHASSIS1 | grep -v "$LOCALSGM1 " | awk '{print $2}'` ; do
	ssh -o ConnectTimeout=5 $LINE 'cat /var/log/tmp/fw_health_check.sh.current' 2>/dev/null | sed -e 's/^.*-ch\([0-9]\{1,2\}\)-\([0-9]\{1,2\}\)/\1_\2/g' > $TEMPFILE_FULL.$LINE
	FILESIZE=$(cat $TEMPFILE_FULL.$LINE | wc -l)
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_tempfileFull - $LINE $FILESIZE" >>$HISTORYLOG	
	COUNTER="0"
	if [[ $FILESIZE == "0" ]] && [[ $COUNTER -lt "3" ]]; then
		sleep 3
		ssh -o ConnectTimeout=5 $LINE 'cat /var/log/tmp/fw_health_check.sh.current' 2>/dev/null | sed -e 's/^.*-ch\([0-9]\{1,2\}\)-\([0-9]\{1,2\}\)/\1_\2/g' > $TEMPFILE_FULL.$LINE
		FILESIZE=$(cat $TEMPFILE_FULL.$LINE | wc -l)
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_tempfileFull - $LINE $FILESIZE RERUN $COUNTER" >>$HISTORYLOG	
		COUNTER=$COUNTER+1
	fi
done
#MERGE
cat $TEMPFILE_FULL.* > $TEMPFILE_FULL
#COLLECT FROM LOCAL SGM
cat $TEMPFILE | sed -e 's/^.*-ch\([0-9]\{1,2\}\)-\([0-9]\{1,2\}\)/\1_\2/g' >> $TEMPFILE_FULL
cat $TEMPFILE_FULL | grep "checkPerformanceSP_cpuCounters" > $TEMPFILE_FULL_CPU
FILESIZE=$(cat $TEMPFILE | wc -l)
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_tempfileFull - LOCAL $FILESIZE" >>$HISTORYLOG	


checkScoreSP_platform="$checkSelf_hwmodel ($checkScoreSP_activeSgmsQty)"
checkScoreSP_software="$checkSelf_majorVer $checkSelf_minorVer ($checkSelf_enabledBlades)"


######################### CPU:WORKER (CONSIDER ALL SGMS)
if [[ $MDPSENABLED == "2" ]]; then
		
	##BYPASS UNTIL SOLVED
	# .1.3.6.1.4.1.2620.1.56.101
	checkScoreSP_cpuFwworkerCapacityMacro="1"
	checkScoreSP_cpuFwworkerCapacityMicro="1"

else

	# checkScoreSP_cpuFwworkerCapacityMacro=$(snmp .1.3.6.1.4.1.2620.1.48.20.14)	
	# checkScoreSP_cpuFwworkerCapacityMicro=$(snmp .1.3.6.1.4.1.2620.1.48.20.16)
	checkScoreSP_cpuFwworkerCapacityMacro=$(stattestget 1.3.6.1.4.1.2620.1.48.20.14)	
	checkScoreSP_cpuFwworkerCapacityMicro=$(stattestget 1.3.6.1.4.1.2620.1.48.20.16)	
	
fi



######################### CONNECTIONS (CONSIDER ONLY SMO)

###Get current connection entries
#checkScoreSP_connsCurrentQty=$(snmp .1.3.6.1.4.1.2620.1.48.20.4)	
checkScoreSP_connsCurrentQty=$(stattestget 1.3.6.1.4.1.2620.1.48.20.4)
	###Get current connection rate
#checkScoreSP_connsCurrentRate=$(snmp .1.3.6.1.4.1.2620.1.48.20.2)
checkScoreSP_connsCurrentRate=$(stattestget 1.3.6.1.4.1.2620.1.48.20.2)
	###Get mem per conn

checkScoreSP_connsCurrentRateQty=$checkScoreSP_connsCurrentRate

checkScoreSP_connsCurrentRateTemplatedQty=$(( (checkScoreSP_connsCurrentRate * checkSecureXLSP_statsConnRateAccelPct) / 100 ))
checkScoreSP_connsCurrentRateNotTemplatedQty=$(( checkScoreSP_connsCurrentRate - checkScoreSP_connsCurrentRateTemplatedQty ))
checkScoreSP_packetsCurrentRateQty=$checkInterfaceSP_perfRate

checkScoreSP_packetsCurrentRateAccelQty=$(( (checkInterfaceSP_perfRate * checkSecureXLSP_statsAccPct) / 100 ))
checkScoreSP_packetsCurrentRateNotAccelQty=$(( checkInterfaceSP_perfRate - checkScoreSP_packetsCurrentRateAccelQty ))


######################### Throughput

if [[ $MDPSENABLED == "2" ]]; then
	##BYPASS UNTIL SOLVED
	checkScoreSP_throughput="1"
else
	#checkScoreSP_throughput=$(snmp .1.3.6.1.4.1.2620.1.48.20.1)
	checkScoreSP_throughput=$(stattestget 1.3.6.1.4.1.2620.1.48.20.1)
fi



######################### CPU

	###Get Number of CPUs
checkScoreSP_cpuQty=$(cat $TEMPFILE_FULL | grep "checkPerformanceSP" | grep "checkPerformanceSP_cpuCounters" | wc -l)
	###Add current CPU for all cores together
checkScoreSP_cpuTotalUsage=$(cat $TEMPFILE_FULL | grep "checkPerformanceSP" | grep "checkPerformanceSP_cpuCounters" | awk -F " - " '{print $7}' | awk '{print $5}' | awk -F "=" '{print $2}' | paste -sd+ | bc)
	###Calculate Average CPU for cores
checkScoreSP_cpuAvgUsage=$(average_of $checkScoreSP_cpuTotalUsage $checkScoreSP_cpuQty)
	###Determine if any exceed threshold, how many exceed, and average exceed
checkScoreSP_cpuFailQty="0"
checkScoreSP_cpuFailMax="0"
checkScoreSP_cpuFailMaxTotal="0"
checkScoreSP_cpuFailInfo=""
IFS=$'\n'
for LINE in `cat $TEMPFILE_FULL | grep "checkPerformanceSP" | grep "checkPerformanceSP_cpuCounters" | awk -F " - " '{print $1,$7}'` ; do
	SGM=$(echo "$LINE" | awk '{print $1}')
	CPU=$(echo "$LINE" | awk '{print $2}' | awk -F "=" '{print $2}')
	USAGE=$(echo "$LINE" | awk '{print $6}' | awk -F "=" '{print $2}')
	if [[ $USAGE -gt $checkScoreSP_cpuFailMax ]]; then
			checkScoreSP_cpuFailMax=$USAGE
	fi
	if [[ $USAGE -ge $checkScoreSP_capacityThreshold ]]; then
		let checkScoreSP_cpuFailQty=$checkScoreSP_cpuFailQty+1
		let checkScoreSP_cpuFailMaxTotal=$checkScoreSP_cpuFailMaxTotal+$CPU
		checkScoreSP_cpuFailInfo="$checkScoreSP_cpuFailInfo [CPU: SGM=$SGM $CPU=$USAGE pct]"
	fi
done
IFS=$ORIGIFS
if [[ $checkScoreSP_cpuFailQty != "0" ]]; then
	checkScoreSP_cpuFailMaxAvg=$(average_of $checkScoreSP_cpuFailMaxTotal $checkScoreSP_cpuFailQty)
else
	checkScoreSP_cpuFailMaxAvg="0"
fi
checkScoreSP_cpuCapacityMacro=$checkScoreSP_cpuAvgUsage
checkScoreSP_cpuCapacityMicro=$checkScoreSP_cpuFailMax


######################### SND

# checkScoreSP_sndCapacityMacro=$(snmp .1.3.6.1.4.1.2620.1.48.20.11)	
# checkScoreSP_sndCapacityMicro=$(snmp .1.3.6.1.4.1.2620.1.48.20.13)	
checkScoreSP_sndCapacityMacro=$(stattestget 1.3.6.1.4.1.2620.1.48.20.11)
checkScoreSP_sndCapacityMicro=$(stattestget 1.3.6.1.4.1.2620.1.48.20.13)


#### MDPS evaluate total USAGE
if [[ $MDPSENABLED -gt "0" ]]; then

	if [[ $MDPSENABLED == "2" ]]; then
		#bypass until fixed
		checkScoreSP_mdpsCapacityMacro="1"
		checkScoreSP_mdpsCapacityMicro="1"
	
	else
	
		checkScoreSP_mdpsCurQty="0"
		checkScoreSP_mdpsCurTotal="0"
		checkScoreSP_mdpsCurFailQty="0"
		checkScoreSP_mdpsCurFailMax="0"
		checkScoreSP_mdpsCurFailMaxTotal="0"
		checkScoreSP_mdpsCurFailInfo=""
		#for CPU in `snmpwalk -r 1 -v2c -c $SNMPCOMMUNITY localhost .1.3.6.1.4.1.2620.1.56.101.2.1.9 | grep "MDPS\|FWD" | awk '{print $1}' | awk -F "." '{print $9}'` ; do
		for CPU in `stattest get 1.3.6.1.4.1.2620.1.56.101.2.1.9 | grep -B3 "MDPS\|FWD" | grep "OID" | awk -F "." '{print $NF}'` ; do
			CORE=$CPU
			#consider overall usage
			#UTILIZATION=$(snmpwalk -r 1 -v2c -c $SNMPCOMMUNITY localhost .1.3.6.1.4.1.2620.1.56.101.2.1.3.$CPU | awk '{print $NF}')
			UTILIZATION=$(stattestget 1.3.6.1.4.1.2620.1.56.101.2.1.3.$CPU)
			echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_mdps - CPU=$CPU UTILIZATION=$UTILIZATION" >>$HISTORYLOG
			let checkScoreSP_mdpsCurTotal=$checkScoreSP_mdpsCurTotal+$UTILIZATION
			let checkScoreSP_mdpsCurQty=$checkScoreSP_mdpsCurQty+1
			###Determine if any exceed threshold, how many exceed, and average exceed
			if [[ $UTILIZATION -gt $checkScoreSP_mdpsCurFailMax ]]; then
					checkScoreSP_mdpsCurFailMax=$UTILIZATION
			fi
			if [[ $UTILIZATION -ge $checkScoreSP_capacityThreshold ]]; then
				let checkScoreSP_mdpsCurFailQty=$checkScoreSP_mdpsCurFailQty+1
				let checkScoreSP_mdpsCurFailMaxTotal=$checkScoreSP_mdpsCurFailMaxTotal+$UTILIZATION
				checkScoreSP_mdpsCurFailInfo="$checkScoreSP_mdpsCurFailInfo [FW: $CORE=$UTILIZATION]"
			fi
		done
		IFS=$ORIGIFS
		checkScoreSP_mdpsCurAvg=$(average_of $checkScoreSP_mdpsCurTotal $checkScoreSP_mdpsCurQty)
		if [[ $checkScoreSP_mdpsCurFailQty != "0" ]]; then
			checkScoreSP_mdpsCurFailMaxAvg=$(average_of $checkScoreSP_mdpsCurFailMaxTotal $checkScoreSP_mdpsCurFailQty)
		else
			checkScoreSP_mdpsCurFailMaxAvg="0"
		fi
		checkScoreSP_mdpsCapacityMacro=$checkScoreSP_mdpsCurAvg
		checkScoreSP_mdpsCapacityMicro=$checkScoreSP_mdpsCurFailMax

	fi
fi





#### Summarize Drops 
checkScoreSP_dropInterfaceRxRate=$(cat $TEMPFILE_FULL | grep "checkInterfaceSP_ppsrateCounters" | awk -F " - " '{print $6}' | awk '{print $6}' | awk -F "=" '{print $2}' | paste -sd+ | bc)
checkScoreSP_dropInterfaceRate=$checkScoreSP_dropInterfaceRxRate
checkScoreSP_dropSecurexlRate=$checkSecureXLSP_statsDropTemplateRate
checkScoreSP_dropPolicyRate=$(cat $TEMPFILE_FULL | grep -w "checkPolicySP_rateCounters" | awk -F " - " '{print $6}' | awk '{print $4}' | awk -F "=" '{print $NF}' | paste -sd+ | bc)
checkScoreSP_dropPolicyIpsRate=$checkPolicySP_policyIpsDroppedRate
checkScoreSP_dropTotalRate=$(( checkScoreSP_dropInterfaceRate + checkScoreSP_dropSecurexlRate + checkScoreSP_dropPolicyRate + checkScoreSP_dropPolicyIpsRate ))
if [[ $checkScoreSP_dropTotalRate -lt "0" ]]; then
	checkScoreSP_dropTotalRate="0"
fi


#LOG OUTPUTS
echo "checkScoreSP_capacityThreshold $checkScoreSP_capacityThreshold" >>$RUNLOG
echo "checkScoreSP_software $checkScoreSP_software" >>$RUNLOG
echo "checkScoreSP_platform $checkScoreSP_platform" >>$RUNLOG
echo "checkScoreSP_cpuFwworkerCapacityMacro $checkScoreSP_cpuFwworkerCapacityMacro" >>$RUNLOG
echo "checkScoreSP_cpuFwworkerCapacityMicro $checkScoreSP_cpuFwworkerCapacityMicro" >>$RUNLOG
echo "checkScoreSP_connsCurrentQty $checkScoreSP_connsCurrentQty" >>$RUNLOG
echo "checkScoreSP_connsCurrentRate $checkScoreSP_connsCurrentRate" >>$RUNLOG
echo "checkScoreSP_cpuQty $checkScoreSP_cpuQty" >>$RUNLOG
echo "checkScoreSP_cpuTotalUsage $checkScoreSP_cpuTotalUsage" >>$RUNLOG
echo "checkScoreSP_cpuAvgUsage $checkScoreSP_cpuAvgUsage" >>$RUNLOG
echo "checkScoreSP_cpuFailQty $checkScoreSP_cpuFailQty" >>$RUNLOG
echo "checkScoreSP_cpuFailMax $checkScoreSP_cpuFailMax" >>$RUNLOG
echo "checkScoreSP_cpuFailMaxTotal $checkScoreSP_cpuFailMaxTotal" >>$RUNLOG
echo "checkScoreSP_cpuFailMaxAvg $checkScoreSP_cpuFailMaxAvg" >>$RUNLOG
echo "checkScoreSP_cpuFailInfo $checkScoreSP_cpuFailInfo" >>$RUNLOG
echo "checkScoreSP_cpuCapacityMacro $checkScoreSP_cpuCapacityMacro" >>$RUNLOG
echo "checkScoreSP_cpuCapacityMicro $checkScoreSP_cpuapacityMicro" >>$RUNLOG
echo "checkScoreSP_sndCapacityMacro $checkScoreSP_sndCapacityMacro" >>$RUNLOG
echo "checkScoreSP_sndCapacityMicro $checkScoreSP_sndapacityMicro" >>$RUNLOG
echo "checkScoreSP_connsCurrentRateTemplatedQty $checkScoreSP_connsCurrentRateTemplatedQty" >>$RUNLOG
echo "checkScoreSP_connsCurrentRateNotTemplatedQty $checkScoreSP_connsCurrentRateNotTemplatedQty" >>$RUNLOG
echo "checkScoreSP_packetsCurrentRateAccelQty $checkScoreSP_packetsCurrentRateAccelQty" >>$RUNLOG
echo "checkScoreSP_packetsCurrentRateNotAccelQty $checkScoreSP_packetsCurrentRateNotAccelQty" >>$RUNLOG
echo "checkScoreSP_cpuSystemTotalUsage $checkScoreSP_cpuSystemTotalUsage" >>$RUNLOG
echo "checkScoreSP_connsCurrentRateQty $checkScoreSP_connsCurrentRateQty" >>$RUNLOG
echo "checkScoreSP_packetsCurrentRateQty $checkScoreSP_packetsCurrentRateQty" >>$RUNLOG
echo "checkScoreSP_throughput $checkScoreSP_throughput" >>$RUNLOG
echo "checkScoreSP_dropInterfaceRxRate $checkScoreSP_dropInterfaceRxRate" >>$RUNLOG
echo "checkScoreSP_dropInterfaceQdiscRate $checkScoreSP_dropInterfaceQdiscRate" >>$RUNLOG
echo "checkScoreSP_dropInterfaceRate $checkScoreSP_dropInterfaceRate" >>$RUNLOG
echo "checkScoreSP_dropSecurexlRate $checkScoreSP_dropSecurexlRate" >>$RUNLOG
echo "checkScoreSP_dropPolicyRate $checkScoreSP_dropPolicyRate" >>$RUNLOG
echo "checkScoreSP_dropPolicyIpsRate $checkScoreSP_dropPolicyIpsRate" >>$RUNLOG
echo "checkScoreSP_dropTotalRate $checkScoreSP_dropTotalRate" >>$RUNLOG
if [[ $MDPSENABLED != "0" ]]; then
	echo "checkScoreSP_mdpsCurQty $checkScoreSP_mdpsCurQty" >>$RUNLOG
	echo "checkScoreSP_mdpsCurTotal $checkScoreSP_mdpsCurTotal" >>$RUNLOG
	echo "checkScoreSP_mdpsCurAvg $checkScoreSP_mdpsCurAvg" >>$RUNLOG
	echo "checkScoreSP_mdpsCurFailQty $checkScoreSP_mdpsCurFailQty" >>$RUNLOG
	echo "checkScoreSP_mdpsCurFailMax $checkScoreSP_mdpsCurFailMax" >>$RUNLOG
	echo "checkScoreSP_mdpsCurFailMaxTotal $checkScoreSP_mdpsCurFailMaxTotal" >>$RUNLOG
	echo "checkScoreSP_mdpsCurFailMaxAvg $checkScoreSP_mdpsCurFailMaxAvg" >>$RUNLOG
	echo "checkScoreSP_mdpsCurFailInfo $checkScoreSP_mdpsCurFailInfo" >>$RUNLOG
	echo "checkScoreSP_mdpsCapacityMacro $checkScoreSP_mdpsCapacityMacro" >>$RUNLOG
	echo "checkScoreSP_mdpsCapacityMicro $checkScoreSP_mdpsCapacityMicro" >>$RUNLOG
fi

echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_capacityThreshold - $checkScoreSP_capacityThreshold" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_software - $checkScoreSP_software" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_platform - $checkScoreSP_platform" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_cpuFwworkerCapacityMacro - $checkScoreSP_cpuFwworkerCapacityMacro" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_cpuFwworkerCapacityMicro - $checkScoreSP_cpuFwworkerCapacityMicro" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_connsCurrentQty - $checkScoreSP_connsCurrentQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_connsCurrentRate - $checkScoreSP_connsCurrentRate" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_cpuQty - $checkScoreSP_cpuQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_cpuTotalUsage - $checkScoreSP_cpuTotalUsage" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_cpuAvgUsage - $checkScoreSP_cpuAvgUsage" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_cpuFailQty - $checkScoreSP_cpuFailQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_cpuFailMax - $checkScoreSP_cpuFailMax" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_cpuFailMaxTotal - $checkScoreSP_cpuFailMaxTotal" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_cpuFailMaxAvg - $checkScoreSP_cpuFailMaxAvg" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_cpuFailInfo - $checkScoreSP_cpuFailInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_cpuCapacityMacro - $checkScoreSP_cpuCapacityMacro" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_cpuCapacityMicro - $checkScoreSP_cpuCapacityMicro" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_sndFailInfo - $checkScoreSP_sndFailInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_sndCapacityMacro - $checkScoreSP_sndCapacityMacro" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_sndCapacityMicro - $checkScoreSP_sndCapacityMicro" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_connsCurrentRateTemplatedQty - $checkScoreSP_connsCurrentRateTemplatedQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_connsCurrentRateNotTemplatedQty - $checkScoreSP_connsCurrentRateNotTemplatedQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_packetsCurrentRateAccelQty - $checkScoreSP_packetsCurrentRateAccelQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_packetsCurrentRateNotAccelQty - $checkScoreSP_packetsCurrentRateNotAccelQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_cpuSystemTotalUsage - $checkScoreSP_cpuSystemTotalUsage" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_connsCurrentRateQty - $checkScoreSP_connsCurrentRateQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_packetsCurrentRateQty - $checkScoreSP_packetsCurrentRateQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_throughput - $checkScoreSP_throughput" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_dropInterfaceRxRate - $checkScoreSP_dropInterfaceRxRate" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_dropInterfaceRate - $checkScoreSP_dropInterfaceRate" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_dropSecurexlRate - $checkScoreSP_dropSecurexlRate" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_dropPolicyRate - $checkScoreSP_dropPolicyRate" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_dropPolicyIpsRate - $checkScoreSP_dropPolicyIpsRate" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_dropTotalRate - $checkScoreSP_dropTotalRate" >>$HISTORYLOG
if [[ $MDPSENABLED != "0" ]]; then
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_mdpsCurQty - $checkScoreSP_mdpsCurQty" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_mdpsCurTotal - $checkScoreSP_mdpsCurTotal" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_mdpsCurAvg - $checkScoreSP_mdpsCurAvg" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_mdpsCurFailQty - $checkScoreSP_mdpsCurFailQty" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_mdpsCurFailMax - $checkScoreSP_mdpsCurFailMax" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_mdpsCurFailMaxAvg - $checkScoreSP_mdpsCurFailMaxAvg" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_mdpsCurFailInfo - $checkScoreSP_mdpsCurFailInfo" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_mdpsCapacityMacro - $checkScoreSP_mdpsCapacityMacro" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_mdpsCapacityMicro - $checkScoreSP_mdpsCapacityMicro" >>$HISTORYLOG
fi


#RUN LOGIC
if [[ $checkScoreSP_cpuFwworkerCapacityMacro -gt $checkScoreSP_capacityThreshold ]]; then
	echo "Logic - FWWorker Macro: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - checkScoreSP_cpuFwworkerCapacityMacro - $checkScoreSP_cpuFwworkerCapacityMacro" >>$HISTORYLOG
	checkScoreSP_problem="1"
	checkScoreSP_problemInfo="$checkScoreSP_problemInfo [FW(Macro) $checkScoreSP_cpuFwworkerCapacityMacro pct]"
else
	echo "Logic - FWWorker Macro: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkScoreSP_cpuFwworkerCapacityMacro - $checkScoreSP_cpuFwworkerCapacityMacro" >>$HISTORYLOG
	checkScoreSP_workingInfo="$checkScoreSP_workingInfo [FW(Macro) $checkScoreSP_cpuFwworkerCapacityMacro pct]"
fi
echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkScoreSP_cpuFwworkerCapacityMicro - $checkScoreSP_cpuFwworkerCapacityMicro" >>$HISTORYLOG
checkScoreSP_workingInfo="$checkScoreSP_workingInfo [FW(Micro) $checkScoreSP_cpuFwworkerCapacityMicro pct]"
if [[ $checkScoreSP_cpuCapacityMacro -gt $checkScoreSP_capacityThreshold ]]; then
	echo "Logic - CPU Core Macro: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - checkScoreSP_cpuCapacityMacro - $checkScoreSP_cpuCapacityMacro" >>$HISTORYLOG
	#checkScoreSP_problemInfo="$checkScoreSP_problemInfo [CPU(Macro) $checkScoreSP_cpuCapacityMacro pct]"
else
	echo "Logic - CPU Core Macro: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkScoreSP_cpuCapacityMacro - $checkScoreSP_cpuCapacityMacro" >>$HISTORYLOG
	#checkScoreSP_problemInfo="$checkScoreSP_problemInfo [CPU(Macro) $checkScoreSP_cpuCapacityMacro pct]"
fi
if [[ $checkScoreSP_cpuCapacityMicro -gt $checkScoreSP_capacityThreshold ]]; then
	echo "Logic - CPU Core Micro: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - checkScoreSP_cpuCapacityMicro - $checkScoreSP_cpuCapacityMicro" >>$HISTORYLOG
else
	echo "Logic - CPU Core Micro: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkScoreSP_cpuCapacityMicro - $checkScoreSP_cpuCapacityMicro" >>$HISTORYLOG
fi
if [[ $checkScoreSP_sndCapacityMacro -gt $checkScoreSP_capacityThreshold ]]; then
	echo "Logic - SND Core Macro: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - checkScoreSP_sndCapacityMacro - $checkScoreSP_sndCapacityMacro" >>$HISTORYLOG
	checkScoreSP_problem="1"
	checkScoreSP_problemInfo="$checkScoreSP_problemInfo [SND(Macro) $checkScoreSP_sndCapacityMacro pct]"
else
	echo "Logic - SND Core Macro: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkScoreSP_sndCapacityMacro - $checkScoreSP_sndCapacityMacro" >>$HISTORYLOG
	checkScoreSP_workingInfo="$checkScoreSP_workingInfo [SND(Macro) $checkScoreSP_sndCapacityMacro pct]"
fi
if [[ $checkScoreSP_sndCapacityMicro -gt $checkScoreSP_capacityThreshold ]]; then
	echo "Logic - SND Core Micro: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - checkScoreSP_sndCapacityMicro - $checkScoreSP_sndCapacityMicro" >>$HISTORYLOG
	checkScoreSP_problem="1"
	checkScoreSP_problemInfo="$checkScoreSP_problemInfo [SND(Micro) $checkScoreSP_sndCapacityMicro pct]"
else
	echo "Logic - SND Core Micro: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkScoreSP_sndCapacityMicro - $checkScoreSP_sndCapacityMicro" >>$HISTORYLOG
	checkScoreSP_workingInfo="$checkScoreSP_workingInfo [SND(Micro) $checkScoreSP_sndCapacityMicro pct]"
fi
if [[ $MDPSENABLED == "1" ]] || [[ $MDPSENABLED == "2" ]]; then
	if [[ $checkScoreSP_mdpsCapacityMacro -gt $checkScoreSP_capacityThreshold ]]; then
		echo "Logic - MDPS Core Macro: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - checkScoreSP_mdpsCapacityMacro - $checkScoreSP_mdpsCapacityMacro" >>$HISTORYLOG
		checkScoreSP_warning="1"
		checkScoreSP_warningInfo="$checkScoreSP_problemInfo [MDPS(Macro) $checkScoreSP_mdpsCapacityMacro pct]"
	else
		echo "Logic - MDPS Core Macro: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkScoreSP_mdpsCapacityMacro - $checkScoreSP_mdpsCapacityMacro" >>$HISTORYLOG
		checkScoreSP_workingInfo="$checkScoreSP_workingInfo [MDPS(Macro) $checkScoreSP_mdpsCapacityMacro pct]"
	fi
	if [[ $checkScoreSP_mdpsCapacityMicro -gt $checkScoreSP_capacityThreshold ]]; then
		echo "Logic - MDPS Core Micro: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - checkScoreSP_mdpsCapacityMicro - $checkScoreSP_mdpsCapacityMicro" >>$HISTORYLOG
		checkScoreSP_warning="1"
		checkScoreSP_warningInfo="$checkScoreSP_problemInfo [MDPS(Micro) $checkScoreSP_mdpsCapacityMicro pct]"
	else
		echo "Logic - MDPS Core Micro: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkScoreSP_mdpsCapacityMicro - $checkScoreSP_mdpsCapacityMicro" >>$HISTORYLOG
		checkScoreSP_workingInfo="$checkScoreSP_workingInfo [MDPS(Micro) $checkScoreSP_mdpsCapacityMicro pct]"
	fi	
fi
checkScoreSP_workingInfo="$checkScoreSP_workingInfo [Drop Rate $checkScoreSP_dropTotalRate sec]"


#SYSLOG
if [[ $checkScoreSP_problem == "1" ]]; then
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "PROBLEM" "checkScoreSP_problemInfo" "VALUE=\"$checkScoreSP_problemInfo $checkScoreSP_warningInfo $checkScoreSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "PROBLEM" "checkScoreSP_problemInfo" "VALUE=\"$checkScoreSP_problemInfo $checkScoreSP_warningInfo $checkScoreSP_workingInfo\""
	fi
elif [[ $checkScoreSP_warning == "1" ]]; then
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "WARNING" "checkScoreSP_problemInfo" "VALUE=\"$checkScoreSP_warningInfo $checkScoreSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "WARNING" "checkScoreSP_problemInfo" "VALUE=\"$checkScoreSP_warningInfo $checkScoreSP_workingInfo\""
	fi
else
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "WORKING" "checkScoreSP_problemInfo" "VALUE=\"$checkScoreSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "WORKING" "checkScoreSP_problemInfo" "VALUE=\"$checkScoreSP_workingInfo\""
	fi
fi

sendSyslog "$functionName" "INFO" "checkScoreSP_capacityThreshold" "VALUE=\"$checkScoreSP_capacityThreshold\"" "SMO"
sendSyslog "$functionName" "INFO" "checkScoreSP_software" "VALUE=\"$checkScoreSP_software\"" "SMO"
sendSyslog "$functionName" "INFO" "checkScoreSP_platform" "VALUE=\"$checkScoreSP_platform\"" "SMO"
sendSyslog "$functionName" "INFO" "checkScoreSP_cpuFwworkerCapacityMacro" "VALUE=\"$checkScoreSP_cpuFwworkerCapacityMacro\"" "SMO"
sendSyslog "$functionName" "INFO" "checkScoreSP_cpuFwworkerCapacityMicro" "VALUE=\"$checkScoreSP_cpuFwworkerCapacityMicro\"" "SMO"
sendSyslog "$functionName" "INFO" "checkScoreSP_connsCurrentQty" "VALUE=\"$checkScoreSP_connsCurrentQty\"" "SMO"
sendSyslog "$functionName" "INFO" "checkScoreSP_connsCurrentRate" "VALUE=\"$checkScoreSP_connsCurrentRate\"" "SMO"
sendSyslog "$functionName" "INFO" "checkScoreSP_sndCapacityMacro" "VALUE=\"$checkScoreSP_sndCapacityMacro\"" "SMO"
sendSyslog "$functionName" "INFO" "checkScoreSP_sndCapacityMicro" "VALUE=\"$checkScoreSP_sndCapacityMicro\"" "SMO"
sendSyslog "$functionName" "INFO" "checkScoreSP_connsCurrentRateTemplatedQty" "VALUE=\"$checkScoreSP_connsCurrentRateTemplatedQty\"" "SMO"
sendSyslog "$functionName" "INFO" "checkScoreSP_connsCurrentRateNotTemplatedQty" "VALUE=\"$checkScoreSP_connsCurrentRateNotTemplatedQty\"" "SMO"
sendSyslog "$functionName" "INFO" "checkScoreSP_packetsCurrentRateAccelQty" "VALUE=\"$checkScoreSP_packetsCurrentRateAccelQty\"" "SMO"
sendSyslog "$functionName" "INFO" "checkScoreSP_packetsCurrentRateNotAccelQty" "VALUE=\"$checkScoreSP_packetsCurrentRateNotAccelQty\"" "SMO"
sendSyslog "$functionName" "INFO" "checkScoreSP_cpuSystemTotalUsage" "VALUE=\"$checkScoreSP_cpuSystemTotalUsage\"" "SMO"
sendSyslog "$functionName" "INFO" "checkScoreSP_connsCurrentRateQty" "VALUE=\"$checkScoreSP_connsCurrentRateQty\"" "SMO"
sendSyslog "$functionName" "INFO" "checkScoreSP_packetsCurrentRateQty" "VALUE=\"$checkScoreSP_packetsCurrentRateQty\"" "SMO"
sendSyslog "$functionName" "INFO" "checkScoreSP_throughput" "VALUE=\"$checkScoreSP_throughput\"" "SMO"
sendSyslog "$functionName" "INFO" "checkScoreSP_dropInterfaceRxRate" "VALUE=\"$checkScoreSP_dropInterfaceRxRate\"" "SMO"
sendSyslog "$functionName" "INFO" "checkScoreSP_dropInterfaceQdiscRate" "VALUE=\"$checkScoreSP_dropInterfaceQdiscRate\"" "SMO"
sendSyslog "$functionName" "INFO" "checkScoreSP_dropInterfaceRate" "VALUE=\"$checkScoreSP_dropInterfaceRate\"" "SMO"
sendSyslog "$functionName" "INFO" "checkScoreSP_dropSecurexlRate" "VALUE=\"$checkScoreSP_dropSecurexlRate\"" "SMO"
sendSyslog "$functionName" "INFO" "checkScoreSP_dropPolicyRate" "VALUE=\"$checkScoreSP_dropPolicyRate\"" "SMO"
sendSyslog "$functionName" "INFO" "checkScoreSP_dropPolicyIpsRate" "VALUE=\"$checkScoreSP_dropPolicyIpsRate\"" "SMO"
sendSyslog "$functionName" "INFO" "checkScoreSP_dropTotalRate" "VALUE=\"$checkScoreSP_dropTotalRate\"" "SMO"
if [[ $MDPSENABLED == "1" ]] || [[ $MDPSENABLED == "2" ]]; then
	sendSyslog "$functionName" "INFO" "checkScoreSP_mdpsCurQty" "VALUE=\"$checkScoreSP_mdpsCurQty\""
	sendSyslog "$functionName" "INFO" "checkScoreSP_mdpsCurTotal" "VALUE=\"$checkScoreSP_mdpsCurTotal\""
	sendSyslog "$functionName" "INFO" "checkScoreSP_mdpsCurAvg" "VALUE=\"$checkScoreSP_mdpsCurAvg\""
	sendSyslog "$functionName" "INFO" "checkScoreSP_mdpsCurFailQty" "VALUE=\"$checkScoreSP_mdpsCurFailQty\""
	sendSyslog "$functionName" "INFO" "checkScoreSP_mdpsCurFailMax" "VALUE=\"$checkScoreSP_mdpsCurFailMax\""
	sendSyslog "$functionName" "INFO" "checkScoreSP_mdpsCurFailMaxAvg" "VALUE=\"$checkScoreSP_mdpsCurFailMaxAvg\""
	sendSyslog "$functionName" "INFO" "checkScoreSP_mdpsCurFailInfo" "VALUE=\"$checkScoreSP_mdpsCurFailInfo\""
	sendSyslog "$functionName" "INFO" "checkScoreSP_mdpsCapacityMacro" "VALUE=\"$checkScoreSP_mdpsCapacityMacro\""
	sendSyslog "$functionName" "INFO" "checkScoreSP_mdpsCapacityMicro" "VALUE=\"$checkScoreSP_mdpsCapacityMicro\""
fi

#CLEANUP
rm $TEMPFILE $TEMPFILE2 $TEMPFILE_FULL $TEMPFILE_FULL_CPU $TEMPFILE_FULL2 $TEMPFILE_FWAFFINITY $TEMPFILE_MULTIK $TEMPFILE_PREV_EPOCHS_FULL $TEMPFILE_FULL.* > /dev/null 2>&1



checkScoreSP_fEnd=$(date "+%s")
checkScoreSP_fRunTime=$(( checkScoreSP_fEnd - checkScoreSP_fStart ))
echo "checkScoreSP_fRunTime $checkScoreSP_fRunTime" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_warning - $checkScoreSP_warning" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_problem - $checkScoreSP_problem" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_problemInfo - $checkScoreSP_problemInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_warningInfo - $checkScoreSP_warningInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_workingInfo - $checkScoreSP_workingInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkScoreSP_runTime - $checkScoreSP_fRunTime" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkScoreSP_warning" "VALUE=\"$checkScoreSP_warning\""
sendSyslog "$functionName" "INFO" "checkScoreSP_problem" "VALUE=\"$checkScoreSP_problem\""
sendSyslog "$functionName" "INFO" "checkScoreSP_problemInfo" "VALUE=\"$checkScoreSP_problemInfo\""
sendSyslog "$functionName" "INFO" "checkScoreSP_warningInfo" "VALUE=\"$checkScoreSP_warningInfo\""
sendSyslog "$functionName" "INFO" "checkScoreSP_workingInfo" "VALUE=\"$checkScoreSP_workingInfo\""
sendSyslog "$functionName" "INFO" "checkScoreSP_runTime" "VALUE=\"$checkScoreSP_fRunTime\""

#SUMMARY
if [[ $checkScoreSP_problem == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - checkScoreSP - SUMMARY - PROBLEM - $checkScoreSP_problemInfo $checkScoreSP_warningInfo $checkScoreSP_workingInfo" >>$HISTORYLOG
elif [[ $checkScoreSP_warning == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - checkScoreSP - SUMMARY - WARNING - $checkScoreSP_warningInfo $checkScoreSP_workingInfo" >>$HISTORYLOG
else
	echo "$HISTORYLOGPREAMBLE - checkScoreSP - SUMMARY - WORKING - $checkScoreSP_workingInfo" >>$HISTORYLOG
fi

echo "checkScoreSP_problem $checkScoreSP_problem" >>$RUNLOG
echo "END==checkScoreSP" >>$RUNLOG
}

###################################################################################################
checkApiSM(){
echo "START==checkApiSM" >>$RUNLOG

#DEFAULTS
checkApiSM_fStart=$(date "+%s")
functionName=${FUNCNAME[0]}
checkApiSM_warning="0"
checkApiSM_problem="0"
checkApiSM_workingInfo=""
checkApiSM_warningInfo=""
checkApiSM_problemInfo=""
TEMPFILE=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.raw
TEMPFILE2=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.processed
TEMPFILE3=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.status
TEMPFILE4=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.policytarget
TEMPFILE5=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.mdsstat
TEMPFILE_cpmiquerybin=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.cpmiquerybin
TEMPFILE_INVENTORY=$TEMPDIR/$SCRIPT.$functionName.inventory




#COLLECT OUTPUTS
touch $TEMPFILE2
api status > $TEMPFILE3
checkApiSM_apiOverall=$(cat $TEMPFILE3 | grep "Overall API Status" | awk -F ":" '{print $NF}' | tr -d ' ')
checkApiSM_apiReadiness=$(cat $TEMPFILE3 | grep "API readiness test" | awk '{print $4}' | tr -d '.')
checkApiSM_daemonApiState=$(cat $TEMPFILE3 | grep -A5 "PID" | grep "API" | awk '{print $2}')
checkApiSM_daemonApiPid=$(cat $TEMPFILE3 | grep -A5 "PID" | grep "API" | awk '{print $3}')
checkApiSM_daemonCpmState=$(cat $TEMPFILE3 | grep -A5 "PID" | grep "CPM" | awk '{print $2}')
checkApiSM_daemonCpmPid=$(cat $TEMPFILE3 | grep -A5 "PID" | grep "CPM" | awk '{print $3}')
checkApiSM_daemonFwmState=$(cat $TEMPFILE3 | grep -A5 "PID" | grep "FWM" | awk '{print $2}')
checkApiSM_daemonFwmPid=$(cat $TEMPFILE3 | grep -A5 "PID" | grep "FWM" | awk '{print $3}')
checkApiSM_daemonApacheState=$(cat $TEMPFILE3 | grep -A5 "PID" | grep "APACHE" | awk '{print $2}')
checkApiSM_daemonApachePid=$(cat $TEMPFILE3 | grep -A5 "PID" | grep "APACHE" | awk '{print $3}')
# checkApiSM_haSync=$(snmp .1.3.6.1.4.1.2620.1.7.101)
# checkApiSM_haSyncStatusShort=$(snmp .1.3.6.1.4.1.2620.1.7.102)
# checkApiSM_haSyncStatusLong=$(snmp .1.3.6.1.4.1.2620.1.7.103)
checkApiSM_haSync=$(stattestget 1.3.6.1.4.1.2620.1.7.101)
checkApiSM_haSyncStatusShort=$(stattestget 1.3.6.1.4.1.2620.1.7.102)
checkApiSM_haSyncStatusLong=$(stattestget 1.3.6.1.4.1.2620.1.7.103)
checkApiSM_postgresSizeCpm0=$(psql_client cpm postgres -c "SELECT pg_size_pretty(pg_database_size('cpm'));" | grep "GB\|MB\|TB" | awk '{print $2}')
if [[ $checkApiSM_postgresSizeCpm0 == "MB" ]]; then
	checkApiSM_postgresSizeCpm0=$(psql_client cpm postgres -c "SELECT pg_size_pretty(pg_database_size('cpm'));" | grep "MB" | awk '{print $1}')
	checkApiSM_postgresSizeCpm=$(echo "scale=0; $checkApiSM_postgresSizeCpm0 / 1000" | bc | awk -F "." '{print $1}')
else
	checkApiSM_postgresSizeCpm=$(psql_client cpm postgres -c "SELECT pg_size_pretty(pg_database_size('cpm'));" | grep "GB" | awk '{print $1}')
fi


if [[ $MGMTTYPE == "MDS" ]]; then

	if [[ $checkApiSM_apiReadiness == "" ]]; then
		sleep 20
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkApiSM_apiReadiness - Retry ($checkApiSM_apiReadiness)" >>$HISTORYLOGffw 
		api status > $TEMPFILE3
		checkApiSM_apiReadiness=$(cat $TEMPFILE3 | grep "API readiness test" | awk '{print $4}' | tr -d '.')
	fi
	if [[ $checkApiSM_apiReadiness == "" ]]; then
		checkApiSM_apiReadiness="FAILED"
	fi



	checkApiSM_sessionTotal="0"
	IFS=$'\n'
	for LINE in `psql_client cpm postgres -c "select applicationname, count(*) from worksession where state='OPEN' group by applicationname;" | grep -v "applicationname" | grep -v "\-\-" | grep -v "rows" | awk -F "|" '{print $1,$2}' | awk 'NF > 0'` ; do
		APPLICATION=$(echo "$LINE" | awk -F "  " '{print $1}' | tr -d ' ')
		QTY=$(echo "$LINE" | awk -F "  " '{print $NF}' | tr -d ' ')
		if [[ $APPLICATION == "" ]]; then
			APPLICATION="System"
		fi
		echo "checkApiSM_sessionDetail APPLICATION=$APPLICATION QTY=$QTY" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkApiSM_sessionDetail - APPLICATION=$APPLICATION QTY=$QTY" >>$HISTORYLOG
		IFS=$ORIGIFS
		sendSyslog "$functionName" "INFO" "checkApiSM_sessionDetail" "APPLICATION=\"$APPLICATION\" QTY=\"$QTY\""
		IFS=$'\n'
		let checkApiSM_sessionTotal=$checkApiSM_sessionTotal+$QTY
	done
	IFS=$ORIGIFS
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkApiSM_sessionTotal - $checkApiSM_sessionTotal" >>$HISTORYLOG
	sendSyslog "$functionName" "INFO" "checkApiSM_sessionTotal" "VALUE=\"$checkApiSM_sessionTotal\""
	
	#cat $MDS_FWDIR/log/api.csv | grep -v "##FWHealthCheck" | tail -10000 | awk -F "," '{print $1" "$2","$3","$4","$5","$6","$7","$8}'> $TEMPFILE
	
	# echo -e "FWHealthCheck_$EPOCH\n" >> $MDS_FWDIR/log/api.csv
	# FOUND=$(cat $MDS_FWDIR/log/api.csv | grep "FWHealthCheck_$LASTRUNEPOCH" | wc -l)
	# if [[ $FOUND -gt "0" ]]; then
		# sed -ne "/FWHealthCheck_$LASTRUNEPOCH/,$ p" $MDS_FWDIR/log/api.csv | grep -v "FWHealthCheck" | awk -F "," '{print $1" "$2","$3","$4","$5","$6","$7","$8}'> $TEMPFILE
	# fi
	
	LASTRUNCSVLASTLINE=$(cat $LASTRUNHISTORYLOGOUTPUT | grep "checkApiSM_csvLastLine" | awk -F " - " '{print $NF}' | awk '{print $1","$2}')
	if [[ $LASTRUNCSVLASTLINE == "," ]]; then
		LASTRUNCSVLASTLINE="n/a"
	fi
	FOUND=$(cat $MDS_FWDIR/log/api.csv | grep "$LASTRUNCSVLASTLINE" | wc -l)
	if [[ $FOUND -gt "0" ]]; then
		sed -ne "/$LASTRUNCSVLASTLINE/,$ p" $MDS_FWDIR/log/api.csv | awk -F "," '{print $1" "$2","$3","$4","$5","$6","$7","$8}'> $TEMPFILE
	else
		FOUND=$(cat $MDS_FWDIR/log/api.csv.1 | grep "$LASTRUNCSVLASTLINE" | wc -l)
		if [[ $FOUND -gt "0" ]]; then
			sed -ne "/$LASTRUNCSVLASTLINE/,$ p" $MDS_FWDIR/log/api.csv.1 | awk -F "," '{print $1" "$2","$3","$4","$5","$6","$7","$8}'> $TEMPFILE
			cat $MDS_FWDIR/log/api.csv | awk -F "," '{print $1" "$2","$3","$4","$5","$6","$7","$8}'>> $TEMPFILE
		fi
	fi
	#cat $MDS_FWDIR/log/api.csv | grep -v "##FWHealthCheck" | tail -10000 | awk -F "," '{print $1" "$2","$3","$4","$5","$6","$7","$8}'> $TEMPFILE
	if [[ -f $TEMPFILE ]]; then
		IFS=$'\n'
		for LINE in `cat $TEMPFILE` ; do
			DATE=$(date -d `echo "$LINE" | awk -F "," '{print $1}'` +"%s")
			USERAGENT=$(echo "$LINE" | awk -F "," '{print $2}' | tr ' ' '_')
			FROMIP=$(echo "$LINE" | awk -F "," '{print $3}')
			TOIP=$(echo "$LINE" | awk -F "," '{print $4}')
			FUNCTION=$(echo "$LINE" | awk -F "," '{print $5}')
			STATUS=$(echo "$LINE" | awk -F "," '{print $6}')
			TIME=$(echo "$LINE" | awk -F "," '{print $7}')
			
			if [[ $DATE -gt $LASTRUNEPOCH ]]; then
				echo "$DATE,$USERAGENT,$FROMIP,$TOIP,$FUNCTION,$STATUS,$TIME" >> $TEMPFILE2
			fi
		done
		IFS=$ORIGIFS

		CSVLASTLINE=$(tail -1 $TEMPFILE)
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkApiSM_csvLastLine - $CSVLASTLINE" >>$HISTORYLOG
	fi
	checkApiSM_totalQty=$(cat $TEMPFILE2 | wc -l)
	if [[ $checkApiSM_totalQty -gt 0 ]]; then
		checkApiSM_firstEntry=$(head -1 $TEMPFILE2 | awk -F "," '{print $1}')
		checkApiSM_lastEntry=$(tail -1 $TEMPFILE2 | awk -F "," '{print $1}')
		checkApiSM_elapsed=$(( checkApiSM_lastEntry - checkApiSM_firstEntry ))
		if [[ $checkApiSM_elapsed == "0" ]]; then
			checkApiSM_elapsed="1"
		fi
		checkApiSM_totalRate=$(( checkApiSM_totalQty / checkApiSM_elapsed ))

		#USERAGENT COUNT
		IFS=$'\n'
		for LINE in `cat $TEMPFILE2 | awk -F "," '{print $2}' | sort | uniq -c | sort -nr` ; do
			USERAGENT=$(echo "$LINE" | awk '{print $2}' | tr -d ' ')
			QTY=$(echo "$LINE" | awk '{print $1}' | tr -d ' ')

			checkApiSM_functionInfo="$checkApiSM_useragentInfo [$QTY/$USERAGENT]"
			
		done
		IFS=$ORIGIFS

		#FROMIP COUNT
		IFS=$'\n'
		for LINE in `cat $TEMPFILE2 | awk -F "," '{print $3}' | sort | uniq -c | sort -nr` ; do
			FROMIP=$(echo "$LINE" | awk '{print $2}' | tr -d ' ')
			QTY=$(echo "$LINE" | awk '{print $1}' | tr -d ' ')

			checkApiSM_functionInfo="$checkApiSM_fromipInfo [$QTY/$FROMIP]"
			
		done
		IFS=$ORIGIFS

		#TOIP COUNT
		IFS=$'\n'
		for LINE in `cat $TEMPFILE2 | awk -F "," '{print $4}' | sort | uniq -c | sort -nr` ; do
			TOIP=$(echo "$LINE" | awk '{print $2}' | tr -d ' ')
			QTY=$(echo "$LINE" | awk '{print $1}' | tr -d ' ')

			checkApiSM_functionInfo="$checkApiSM_toipInfo [$QTY/$TOIP]"
			
		done
		IFS=$ORIGIFS
		
		#FUNCTION COUNT
		IFS=$'\n'
		for LINE in `cat $TEMPFILE2 | awk -F "," '{print $5}' | sort | uniq -c | sort -nr` ; do
			FUNCTION=$(echo "$LINE" | awk '{print $2}' | tr -d ' ')
			QTY=$(echo "$LINE" | awk '{print $1}' | tr -d ' ')

			checkApiSM_functionInfo="$checkApiSM_functionInfo [$QTY/$FUNCTION]"
			
		done
		IFS=$ORIGIFS

		#STATUS COUNT
		IFS=$'\n'
		for LINE in `cat $TEMPFILE2 | awk -F "," '{print $6}' | sort | uniq -c | sort -nr` ; do
			STATUS=$(echo "$LINE" | awk '{print $2}' | tr -d ' ')
			QTY=$(echo "$LINE" | awk '{print $1}' | tr -d ' ')

			checkApiSM_statusInfo="$checkApiSM_statusInfo [$QTY/$STATUS]"
		done
		IFS=$ORIGIFS

		#TIME COUNT
		checkApiSM_timeTotal="0"
		IFS=$'\n'
		for LINE in `cat $TEMPFILE2` ; do
			TIME=$(echo "$LINE" | awk -F "," '{print $7}' | tr -d ' ')

			checkApiSM_timeTotal=$(( checkApiSM_timeTotal + TIME ))

		done
		IFS=$ORIGIFS


		checkApiSM_timeAverage=$(( checkApiSM_timeTotal / checkApiSM_totalQty ))
		
	else
		checkApiSM_totalRate="0"
		checkApiSM_timeAverage="0"
	fi
		
	checkApiSM_problemInfo="$checkApiSM_problemInfo [Total Rate: $checkApiSM_totalRate/sec]"
	checkApiSM_problemInfo="$checkApiSM_problemInfo [Avg Time: $checkApiSM_timeAverage secs]"
fi


if [[ $MGMTTYPE == "MDS" ]] || [[ $MGMTTYPE == "MLM" ]]; then
	for LINE in `ls -al $MDSDIR/customers/ | awk '{print $NF}' | grep "CP"` ; do
	mdsstat $LINE | grep "CMA" > $TEMPFILE5
		IPADDR=$(cat $TEMPFILE5 | awk -F "|" '{print $4}' | tr -d ' ')
		STATUSFWM=$(cat $TEMPFILE5 | awk -F "|" '{print $5}' | awk '{print $1}')
		PIDFWM=$(cat $TEMPFILE5 | awk -F "|" '{print $5}' | awk '{print $NF}')
		STATUSFWMHA=$(cat $TEMPFILE5 | awk -F "|" '{print $6}' | awk '{print $1}')
		PIDFWMHA=$(cat $TEMPFILE5 | awk -F "|" '{print $6}' | awk '{print $NF}')
		STATUSFWD=$(cat $TEMPFILE5 | awk -F "|" '{print $7}' | awk '{print $1}')
		PIDFWD=$(cat $TEMPFILE5 | awk -F "|" '{print $7}' | awk '{print $NF}')
		STATUSCPD=$(cat $TEMPFILE5 | awk -F "|" '{print $8}' | awk '{print $1}')
		PIDCPD=$(cat $TEMPFILE5 | awk -F "|" '{print $8}' | awk '{print $NF}')
		if [[ $MGMTTYPE == "MDS" ]]; then
			if [[ $STATUSFWM != "up" ]] || [[ $STATUSFWMHA != "up" ]] || [[ $STATUSFWD != "up" ]] || [[ $STATUSCPD != "up" ]]; then
				echo "Logic - MDSSSTAT STATUS: FAIL" >>$RUNLOG
				echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - checkApiSM_mdsstat - $LINE (FWM=$STATUSFWM FWMHA=$STATUSFWMHA FWD=$STATUSFWD CPD=$STATUSCPD)" >>$HISTORYLOG
				checkApiSM_problemInfo="$checkApiSM_problemInfo [Domain Problem ($LINE - FWM=$STATUSFWM FWMHA=$STATUSFWMHA FWD=$STATUSFWD CPD=$STATUSCPD)]"
				checkApiSM_problem="1"
			else
				echo "Logic - MDSSSTAT STATUS: PASS" >>$RUNLOG
				echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkApiSM_mdsstat - $LINE (FWM=$STATUSFWM FWMHA=$STATUSFWMHA FWD=$STATUSFWD CPD=$STATUSCPD)" >>$HISTORYLOG
			fi
		elif [[ $MGMTTYPE == "MLM" ]]; then
			if [[ $STATUSFWM != "up" ]] || [[ $STATUSFWD != "up" ]] || [[ $STATUSCPD != "up" ]]; then
				echo "Logic - MDSSSTAT STATUS: FAIL" >>$RUNLOG
				echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - checkApiSM_mdsstat - $LINE (FWM=$STATUSFWM FWD=$STATUSFWD CPD=$STATUSCPD)" >>$HISTORYLOG
				checkApiSM_problemInfo="$checkApiSM_problemInfo [Domain Problem ($LINE - FWM=$STATUSFWM FWD=$STATUSFWD CPD=$STATUSCPD)]"
				checkApiSM_problem="1"
			else
				echo "Logic - MDSSSTAT STATUS: PASS" >>$RUNLOG
				echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkApiSM_mdsstat - $LINE (FWM=$STATUSFWM FWMHA=$STATUSFWMHA FWD=$STATUSFWD CPD=$STATUSCPD)" >>$HISTORYLOG
			fi			
		fi
		echo "checkApiSM_mdsstat CMA=$LINE IPADDR=$IPADDR STATUSFWM=$STATUSFWM PIDFWM=$PIDFWM STATUSFWMHA=$STATUSFWMHA PIDFWMHA=$PIDFWMHA STATUSFWD=$STATUSFWD PIDFWD=$PIDFWD STATUSCPD=$STATUSCPD PIDCPD=$PIDCPD" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkApiSM_mdsstat - CMA=$LINE IPADDR=$IPADDR STATUSFWM=$STATUSFWM PIDFWM=$PIDFWM STATUSFWMHA=$STATUSFWMHA PIDFWMHA=$PIDFWMHA STATUSFWD=$STATUSFWD PIDFWD=$PIDFWD STATUSCPD=$STATUSCPD PIDCPD=$PIDCPD" >>$HISTORYLOG
		sendSyslog "$functionName" "INFO" "checkApiSM_mdsstat" "CMA=\"$LINE\" IPADDR=\"$IPADDR\" STATUSFWM=\"$STATUSFWM\" PIDFWM=\"$PIDFWM\" STATUSFWMHA=\"$STATUSFWMHA\" PIDFWMHA=\"$PIDFWMHA\" STATUSFWD=\"$STATUSFWD\" PIDFWD=\"$PIDFWD\" STATUSCPD=\"$STATUSCPD\" PIDCPD=\"$PIDCPD\""
	done
	
	mdsstat -m | grep "MDS" > $TEMPFILE5
	IPADDR=$(cat $TEMPFILE5 | awk -F "|" '{print $4}' | tr -d ' ')
	STATUSFWM=$(cat $TEMPFILE5 | awk -F "|" '{print $5}' | awk '{print $1}')
	PIDFWM=$(cat $TEMPFILE5 | awk -F "|" '{print $5}' | awk '{print $NF}')
	STATUSFWMHA=$(cat $TEMPFILE5 | awk -F "|" '{print $6}' | awk '{print $1}')
	PIDFWMHA=$(cat $TEMPFILE5 | awk -F "|" '{print $6}' | awk '{print $NF}')
	STATUSFWD=$(cat $TEMPFILE5 | awk -F "|" '{print $7}' | awk '{print $1}')
	PIDFWD=$(cat $TEMPFILE5 | awk -F "|" '{print $7}' | awk '{print $NF}')
	STATUSCPD=$(cat $TEMPFILE5 | awk -F "|" '{print $8}' | awk '{print $1}')
	PIDCPD=$(cat $TEMPFILE5 | awk -F "|" '{print $8}' | awk '{print $NF}')
	if [[ $STATUSFWM != "up" ]] || [[ $STATUSFWMHA != "up" ]] || [[ $STATUSFWD != "up" ]] || [[ $STATUSCPD != "up" ]]; then
		echo "Logic - MDSSSTAT STATUS: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - checkApiSM_mdsstat - GLOBAL_LEVEL (FWM=$STATUSFWM FWMHA=$STATUSFWMHA FWD=$STATUSFWD CPD=$STATUSCPD)" >>$HISTORYLOG
		checkApiSM_problemInfo="$checkApiSM_problemInfo [Domain Problem (GLOBAL_LEVEL - FWM=$STATUSFWM FWMHA=$STATUSFWMHA FWD=$STATUSFWD CPD=$STATUSCPD)]"
		checkApiSM_problem="1"
	else
		echo "Logic - MDSSSTAT STATUS: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkApiSM_mdsstat - GLOBAL_LEVEL (FWM=$STATUSFWM FWMHA=$STATUSFWMHA FWD=$STATUSFWD CPD=$STATUSCPD)" >>$HISTORYLOG
	fi
	echo "checkApiSM_mdsstat CMA=GLOBAL_LEVEL IPADDR=$IPADDR STATUSFWM=$STATUSFWM PIDFWM=$PIDFWM STATUSFWMHA=$STATUSFWMHA PIDFWMHA=$PIDFWMHA STATUSFWD=$STATUSFWD PIDFWD=$PIDFWD STATUSCPD=$STATUSCPD PIDCPD=$PIDCPD" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkApiSM_mdsstat - CMA=GLOBAL_LEVEL IPADDR=$IPADDR STATUSFWM=$STATUSFWM PIDFWM=$PIDFWM STATUSFWMHA=$STATUSFWMHA PIDFWMHA=$PIDFWMHA STATUSFWD=$STATUSFWD PIDFWD=$PIDFWD STATUSCPD=$STATUSCPD PIDCPD=$PIDCPD" >>$HISTORYLOG
	sendSyslog "$functionName" "INFO" "checkApiSM_mdsstat" "CMA=\"GLOBAL_LEVEL\" IPADDR=\"$IPADDR\" STATUSFWM=\"$STATUSFWM\" PIDFWM=\"$PIDFWM\" STATUSFWMHA=\"$STATUSFWMHA\" PIDFWMHA=\"$PIDFWMHA\" STATUSFWD=\"$STATUSFWD\" PIDFWD=\"$PIDFWD\" STATUSCPD=\"$STATUSCPD\" PIDCPD=\"$PIDCPD\""

	rm $TEMPFILE5
fi


if [[ $MGMTTYPE == "MDS" ]]; then
	mdsenv
	$MDSDIR/bin/cpmiquerybin attr "mdsdb" network_objects "type='host'" -a hosted_by_mds 2>&1 | sort | uniq | grep -v "MISSING_ATTR" | tr -d "'" | grep -v -e '^[[:space:]]*$' > $TEMPFILE_cpmiquerybin
	#cat $TEMPFILE_cpmiquerybin
	FAILED=$(cat $TEMPFILE_cpmiquerybin | grep "Error\|Failed" | wc -l)
	if [[ $FAILED -gt "0" ]]; then
		echo "Logic - Remote Ping: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - checkApiSM_remotePing - cpmiquerybin failed to run" >>$HISTORYLOG
		sendSyslog "$functionName" "PROBLEM" "checkApiSM_remotePing" "VALUE=\"cpmiquerybin failed to run\""
		checkApiSM_warningInfo="$checkApiSM_warningInfo [Remote Ping Tests Failed (cpmiquerybin)]"
		checkApiSM_warning="1"
	else
		IFS=$'\n'
		for LINE in `cat $TEMPFILE_cpmiquerybin` ; do
			LINE=$(echo "$LINE" | tr -d '[:blank:]')
			if [[ $LINE != $HOSTNAME ]]; then
				PINGLOSSPCT=$(ping $LINE -c 1 | grep "packets transmitted" | awk -F "," '{print $3}' | awk -F "%" '{print $1}' | tr -d ' ')
				if [[ $PINGLOSSPCT == "0" ]]; then
					echo "Logic - Remote Ping: PASS" >>$RUNLOG
					echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkApiSM_remotePing - $HOSTNAME to $LINE Ping Loss $PINGLOSSPCT %" >>$HISTORYLOG
					IFS=$ORIGIFS
					sendSyslog "$functionName" "WORKING" "checkApiSM_remotePing" "REMOTE_HOST=\"$LINE\" VALUE=\"$PINGLOSSPCT\""
					IFS=$'\n'
				else
					echo "Logic - Remote Ping: FAIL" >>$RUNLOG
					echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - checkApiSM_remotePing - $HOSTNAME to $LINE Ping Loss $PINGLOSSPCT %" >>$HISTORYLOG
					IFS=$ORIGIFS
					sendSyslog "$functionName" "PROBLEM" "checkApiSM_remotePing" "REMOTE_HOST=\"$LINE\" VALUE=\"$PINGLOSSPCT\""
					IFS=$'\n'
					checkApiSM_problemInfo="$checkApiSM_problemInfo [Remote Ping Failed ($LINE)]"
					checkApiSM_problem="1"
				fi
			fi
		done
		IFS=$ORIGIFS
	fi
fi



# Inventory
if [[ $MGMTTYPE == "MDS" ]] && [[ $MGMTPRIMARY -eq "1" ]]; then
	if [[ -f $TEMPFILE_INVENTORY ]]; then
		LASTRUN_INVENTORY_EPOCH=$(cat $TEMPFILE_INVENTORY | awk -F "," '{print $1}' | sort -n | uniq | head -1)
	else
		LASTRUN_INVENTORY_EPOCH="0"
	fi
	if [[ $LASTRUN_INVENTORY_EPOCH -lt $EPOCHMINUS3600 ]]; then
		rm $TEMPFILE_INVENTORY > /dev/null 2>&1
		IFS=$'\n'
		for DOMAIN in `ls -1 $MDSDIR/customers` ; do
			mdsenv $DOMAIN > /dev/null 2>&1
			cpmiquerybin attr "" network_objects "type='gateway'|type='gateway_cluster'" -a __name__,appliance_type,ipaddr | tr '\t' ',' | sed 's/,\([^,]*\)$/ \1/' > $TEMPFILE
			for LINE in `cat $TEMPFILE`; do
				C_NAME=$(echo $LINE | awk -F "," '{print $1}')
				PLATFORM=$(echo $LINE | awk -F "," '{print $2}')
				IPADDR=$(echo $LINE | awk -F "," '{print $3}' | tr -d '[:space:]')
				
				if [[ $PLATFORM == "16000 Appliances" ]] || [[ $PLATFORM == "23000 Appliances" ]] || [[ $PLATFORM == "29000 Appliances" ]] || [[ $PLATFORM == "CloudGuard IaaS" ]] || [[ $PLATFORM == "Other" ]]; then
					CLUSTER_MEMBERS=$(cpmiquerybin attr "" network_objects "name='$C_NAME'" -a cluster_members | awk '{print $2,$6}' | tr ' ' '\n')
					if [[ $CLUSTER_MEMBERS == "" ]];then
						H_NAME=$(echo $C_NAME | awk -F "-" '{print $1}' | tr '[:upper:]' '[:lower:]')
						echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkApiSM_fwInventory - DOMAIN=$DOMAIN C_NAME=$C_NAME H_NAME=$H_NAME IPADDR=$IPADDR PLATFORM=$PLATFORM" >>$HISTORYLOG
						IFS=$ORIGIFS
						sendSyslog "$functionName" "INFO" "checkApiSM_fwInventory" "DOMAIN=\"$DOMAIN\" C_NAME=\"$C_NAME\" H_NAME=\"$H_NAME\" IPADDR=\"$IPADDR\" PLATFORM=\"$PLATFORM\""
						IFS=$'\n'
						echo "$EPOCH,$DOMAIN,$C_NAME,$H_NAME,$IPADDR,$PLATFORM" >> $TEMPFILE_INVENTORY
					else
						for MEMBER in $CLUSTER_MEMBERS; do
							H_NAME=$(echo $MEMBER | awk -F "-" '{print $1}' | tr '[:upper:]' '[:lower:]')
							IPADDR=$(cpmiquerybin attr "" network_objects "name='$MEMBER'" -a ipaddr | tr -d '[:space:]')
							echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkApiSM_fwInventory - DOMAIN=$DOMAIN C_NAME=$C_NAME H_NAME=$H_NAME IPADDR=$IPADDR PLATFORM=$PLATFORM" >>$HISTORYLOG
							IFS=$ORIGIFS
							sendSyslog "$functionName" "INFO" "checkApiSM_fwInventory" "DOMAIN=\"$DOMAIN\" C_NAME=\"$C_NAME\" H_NAME=\"$H_NAME\" IPADDR=\"$IPADDR\" PLATFORM=\"$PLATFORM\""
							IFS=$'\n'
							echo "$EPOCH,$DOMAIN,$C_NAME,$H_NAME,$IPADDR,$PLATFORM" >> $TEMPFILE_INVENTORY
						done
					fi
				elif [[ $PLATFORM == "64000 Appliances" ]]; then
					H_NAME=$(echo $C_NAME | awk -F "-" '{print $1}' | tr '[:upper:]' '[:lower:]')
					echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkApiSM_fwInventory - DOMAIN=$DOMAIN C_NAME=$C_NAME H_NAME=$H_NAME IPADDR=$IPADDR PLATFORM=$PLATFORM" >>$HISTORYLOG
					IFS=$ORIGIFS
					sendSyslog "$functionName" "INFO" "checkApiSM_fwInventory" "DOMAIN=\"$DOMAIN\" C_NAME=\"$C_NAME\" H_NAME=\"$H_NAME\" IPADDR=\"$IPADDR\" PLATFORM=\"$PLATFORM\""
					IFS=$'\n'
					echo "$EPOCH,$DOMAIN,$C_NAME,$H_NAME,$IPADDR,$PLATFORM" >> $TEMPFILE_INVENTORY
				elif [[ $PLATFORM == "Maestro Gateway" ]]; then
					H_NAME=$(echo $C_NAME | awk -F "_" '{print $1}' | tr '[:upper:]' '[:lower:]')
					echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkApiSM_fwInventory - DOMAIN=$DOMAIN C_NAME=$C_NAME H_NAME=$H_NAME IPADDR=$IPADDR PLATFORM=$PLATFORM" >>$HISTORYLOG
					IFS=$ORIGIFS
					sendSyslog "$functionName" "INFO" "checkApiSM_fwInventory" "DOMAIN=\"$DOMAIN\" C_NAME=\"$C_NAME\" H_NAME=\"$H_NAME\" IPADDR=\"$IPADDR\" PLATFORM=\"$PLATFORM\""
					IFS=$'\n'
					echo "$EPOCH,$DOMAIN,$C_NAME,$H_NAME,$IPADDR,$PLATFORM" >> $TEMPFILE_INVENTORY
				else
					H_NAME=$(echo $C_NAME | awk -F "-" '{print $1}' | tr '[:upper:]' '[:lower:]')
					echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkApiSM_fwInventory - DOMAIN=$DOMAIN C_NAME=$C_NAME H_NAME=$H_NAME IPADDR=$IPADDR PLATFORM=$PLATFORM" >>$HISTORYLOG
					IFS=$ORIGIFS
					sendSyslog "$functionName" "INFO" "checkApiSM_fwInventory" "DOMAIN=\"$DOMAIN\" C_NAME=\"$C_NAME\" H_NAME=\"$H_NAME\" IPADDR=\"$IPADDR\" PLATFORM=\"$PLATFORM\""
					IFS=$'\n'
					echo "$EPOCH,$DOMAIN,$C_NAME,$H_NAME,$IPADDR,$PLATFORM" >> $TEMPFILE_INVENTORY
				fi			
			done
		done
		IFS=$ORIGIFS
	fi
else
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkApiSM_fwInventory - skipped, last run $LASTRUN_INVENTORY_EPOCH" >>$HISTORYLOG
fi

#LOG OUTPUTS
echo "checkApiSM_totalQty $checkApiSM_totalQty" >>$RUNLOG
echo "checkApiSM_totalRate $checkApiSM_totalRate" >>$RUNLOG
echo "checkApiSM_functionInfo $checkApiSM_functionInfo" >>$RUNLOG
echo "checkApiSM_statusInfo $checkApiSM_statusInfo" >>$RUNLOG
echo "checkApiSM_timeAverage $checkApiSM_timeAverage" >>$RUNLOG
echo "checkApiSM_apiOverall $checkApiSM_apiOverall" >>$RUNLOG
echo "checkApiSM_apiReadiness $checkApiSM_apiReadiness" >>$RUNLOG
echo "checkApiSM_daemonApiState $checkApiSM_daemonApiState" >>$RUNLOG
echo "checkApiSM_daemonApiPid $checkApiSM_daemonApiPid" >>$RUNLOG
echo "checkApiSM_daemonCpmState $checkApiSM_daemonCpmState" >>$RUNLOG
echo "checkApiSM_daemonCpmPid $checkApiSM_daemonCpmPid" >>$RUNLOG
echo "checkApiSM_daemonFwmState $checkApiSM_daemonFwmState" >>$RUNLOG
echo "checkApiSM_daemonFwmPid $checkApiSM_daemonFwmPid" >>$RUNLOG
echo "checkApiSM_daemonApacheState $checkApiSM_daemonApacheState" >>$RUNLOG
echo "checkApiSM_daemonApachePid $checkApiSM_daemonApachePid" >>$RUNLOG
echo "checkApiSM_postgresSizeCpm $checkApiSM_postgresSizeCpm" >>$RUNLOG


echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkApiSM_totalQty - $checkApiSM_totalQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkApiSM_totalRate - $checkApiSM_totalRate" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkApiSM_useragentInfo - $checkApiSM_useragentInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkApiSM_fromipInfo - $checkApiSM_fromipInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkApiSM_toipInfo - $checkApiSM_toipInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkApiSM_functionInfo - $checkApiSM_functionInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkApiSM_statusInfo - $checkApiSM_statusInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkApiSM_timeAverage - $checkApiSM_timeAverage" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkApiSM_apiOverall - $checkApiSM_apiOverall" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkApiSM_apiReadiness - $checkApiSM_apiReadiness" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkApiSM_daemonApiState - $checkApiSM_daemonApiState" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkApiSM_daemonApiPid - $checkApiSM_daemonApiPid" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkApiSM_daemonCpmState - $checkApiSM_daemonCpmState" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkApiSM_daemonCpmPid - $checkApiSM_daemonCpmPid" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkApiSM_daemonFwmState - $checkApiSM_daemonFwmState" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkApiSM_daemonFwmPid - $checkApiSM_daemonFwmPid" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkApiSM_daemonApacheState - $checkApiSM_daemonApacheState" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkApiSM_daemonApachePid - $checkApiSM_daemonApachePid" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkApiSM_postgresSizeCpm - $checkApiSM_postgresSizeCpm" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkApiSM_haSync - $checkApiSM_haSync" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkApiSM_haSyncStatusShort - $checkApiSM_haSyncStatusShort" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkApiSM_haSyncStatusLong - $checkApiSM_haSyncStatusLong" >>$HISTORYLOG


#RUN LOGIC
if [[ $checkApiSM_daemonCpmState != "Started" ]]; then
	echo "Logic - CPM Daemon: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - checkApiSM_daemonCpmState - $checkApiSM_daemonCpmState" >>$HISTORYLOG
	checkApiSM_problemInfo="$checkApiSM_problemInfo [CPM Daemon ($checkApiSM_daemonCpmState)]"
	checkApiSM_problem="1"
else
	echo "Logic - CPM Daemon: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkApiSM_daemonCpmState - $checkApiSM_daemonCpmState" >>$HISTORYLOG
fi


if [[ $checkApiSM_haSync == "2" ]]; then
	echo "Logic - HA Sync: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - checkApiSM_haSync - $checkApiSM_haSync" >>$HISTORYLOG
	checkApiSM_problemInfo="$checkApiSM_problemInfo [HA Sync ($checkApiSM_haSyncStatusLong)]"
	checkApiSM_problem="1"
elif [[ $checkApiSM_haSync == "1" ]]; then
	echo "Logic - HA Sync: WARNING" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - checkApiSM_haSync - $checkApiSM_haSync" >>$HISTORYLOG
	checkApiSM_warningInfo="$checkApiSM_warningInfo [HA Sync ($checkApiSM_haSync checkApiSM_haSyncStatusShort $checkApiSM_haSyncStatusLong)]"
	checkApiSM_warning="1"
else
	echo "Logic - HA Sync: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkApiSM_haSync - $checkApiSM_haSync" >>$HISTORYLOG
fi


if [[ $MGMTTYPE == "MDS" ]]; then
	if [[ $checkApiSM_timeAverage -gt "10000" ]]; then
		echo "Logic - Average Time: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - checkApiSM_timeAverage - $checkApiSM_timeAverage" >>$HISTORYLOG
		checkApiSM_workingInfo="$checkApiSM_workingInfo [Avg Execution Time High ($checkApiSM_timeAverage ms)]"
		#checkApiSM_problem="1"
	else
		echo "Logic - Average Time: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkApiSM_timeAverage - $checkApiSM_timeAverage" >>$HISTORYLOG
	fi
	if [[ $checkApiSM_apiOverall != "Started" ]]; then
		echo "Logic - API Overall Status: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - checkApiSM_apiOverall - $checkApiSM_apiOverall" >>$HISTORYLOG
		checkApiSM_problemInfo="$checkApiSM_problemInfo [Status ($checkApiSM_apiOverall)]"
		checkApiSM_problem="1"
	else
		echo "Logic - API Overall Status: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkApiSM_apiOverall - $checkApiSM_apiOverall" >>$HISTORYLOG
	fi
	if [[ $checkApiSM_apiReadiness != "SUCCESSFUL" ]]; then
		echo "Logic - API Readiness Status: FAIL" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - checkApiSM_apiReadiness - $checkApiSM_apiReadiness" >>$HISTORYLOG
		checkApiSM_problemInfo="$checkApiSM_problemInfo [Readiness Test ($checkApiSM_apiReadiness)]"
		checkApiSM_problem="1"
	else
		echo "Logic - API Readiness Status: PASS" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkApiSM_apiReadiness - $checkApiSM_apiReadiness" >>$HISTORYLOG
	fi
	# if [[ $checkApiSM_sessionWebapiSmartConsoleZeroLockZeroChanges -ge "200" ]]; then
		# echo "Logic - WebApi Sessions Without Changes: FAIL" >>$RUNLOG
		# echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - checkApiSM_sessionWebapiSmartConsoleZeroLockZeroChanges - $checkApiSM_sessionWebapiSmartConsoleZeroLockZeroChanges" >>$HISTORYLOG
		# checkApiSM_problemInfo="$checkApiSM_problemInfo [Disconnected SmartConsole or WebApi Sessions ($checkApiSM_sessionWebapiSmartConsoleZeroLockZeroChanges)]"
		# checkApiSM_problem="1"
	# else
		# echo "Logic - WebApi Sessions Without Changes: PASS" >>$RUNLOG
		# echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - checkApiSM_sessionWebapiSmartConsoleZeroLockZeroChanges - $checkApiSM_sessionWebapiSmartConsoleZeroLockZeroChanges" >>$HISTORYLOG
	# fi
fi



#SYSLOG
if [[ $checkApiSM_problem == "1" ]]; then
	sendSyslog "$functionName" "PROBLEM" "checkApiSM_problemInfo" "VALUE=\"$checkApiSM_problemInfo $checkApiSM_warningInfo $checkApiSM_workingInfo\""
elif [[ $checkApiSM_warning == "1" ]]; then
	sendSyslog "$functionName" "WARNING" "checkApiSM_warningInfo" "VALUE=\"$checkApiSM_warningInfo $checkApiSM_workingInfo\""	
else
	sendSyslog "$functionName" "WORKING" "checkApiSM_workingInfo" "VALUE=\"$checkApiSM_workingInfo\""
fi

if [[ $MGMTTYPE == "MDS" ]]; then
	sendSyslog "$functionName" "INFO" "checkApiSM_totalQty" "VALUE=\"$checkApiSM_totalQty\""
	sendSyslog "$functionName" "INFO" "checkApiSM_totalRate" "VALUE=\"$checkApiSM_totalRate\""
	sendSyslog "$functionName" "INFO" "checkApiSM_useragentInfo" "VALUE=\"$checkApiSM_useragentInfo\""
	sendSyslog "$functionName" "INFO" "checkApiSM_fromipInfo" "VALUE=\"$checkApiSM_fromipInfo\""
	sendSyslog "$functionName" "INFO" "checkApiSM_toipInfo" "VALUE=\"$checkApiSM_toipInfo\""
	sendSyslog "$functionName" "INFO" "checkApiSM_functionInfo" "VALUE=\"$checkApiSM_functionInfo\""
	sendSyslog "$functionName" "INFO" "checkApiSM_statusInfo" "VALUE=\"$checkApiSM_statusInfo\""
	sendSyslog "$functionName" "INFO" "checkApiSM_timeAverage" "VALUE=\"$checkApiSM_timeAverage\""
fi
# sendSyslog "$functionName" "INFO" "checkApiSM_sessionWebapiZeroLockZeroChanges" "VALUE=\"$checkApiSM_sessionWebapiZeroLockZeroChanges\""
# sendSyslog "$functionName" "INFO" "checkApiSM_sessionWebapiSmartConsoleZeroLockZeroChanges" "VALUE=\"$checkApiSM_sessionWebapiSmartConsoleZeroLockZeroChanges\""
# sendSyslog "$functionName" "INFO" "checkApiSM_sessionWebapiSmartConsoleZeroLockZeroChangesInworkFalse" "VALUE=\"$checkApiSM_sessionWebapiSmartConsoleZeroLockZeroChangesInworkFalse\""
sendSyslog "$functionName" "INFO" "checkApiSM_postgresSizeCpm" "VALUE=\"$checkApiSM_postgresSizeCpm\""
sendSyslog "$functionName" "INFO" "checkApiSM_haSync" "VALUE=\"$checkApiSM_haSync\""
sendSyslog "$functionName" "INFO" "checkApiSM_haSyncStatusShort" "VALUE=\"$checkApiSM_haSyncStatusShort\""
sendSyslog "$functionName" "INFO" "checkApiSM_haSyncStatusLong" "VALUE=\"$checkApiSM_haSyncStatusLong\""


#CLEANUP
rm $TEMPFILE $TEMPFILE2 $TEMPFILE3 $TEMPFILE4 $TEMPFILE5 $TEMPFILE_cpmiquerybin> /dev/null 2>&1

checkApiSM_fEnd=$(date "+%s")
checkApiSM_fRunTime=$(( checkApiSM_fEnd - checkApiSM_fStart ))
echo "checkApiSM_fRunTime $checkApiSM_fRunTime" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkApiSM_warning - $checkApiSM_warning" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkApiSM_problem - $checkApiSM_problem" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkApiSM_problemInfo - $checkApiSM_problemInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkApiSM_warningInfo - $checkApiSM_warningInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkApiSM_workingInfo - $checkApiSM_workingInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkApiSM_runTime - $checkApiSM_fRunTime" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkApiSM_warning" "VALUE=\"$checkApiSM_warning\""
sendSyslog "$functionName" "INFO" "checkApiSM_problem" "VALUE=\"$checkApiSM_problem\""
sendSyslog "$functionName" "INFO" "checkApiSM_problemInfo" "VALUE=\"$checkApiSM_problemInfo\""
sendSyslog "$functionName" "INFO" "checkApiSM_warningInfo" "VALUE=\"$checkApiSM_warningInfo\""
sendSyslog "$functionName" "INFO" "checkApiSM_workingInfo" "VALUE=\"$checkApiSM_workingInfo\""
sendSyslog "$functionName" "INFO" "checkApiSM_runTime" "VALUE=\"$checkApiSM_fRunTime\""
echo "checkApiSM_problem $checkApiSM_problem" >>$RUNLOG
echo "END==checkApiSM" >>$RUNLOG
}

###################################################################################################
checkVsx(){
echo "START==checkVsx" >>$RUNLOG

#DEFAULTS
checkVsx_fStart=$(date "+%s")
functionName=${FUNCNAME[0]}
checkVsx_warning="0"
checkVsx_problem="0"
checkVsx_workingInfo=""
checkVsx_warningInfo=""
checkVsx_problemInfo=""

#COLLECT OUTPUTS
checkVsx_overallStatus="0"
checkVsx_vsQty=$(cat $VSXSTAT | awk -F "|" '{print $2}' | grep " S " | wc -l)
checkVsx_vsNames=$(cat $VSXSTAT | awk -F "|" '{print $2}' | grep " S " | awk '{print $NF}' | tr '\n' ' ')
checkVsx_vswQty=$(cat $VSXSTAT | awk -F "|" '{print $2}' | grep " W " | wc -l)
checkVsx_vswNames=$(cat $VSXSTAT | awk -F "|" '{print $2}' | grep " W " | awk '{print $NF}' | tr '\n' ' ')


#LOG OUTPUTS
echo "checkVsx_overallStatus $checkVsx_overallStatus" >>$RUNLOG
echo "checkVsx_vsQty $checkVsx_vsQty" >>$RUNLOG
echo "checkVsx_vsNames $checkVsx_vsNames" >>$RUNLOG
echo "checkVsx_vswQty $checkVsx_vswQty" >>$RUNLOG
echo "checkVsx_vswNames $checkVsx_vswNames" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkVsx_overallStatus - $checkVsx_overallStatus" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkVsx_vsQty - $checkVsx_vsQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkVsx_vsNames - $checkVsx_vsNames" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkVsx_vswQty - $checkVsx_vswQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkVsx_vswNames - $checkVsx_vswNames" >>$HISTORYLOG

#RUN LOGIC
if [[ $checkVsx_overallStatus != "0" ]]; then
	echo "Logic - overallStatus: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Overall status - $checkVsx_overallStatus" >>$HISTORYLOG
	checkVsx_problem="1"
else
	echo "Logic - overallStatus: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Overall status - $checkVsx_overallStatus" >>$HISTORYLOG
fi

#SYSLOG
if [[ $checkVsx_problem == "1" ]]; then
	sendSyslog "$functionName" "PROBLEM" "checkVsx_problemInfo" "VALUE=\"$checkVsx_problemInfo $checkVsx_warningInfo $checkVsx_workingInfo\""
elif [[ $checkVsx_warning == "1" ]]; then
	sendSyslog "$functionName" "WARNING" "checkVsx_warningInfo" "VALUE=\"$checkVsx_warningInfo $checkVsx_workingInfo\""	
else
	sendSyslog "$functionName" "WORKING" "checkVsx_workingInfo" "VALUE=\"$checkVsx_workingInfo\""
fi

sendSyslog "$functionName" "INFO" "checkVsx_overallStatus" "VALUE=\"$checkVsx_overallStatus\""
sendSyslog "$functionName" "INFO" "checkVsx_vsQty" "VALUE=\"$checkVsx_vsQty\""
sendSyslog "$functionName" "INFO" "checkVsx_vsNames" "VALUE=\"$checkVsx_vsNames\""
sendSyslog "$functionName" "INFO" "checkVsx_vswQty" "VALUE=\"$checkVsx_vswQty\""
sendSyslog "$functionName" "INFO" "checkVsx_vswNames" "VALUE=\"$checkVsx_vswNames\""


checkVsx_fEnd=$(date "+%s")
checkVsx_fRunTime=$(( checkVsx_fEnd - checkVsx_fStart ))
echo "checkVsx_fRunTime $checkVsx_fRunTime" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkVsx_warning - $checkVsx_warning" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkVsx_problem - $checkVsx_problem" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkVsx_problemInfo - $checkVsx_problemInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkVsx_warningInfo - $checkVsx_warningInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkVsx_workingInfo - $checkVsx_workingInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkVsx_runTime - $checkVsx_fRunTime" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkVsx_warning" "VALUE=\"$checkVsx_warning\""
sendSyslog "$functionName" "INFO" "checkVsx_problem" "VALUE=\"$checkVsx_problem\""
sendSyslog "$functionName" "INFO" "checkVsx_problemInfo" "VALUE=\"$checkVsx_problemInfo\""
sendSyslog "$functionName" "INFO" "checkVsx_warningInfo" "VALUE=\"$checkVsx_warningInfo\""
sendSyslog "$functionName" "INFO" "checkVsx_workingInfo" "VALUE=\"$checkVsx_workingInfo\""
sendSyslog "$functionName" "INFO" "checkVsx_runTime" "VALUE=\"$checkVsx_fRunTime\""

echo "checkVsx_problem $checkVsx_problem" >>$RUNLOG
echo "END==checkVsx" >>$RUNLOG
}

###################################################################################################
checkVsxSP(){
echo "START==checkVsxSP" >>$RUNLOG

#DEFAULTS
checkVsxSP_fStart=$(date "+%s")
functionName=${FUNCNAME[0]}
checkVsxSP_warning="0"
checkVsxSP_problem="0"
checkVsxSP_workingInfo=""
checkVsxSP_warningInfo=""
checkVsxSP_problemInfo=""


#COLLECT OUTPUTS
checkVsxSP_overallStatus="0"
checkVsxSP_vsQty=$(cat $VSXSTAT | awk -F "|" '{print $3}' | grep " S " | wc -l)
checkVsxSP_vsNames=$(cat $VSXSTAT | awk -F "|" '{print $3}' | grep " S " | awk '{print $NF}' | tr '\n' ' ')
checkVsxSP_vswQty=$(cat $VSXSTAT | awk -F "|" '{print $3}' | grep " W " | wc -l)
checkVsxSP_vswNames=$(cat $VSXSTAT | awk -F "|" '{print $3}' | grep " W " | awk '{print $NF}' | tr '\n' ' ')


#LOG OUTPUTS
echo "checkVsxSP_overallStatus $checkVsxSP_overallStatus" >>$RUNLOG
echo "checkVsxSP_vsQty $checkVsxSP_vsQty" >>$RUNLOG
echo "checkVsxSP_vsNames $checkVsxSP_vsNames" >>$RUNLOG
echo "checkVsxSP_vswQty $checkVsxSP_vswQty" >>$RUNLOG
echo "checkVsxSP_vswNames $checkVsxSP_vswNames" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkVsxSP_overallStatus - $checkVsxSP_overallStatus" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkVsxSP_vsQty - $checkVsxSP_vsQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkVsxSP_vsNames - $checkVsxSP_vsNames" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkVsxSP_vswQty - $checkVsxSP_vswQty" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkVsxSP_vswNames - $checkVsxSP_vswNames" >>$HISTORYLOG

#RUN LOGIC
if [[ $checkVsxSP_overallStatus != "0" ]]; then
	echo "Logic - overallStatus: FAIL" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Overall status - $checkVsxSP_overallStatus" >>$HISTORYLOG
	checkVsxSP_problem="1"
else
	echo "Logic - overallStatus: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Overall status - $checkVsxSP_overallStatus" >>$HISTORYLOG
fi

#SYSLOG
if [[ $checkVsxSP_problem == "1" ]]; then
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "PROBLEM" "checkVsxSP_problemInfo" "VALUE=\"$checkVsxSP_problemInfo $checkVsxSP_warningInfo $checkVsxSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "PROBLEM" "checkVsxSP_problemInfo" "VALUE=\"$checkVsxSP_problemInfo $checkVsxSP_warningInfo $checkVsxSP_workingInfo\""
	fi
elif [[ $checkVsxSP_warning == "1" ]]; then
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "WARNING" "checkVsxSP_problemInfo" "VALUE=\"$checkVsxSP_warningInfo $checkVsxSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "WARNING" "checkVsxSP_problemInfo" "VALUE=\"$checkVsxSP_warningInfo $checkVsxSP_workingInfo\""
	fi
else
	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "WORKING" "checkVsxSP_problemInfo" "VALUE=\"$checkVsxSP_workingInfo\"" "SMO"
	else
		sendSyslog "$functionName" "WORKING" "checkVsxSP_problemInfo" "VALUE=\"$checkVsxSP_workingInfo\""
	fi
fi

sendSyslog "$functionName" "INFO" "checkVsxSP_overallStatus" "VALUE=\"$checkVsxSP_overallStatus\""
sendSyslog "$functionName" "INFO" "checkVsxSP_overallStatus" "VALUE=\"$checkVsxSP_overallStatus\""
sendSyslog "$functionName" "INFO" "checkVsxSP_vsQty" "VALUE=\"$checkVsxSP_vsQty\""
sendSyslog "$functionName" "INFO" "checkVsxSP_vsNames" "VALUE=\"$checkVsxSP_vsNames\""
sendSyslog "$functionName" "INFO" "checkVsxSP_vswQty" "VALUE=\"$checkVsxSP_vswQty\""
sendSyslog "$functionName" "INFO" "checkVsxSP_vswNames" "VALUE=\"$checkVsxSP_vswNames\""

#CLEANUP

checkVsxSP_fEnd=$(date "+%s")
checkVsxSP_fRunTime=$(( checkVsxSP_fEnd - checkVsxSP_fStart ))
echo "checkVsxSP_fRunTime $checkVsxSP_fRunTime" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkVsxSP_warning - $checkVsxSP_warning" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkVsxSP_problem - $checkVsxSP_problem" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkVsxSP_problemInfo - $checkVsxSP_problemInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkVsxSP_warningInfo - $checkVsxSP_warningInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkVsxSP_workingInfo - $checkVsxSP_workingInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkVsxSP_runTime - $checkVsxSP_fRunTime" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkVsxSP_warning" "VALUE=\"$checkVsxSP_warning\""
sendSyslog "$functionName" "INFO" "checkVsxSP_problem" "VALUE=\"$checkVsxSP_problem\""
sendSyslog "$functionName" "INFO" "checkVsxSP_problemInfo" "VALUE=\"$checkVsxSP_problemInfo\""
sendSyslog "$functionName" "INFO" "checkVsxSP_warningInfo" "VALUE=\"$checkVsxSP_warningInfo\""
sendSyslog "$functionName" "INFO" "checkVsxSP_workingInfo" "VALUE=\"$checkVsxSP_workingInfo\""
sendSyslog "$functionName" "INFO" "checkVsxSP_runTime" "VALUE=\"$checkVsxSP_fRunTime\""
echo "checkVsxSP_problem $checkVsxSP_problem" >>$RUNLOG
#SUMMARY
if [[ $checkVsxSP_problem == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - checkVsxSP - SUMMARY - PROBLEM - $checkVsxSP_problemInfo $checkVsxSP_warningInfo $checkVsxSP_workingInfo" >>$HISTORYLOG
elif [[ $checkVsxSP_warning == "1" ]]; then
	echo "$HISTORYLOGPREAMBLE - checkVsxSP - SUMMARY - WARNING - $checkVsxSP_warningInfo $checkVsxSP_workingInfo" >>$HISTORYLOG
else
	echo "$HISTORYLOGPREAMBLE - checkVsxSP - SUMMARY - WORKING - $checkVsxSP_workingInfo" >>$HISTORYLOG
fi
echo "END==checkVsxSP" >>$RUNLOG
}

###################################################################################################
checkMaestroMHO() {
echo "START==checkMaestroMHO" >>$RUNLOG

#DEFAULTS
checkMaestroMHO_fStart=$(date "+%s")
functionName=${FUNCNAME[0]}
checkMaestroMHO_warning="0"
checkMaestroMHO_problem="0"
checkMaestroMHO_workingInfo=""
checkMaestroMHO_warningInfo=""
checkMaestroMHO_problemInfo=""
TEMPFILE_CLISH=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.clish
TEMPFILE_ORCHSTAT=$TEMPDIR/$SCRIPT.$EPOCH.$functionName.orchstat
SECURITY_GROUP_QTY="1"

#COLLECT OUTPUTS
COUNTER="1"
/usr/bin/orch_stat -p > $TEMPFILE_ORCHSTAT 2>&1

while [ $COUNTER -le $SECURITY_GROUP_QTY ]; do
	clish -c "show maestro security-group id $COUNTER" > $TEMPFILE_CLISH
	checkMaestroMHO_securityGroupId=$COUNTER
	checkMaestroMHO_securityGroupMgmtIp=$(cat $TEMPFILE_CLISH | grep "mgmt_ip" | awk '{print $NF}')
	checkMaestroMHO_securityGroupHostname=$(cat $TEMPFILE_CLISH | grep "hostname" | awk '{print $NF}')
	checkMaestroMHO_securityGroupDefaultGw=$(cat $TEMPFILE_CLISH | grep "default_gw" | awk '{print $NF}')
	
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkMaestroMHO_securityGroupMgmtIp - ID=$checkMaestroMHO_securityGroupId $checkMaestroMHO_securityGroupMgmtIp" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkMaestroMHO_securityGroupHostname - ID=$checkMaestroMHO_securityGroupId $checkMaestroMHO_securityGroupHostname" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkMaestroMHO_securityGroupDefaultGw - ID=$checkMaestroMHO_securityGroupId $checkMaestroMHO_securityGroupDefaultGw" >>$HISTORYLOG
	
	sendSyslog "$functionName" "INFO" "checkMaestroMHO_securityGroupMgmtIp" "ID=\"$checkMaestroMHO_securityGroupId\" VALUE=\"$checkMaestroMHO_securityGroupMgmtIp\""
	sendSyslog "$functionName" "INFO" "checkMaestroMHO_securityGroupHostname" "ID=\"$checkMaestroMHO_securityGroupId\" VALUE=\"$checkMaestroMHO_securityGroupHostname\""
	sendSyslog "$functionName" "INFO" "checkMaestroMHO_securityGroupDefaultGw" "ID=\"$checkMaestroMHO_securityGroupId\" VALUE=\"$checkMaestroMHO_securityGroupDefaultGw\""
	
	
	IFS=$'\n'
	for LINE in `cat $TEMPFILE_CLISH | grep "eth" | awk '{print $2}' | tr -d ':'` ; do
		PHYPORT=$(cat $TEMPFILE_CLISH | grep -A1 "$LINE:" | grep "physical" | awk '{print $NF}')
		FOUND=$(cat $TEMPFILE_ORCHSTAT | grep $PHYPORT | wc -l)
		if [[ $FOUND -gt "0" ]]; then
			INTERFACE_NAME=$(cat $TEMPFILE_ORCHSTAT | grep $PHYPORT | awk -F "|" '{print $3}' | tr -d '[:space:]')
			TYPE=$(cat $TEMPFILE_ORCHSTAT | grep $PHYPORT | awk -F "|" '{print $4}' | tr -d '[:space:]')
			SG=$(cat $TEMPFILE_ORCHSTAT | grep $PHYPORT | awk -F "|" '{print $5}' | tr -d '[:space:]')
			QSFP_MODE=$(cat $TEMPFILE_ORCHSTAT | grep $PHYPORT | awk -F "|" '{print $6}' | tr -d '[:space:]')
			ADMIN_STATUS=$(cat $TEMPFILE_ORCHSTAT | grep $PHYPORT | awk -F "|" '{print $7}' | tr -d '[:space:]')
			LINK_STATUS=$(cat $TEMPFILE_ORCHSTAT | grep $PHYPORT | awk -F "|" '{print $8}' | tr -d '[:space:]')
			TRANSCEIVER_STATUS=$(cat $TEMPFILE_ORCHSTAT | grep $PHYPORT | awk -F "|" '{print $9}' | tr -d '[:space:]')
			OPERATING_SPEED=$(cat $TEMPFILE_ORCHSTAT | grep $PHYPORT | awk -F "|" '{print $10}' | tr -d '[:space:]')
			MTU=$(cat $TEMPFILE_ORCHSTAT | grep $PHYPORT | awk -F "|" '{print $11}' | tr -d '[:space:]')
			RX_FRAMES=$(cat $TEMPFILE_ORCHSTAT | grep $PHYPORT | awk -F "|" '{print $12}' | tr -d '[:space:]')
			TX_FRAMES=$(cat $TEMPFILE_ORCHSTAT | grep $PHYPORT | awk -F "|" '{print $13}' | tr -d '[:space:]')
			echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkMaestroMHO_interface - INTERFACE_NAME=$INTERFACE_NAME TYPE=$TYPE SG=$SG QSFP_MODE=$QSFP_MODE ADMIN_STATUS=$ADMIN_STATUS LINK_STATUS=$LINK_STATUS TRANSCEIVER_STATUS=$TRANSCEIVER_STATUS OPERATING_SPEED=$OPERATING_SPEED MTU=$MTU RX_FRAMES=$RX_FRAMES TX_FRAMES=$TX_FRAMES" >>$HISTORYLOG
			IFS=$ORIGIFS
			sendSyslog "$functionName" "INFO" "checkMaestroMHO_interface" "PHYPORT=\"$PHYPORT\" INTERFACE_NAME=\"$INTERFACE_NAME\" TYPE=\"$TYPE\" SG=\"$SG\" QSFP_MODE=\"$QSFP_MODE\" ADMIN_STATUS=\"$ADMIN_STATUS\" LINK_STATUS=\"$LINK_STATUS\" TRANSCEIVER_STATUS=\"$TRANSCEIVER_STATUS\" OPERATING_SPEED=\"$OPERATING_SPEED\" MTU=\"$MTU\" RX_FRAMES=\"$RX_FRAMES\" TX_FRAMES=\"$TX_FRAMES\""
			IFS=$'\n'
			
			if [[ $ADMIN_STATUS != "UP" ]]; then
				echo "Logic - ADMIN_STATUS: FAIL" >>$RUNLOG
				echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - ADMIN_STATUS - $INTERFACE_NAME($PHYPORT) $ADMIN_STATUS" >>$HISTORYLOG
				checkMaestroMHO_warning="1"
				checkMaestroMHO_warningInfo="$checkMaestroMHO_warningInfo [Port: $INTERFACE_NAME($PHYPORT) Admin Status: $ADMIN_STATUS]"
			else
				echo "Logic - ADMIN_STATUS: PASS" >>$RUNLOG
				echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - ADMIN_STATUS - $INTERFACE_NAME($PHYPORT) $ADMIN_STATUS" >>$HISTORYLOG
			fi

			if [[ $ADMIN_STATUS == "UP" ]] && [[ $LINK_STATUS != "UP" ]]; then
				echo "Logic - LINK_STATUS: FAIL" >>$RUNLOG
				echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - LINK_STATUS - $INTERFACE_NAME $LINK_STATUS" >>$HISTORYLOG
				checkMaestroMHO_problem="1"
				checkMaestroMHO_problemInfo="$checkMaestroMHO_problemInfo [Port: $INTERFACE_NAME($PHYPORT) Link Status: $LINK_STATUS]"
			else
				echo "Logic - LINK_STATUS: PASS" >>$RUNLOG
				echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - LINK_STATUS - $INTERFACE_NAME($PHYPORT) $LINK_STATUS" >>$HISTORYLOG
			fi
		fi
		echo "checkMaestroMHO_securityGroupPhysicalPort ID=$checkMaestroMHO_securityGroupId UPLINK=$LINE PHYPORT=$PHYPORT" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkMaestroMHO_securityGroupPhysicalPort - ID=$checkMaestroMHO_securityGroupId UPLINK=$LINE PHYPORT=$PHYPORT" >>$HISTORYLOG
		IFS=$ORIGIFS
		sendSyslog "$functionName" "INFO" "checkMaestroMHO_securityGroupPhysicalPort" "ID=\"$checkMaestroMHO_securityGroupId\" UPLINK=\"$LINE\" PHYPORT=\"$PHYPORT\""
		IFS=$'\n'
	done
	IFS=$ORIGIFS
	
	IFS=$'\n'
	for LINE in `cat $TEMPFILE_CLISH | sed -n '/gateways/,/cluster_id/p' | grep -v "gateways\|cluster_id\|serial\|model\|weight" | awk '{print $NF}' | tr -d ':'` ; do
		GWSERIAL=$(cat $TEMPFILE_CLISH | sed -n '/gateways/,/cluster_id/p' | grep -A3 "\- $LINE:" | grep "serial" | awk -F ":" '{print $NF}' | tr -d ' ')
		GWMODEL=$(cat $TEMPFILE_CLISH | sed -n '/gateways/,/cluster_id/p' | grep -A3 "\- $LINE:" | grep "model" | awk -F ":" '{print $NF}' | tr -d ' ')
		WEIGHT=$(cat $TEMPFILE_CLISH | sed -n '/gateways/,/cluster_id/p' | grep -A3 "\- $LINE:" | grep "weight" | awk -F ":" '{print $NF}' | tr -d ' ')
		echo "checkMaestroMHO_securityGroupGateways ID=$checkMaestroMHO_securityGroupId DEVICEID=$LINE GWSERIAL=$GWSERIAL GWMODEL=$GWMODEL WEIGHT=$WEIGHT" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkMaestroMHO_securityGroupGateways - ID=$checkMaestroMHO_securityGroupId DEVICEID=$LINE GWSERIAL=$GWSERIAL GWMODEL=$GWMODEL WEIGHT=$WEIGHT" >>$HISTORYLOG
		IFS=$ORIGIFS
		sendSyslog "$functionName" "INFO" "checkMaestroMHO_securityGroupGateways" "ID=\"$checkMaestroMHO_securityGroupId\" DEVICEID=\"$LINE\" GWSERIAL=\"$GWSERIAL\" GWMODEL=\"$GWMODEL\" WEIGHT=\"$WEIGHT\""
		IFS=$'\n'
	done
	IFS=$ORIGIFS
	
	let COUNTER=$COUNTER+1
	
	checkMaestroMHO_workingInfo="$checkMaestroMHO_workingInfo [$checkMaestroMHO_securityGroupHostname]"
done




IFS=$'\n'
for LINE in `rule_hits all | grep -v "Counter ID" | grep -v "+---" | grep "|"` ; do
	COUNTERID=$(echo "$LINE" | awk -F "|" '{print $2}' | tr -d ' ')
	HITCOUNT=$(echo "$LINE" | awk -F "|" '{print $3}' | tr -d ' ')
	PORT=$(echo "$LINE" | awk -F "|" '{print $4}' | tr -d ' ')
	DIRECTION=$(echo "$LINE" | awk -F "|" '{print $5}' | tr -d ' ')
	DESCRIPTION=$(echo "$LINE" | awk -F "|" '{print $6}' | xargs)
	echo "checkMaestroMHO_ruleHits COUNTERID=$COUNTERID HITCOUNT=$HITCOUNT PORT=$PORT DIRECTION=$DIRECTION DESCRIPTION=$DESCRIPTION" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkMaestroMHO_ruleHits - COUNTERID=$COUNTERID HITCOUNT=$HITCOUNT PORT=$PORT DIRECTION=$DIRECTION DESCRIPTION=$DESCRIPTION" >>$HISTORYLOG
	IFS=$ORIGIFS
	sendSyslog "$functionName" "INFO" "checkMaestroMHO_ruleHits" "COUNTERID=\"$COUNTERID\" HITCOUNT=\"$HITCOUNT\" PORT=\"$PORT\" DIRECTION=\"$DIRECTION\" DESCRIPTION=\"$DESCRIPTION\""
	IFS=$'\n'
done
IFS=$ORIGIFS


#LOG OUTPUTS

#RUN LOGIC


#SYSLOG
if [[ $checkMaestroMHO_problem == "1" ]]; then
	sendSyslog "$functionName" "PROBLEM" "checkMaestroMHO_problemInfo" "VALUE=\"$checkMaestroMHO_problemInfo $checkMaestroMHO_warningInfo $checkMaestroMHO_workingInfo\""
elif [[ $checkMaestroMHO_warning == "1" ]]; then
	sendSyslog "$functionName" "WARNING" "checkMaestroMHO_warningInfo" "VALUE=\"$checkMaestroMHO_warningInfo $checkMaestroMHO_workingInfo\""	
else
	sendSyslog "$functionName" "WORKING" "checkMaestroMHO_workingInfo" "VALUE=\"$checkMaestroMHO_workingInfo\""
fi


#CLEANUP
rm -f $TEMPFILE_CLISH $TEMPFILE_ORCHSTAT

checkMaestroMHO_fEnd=$(date "+%s")
checkMaestroMHO_fRunTime=$(( checkMaestroMHO_fEnd - checkMaestroMHO_fStart ))
echo "checkMaestroMHO_fRunTime $checkMaestroMHO_fRunTime" >>$RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkMaestroMHO_warning - $checkMaestroMHO_warning" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkMaestroMHO_problem - $checkMaestroMHO_problem" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkMaestroMHO_problemInfo - $checkMaestroMHO_problemInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkMaestroMHO_warningInfo - $checkMaestroMHO_warningInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkMaestroMHO_workingInfo - $checkMaestroMHO_workingInfo" >>$HISTORYLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkMaestroMHO_runTime - $checkMaestroMHO_fRunTime" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "checkMaestroMHO_warning" "VALUE=\"$checkMaestroMHO_warning\""
sendSyslog "$functionName" "INFO" "checkMaestroMHO_problem" "VALUE=\"$checkMaestroMHO_problem\""
sendSyslog "$functionName" "INFO" "checkMaestroMHO_problemInfo" "VALUE=\"$checkMaestroMHO_problemInfo\""
sendSyslog "$functionName" "INFO" "checkMaestroMHO_warningInfo" "VALUE=\"$checkMaestroMHO_warningInfo\""
sendSyslog "$functionName" "INFO" "checkMaestroMHO_workingInfo" "VALUE=\"$checkMaestroMHO_workingInfo\""
sendSyslog "$functionName" "INFO" "checkMaestroMHO_runTime" "VALUE=\"$checkMaestroMHO_fRunTime\""
echo "checkMaestroMHO_problem $checkMaestroMHO_problem" >>$RUNLOG
echo "END==checkMaestroMHO" >>$RUNLOG
}

###################################################################################################
checkUltimateStatus() {
echo "START==checkUltimateStatus" >>$RUNLOG

#DEFAULTS
functionName=${FUNCNAME[0]}
if [[ $checkSelf_hwtype == "SP" ]] || [[ $checkSelf_hwtype == "MAESTRO" ]]; then
	functionName="${FUNCNAME[0]}.SGM"
fi
checkUltimateStatus_warning="0"
checkUltimateStatus_problem="0"
checkUltimateStatus_workingInfo=""
checkUltimateStatus_warningInfo=""
checkUltimateStatus_problemInfo=""
checkUltimateStatus_problemInfoDetail=""

#COLLECT OUTPUTS
EPOCHCUR=$(date +'%s')
TOTALRUNTIME="$(( EPOCHCUR - EPOCH ))"

#LOG OUTPUTS

#RUN LOGIC
if [[ $displayCLI_problem == "1" ]] || [[ $checkStart_problem == "1" ]] || [[ $checkSelf_problem == "1" ]] || [[ $checkLogging_problem == "1" ]] || [[ $checkLoggingSP_problem == "1" ]] || [[ $checkLoggingSM_problem == "1" ]] || [[ $displayLoggingSP_problem == "1" ]] || [[ $checkClusterXL_problem == "1" ]] || [[ $checkClusterXLSP_problem == "1" ]] || [[ $displayClusterXLSP_problem == "1" ]] || [[ $checkPolicy_problem == "1" ]] || [[ $checkPolicySM_problem == "1" ]] || [[ $checkPolicySP_problem == "1" ]] || [[ $displayPolicySP_problem == "1" ]] || [[ $checkConnections_problem == "1" ]] || [[ $checkConnectionsSP_problem == "1" ]] || [[ $displayConnectionsSP_problem == "1" ]] || [[ $checkSecureXL_problem == "1" ]] || [[ $checkSecureXLSP_problem == "1" ]] || [[ $displaySecureXLSP_problem == "1" ]] || [[ $checkLicense_problem == "1" ]] || [[ $checkLicenseSP_problem == "1" ]] || [[ $displayLicenseSP_problem == "1" ]] || [[ $checkHardware_problem == "1" ]] || [[ $checkHardwareSP_problem == "1" ]] || [[ $displayHardwareSP_problem == "1" ]] || [[ $checkPerformance_problem == "1" ]] || [[ $checkPerformanceSP_problem == "1" ]] || [[ $displayPerformanceSP_problem == "1" ]] || [[ $checkRouting_problem == "1" ]] || [[ $checkRoutingSP_problem == "1" ]] || [[ $displayRoutingSP_problem == "1" ]] || [[ $checkBonding_problem == "1" ]] || [[ $checkInterface_problem == "1" ]] || [[ $checkInterfaceSP_problem == "1" ]] || [[ $displayInterfaceSP_problem == "1" ]] || [[ $checkAsgSP_problem == "1" ]] || [[ $checkDrops_problem == "1" ]] || [[ $checkDropsSP_problem == "1" ]] || [[ $checkConnectionTable_problem == "1" ]] || [[ $checkConnectionTableSP_problem == "1" ]] || [[ $checkNatTable_problem == "1" ]] || [[ $checkNatTableSP_problem == "1" ]] || [[ $checkBackup_problem == "1" ]] || [[ $checkBackupSP_problem == "1" ]] || [[ $checkBackupSM_problem == "1" ]] || [[ $checkApiSM_problem == "1" ]] || [[ $checkVsx_problem == "1" ]] || [[ $checkVsxSP_problem == "1" ]] || [[ $displayVsxSP_problem == "1" ]] || [[ $checkScore_problem == "1" ]] || [[ $checkScoreSP_problem == "1" ]] || [[ $checkMaestroMHO_problem == "1" ]]; then
	checkUltimateStatus_problemInfo=""
	
	if [[ $displayCLI_problem == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo FatalError"
	fi
	if [[ $checkStart_problem == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo Start"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail Start:$checkStart_problemInfo |"
	fi
	if [[ $checkSelf_problem == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo Self"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail Self:$checkSelf_problemInfo |"
	fi
	if [[ $checkLogging_problem == "1" ]] || [[ $checkLoggingSP_problem == "1" ]] || [[ $displayLoggingSP_problem == "1" ]] || [[ $checkLoggingSM_problem == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo Logging"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail Logging:$checkLogging_problemInfo$displayLoggingSP_problemInfo$checkLoggingSM_problemInfo |"
	fi
	
	if [[ $checkClusterXL_problem == "1" ]] || [[ $checkClusterXLSP_problem == "1" ]] || [[ $displayClusterXLSP_problem == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo ClusterXL"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail ClusterXL:$checkClusterXL_problemInfo$displayClusterXLSP_problemInfo |"
	fi
	if [[ $checkPolicy_problem == "1" ]] || [[ $checkPolicySM_problem == "1" ]] || [[ $checkPolicySP_problem == "1" ]] || [[ $displayPolicySP_problem == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo Policy"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail Policy:$checkPolicy_problemInfo$checkPolicySM_problemInfo$displayPolicySP_problemInfo |"
	fi
	if [[ $checkConnections_problem == "1" ]] || [[ $checkConnectionsSP_problem == "1" ]] || [[ $displayConnectionsSP_problem == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo Connections"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail Connections:$checkConnections_problemInfo$displayConnectionsSP_problemInfo |"
	fi
	if [[ $checkSecureXL_problem == "1" ]] || [[ $checkSecureXLSP_problem == "1" ]] || [[ $displaySecureXLSP_problem == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo SecureXL"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail SecureXL:$checkSecureXL_problemInfo$displaySecureXLSP_problemInfo |"
	fi
	if [[ $checkLicense_problem == "1" ]] || [[ $checkLicenseSP_problem == "1" ]] || [[ $displayLicenseSP_problem == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo License"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail License:$checkLicense_problemInfo$displayLicenseSP_problemInfo |"
	fi
	if [[ $checkHardware_problem == "1" ]] || [[ $checkHardwareSP_problem == "1" ]] || [[ $displayHardwareSP_problem == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo Hardware"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail Hardware:$checkHardware_problemInfo$checkHardwareSP_problemInfo$displayHardwareSP_problemInfo |"
	fi
	if [[ $checkPerformance_problem == "1" ]] || [[ $checkPerformanceSP_problem == "1" ]] || [[ $displayPerformanceSP_problem == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo Performance"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail Performance:$checkPerformance_problemInfo$displayPerformanceSP_problemInfo |"
	fi
	if [[ $checkRouting_problem == "1" ]] || [[ $checkRoutingSP_problem == "1" ]] || [[ $displayRoutingSP_problem == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo Routing"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail Routing:$checkRouting_problemInfo$checkRoutingSP_problemInfo$displayRoutingSP_problemInfo |"
	fi
	if [[ $checkBonding_problem == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo Bonding"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail Bonding:$checkBonding_problemInfo |"
	fi
	if [[ $checkInterface_problem == "1" ]] || [[ $checkInterfaceSP_problem == "1" ]] || [[ $displayInterfaceSP_problem == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo Interface"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail Interface:$checkInterface_problemInfo$displayInterfaceSP_problemInfo |"
	fi
	if [[ $checkDrops_problem == "1" ]] || [[ $checkDropsSP_problem == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo Drops"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail Drops:$checkDrops_problemInfo$checkDropsSPSP_problemInfo |"
	fi	
	if [[ $checkConnectionTable_problem == "1" ]] || [[ $checkConnectionTableSP_problem == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo ConnectionTable"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail ConnectionTable:$checkConnectionTable_problemInfo$checkConnectionTableSP_problemInfo |"
	fi			
	if [[ $checkAsgSP_problem == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo ASG"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail ASG:$checkAsgSP_problemInfo |"
	fi
	if [[ $checkBackup_problem == "1" ]] || [[ $checkBackupSP_problem == "1" ]] || [[ $checkBackupSM_problem == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo Backup"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail Backup:$checkBackup_problemInfo$checkBackupSP_problemInfo$checkBackupSM_problemInfo |"
	fi
	if [[ $checkApiSM_problem == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo Api"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail Api:$checkApiSM_problemInfo |"
	fi
	if [[ $checkNatTable_problem == "1" ]] || [[ $checkNatTableSP_problem == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo NatTable"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail NatTable: $checkNatTable_problemInfo$checkNatTableSP_problemInfo |"
	fi	
	if [[ $checkVsx_problem == "1" ]] || [[ $checkVsxSP_problem == "1" ]] || [[ $displayVsxSP_problem == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo VSX"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail VSX:$checkVsx_problemInfo$checkVsxSP_problemInfo$displayVsxSP_problemInfo_problemInfo |"
	fi
	if [[ $checkScore_problem == "1" ]] || [[ $checkScoreSP_problem == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo CapacityScore"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail CapacityScore:$checkScore_problemInfo$checkScoreSP_problemInfo |"
	fi
	if [[ $checkMaestroMHO_problem == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo MaestroMHO"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail MaestroMHO:$checkMaestroMHO_problemInfo |"
	fi

	
	echo "Logic - overallStatus: FAIL" >>$RUNLOG
	echo "Logic - overallStatus: $checkUltimateStatus_problemInfo" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Overall status - [$checkUltimateStatus_problemInfo ]" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - PROBLEM - Overall status detail - [$checkUltimateStatus_problemInfoDetail ]" >>$HISTORYLOG
	checkUltimateStatus_problem="1"
	
	
elif [[ $displayCLI_warning == "1" ]] || [[ $checkStart_warning == "1" ]] || [[ $checkSelf_warning == "1" ]] || [[ $checkLogging_warning == "1" ]] || [[ $checkLoggingSP_warning == "1" ]] || [[ $checkLoggingSM_warning == "1" ]] || [[ $displayLoggingSP_warning == "1" ]] || [[ $checkClusterXL_warning == "1" ]] || [[ $checkClusterXLSP_warning == "1" ]] || [[ $displayClusterXLSP_warning == "1" ]] || [[ $checkPolicy_warning == "1" ]] || [[ $checkPolicySM_warning == "1" ]] || [[ $checkPolicySP_warning == "1" ]] || [[ $displayPolicySP_warning == "1" ]] || [[ $checkConnections_warning == "1" ]] || [[ $checkConnectionsSP_warning == "1" ]] || [[ $displayConnectionsSP_warning == "1" ]] || [[ $checkSecureXL_warning == "1" ]] || [[ $checkSecureXLSP_warning == "1" ]] || [[ $displaySecureXLSP_warning == "1" ]] || [[ $checkLicense_warning == "1" ]] || [[ $checkLicenseSP_warning == "1" ]] || [[ $displayLicenseSP_warning == "1" ]] || [[ $checkHardware_warning == "1" ]] || [[ $checkHardwareSP_warning == "1" ]] || [[ $displayHardwareSP_warning == "1" ]] || [[ $checkPerformance_warning == "1" ]] || [[ $checkPerformanceSP_warning == "1" ]] || [[ $displayPerformanceSP_warning == "1" ]] || [[ $checkRouting_warning == "1" ]] || [[ $checkRoutingSP_warning == "1" ]] || [[ $displayRoutingSP_warning == "1" ]] || [[ $checkBonding_warning == "1" ]] || [[ $checkInterface_warning == "1" ]] || [[ $checkInterfaceSP_warning == "1" ]] || [[ $displayInterfaceSP_warning == "1" ]] || [[ $checkAsgSP_warning == "1" ]] || [[ $checkDrops_warning == "1" ]] || [[ $checkDropsSP_warning == "1" ]] || [[ $checkConnectionTable_warning == "1" ]] || [[ $checkConnectionTableSP_warning == "1" ]] || [[ $checkNatTable_warning == "1" ]] || [[ $checkNatTableSP_warning == "1" ]] || [[ $checkBackup_warning == "1" ]] || [[ $checkBackupSP_warning == "1" ]] || [[ $checkBackupSM_warning == "1" ]] || [[ $checkApiSM_warning == "1" ]] || [[ $checkVsx_warning == "1" ]] || [[ $checkVsxSP_warning == "1" ]] || [[ $displayVsxSP_warning == "1" ]] || [[ $checkScore_warning == "1" ]] || [[ $checkScoreSP_warning == "1" ]] || [[ $checkMaestroMHO_warning == "1" ]]; then

	if [[ $displayCLI_warning == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo FatalError"
	fi
	if [[ $checkStart_warning == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo Start"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail Start:$checkStart_problemInfo |"
	fi
	if [[ $checkSelf_warning == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo Self"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail Self:$checkSelf_warningInfo$checkSelf_problemInfo |"
	fi
	if [[ $checkLogging_warning == "1" ]] || [[ $checkLoggingSP_warning == "1" ]] || [[ $displayLoggingSP_warning == "1" ]] || [[ $checkLoggingSM_warning == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo Logging"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail Logging:$checkLogging_warningInfo$checkLoggingSM_warningInfo$displayLoggingSP_warningInfo |"
	fi
	if [[ $checkClusterXL_warning == "1" ]] || [[ $checkClusterXLSP_warning == "1" ]] || [[ $displayClusterXLSP_warning == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo ClusterXL"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail Logging:$checkClusterXL_warningInfo$displayClusterXLSP_warningInfo |"
	fi
	if [[ $checkPolicy_warning == "1" ]] || [[ $checkPolicySM_warning == "1" ]] || [[ $checkPolicySP_warning == "1" ]] || [[ $displayPolicySP_warning == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo Policy"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail Policy:$checkPolicy_warningInfo$checkPolicySM_warningInfo$displayPolicySP_warningInfo |"
	fi
	if [[ $checkConnections_warning == "1" ]] || [[ $checkConnectionsSP_warning == "1" ]] || [[ $displayConnectionsSP_warning == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo Connections"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail Connections:$checkConnections_warningInfo$displayConnectionsSP_warningInfo |"
	fi
	if [[ $checkSecureXL_warning == "1" ]] || [[ $checkSecureXLSP_warning == "1" ]] || [[ $displaySecureXLSP_warning == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo SecureXL"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail SecureXL:$checkSecureXL_warningInfo$displaySecureXLSP_warningInfo |"
	fi
	if [[ $checkLicense_warning == "1" ]] || [[ $checkLicenseSP_warning == "1" ]] || [[ $displayLicenseSP_warning == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo License"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail License:$checkLicense_warningInfo$displayLicenseSP_warningInfo |"
	fi
	if [[ $checkHardware_warning == "1" ]] || [[ $checkHardwareSP_warning == "1" ]] || [[ $displayHardwareSP_warning == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo Hardware"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail Hardware:$checkHardware_warningInfo$checkHardwareSP_warningInfo$displayHardwareSP_warningInfo |"
	fi
	if [[ $checkPerformance_warning == "1" ]] || [[ $checkPerformanceSP_warning == "1" ]] || [[ $displayPerformanceSP_warning == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo Performance"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail Performance:$checkPerformance_warningInfo$displayPerformanceSP_warningInfo |"
	fi
	if [[ $checkRouting_warning == "1" ]] || [[ $checkRoutingSP_warning == "1" ]] || [[ $displayRoutingSP_warning == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo Routing"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail Routing:$checkRouting_warningInfo$displayRoutingSP_warningInfo |"
	fi
	if [[ $checkBonding_warning == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo Bonding"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail Bonding:$checkBonding_problemInfo |"
	fi
	if [[ $checkInterface_warning == "1" ]] || [[ $checkInterfaceSP_warning == "1" ]] || [[ $displayInterfaceSP_warning == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo Interface"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail Interface:$checkInterface_warningInfo$displayInterfaceSP_warningInfo |"
	fi
	if [[ $checkDrops_warning == "1" ]] || [[ $checkDropsSP_warning == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo Drops"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail Drops:$checkDrops_warningInfo$checkDropsSP_warningInfo |"
	fi	
	if [[ $checkConnectionTable_warning == "1" ]] || [[ $checkConnectionTableSP_warning == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo ConnectionTable"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail ConnectionTable:$checkConnectionTable_warningInfo$checkConnectionTableSP_warningInfo |"
	fi			
	if [[ $checkAsgSP_warning == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo ASG"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail ASG:$checkAsgSP_warningInfo |"
	fi
	if [[ $checkBackup_warning == "1" ]] || [[ $checkBackupSP_warning == "1" ]] || [[ $checkBackupSM_warning == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo Backup"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail Backup:$checkBackup_warningInfo$checkBackupSP_warningInfo$checkBackupSM_warningInfo |"
	fi
	if [[ $checkApiSM_warning == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo Api"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail Api:$checkApiSM_warningInfo |"
	fi
	if [[ $checkNatTable_warning == "1" ]] || [[ $checkNatTableSP_warning == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo NatTable"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail NatTable:$checkNatTable_warningInfo$checkNatTableSP_warningInfo |"
	fi	
	if [[ $checkVsx_warning == "1" ]] || [[ $checkVsxSP_warning == "1" ]] || [[ $displayVsxSP_warning == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo VSX"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail VSX:$checkVsx_warningInfo$displayVsxSP_warningInfo |"
	fi
	if [[ $checkScore_warning == "1" ]] || [[ $checkScoreSP_warning == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo CapacityScore"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail CapacityScore:$checkScore_warningInfo$checkScoreSP_warningInfo |"
	fi
	if [[ $checkMaestroMHO_warning == "1" ]]; then
		checkUltimateStatus_problemInfo="$checkUltimateStatus_problemInfo MaestroMHO"
		checkUltimateStatus_problemInfoDetail="$checkUltimateStatus_problemInfoDetail MaestroMHO:$checkMaestroMHO_warningInfo |"
	fi

	echo "Logic - overallStatus: FAIL" >>$RUNLOG
	echo "Logic - overallStatus: $checkUltimateStatus_problemInfo" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - Overall status - [$checkUltimateStatus_problemInfo ]" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WARNING - Overall status detail - [$checkUltimateStatus_problemInfoDetail ]" >>$HISTORYLOG
	checkUltimateStatus_warning="1"
else
	echo "Logic - overallStatus: PASS" >>$RUNLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - WORKING - Overall status - [ ]" >>$HISTORYLOG
fi



#SYSLOG
if [[ $checkUltimateStatus_problem == "1" ]]; then
	sendSyslog "$functionName" "PROBLEM" "checkUltimateStatus" "NESTSTATUS=\"$checkSelf_nestStatus\" VALUE=\"$checkUltimateStatus_problemInfo\""
	sendSyslog "$functionName" "PROBLEM" "checkUltimateStatusDetail" "NESTSTATUS=\"$checkSelf_nestStatus\" FUNCTIONS=\"$checkUltimateStatus_problemInfo\" VALUE=\"$checkUltimateStatus_problemInfoDetail\""
	if [[ $LOCALSMO == "1" ]]; then
		functionName=${FUNCNAME[0]}
		sendSyslog "$functionName" "PROBLEM" "checkUltimateStatus" "NESTSTATUS=\"$checkSelf_nestStatus\" VALUE=\"$checkUltimateStatus_problemInfo\"" "SMO"
		sendSyslog "$functionName" "PROBLEM" "checkUltimateStatusDetail" "NESTSTATUS=\"$checkSelf_nestStatus\" FUNCTIONS=\"$checkUltimateStatus_problemInfo\" VALUE=\"$checkUltimateStatus_problemInfoDetail\"" "SMO"
	fi
elif [[ $checkUltimateStatus_warning == "1" ]]; then
	sendSyslog "$functionName" "WARNING" "checkUltimateStatus" "NESTSTATUS=\"$checkSelf_nestStatus\" VALUE=\"$checkUltimateStatus_problemInfo\""
	sendSyslog "$functionName" "WARNING" "checkUltimateStatusDetail" "NESTSTATUS=\"$checkSelf_nestStatus\" FUNCTIONS=\"$checkUltimateStatus_problemInfo\" VALUE=\"$checkUltimateStatus_problemInfoDetail\""
	if [[ $LOCALSMO == "1" ]]; then
		functionName=${FUNCNAME[0]}
		sendSyslog "$functionName" "WARNING" "checkUltimateStatus" "NESTSTATUS=\"$checkSelf_nestStatus\" VALUE=\"$checkUltimateStatus_problemInfo\"" "SMO"
		sendSyslog "$functionName" "WARNING" "checkUltimateStatusDetail" "NESTSTATUS=\"$checkSelf_nestStatus\" FUNCTIONS=\"$checkUltimateStatus_problemInfo\" VALUE=\"$checkUltimateStatus_problemInfoDetail\"" "SMO"
		
	fi
else
	sendSyslog "$functionName" "WORKING" "checkUltimateStatus" "NESTSTATUS=\"$checkSelf_nestStatus\" VALUE=\"$checkUltimateStatus_problemInfo\""
	sendSyslog "$functionName" "WORKING" "checkUltimateStatusDetail" "NESTSTATUS=\"$checkSelf_nestStatus\" FUNCTIONS=\"$checkUltimateStatus_problemInfo\" VALUE=\"$checkUltimateStatus_problemInfoDetail\""
	if [[ $LOCALSMO == "1" ]]; then
		functionName=${FUNCNAME[0]}
		sendSyslog "$functionName" "WORKING" "checkUltimateStatus" "NESTSTATUS=\"$checkSelf_nestStatus\" VALUE=\"$checkUltimateStatus_problemInfo\"" "SMO"
		sendSyslog "$functionName" "WORKING" "checkUltimateStatusDetail" "NESTSTATUS=\"$checkSelf_nestStatus\" FUNCTIONS=\"$checkUltimateStatus_problemInfo\" VALUE=\"$checkUltimateStatus_problemInfoDetail\"" "SMO"
	fi
fi



if [[ $checkSelf_hwtype == "SP" ]]; then

	if [[ $LOCALSMO == "1" ]]; then
		sendSyslog "$functionName" "INFO" "checkUltimateStatus_warning" "VALUE=\"$checkUltimateStatus_warning\"" "SMO"
		sendSyslog "$functionName" "INFO" "checkUltimateStatus_problem" "VALUE=\"$checkUltimateStatus_problem\"" "SMO"
		sendSyslog "$functionName" "INFO" "checkUltimateStatus_problemInfo" "VALUE=\"$checkUltimateStatus_problemInfo\"" "SMO"
		sendSyslog "$functionName" "INFO" "checkUltimateStatus_problemInfoDetail" "VALUE=\"$checkUltimateStatus_problemInfoDetail\"" "SMO"
		sendSyslog "$functionName" "INFO" "checkUltimateStatus_runTime" "VALUE=\"$TOTALRUNTIME\"" "SMO"
	fi

	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkUltimateStatus_warning - $checkUltimateStatus_warning" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkUltimateStatus_problem - $checkUltimateStatus_problem" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkUltimateStatus_problemInfo - $checkUltimateStatus_problemInfo" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkUltimateStatus_runTime - $TOTALRUNTIME" >>$HISTORYLOG
	sendSyslog "$functionName" "INFO" "checkUltimateStatus_warning" "VALUE=\"$checkUltimateStatus_warning\"" "SGM"
	sendSyslog "$functionName" "INFO" "checkUltimateStatus_problem" "VALUE=\"$checkUltimateStatus_problem\"" "SGM"
	sendSyslog "$functionName" "INFO" "checkUltimateStatus_problemInfo" "VALUE=\"$checkUltimateStatus_problemInfo\"" "SGM"
	sendSyslog "$functionName" "INFO" "checkUltimateStatus_problemInfoDetail" "VALUE=\"$checkUltimateStatus_problemInfoDetail\"" "SGM"
	sendSyslog "$functionName" "INFO" "checkUltimateStatus_runTime" "VALUE=\"$TOTALRUNTIME\"" "SGM"

else

	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkUltimateStatus_warning - $checkUltimateStatus_warning" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkUltimateStatus_problem - $checkUltimateStatus_problem" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkUltimateStatus_problemInfo - $checkUltimateStatus_problemInfo" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkUltimateStatus_runTime - $TOTALRUNTIME" >>$HISTORYLOG
	sendSyslog "$functionName" "INFO" "checkUltimateStatus_warning" "VALUE=\"$checkUltimateStatus_warning\""
	sendSyslog "$functionName" "INFO" "checkUltimateStatus_problem" "VALUE=\"$checkUltimateStatus_problem\""
	sendSyslog "$functionName" "INFO" "checkUltimateStatus_problemInfo" "VALUE=\"$checkUltimateStatus_problemInfo\""
	sendSyslog "$functionName" "INFO" "checkUltimateStatus_problemInfoDetail" "VALUE=\"$checkUltimateStatus_problemInfoDetail\""
	sendSyslog "$functionName" "INFO" "checkUltimateStatus_runTime" "VALUE=\"$TOTALRUNTIME\""
	
fi



echo "checkUltimateStatus_warning $checkUltimateStatus_warning" >>$RUNLOG
echo "checkUltimateStatus_problem $checkUltimateStatus_problem" >>$RUNLOG
echo "END==checkUltimateStatus" >>$RUNLOG
}

###################################################################################################
cleanUp() {




gzip $RUNLOG
if [[ $EVALDROPS == "1" ]]; then
	gzip $DROPSOUTPUTFILEFORMATTED > /dev/null 2>&1
	gzip $DROPSOUTPUTFILE > /dev/null 2>&1
	gzip $DROPSFOUNDFILE > /dev/null 2>&1
fi

if [[ $SCRIPTHASH != $LASTRUNSCRIPTHASH ]]; then
	cp $SCRIPTFULL $SCRIPTFULL.$EPOCH.$SCRIPTHASH
	gzip $SCRIPTFULL.$EPOCH.$SCRIPTHASH
	if [ ! -f $RUNLOGTAR ]; then
		tar cf $RUNLOGTAR $RUNLOG.gz $SCRIPTFULL.$EPOCH.$SCRIPTHASH.gz $DROPSOUTPUTFILE.gz $DROPSFOUNDFILE.gz $DROPSOUTPUTFILEFORMATTED.gz $TEMPDIR/$SCRIPT.$EPOCH.checkDrops.tar $TEMPDIR/$SCRIPT.$EPOCH.checkDropsSP.tar $TEMPDIR/$SCRIPT.$EPOCH.tempdir> /dev/null 2>&1
	else
		tar rf $RUNLOGTAR $RUNLOG.gz $SCRIPTFULL.$EPOCH.$SCRIPTHASH.gz $DROPSOUTPUTFILE.gz $DROPSFOUNDFILE.gz $DROPSOUTPUTFILEFORMATTED.gz $TEMPDIR/$SCRIPT.$EPOCH.checkDrops.tar $TEMPDIR/$SCRIPT.$EPOCH.checkDropsSP.tar $TEMPDIR/$SCRIPT.$EPOCH.tempdir> /dev/null 2>&1
	fi
	rm -f $SCRIPTFULL.$EPOCH.$SCRIPTHASH.gz $DROPSOUTPUTFILE.gz $DROPSFOUNDFILE.gz $DROPSOUTPUTFILEFORMATTED.gz $TEMPDIR/$SCRIPT.$EPOCH.checkDrops.tar $TEMPDIR/$SCRIPT.$EPOCH.checkDropsSP.tar $TEMPDIR/$SCRIPT.$EPOCH.tempdir> /dev/null 2>&1
else
	if [ ! -f $RUNLOGTAR ]; then
		tar cf $RUNLOGTAR $RUNLOG.gz $DROPSOUTPUTFILE.gz $DROPSFOUNDFILE.gz $DROPSOUTPUTFILEFORMATTED.gz $TEMPDIR/$SCRIPT.$EPOCH.checkDrops.tar $TEMPDIR/$SCRIPT.$EPOCH.checkDropsSP.tar $TEMPDIR/$SCRIPT.$EPOCH.tempdir> /dev/null 2>&1
	else
		tar rf $RUNLOGTAR $RUNLOG.gz $DROPSOUTPUTFILE.gz $DROPSFOUNDFILE.gz $DROPSOUTPUTFILEFORMATTED.gz $TEMPDIR/$SCRIPT.$EPOCH.checkDrops.tar $TEMPDIR/$SCRIPT.$EPOCH.checkDropsSP.tar $TEMPDIR/$SCRIPT.$EPOCH.tempdir> /dev/null 2>&1
	fi
fi


cat $HISTORYLOG | grep $EPOCH > $CURRENTRUNHISTORYLOGOUTPUT

if [[ $displayCLI_problem != "1" ]]; then
	echo $EPOCH > $LASTRUNSUCCESSFILE
	if [[ $checkUltimateStatus_problem == "1" ]]; then
		echo "$EPOCH - PROBLEM - [$checkUltimateStatus_problemInfo ]" >> $LASTRUNSUCCESSFILE
	elif [[ $checkUltimateStatus_warning == "1" ]]; then
		echo "$EPOCH - WARNING - [$checkUltimateStatus_problemInfo ]" >> $LASTRUNSUCCESSFILE
	else
		echo "$EPOCH - WORKING" >> $LASTRUNSUCCESSFILE
	fi
fi

if [[ $SYSARG3 != "debug" ]]; then
	rm -f $RUNLOG.gz $SHOWCONFIG $VSXSTAT $DROPSOUTPUTFILE.gz $DROPSFOUNDFILE.gz $DROPSOUTPUTFILERAW $CONNECTIONSOUTPUTFILERAW $DROPSOUTPUTFILEFORMATTED.gz $TEMPFILE_SUMMARY $TEMPDIR/$SCRIPT.$EPOCH.checkDrops.tar $TEMPDIR/$SCRIPT.$EPOCH.checkDropsSP.tar> /dev/null 2>&1
fi

##Archive Old Files
if [[ $checkSelf_gatewayLogFileSize -gt "100000000" ]]; then
	mv $HISTORYLOG $HISTORYLOG.$EPOCH
	tail -10000 $HISTORYLOG.$EPOCH > $HISTORYLOG
	gzip $HISTORYLOG.$EPOCH
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - cleanUp_archiveHistoryLog - ORIG FILE SIZE: $checkSelf_gatewayLogFileSize MOVED $HISTORYLOG to $HISTORYLOG.$EPOCH" >>$HISTORYLOG
	sendSyslog "$functionName" "INFO" "cleanUp_archiveHistoryLog" "ORIG=\"$checkSelf_gatewayLogFileSize\" MOVEDFILE=\"$HISTORYLOG to $HISTORYLOG.$EPOCH\""
fi

if [[ $checkSelf_runLogTarFileSize -gt "100000000" ]]; then
	mv $RUNLOGTAR $RUNLOGTAR.$EPOCH
	gzip $RUNLOGTAR.$EPOCH
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - cleanUp_archiveRunLog - ORIG FILE SIZE: $checkSelf_runLogTarFileSize MOVED $RUNLOGTAR to $RUNLOGTAR.$EPOCH" >>$HISTORYLOG
	sendSyslog "$functionName" "INFO" "cleanUp_archiveRunLog" "ORIG=\"$checkSelf_runLogTarFileSize\" MOVEDFILE=\"$RUNLOGTAR to $RUNLOGTAR.$EPOCH\""
fi


##Final Cleanup - Anything more than 1 hour
cleanUp_finalQty=$(find $TEMPDIR -name "$SCRIPT*" -mmin +60 -type f | wc -l)
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - cleanUp_finalQty - $cleanUp_finalQty" >>$HISTORYLOG
sendSyslog "$functionName" "INFO" "cleanUp_finalQty" "VALUE=\"$cleanUp_finalQty\""
if [[ $cleanUp_finalQty -gt "0" ]]; then
	find $TEMPDIR -name "$SCRIPT*" -mmin +60 -type f -not -name '$CURRENTRUNHISTORYLOGOUTPUT' -delete > /dev/null 2>&1
fi

}

###################################################################################################
convert_to_epoch() {
  local timestamp="$1"
  # Use date command to convert the timestamp to epoch
  # Assuming the log format is "Month Day Time" e.g., "Jun 3 12:34:56"
  date --date="$timestamp" +%s
}

###################################################################################################
printvar() {
	echo "${!1}"
}

###################################################################################################
multiply_number() {

orignum="$1$2"

contains_k=$(echo $orignum | grep "K" | wc -l)
contains_m=$(echo $orignum | grep "M" | wc -l)
contains_g=$(echo $orignum | grep "G" | wc -l)

modnum=$(echo $orignum | tr -d ' ' | tr -d 'KMG')

if [[ $contains_k -eq "0" ]] && [[ $contains_m -eq "0" ]] && [[ $contains_g -eq "0" ]]; then
	number=$modnum
fi

if [[ $contains_k -gt "0" ]]; then
	number=$(echo "scale=0; $modnum * 1000" | bc | awk -F "." '{print $1}')
fi

if [[ $contains_m -gt "0" ]]; then
	number=$(echo "scale=0; $modnum * 1000000" | bc | awk -F "." '{print $1}')
fi

if [[ $contains_g -gt "0" ]]; then
	number=$(echo "scale=0; $modnum * 1000000000" | bc | awk -F "." '{print $1}')
fi

echo $number
}

###################################################################################################
since_time() {
num=$1 
cur=$(date +'%s')
diff="$(( cur - num ))"

time_since=$(conv_time $diff)
echo $time_since
}

###################################################################################################
since_time_epoch() {
num=$1 
cur=$(date +'%s')
diff="$(( cur - num ))"

echo $diff
}

###################################################################################################
conv_time() {
    num=$1
    sec=$((num % 60))
    num=$((num / 60))
    min=$((num % 60))
    num=$((num / 60))
    hour=$((num % 24))
    day=$((num / 24))

    echo "${day}d ${hour}h ${min}m ${sec}s"
}

###################################################################################################
average_values() {

#ARG 1 = number to be averaged
#ARG 2 = values spaced

ARG1=$1
ARG2=$2

if [[ $ARG1 -eq 3 ]]; then
	value1=$(echo $ARG2 | awk '{print $1}')
	if [[ $value1 == "" ]]; then
		value1="0"
	fi
	value2=$(echo $ARG2 | awk '{print $2}')
	if [[ $value2 == "" ]]; then
		value2="0"
	fi
	value3=$(echo $ARG2 | awk '{print $3}')
	if [[ $value3 == "" ]]; then
		value3="0"
	fi
	total_value=$(bc -l <<< "$value1 + $value2 + $value3")
	avg=`echo "$total_value / $ARG1" | bc -l`
	printf '%0.0f' "$avg"
fi
}

###################################################################################################
average_of() {
#ARG 1 = number to be averaged
#ARG 2 = divided by

ARG1=$1
ARG2=$2

if [[ $ARG2 -eq "0" ]]; then
	avg="0"
else
	avg=`echo "$ARG1 / $ARG2" | bc -l`
fi
printf '%0.0f' "$avg"

}

###################################################################################################
percentofvalue() {
#ARG 1 = value
#ARG 2 = total

ARG1=$1
ARG2=$2

if [[ $ARG2 == "0" ]]; then
	ARG2="1"
fi

if [[ $ARG1 == "0" && $ARG2 == "0" ]]; then
	value="0"
	echo $value
elif [[ $ARG1 -lt $ARG2 ]]; then
	value=$(echo "$ARG1 / $ARG2 * 100" | bc -l | awk -F "." '{print $1}')
	if [[ $value == "" ]]; then
		value="0"
	fi
	echo $value
elif [[ $ARG1 -ge $ARG2 ]]; then
	value=$(echo "$ARG1 / $ARG2 * 100" | bc -l | awk -F "." '{print $1}')
	if [[ $value == "" ]]; then
		value="0"
	fi
	echo $value
else
	echo "NA"
fi

}

###################################################################################################
snmp() {
#ARG 1 = oid



ARG1=$1

#SNMP_VER="2c"

if [[ $SNMP_VER == "2c" ]]; then
	RAW=$(snmpwalk -r 1 -v $SNMP_VER -c $SNMPCOMMUNITY localhost $ARG1 2>&1 | grep -v "buffer too" | grep -v "oldEngineID" | grep -v "net-snmp")
elif [[ $SNMP_VER == "3" ]]; then
	RAW=$(snmpwalk -r 1 -v $SNMP_VER -u $SNMP_USER -l authPriv -a $SNMP_AUTH_HASH -A $SNMP_AUTH -x $SNMP_PRIVACY_HASH -X $SNMP_PRIVACY localhost $ARG1 2>&1 | grep -v "buffer too" | grep -v "oldEngineID" | grep -v "net-snmp")
fi
RAW_LINES=$(echo "$RAW" | wc -l)
FAIL1=$(echo "$RAW" | grep "No Such Instance currently exists at this OID" | wc -l)
FAIL2=$(echo "$RAW" | grep "No Response" | wc -l)
FAIL3=$(echo "$RAW" | grep "Unknown host" | wc -l)
FAIL4=$(echo "$RAW" | grep "Authentication failure" | wc -l)
RAW_TYPE=$(echo "$RAW" | awk -F "=" '{print $2}' | awk -F ":" '{print $1}' | tr -d "[:blank:]")


if [[ $FAIL2 -eq "1" ]]; then
	COUNTER=0
	while [[ $FAIL2 -eq "1" ]] && [[ $COUNTER -lt "3" ]]; do
		sleep 2
		if [[ $SNMP_VER == "2c" ]]; then
			RAW=$(snmpwalk -r 1 -v $SNMP_VER -c $SNMPCOMMUNITY localhost $ARG1 2>&1 | grep -v "buffer too" | grep -v "oldEngineID" | grep -v "net-snmp")
		elif [[ $SNMP_VER == "3" ]]; then
			RAW=$(snmpwalk -r 1 -v $SNMP_VER -u $SNMP_USER -l authPriv -a $SNMP_AUTH_HASH -A $SNMP_AUTH -x $SNMP_PRIVACY_HASH -X $SNMP_PRIVACY localhost $ARG1 2>&1 | grep -v "buffer too" | grep -v "oldEngineID" | grep -v "net-snmp")
		fi
		RAW_LINES=$(echo "$RAW" | wc -l)
		FAIL1=$(echo "$RAW" | grep "No Such Instance currently exists at this OID" | wc -l)
		FAIL2=$(echo "$RAW" | grep "No Response" | wc -l)
		FAIL3=$(echo "$RAW" | grep "Unknown host" | wc -l)
		FAIL4=$(echo "$RAW" | grep "Authentication failure" | wc -l)
		RAW_TYPE=$(echo $RAW | awk -F "=" '{print $2}' | awk -F ":" '{print $1}' | tr -d "[:blank:]" | sort | uniq)
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - snmp - $ARG1 (RERUN 2 Seconds) ($COUNTER)" >>$HISTORYLOG
		let COUNTER=COUNTER+1
	done
fi




if [[ ! $FAIL1 == "0" ]]; then
	RESPONSE="SNMP_FAILED"
elif [[ ! $FAIL4 == "0" ]]; then
	RESPONSE="SNMP_FAILED"
else
	if [[ $FAIL2 == "0" && $FAIL3 == "0" ]]; then
		if [[ $RAW_TYPE == "Gauge32" ]] || [[ $RAW_TYPE == "Counter64" ]]; then
			if [[ $RAW_LINES -eq "1" ]]; then
				RESPONSE=$(echo "$RAW" | awk -F ":" '{print $NF}')
			elif [[ $RAW_LINES -ge "2" ]]; then
				RESPONSE=$(echo "$RAW" | awk -F ":" '{print $NF}' | paste -sd+ | bc)
			fi
		elif [[ $RAW_TYPE == "STRING" ]]; then
			if [[ $RAW_LINES -eq "1" ]]; then
				RESPONSE=$(echo "$RAW" | awk -F "STRING:" '{print $NF}' | tr -d '"')
			elif [[ $RAW_LINES -ge "2" ]]; then
				RESPONSE=$(echo "$RAW" | awk -F "STRING:" '{print $NF}' | tr -d '"' | tr '\n' ',')
			fi
		elif [[ $RAW_TYPE == "INTEGER" ]]; then
			if [[ $RAW_LINES -eq "1" ]]; then
				RESPONSE=$(echo "$RAW" | awk -F ":" '{print $NF}' | tr -d '"')
				if [[ $RESPONSE == "" ]]; then
					RESPONSE="SNMP_EMPTY"
				fi
			elif [[ $RAW_LINES -ge "2" ]]; then
				RESPONSE=$(echo "$RAW" | awk -F ":" '{print $NF}' | tr -d '"' | tr '\n' ',')
			fi
		else
			if [[ $RAW_LINES -eq "1" ]]; then
				#RESPONSE=$(echo "$RAW" | awk -F ":" '{print $NF}' | tr -d '"')
				RESPONSE=$(echo "$RAW" | awk -F "=" '{print $NF}' | tr -d '"')
				if [[ $RESPONSE == "" ]]; then
					RESPONSE="SNMP_EMPTY"
				fi
			elif [[ $RAW_LINES -ge "2" ]]; then
				RESPONSE=$(echo "$RAW" | awk -F ":" '{print $NF}' | tr -d '"' | tr '\n' ',')
			fi
		fi
	else
		RESPONSE="SNMP_FAILED"
	fi
fi
echo $RESPONSE
}

###################################################################################################
stattestget() {
#ARG 1 = oid

ARG1=$1
VALUE="STATTEST_FAIL"

RAW=$(stattest get -h $MGMTIP $ARG1)
STATUS=$(printf "%s\n" "$RAW" | grep "Status = " | head -1 | awk -F "=" '{print $2}' | tr -d '"[:space:]')

if [[ $STATUS == "OK" ]]; then
	REPLY=$(printf "%s\n" "$RAW" | awk '/Reply:/ {flag=1} flag && /\{/ {start=1; next} start {if(/\}/) {start=0; flag=0} else {print}}')
	ERROR=$(printf "%s\n" "$REPLY" | grep "Error  " | awk -F "= " '{print $2}' | tr -d '"')
	if [[ $ERROR =~ "OK" ]]; then
			VALUE=$(printf "%s\n" "$REPLY" | grep "Value  " | awk -F "= " '{print $2}' | tr -d '"')
	elif [[ $ERROR == "Not found" ]]; then
			VALUE="NOT_FOUND"
	else
			VALUE="STATTEST_FAIL"
	fi
else
      VALUE="STATTEST_FAIL"
fi


printf "%s\n" "$VALUE"
}

###################################################################################################
curl_output() {

TEMPFILE_CURL=$TEMPDIR/$SCRIPT.curl_output.$EPOCH
PROXY_ENABLED=$1
PROXY_IP=$2
PROXY_PORT=$3
URI=$4
TIMEOUT="2"
FAIL_COUNT="0"
COUNTER="0"
FAIL1="1"
FAIL2="1"
FAIL3="1"
FAIL4="1"

#curl_cli $PROXY_ENABLED $PROXY_IP $PROXY_PORT $URI

while [[ $FAIL1 -ge "1" || $FAIL2 -ge "1" || $FAIL2 -ge "4" ]] && [[ $COUNTER -le "2" ]]; do
	#PORT=$PORT_START
	if [[ $PROXY_ENABLED == "true" ]]; then
		curl_cli -x http://$PROXY_IP:$PROXY_PORT -m $TIMEOUT -v -k $URI > $TEMPFILE_CURL 2>&1
	else
		curl_cli -m $TIMEOUT -v -k $URI > $TEMPFILE_CURL 2>&1
	fi
	
	dos2unix $TEMPFILE_CURL > /dev/null 2>&1
	
	FAIL1=$(cat $TEMPFILE_CURL | grep "Cannot assign requested address" | wc -l)
	FAIL2=$(cat $TEMPFILE_CURL | grep "timed out\|SSL connection timeout" | wc -l)
	FAIL4=$(cat $TEMPFILE_CURL | grep "name lookup timed out" | wc -l)
	if [[ $FAIL1 -ge "1" ]] ; then
		EXIT_REASON="Cannot assign requested address"
		FAILURE="$FAILURE [$COUNTER - Cannot assign requested address]"
	elif [[ $FAIL4 -ge "1" ]]; then
		EXIT_REASON="Name lookup timed out ($PROXY_IP)"
		FAILURE="$FAILURE [$COUNTER - Name lookup timed out ($PROXY_IP)]"
	elif [[ $FAIL2 -ge "1" ]]; then
		EXIT_REASON="Connection timed out"
		FAILURE="$FAILURE [$COUNTER - Connection timed out]"
	else
		EXIT_REASON="Success"
		FAILURE="$FAILURE [$COUNTER - Success]"
	fi
	
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - curl_cli - $URI $PROXY_IP_RESOLVED $PROXY_CONNECTED ($COUNTER) $EXIT_REASON" >> $HISTORYLOG

	if [[ $PROXY_ENABLED == "true" ]]; then
		PROXY_IP_RESOLVED=$(cat $TEMPFILE_CURL | grep "Trying " | grep -oP "(\d+\.){3}\d+" | head -1)
		PROXY_CONNECTED=$(cat $TEMPFILE_CURL | grep "Via" | grep -oP "(\d+\.){3}\d+" | head -1)
	else
		PROXY_IP_RESOLVED=$(cat $TEMPFILE_CURL | grep "Trying " | grep -oP "(\d+\.){3}\d+" | head -1)
		PROXY_CONNECTED="n/a"
	fi
	RAW=$(cat $TEMPFILE_CURL | grep -v "TCP_NODELAY\|Total\|Speed\|--:--:--\|intact\|TLS\|bytes\|Cipher\|servercert" | tr '\n' '|')
	sendSyslog "curl_output" "INFO" "curl_output" "URI=\"$URI\" PROXY_ENABLED=\"$PROXY_ENABLED\" PROXY_IP_RESOLVED=\"$PROXY_IP_RESOLVED\" PROXY_CONNECTED=\"$PROXY_CONNECTED\" ATTEMPT=\"$COUNTER\" FAIL_COUNT=\"$FAIL_COUNT\" EXIT_REASON=\"$EXIT_REASON\" FAILURE=\"$FAILURE\" SOCKET_NS1=\"$SOCKET_NS1\" SOCKET_NS2=\"$SOCKET_NS2\" SOCKET_SS=\"$SOCKET_SS\" SOCKET_COUNT=\"$SOCKET_COUNT\" SOCKET_DETAIL=\"$SOCKET_DETAIL\" RAW_OUTPUT=\"$RAW\""

	let COUNTER=COUNTER+1
	let FAIL_COUNT=FAIL_COUNT+1
	sleep 1
done


cat $TEMPFILE_CURL
rm -f $TEMPFILE_CURL
}

###################################################################################################
hex2dot() {
HEXTODEC=$(printf "%d" 0x$1)
local IP DEC=$HEXTODEC
for EXP in {3..0};do
		((OCTET = DEC / (256 ** EXP) ))
		((DEC -= OCTET * 256 ** EXP))
		IP+=$DELIMETER$OCTET
		DELIMETER=.
done
printf '%s\n' "$IP"
}

###################################################################################################
compressIpv6() {
ORIG_ADDR=$1

#Add colons
FORMATTED_ADDR=$(echo $ORIG_ADDR | sed -E 's/([[:xdigit:]]{4})/\1:/g; s/:$//; s/(:|^)(0{1,3}:)+/\1::/')

OCTET1=$(echo $FORMATTED_ADDR | awk -F ":" '{print $1}' | awk '{gsub(/^0+/, ""); print}')
OCTET2=$(echo $FORMATTED_ADDR | awk -F ":" '{print $2}' | awk '{gsub(/^0+/, ""); print}')
OCTET3=$(echo $FORMATTED_ADDR | awk -F ":" '{print $3}' | awk '{gsub(/^0+/, ""); print}')
OCTET4=$(echo $FORMATTED_ADDR | awk -F ":" '{print $4}' | awk '{gsub(/^0+/, ""); print}')
OCTET5=$(echo $FORMATTED_ADDR | awk -F ":" '{print $5}' | awk '{gsub(/^0+/, ""); print}')
OCTET6=$(echo $FORMATTED_ADDR | awk -F ":" '{print $6}' | awk '{gsub(/^0+/, ""); print}')
OCTET7=$(echo $FORMATTED_ADDR | awk -F ":" '{print $7}' | awk '{gsub(/^0+/, ""); print}')
OCTET8=$(echo $FORMATTED_ADDR | awk -F ":" '{print $8}' | awk '{gsub(/^0+/, ""); print}')


#Remove zeros
if [[ $OCTET1 == "0" ]]; then
        OCTET1=""
fi
if [[ $OCTET2 == "0" ]]; then
        OCTET2=""
fi
if [[ $OCTET3 == "0" ]]; then
        OCTET3=""
fi
if [[ $OCTET4 == "0" ]]; then
        OCTET5=""
fi
if [[ $OCTET5 == "0" ]]; then
        OCTET5=""
fi
if [[ $OCTET6 == "0" ]]; then
        OCTET6=""
fi
if [[ $OCTET7 == "0" ]]; then
        OCTET7=""
fi
if [[ $OCTET8 == "0" ]]; then
        OCTET8=""
fi

#Final
FINAL=$(echo "$OCTET1:$OCTET2:$OCTET3:$OCTET4:$OCTET5:$OCTET6:$OCTET7:$OCTET8" | sed 's/::\+/::/g')

echo $FINAL

}

###################################################################################################
cidr2mask() {

CIDR=$1

if [[ $CIDR == "32" ]]; then
	MASK="255.255.255.255"
elif [[ $CIDR == "31" ]]; then
	MASK="255.255.255.254"
elif [[ $CIDR == "30" ]]; then
	MASK="255.255.255.252"
elif [[ $CIDR == "29" ]]; then
	MASK="255.255.255.248"
elif [[ $CIDR == "28" ]]; then
	MASK="255.255.255.240"
elif [[ $CIDR == "27" ]]; then
	MASK="255.255.255.224"
elif [[ $CIDR == "26" ]]; then
	MASK="255.255.255.192"
elif [[ $CIDR == "25" ]]; then
	MASK="255.255.255.128"
elif [[ $CIDR == "24" ]]; then
	MASK="255.255.255.0"
elif [[ $CIDR == "23" ]]; then
	MASK="255.255.254.0"
elif [[ $CIDR == "22" ]]; then
	MASK="255.255.252.0"
elif [[ $CIDR == "21" ]]; then
	MASK="255.255.248.0"
elif [[ $CIDR == "20" ]]; then
	MASK="255.255.240.0"
elif [[ $CIDR == "19" ]]; then
	MASK="255.255.224.0"
elif [[ $CIDR == "18" ]]; then
	MASK="255.255.192.0"
elif [[ $CIDR == "17" ]]; then
	MASK="255.255.128.0"
elif [[ $CIDR == "16" ]]; then
	MASK="255.255.0.0"
elif [[ $CIDR == "15" ]]; then
	MASK="255.254.0.0"
elif [[ $CIDR == "14" ]]; then
	MASK="255.252.0.0"
elif [[ $CIDR == "13" ]]; then
	MASK="255.248.0.0"
elif [[ $CIDR == "12" ]]; then
	MASK="255.240.0.0"
elif [[ $CIDR == "11" ]]; then
	MASK="255.224.0.0"
elif [[ $CIDR == "10" ]]; then
	MASK="255.192.0.0"
elif [[ $CIDR == "9" ]]; then
	MASK="255.128.0.0"
elif [[ $CIDR == "8" ]]; then
	MASK="255.0.0.0"
elif [[ $CIDR == "7" ]]; then
	MASK="254.0.0.0"
elif [[ $CIDR == "6" ]]; then
	MASK="252.0.0.0"
elif [[ $CIDR == "5" ]]; then
	MASK="248.0.0.0"
elif [[ $CIDR == "4" ]]; then
	MASK="240.0.0.0"
elif [[ $CIDR == "3" ]]; then
	MASK="224.0.0.0"
elif [[ $CIDR == "2" ]]; then
	MASK="192.0.0.0"
elif [[ $CIDR == "1" ]]; then
	MASK="128.0.0.0"
elif [[ $CIDR == "0" ]]; then
	MASK="0.0.0.0"
else
	MASK="NA"
fi	
echo $MASK
}

###################################################################################################
sendSyslog() {
# sendSyslog_fStartMs=$(date +%s%3N)
FUNCTION=$1
STATUS=$2
SUBFUNCTION=$3
VALUEIN=$4

#LIMIT to 1000 characters total to avoid overrunning syslog length
VALUELENGTH=$(echo "$VALUEIN" | wc | awk '{print $NF}' | tr -d ' ')
if [[ $VALUELENGTH -ge "993" ]]; then
	VALUESHORT=$(echo "$VALUEIN" | cut -c -993)
	VALUE="$VALUESHORT...more\""
else
	VALUE=$VALUEIN
fi
LEVEL=$5


if [[ $checkSelf_hwtype == "SP" ]] || [[ $checkSelf_hwtype == "MAESTRO" ]]; then
	if [[ $LEVEL == "" ]]; then
		LEVEL="SGM"
	fi
else
	LEVEL="Not_Available"
fi

if [[ $checkSelf_hwtype == "SP" ]]; then
	if [[ $LOCALCHASSIS == $ACTIVECHASSIS ]]; then
		CXL="Active"
	else
		CXL="Standby"
	fi
else
	if [[ $checkClusterXL_state == "active" ]] || [[ $IDSENABLED == "1" ]]; then
		CXL="Active"
	elif [[ $checkClusterXL_state == "standby" ]]; then
		CXL="Standby"
	else
		CXL="Not_Available"
	fi
fi


# echo "1 - $1 FUNCTION-$FUNCTION" > /dev/null
# echo "2 - $2 STATUS=$STATUS" > /dev/null
# echo "3 - $3 SUBFUNCTION=$SUBFUNCTION" > /dev/null
# echo "4 - $4 VALUEIN=$VALUEIN" > /dev/null
# echo "5 - $5 LEVEL=$LEVEL" > /dev/null
# echo "CXL - $CXL" > /dev/null


if [[ $LEVEL == "SMO" ]]; then
	$LOGGER "S_NAME=\"FWHealthCheck\" S_HASH=\"$SCRIPTHASH\" S_VER=\"$SCRIPTVERSION\" EPOCH=\"$EPOCH\" HOSTNAME=\"$CLUSTERNAME\" CLUSTERNAME=\"$CLUSTERNAME\" LEVEL=\"$LEVEL\" CXL=\"$CXL\" FUNCTION=\"$FUNCTION\" STATUS=\"$STATUS\" SUB_FUNCTION=\"$SUBFUNCTION\" $VALUE"
elif [[ $LEVEL == "SGM" ]]; then
	$LOGGER "S_NAME=\"FWHealthCheck\" S_HASH=\"$SCRIPTHASH\" S_VER=\"$SCRIPTVERSION\" EPOCH=\"$EPOCH\" HOSTNAME=\"$HOSTNAME\" CLUSTERNAME=\"$CLUSTERNAME\" LEVEL=\"$LEVEL\" CXL=\"$CXL\" FUNCTION=\"$FUNCTION\" STATUS=\"$STATUS\" SUB_FUNCTION=\"$SUBFUNCTION\" $VALUE"
else
	$LOGGER "S_NAME=\"FWHealthCheck\" S_HASH=\"$SCRIPTHASH\" S_VER=\"$SCRIPTVERSION\" EPOCH=\"$EPOCH\" HOSTNAME=\"$HOSTNAME\" CLUSTERNAME=\"$CLUSTERNAME\" CXL=\"$CXL\" FUNCTION=\"$FUNCTION\" STATUS=\"$STATUS\" SUB_FUNCTION=\"$SUBFUNCTION\" $VALUE"
fi	

# if [[ $HOSTNAME == "FWTPOL0504" || $HOSTNAME =~ "IDSHOU0101" ]]; then
	# log "$FUNCTION" "$STATUS" "$SUBFUNCTION" "$VALUEIN"
# fi

# sendSyslog_fEndMs=$(date +%s%3N)
# sendSyslog_fRunTimeMs=$(( sendSyslog_fEndMs - sendSyslog_fStartMs ))
# sendSyslog_fRunTimeMsTotal=$(( sendSyslog_fRunTimeMsTotal + sendSyslog_fRunTimeMs ))
# let sendSyslog_fExecutionCycles=sendSyslog_fExecutionCycles+1

}

###################################################################################################
log() {
FUNCTION=$1
STATUS=$2
SUBFUNCTION=$3
VALUEIN=$4
LEVEL=$5

if [[ $checkSelf_hwtype == "SP" ]] || [[ $checkSelf_hwtype == "MAESTRO" ]]; then
	if [[ $LEVEL == "" ]]; then
		LEVEL="SGM"
	fi
else
	LEVEL="Not_Available"
fi

if [[ $checkSelf_hwtype == "SP" ]]; then
	if [[ $LOCALCHASSIS == $ACTIVECHASSIS ]]; then
		CXL="Active"
	else
		CXL="Standby"
	fi
else
	if [[ $checkClusterXL_state == "active" ]] || [[ $IDSENABLED == "1" ]]; then
		CXL="Active"
	elif [[ $checkClusterXL_state == "standby" ]]; then
		CXL="Standby"
	else
		CXL="Not_Available"
	fi
fi

echo "S_NAME=\"FWHealthCheck\" S_HASH=\"$SCRIPTHASH\" S_VER=\"2\" EPOCH=\"$EPOCH\" HOSTNAME=\"$HOSTNAME\" CLUSTERNAME=\"$CLUSTERNAME\" CXL=\"$CXL\" FUNCTION=\"$FUNCTION\" STATUS=\"$STATUS\" SUB_FUNCTION=\"$SUBFUNCTION\" $VALUE" >> $SYSLOG_FILE
#echo "S_NAME=\"FWHealthCheck\" S_HASH=\"$SCRIPTHASH\" S_VER=\"2\" EPOCH=\"$EPOCH\" HOSTNAME=\"$HOSTNAME\" CLUSTERNAME=\"$CLUSTERNAME\" CXL=\"$CXL\" FUNCTION=\"$FUNCTION\" STATUS=\"$STATUS\" SUB_FUNCTION=\"$SUBFUNCTION\" $VALUE" >> $TEMPDIR/$SCRIPT.current2

}

###################################################################################################
processLog() {

/usr/bin/logger -T -P 2013 -n $SYSLOG_SERVER -f $SYSLOG_FILE
if [[ $? -eq "0" ]]; then
	cat $SYSLOG_FILE >> $TEMPDIR/$SCRIPT.current2
	rm $SYSLOG_FILE
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Overall Status - Successfully sent to $SYSLOG_SERVER" >> $HISTORYLOG
else
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Overall Status - Failed to send to $SYSLOG_SERVER" >> $HISTORYLOG
	SYSLOG_SERVER2=$(cat /config/active | grep "syslog:action:remote" | awk -F ":" '{print $4}' | awk '{print $1}' | sort -n | uniq | grep -v $SYSLOG_SERVER | head -1)
	/usr/bin/logger -T -P 2013 -n $SYSLOG_SERVER2 -f $SYSLOG_FILE
	if [[ $? -eq "0" ]]; then
		cat $SYSLOG_FILE >> $TEMPDIR/$SCRIPT.current2
		rm $SYSLOG_FILE
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Overall Status - Successfully sent to $SYSLOG_SERVER2" >> $HISTORYLOG
	else
		cat $SYSLOG_FILE >> $TEMPDIR/$SCRIPT.current2
		echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Overall Status - Failed to send to $SYSLOG_SERVER2" >> $HISTORYLOG
	fi
fi

}

###################################################################################################
displayLoggingSP(){
echo "START==displayLoggingSP" >> $RUNLOG

#DEFAULTS
displayLoggingSP_problem="0"
functionName=${FUNCNAME[0]}
originalFunctionName=$(echo $functionName | sed -n 's/display/check/p')

#COLLECT OUTPUTS
for LINE in `echo $ALLSGM` ; do
	if [[ $LINE == $LOCALSGM ]]; then
		LOGLINE=$(cat $HISTORYLOG | grep $EPOCH | grep $originalFunctionName | grep SUMMARY | tail -1)
	else
		LOGLINE=$(cat $TEMPFILE_SUMMARY | grep $LINE | grep $originalFunctionName | tail -1)
	fi
	STATUS=$(echo $LOGLINE | awk -F " -" '{print $6}')
	SUMMARYHASH=$(echo $LOGLINE | awk -F " - " '{print $2}' | cut -c -4)
	EPOCHSUMMARY=$(echo $LOGLINE | awk -F "- " '{print $3}' | tr -d ' ')
	EPOCHDIFF="$(( EPOCH - EPOCHSUMMARY ))"
	EPOCHSUMMARYCONV=$(conv_time $EPOCHDIFF)
	INFO=$(echo $LOGLINE | awk -F " -" '{print $7}')

	if [[ $STATUS == "" ]]; then
		STATUS=" WARNING"
		INFO=" [No output found, possible script or configuration issue]"
	elif [[ $EPOCHDIFF -gt "600" ]]; then
		STATUS=" WARNING"
		INFO=" [Expired Output - $EPOCHSUMMARYCONV ($EPOCHSUMMARY)]"
	elif [[ $SUMMARYHASH != $SCRIPTHASH ]]; then
		STATUS=" WARNING"
		INFO=" [Script Mismatch - Master: $SCRIPTHASH Remote: $SUMMARYHASH]"
	fi
	
	printf "...$LINE\t\t|$STATUS | $INFO\n"
	if [[ $STATUS == " PROBLEM" ]]; then
		displayLoggingSP_problem="1"
		displayLoggingSP_problemInfo="$displayLoggingSP_problemInfo $LINE $INFO"
	elif [[ $STATUS == " WARNING" ]]; then
		displayLoggingSP_warning="1"
		displayLoggingSP_warningInfo="$displayLoggingSP_warningInfo $LINE $INFO"
	else
		displayLoggingSP_workingInfo="$displayLoggingSP_workingInfo $LINE $INFO"
	fi
	
done


#LOG OUTPUTS
echo "displayLoggingSP_overallStatus $displayLoggingSP_overallStatus" >> $RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Overall Status - $displayLoggingSP_overallStatus" >> $HISTORYLOG

#RUN LOGIC

#SYSLOG
if [[ $displayLoggingSP_problem == "1" ]]; then
	sendSyslog "$functionName" "PROBLEM" "displayLoggingSP_problemInfo" "VALUE=\"$displayLoggingSP_problemInfo\"" "SMO"
elif [[ $displayLoggingSP_warning == "1" ]]; then
	sendSyslog "$functionName" "WARNING" "displayLoggingSP_warningInfo" "VALUE=\"$displayLoggingSP_warningInfo\"" "SMO"
else
	sendSyslog "$functionName" "WORKING" "displayLoggingSP_workingInfo" "VALUE=\"$displayLoggingSP_workingInfo\"" "SMO"
fi
sendSyslog "$functionName" "INFO" "displayLoggingSP_overallStatus" "VALUE=\"$displayLoggingSP_overallStatus\"" "SMO"

echo "displayLoggingSP_warning $displayLoggingSP_warning" >> $RUNLOG
echo "displayLoggingSP_problem $displayLoggingSP_problem" >> $RUNLOG
echo "END==displayLoggingSP" >> $RUNLOG
}

###################################################################################################
displayHardwareSP(){
echo "START==displayHardwareSP" >> $RUNLOG

#DEFAULTS
displayHardwareSP_problem="0"
functionName=${FUNCNAME[0]}
originalFunctionName=$(echo $functionName | sed -n 's/display/check/p')

#COLLECT OUTPUTS
for LINE in `echo $ALLSGM` ; do
	if [[ $LINE == $LOCALSGM ]]; then
		LOGLINE=$(cat $HISTORYLOG | grep $EPOCH | grep $originalFunctionName | grep SUMMARY | tail -1)
	else
		LOGLINE=$(cat $TEMPFILE_SUMMARY | grep $LINE | grep $originalFunctionName | tail -1)
	fi
	STATUS=$(echo $LOGLINE | awk -F " -" '{print $6}')
	SUMMARYHASH=$(echo $LOGLINE | awk -F " - " '{print $2}' | cut -c -4)
	EPOCHSUMMARY=$(echo $LOGLINE | awk -F "- " '{print $3}' | tr -d ' ')
	EPOCHDIFF="$(( EPOCH - EPOCHSUMMARY ))"
	EPOCHSUMMARYCONV=$(conv_time $EPOCHDIFF)
	INFO=$(echo $LOGLINE | awk -F " -" '{print $7}')
	
	if [[ $STATUS == "" ]]; then
		STATUS=" WARNING"
		INFO=" [No output found, possible script or configuration issue]"
	elif [[ $EPOCHDIFF -gt "600" ]]; then
		STATUS=" WARNING"
		INFO=" [Expired Output - $EPOCHSUMMARYCONV ($EPOCHSUMMARY)]"
	elif [[ $SUMMARYHASH != $SCRIPTHASH ]]; then
		STATUS=" WARNING"
		INFO=" [Script Mismatch - Master: $SCRIPTHASH Remote: $SUMMARYHASH]"
	fi
	
	printf "...$LINE\t\t|$STATUS | $INFO\n"
	if [[ $STATUS == " PROBLEM" ]]; then
		displayHardwareSP_problem="1"
		displayHardwareSP_problemInfo="$displayHardwareSP_problemInfo $LINE $INFO"
	elif [[ $STATUS == " WARNING" ]]; then
		displayHardwareSP_warning="1"
		displayHardwareSP_warningInfo="$displayHardwareSP_warningInfo $LINE $INFO"
	else
		displayHardwareSP_workingInfo="$displayHardwareSP_workingInfo $LINE $INFO"
	fi
	
done


#LOG OUTPUTS
echo "displayHardwareSP_overallStatus $displayHardwareSP_overallStatus" >> $RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Overall Status - $displayHardwareSP_overallStatus" >> $HISTORYLOG

#RUN LOGIC

#SYSLOG
if [[ $displayHardwareSP_problem == "1" ]]; then
	sendSyslog "$functionName" "PROBLEM" "displayHardwareSP_problemInfo" "VALUE=\"$displayHardwareSP_problemInfo\"" "SMO"
elif [[ $displayHardwareSP_warning == "1" ]]; then
	sendSyslog "$functionName" "WARNING" "displayHardwareSP_warningInfo" "VALUE=\"$displayHardwareSP_warningInfo\"" "SMO"
else
	sendSyslog "$functionName" "WORKING" "displayHardwareSP_workingInfo" "VALUE=\"$displayHardwareSP_workingInfo\"" "SMO"
fi
sendSyslog "$functionName" "INFO" "displayHardwareSP_overallStatus" "VALUE=\"$displayHardwareSP_overallStatus\"" "SMO"

echo "displayHardwareSP_warning $displayHardwareSP_warning" >> $RUNLOG
echo "displayHardwareSP_problem $displayHardwareSP_problem" >> $RUNLOG
echo "END==displayHardwareSP" >> $RUNLOG
}

###################################################################################################
displayClusterXLSP(){
echo "START==displayClusterXLSP" >> $RUNLOG

#DEFAULTS
displayClusterXLSP_problem="0"
functionName=${FUNCNAME[0]}
originalFunctionName=$(echo $functionName | sed -n 's/display/check/p')

#COLLECT OUTPUTS
for LINE in `echo $ALLSGM` ; do
	if [[ $LINE == $LOCALSGM ]]; then
		LOGLINE=$(cat $HISTORYLOG | grep $EPOCH | grep $originalFunctionName | grep SUMMARY | tail -1)
	else
		LOGLINE=$(cat $TEMPFILE_SUMMARY | grep $LINE | grep $originalFunctionName | tail -1)
	fi
	STATUS=$(echo $LOGLINE | awk -F " -" '{print $6}')
	SUMMARYHASH=$(echo $LOGLINE | awk -F " - " '{print $2}' | cut -c -4)
	EPOCHSUMMARY=$(echo $LOGLINE | awk -F "- " '{print $3}' | tr -d ' ')
	EPOCHDIFF="$(( EPOCH - EPOCHSUMMARY ))"
	EPOCHSUMMARYCONV=$(conv_time $EPOCHDIFF)
	INFO=$(echo $LOGLINE | awk -F " -" '{print $7}')


	if [[ $STATUS == "" ]]; then
		STATUS=" WARNING"
		INFO=" [No output found, possible script or configuration issue]"
	elif [[ $EPOCHDIFF -gt "600" ]]; then
		STATUS=" WARNING"
		INFO=" [Expired Output - $EPOCHSUMMARYCONV ($EPOCHSUMMARY)]"
	elif [[ $SUMMARYHASH != $SCRIPTHASH ]]; then
		STATUS=" WARNING"
		INFO=" [Script Mismatch - Master: $SCRIPTHASH Remote: $SUMMARYHASH]"
	fi
	
	printf "...$LINE\t\t|$STATUS | $INFO\n"
	if [[ $STATUS == " PROBLEM" ]]; then
		displayClusterXLSP_problem="1"
		displayClusterXLSP_problemInfo="$displayClusterXLSP_problemInfo $LINE $INFO"
	elif [[ $STATUS == " WARNING" ]]; then
		displayClusterXLSP_warning="1"
		displayClusterXLSP_warningInfo="$displayClusterXLSP_warningInfo $LINE $INFO"
	else
		displayClusterXLSP_workingInfo="$displayClusterXLSP_workingInfo $LINE $INFO"
	fi
	
done


#LOG OUTPUTS
echo "displayClusterXLSP_overallStatus $displayClusterXLSP_overallStatus" >> $RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Overall Status - $displayClusterXLSP_overallStatus" >> $HISTORYLOG

#RUN LOGIC

#SYSLOG
if [[ $displayClusterXLSP_problem == "1" ]]; then
	sendSyslog "$functionName" "PROBLEM" "displayClusterXLSP_problemInfo" "VALUE=\"$displayClusterXLSP_problemInfo\"" "SMO"
elif [[ $displayClusterXLSP_warning == "1" ]]; then
	sendSyslog "$functionName" "WARNING" "displayClusterXLSP_warningInfo" "VALUE=\"$displayClusterXLSP_warningInfo\"" "SMO"
else
	sendSyslog "$functionName" "WORKING" "displayClusterXLSP_workingInfo" "VALUE=\"$displayClusterXLSP_workingInfo\"" "SMO"
fi
sendSyslog "$functionName" "INFO" "displayClusterXLSP_overallStatus" "VALUE=\"$displayClusterXLSP_overallStatus\"" "SMO"

echo "displayClusterXLSP_warning $displayClusterXLSP_warning" >> $RUNLOG
echo "displayClusterXLSP_problem $displayClusterXLSP_problem" >> $RUNLOG
echo "END==displayClusterXLSP" >> $RUNLOG
}

###################################################################################################
displayPolicySP(){
echo "START==displayPolicySP" >> $RUNLOG

#DEFAULTS
displayPolicySP_problem="0"
functionName=${FUNCNAME[0]}
originalFunctionName=$(echo $functionName | sed -n 's/display/check/p')

#COLLECT OUTPUTS
for LINE in `echo $ALLSGM` ; do
	if [[ $LINE == $LOCALSGM ]]; then
		LOGLINE=$(cat $HISTORYLOG | grep $EPOCH | grep $originalFunctionName | grep SUMMARY | tail -1)
	else
		LOGLINE=$(cat $TEMPFILE_SUMMARY | grep $LINE | grep $originalFunctionName | tail -1)
	fi
	STATUS=$(echo $LOGLINE | awk -F " -" '{print $6}')
	SUMMARYHASH=$(echo $LOGLINE | awk -F " - " '{print $2}' | cut -c -4)
	EPOCHSUMMARY=$(echo $LOGLINE | awk -F "- " '{print $3}' | tr -d ' ')
	EPOCHDIFF="$(( EPOCH - EPOCHSUMMARY ))"
	EPOCHSUMMARYCONV=$(conv_time $EPOCHDIFF)
	INFO=$(echo $LOGLINE | awk -F " -" '{print $7}')


	if [[ $STATUS == "" ]]; then
		STATUS=" WARNING"
		INFO=" [No output found, possible script or configuration issue]"
	elif [[ $EPOCHDIFF -gt "600" ]]; then
		STATUS=" WARNING"
		INFO=" [Expired Output - $EPOCHSUMMARYCONV ($EPOCHSUMMARY)]"
	elif [[ $SUMMARYHASH != $SCRIPTHASH ]]; then
		STATUS=" WARNING"
		INFO=" [Script Mismatch - Master: $SCRIPTHASH Remote: $SUMMARYHASH]"
	fi
	
	printf "...$LINE\t\t|$STATUS | $INFO\n"
	if [[ $STATUS == " PROBLEM" ]]; then
		displayPolicySP_problem="1"
		displayPolicySP_problemInfo="$displayPolicySP_problemInfo $LINE $INFO"
	elif [[ $STATUS == " WARNING" ]]; then
		displayPolicySP_warning="1"
		displayPolicySP_warningInfo="$displayPolicySP_warningInfo $LINE $INFO"
	else
		displayPolicySP_workingInfo="$displayPolicySP_workingInfo $LINE $INFO"
	fi
	
done


#LOG OUTPUTS
echo "displayPolicySP_overallStatus $displayPolicySP_overallStatus" >> $RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Overall Status - $displayPolicySP_overallStatus" >> $HISTORYLOG

#RUN LOGIC

#SYSLOG
if [[ $displayPolicySP_problem == "1" ]]; then
	sendSyslog "$functionName" "PROBLEM" "displayPolicySP_problemInfo" "VALUE=\"$displayPolicySP_problemInfo\"" "SMO"
elif [[ $displayPolicySP_warning == "1" ]]; then
	sendSyslog "$functionName" "WARNING" "displayPolicySP_warningInfo" "VALUE=\"$displayPolicySP_warningInfo\"" "SMO"
else
	sendSyslog "$functionName" "WORKING" "displayPolicySP_workingInfo" "VALUE=\"$displayPolicySP_workingInfo\"" "SMO"
fi
sendSyslog "$functionName" "INFO" "displayPolicySP_overallStatus" "VALUE=\"$displayPolicySP_overallStatus\"" "SMO"

echo "displayPolicySP_warning $displayPolicySP_warning" >> $RUNLOG
echo "displayPolicySP_problem $displayPolicySP_problem" >> $RUNLOG
echo "END==displayPolicySP" >> $RUNLOG
}

###################################################################################################
displayConnectionsSP(){
echo "START==displayConnectionsSP" >> $RUNLOG

#DEFAULTS
displayConnectionsSP_problem="0"
functionName=${FUNCNAME[0]}
originalFunctionName=$(echo $functionName | sed -n 's/display/check/p')

#COLLECT OUTPUTS
for LINE in `echo $ALLSGM` ; do
	if [[ $LINE == $LOCALSGM ]]; then
		LOGLINE=$(cat $HISTORYLOG | grep $EPOCH | grep $originalFunctionName | grep SUMMARY | tail -1)
	else
		LOGLINE=$(cat $TEMPFILE_SUMMARY | grep $LINE | grep $originalFunctionName | tail -1)
	fi
	STATUS=$(echo $LOGLINE | awk -F " -" '{print $6}')
	SUMMARYHASH=$(echo $LOGLINE | awk -F " - " '{print $2}' | cut -c -4)
	EPOCHSUMMARY=$(echo $LOGLINE | awk -F "- " '{print $3}' | tr -d ' ')
	EPOCHDIFF="$(( EPOCH - EPOCHSUMMARY ))"
	EPOCHSUMMARYCONV=$(conv_time $EPOCHDIFF)
	INFO=$(echo $LOGLINE | awk -F " -" '{print $7}')
	
	if [[ $STATUS == "" ]]; then
		STATUS=" WARNING"
		INFO=" [No output found, possible script or configuration issue]"
	elif [[ $EPOCHDIFF -gt "600" ]]; then
		STATUS=" WARNING"
		INFO=" [Expired Output - $EPOCHSUMMARYCONV ($EPOCHSUMMARY)]"
	elif [[ $SUMMARYHASH != $SCRIPTHASH ]]; then
		STATUS=" WARNING"
		INFO=" [Script Mismatch - Master: $SCRIPTHASH Remote: $SUMMARYHASH]"
	fi
	
	printf "...$LINE\t\t|$STATUS | $INFO\n"
	if [[ $STATUS == " PROBLEM" ]]; then
		displayConnectionsSP_problem="1"
		displayConnectionsSP_problemInfo="$displayConnectionsSP_problemInfo $LINE $INFO"
	elif [[ $STATUS == " WARNING" ]]; then
		displayConnectionsSP_warning="1"
		displayConnectionsSP_warningInfo="$displayConnectionsSP_warningInfo $LINE $INFO"
	else
		displayConnectionsSP_workingInfo="$displayConnectionsSP_workingInfo $LINE $INFO"
	fi
	
done


#LOG OUTPUTS
echo "displayConnectionsSP_overallStatus $displayConnectionsSP_overallStatus" >> $RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Overall Status - $displayConnectionsSP_overallStatus" >> $HISTORYLOG

#RUN LOGIC

#SYSLOG
if [[ $displayConnectionsSP_problem == "1" ]]; then
	sendSyslog "$functionName" "PROBLEM" "displayConnectionsSP_problemInfo" "VALUE=\"$displayConnectionsSP_problemInfo\"" "SMO"	
elif [[ $displayConnectionsSP_warning == "1" ]]; then
	sendSyslog "$functionName" "WARNING" "displayConnectionsSP_warningInfo" "VALUE=\"$displayConnectionsSP_warningInfo\"" "SMO"
else
	sendSyslog "$functionName" "WORKING" "displayConnectionsSP_workingInfo" "VALUE=\"$displayConnectionsSP_workingInfo\"" "SMO"
fi
sendSyslog "$functionName" "INFO" "displayConnectionsSP_overallStatus" "VALUE=\"$displayConnectionsSP_overallStatus\"" "SMO"

echo "displayConnectionsSP_warning $displayConnectionsSP_warning" >> $RUNLOG
echo "displayConnectionsSP_problem $displayConnectionsSP_problem" >> $RUNLOG
echo "END==displayConnectionsSP" >> $RUNLOG
}

###################################################################################################
displaySecureXLSP(){
echo "START==displaySecureXLSP" >> $RUNLOG

#DEFAULTS
displaySecureXLSP_problem="0"
functionName=${FUNCNAME[0]}
originalFunctionName=$(echo $functionName | sed -n 's/display/check/p')

#COLLECT OUTPUTS
for LINE in `echo $ALLSGM` ; do
	if [[ $LINE == $LOCALSGM ]]; then
		LOGLINE=$(cat $HISTORYLOG | grep $EPOCH | grep $originalFunctionName | grep SUMMARY | tail -1)
	else
		LOGLINE=$(cat $TEMPFILE_SUMMARY | grep $LINE | grep $originalFunctionName | tail -1)
	fi
	STATUS=$(echo $LOGLINE | awk -F " -" '{print $6}')
	SUMMARYHASH=$(echo $LOGLINE | awk -F " - " '{print $2}' | cut -c -4)
	EPOCHSUMMARY=$(echo $LOGLINE | awk -F "- " '{print $3}' | tr -d ' ')
	EPOCHDIFF="$(( EPOCH - EPOCHSUMMARY ))"
	EPOCHSUMMARYCONV=$(conv_time $EPOCHDIFF)
	INFO=$(echo $LOGLINE | awk -F " -" '{print $7}')
	
	if [[ $STATUS == "" ]]; then
		STATUS=" WARNING"
		INFO=" [No output found, possible script or configuration issue]"
	elif [[ $EPOCHDIFF -gt "600" ]]; then
		STATUS=" WARNING"
		INFO=" [Expired Output - $EPOCHSUMMARYCONV ($EPOCHSUMMARY)]"
	elif [[ $SUMMARYHASH != $SCRIPTHASH ]]; then
		STATUS=" WARNING"
		INFO=" [Script Mismatch - Master: $SCRIPTHASH Remote: $SUMMARYHASH]"
	fi
	
	printf "...$LINE\t\t|$STATUS | $INFO\n"
	if [[ $STATUS == " PROBLEM" ]]; then
		displaySecureXLSP_problem="1"
		displaySecureXLSP_problemInfo="$displaySecureXLSP_problemInfo $LINE $INFO"
	elif [[ $STATUS == " WARNING" ]]; then
		displaySecureXLSP_warning="1"
		displaySecureXLSP_warningInfo="$displaySecureXLSP_warningInfo $LINE $INFO"
	else
		displaySecureXLSP_workingInfo="$displaySecureXLSP_workingInfo $LINE $INFO"
	fi
	
done


#LOG OUTPUTS
echo "displaySecureXLSP_overallStatus $displaySecureXLSP_overallStatus" >> $RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Overall Status - $displaySecureXLSP_overallStatus" >> $HISTORYLOG

#RUN LOGIC

#SYSLOG
if [[ $displaySecureXLSP_problem == "1" ]]; then
	sendSyslog "$functionName" "PROBLEM" "displaySecureXLSP_problemInfo" "VALUE=\"$displaySecureXLSP_problemInfo\"" "SMO"
elif [[ $displaySecureXLSP_warning == "1" ]]; then
	sendSyslog "$functionName" "WARNING" "displaySecureXLSP_warningInfo" "VALUE=\"$displaySecureXLSP_warningInfo\"" "SMO"
else
	sendSyslog "$functionName" "WORKING" "displaySecureXLSP_workingInfo" "VALUE=\"$displaySecureXLSP_workingInfo\"" "SMO"
fi
sendSyslog "$functionName" "INFO" "displaySecureXLSP_overallStatus" "VALUE=\"$displaySecureXLSP_overallStatus\"" "SMO"

echo "displaySecureXLSP_warning $displaySecureXLSP_warning" >> $RUNLOG
echo "displaySecureXLSP_problem $displaySecureXLSP_problem" >> $RUNLOG
echo "END==displaySecureXLSP" >> $RUNLOG
}

###################################################################################################
displayLicenseSP(){
echo "START==displayLicenseSP" >> $RUNLOG

#DEFAULTS
displayLicenseSP_problem="0"
functionName=${FUNCNAME[0]}
originalFunctionName=$(echo $functionName | sed -n 's/display/check/p')

#COLLECT OUTPUTS
for LINE in `echo $ALLSGM` ; do
	if [[ $LINE == $LOCALSGM ]]; then
		LOGLINE=$(cat $HISTORYLOG | grep $EPOCH | grep $originalFunctionName | grep SUMMARY | tail -1)
	else
		LOGLINE=$(cat $TEMPFILE_SUMMARY | grep $LINE | grep $originalFunctionName | tail -1)
	fi
	STATUS=$(echo $LOGLINE | awk -F " -" '{print $6}')
	SUMMARYHASH=$(echo $LOGLINE | awk -F " - " '{print $2}' | cut -c -4)
	EPOCHSUMMARY=$(echo $LOGLINE | awk -F "- " '{print $3}' | tr -d ' ')
	EPOCHDIFF="$(( EPOCH - EPOCHSUMMARY ))"
	EPOCHSUMMARYCONV=$(conv_time $EPOCHDIFF)
	INFO=$(echo $LOGLINE | awk -F " -" '{print $7}')


	if [[ $STATUS == "" ]]; then
		STATUS=" WARNING"
		INFO=" [No output found, possible script or configuration issue]"
	elif [[ $EPOCHDIFF -gt "600" ]]; then
		STATUS=" WARNING"
		INFO=" [Expired Output - $EPOCHSUMMARYCONV ($EPOCHSUMMARY)]"
	elif [[ $SUMMARYHASH != $SCRIPTHASH ]]; then
		STATUS=" WARNING"
		INFO=" [Script Mismatch - Master: $SCRIPTHASH Remote: $SUMMARYHASH]"
	fi
	
	printf "...$LINE\t\t|$STATUS | $INFO\n"
	if [[ $STATUS == " PROBLEM" ]]; then
		displayLicenseSP_problem="1"
		displayLicenseSP_problemInfo="$displayLicenseSP_problemInfo $LINE $INFO"
	elif [[ $STATUS == " WARNING" ]]; then
		displayLicenseSP_warning="1"
		displayLicenseSP_warningInfo="$displayLicenseSP_warningInfo $LINE $INFO"
	else
		displayLicenseSP_problemInfo="$displayLicenseSP_problemInfo $LINE $INFO"
	fi
	
done


#LOG OUTPUTS
echo "displayLicenseSP_overallStatus $displayLicenseSP_overallStatus" >> $RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Overall Status - $displayLicenseSP_overallStatus" >> $HISTORYLOG

#RUN LOGIC

#SYSLOG
if [[ $displayLicenseSP_problem == "1" ]]; then
	sendSyslog "$functionName" "PROBLEM" "displayLicenseSP_problemInfo" "VALUE=\"$displayLicenseSP_problemInfo\"" "SMO"
elif [[ $displayLicenseSP_warning == "1" ]]; then
	sendSyslog "$functionName" "WARNING" "displayLicenseSP_warningInfo" "VALUE=\"$displayLicenseSP_warningInfo\"" "SMO"
else
	sendSyslog "$functionName" "WORKING" "displayLicenseSP_workingInfo" "VALUE=\"$displayLicenseSP_workingInfo\"" "SMO"
fi
sendSyslog "$functionName" "INFO" "displayLicenseSP_overallStatus" "VALUE=\"$displayLicenseSP_overallStatus\"" "SMO"

echo "displayLicenseSP_warning $displayLicenseSP_warning" >> $RUNLOG
echo "displayLicenseSP_problem $displayLicenseSP_problem" >> $RUNLOG
echo "END==displayLicenseSP" >> $RUNLOG
}

###################################################################################################
displayPerformanceSP(){
echo "START==displayPerformanceSP" >> $RUNLOG

#DEFAULTS
displayPerformanceSP_problem="0"
functionName=${FUNCNAME[0]}
originalFunctionName=$(echo $functionName | sed -n 's/display/check/p')

#COLLECT OUTPUTS
for LINE in `echo $ALLSGM` ; do
	if [[ $LINE == $LOCALSGM ]]; then
		LOGLINE=$(cat $HISTORYLOG | grep $EPOCH | grep $originalFunctionName | grep SUMMARY | tail -1)
	else
		LOGLINE=$(cat $TEMPFILE_SUMMARY | grep $LINE | grep $originalFunctionName | tail -1)
	fi
	STATUS=$(echo $LOGLINE | awk -F " -" '{print $6}')
	SUMMARYHASH=$(echo $LOGLINE | awk -F " - " '{print $2}' | cut -c -4)
	EPOCHSUMMARY=$(echo $LOGLINE | awk -F "- " '{print $3}' | tr -d ' ')
	EPOCHDIFF="$(( EPOCH - EPOCHSUMMARY ))"
	EPOCHSUMMARYCONV=$(conv_time $EPOCHDIFF)
	INFO=$(echo $LOGLINE | awk -F " -" '{print $7}')

	if [[ $STATUS == "" ]]; then
		STATUS=" WARNING"
		INFO=" [No output found, possible script or configuration issue]"
	elif [[ $EPOCHDIFF -gt "600" ]]; then
		STATUS=" WARNING"
		INFO=" [Expired Output - $EPOCHSUMMARYCONV ($EPOCHSUMMARY)]"
	elif [[ $SUMMARYHASH != $SCRIPTHASH ]]; then
		STATUS=" WARNING"
		INFO=" [Script Mismatch - Master: $SCRIPTHASH Remote: $SUMMARYHASH]"
	fi
	
	printf "...$LINE\t\t|$STATUS | $INFO\n"
	if [[ $STATUS == " PROBLEM" ]]; then
		displayPerformanceSP_problem="1"
		displayPerformanceSP_problemInfo="$displayPerformanceSP_problemInfo $LINE $INFO"
	elif [[ $STATUS == " WARNING" ]]; then
		displayPerformanceSP_warning="1"
		displayPerformanceSP_warningInfo="$displayPerformanceSP_warningInfo $LINE $INFO"
	else
		displayPerformanceSP_workingInfo="$displayPerformanceSP_workingInfo $LINE $INFO"
	fi
	
done


#LOG OUTPUTS
echo "displayPerformanceSP_overallStatus $displayPerformanceSP_overallStatus" >> $RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Overall Status - $displayPerformanceSP_overallStatus" >> $HISTORYLOG

#RUN LOGIC

#SYSLOG
if [[ $displayPerformanceSP_problem == "1" ]]; then
	sendSyslog "$functionName" "PROBLEM" "displayPerformanceSP_problemInfo" "VALUE=\"$displayPerformanceSP_problemInfo\"" "SMO"
elif [[ $displayPerformanceSP_warning == "1" ]]; then
	sendSyslog "$functionName" "WARNING" "displayPerformanceSP_warningInfo" "VALUE=\"$displayPerformanceSP_warningInfo\"" "SMO"
else
	sendSyslog "$functionName" "WORKING" "displayPerformanceSP_workingInfo" "VALUE=\"$displayPerformanceSP_workingInfo\"" "SMO"
fi
sendSyslog "$functionName" "INFO" "displayPerformanceSP_overallStatus" "VALUE=\"$displayPerformanceSP_overallStatus\"" "SMO"

echo "displayPerformanceSP_warning $displayPerformanceSP_warning" >> $RUNLOG
echo "displayPerformanceSP_problem $displayPerformanceSP_problem" >> $RUNLOG
echo "END==displayPerformanceSP" >> $RUNLOG
}

###################################################################################################
displayRoutingSP(){
echo "START==displayRoutingSP" >> $RUNLOG

#DEFAULTS
displayRoutingSP_problem="0"
functionName=${FUNCNAME[0]}
originalFunctionName=$(echo $functionName | sed -n 's/display/check/p')

#COLLECT OUTPUTS
for LINE in `echo $ALLSGM` ; do
	if [[ $LINE == $LOCALSGM ]]; then
		LOGLINE=$(cat $HISTORYLOG | grep $EPOCH | grep $originalFunctionName | grep SUMMARY | tail -1)
	else
		LOGLINE=$(cat $TEMPFILE_SUMMARY | grep $LINE | grep $originalFunctionName | tail -1)
	fi
	STATUS=$(echo $LOGLINE | awk -F " -" '{print $6}')
	SUMMARYHASH=$(echo $LOGLINE | awk -F " - " '{print $2}' | cut -c -4)
	EPOCHSUMMARY=$(echo $LOGLINE | awk -F "- " '{print $3}' | tr -d ' ')
	EPOCHDIFF="$(( EPOCH - EPOCHSUMMARY ))"
	EPOCHSUMMARYCONV=$(conv_time $EPOCHDIFF)
	INFO=$(echo $LOGLINE | awk -F " -" '{print $7}')
	

	if [[ $STATUS == "" ]]; then
		STATUS=" WARNING"
		INFO=" [No output found, possible script or configuration issue]"
	elif [[ $EPOCHDIFF -gt "600" ]]; then
		STATUS=" WARNING"
		INFO=" [Expired Output - $EPOCHSUMMARYCONV ($EPOCHSUMMARY)]"
	elif [[ $SUMMARYHASH != $SCRIPTHASH ]]; then
		STATUS=" WARNING"
		INFO=" [Script Mismatch - Master: $SCRIPTHASH Remote: $SUMMARYHASH]"
	fi
	
	printf "...$LINE\t\t|$STATUS | $INFO\n"
	if [[ $STATUS == " PROBLEM" ]]; then
		displayRoutingSP_problem="1"
		displayRoutingSP_problemInfo="$displayRoutingSP_problemInfo $LINE $INFO"
	elif [[ $STATUS == " WARNING" ]]; then
		displayRoutingSP_warning="1"
		displayRoutingSP_warningInfo="$displayRoutingSP_warningInfo $LINE $INFO"
	else
		displayRoutingSP_workingInfo="$displayRoutingSP_workingInfo $LINE $INFO"
	fi
	
done


#LOG OUTPUTS
echo "displayRoutingSP_overallStatus $displayRoutingSP_overallStatus" >> $RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Overall Status - $displayRoutingSP_overallStatus" >> $HISTORYLOG

#RUN LOGIC

#SYSLOG
if [[ $displayRoutingSP_problem == "1" ]]; then
	sendSyslog "$functionName" "PROBLEM" "displayRoutingSP_problemInfo" "VALUE=\"$displayRoutingSP_problemInfo\"" "SMO"
elif [[ $displayRoutingSP_warning == "1" ]]; then
	sendSyslog "$functionName" "WARNING" "displayRoutingSP_warningInfo" "VALUE=\"$displayRoutingSP_warningInfo\"" "SMO"
else
	sendSyslog "$functionName" "WORKING" "displayRoutingSP_workingInfo" "VALUE=\"$displayRoutingSP_workingInfo\"" "SMO"
fi
sendSyslog "$functionName" "INFO" "displayRoutingSP_overallStatus" "VALUE=\"$displayRoutingSP_overallStatus\"" "SMO"

echo "displayRoutingSP_warning $displayRoutingSP_warning" >> $RUNLOG
echo "displayRoutingSP_problem $displayRoutingSP_problem" >> $RUNLOG
echo "END==displayRoutingSP" >> $RUNLOG
}

###################################################################################################
displayInterfaceSP(){
echo "START==displayInterfaceSP" >> $RUNLOG

#DEFAULTS
displayInterfaceSP_problem="0"
functionName=${FUNCNAME[0]}
originalFunctionName=$(echo $functionName | sed -n 's/display/check/p')

#COLLECT OUTPUTS
for LINE in `echo $ALLSGM` ; do
	if [[ $LINE == $LOCALSGM ]]; then
		LOGLINE=$(cat $HISTORYLOG | grep $EPOCH | grep $originalFunctionName | grep SUMMARY | tail -1)
	else
		LOGLINE=$(cat $TEMPFILE_SUMMARY | grep $LINE | grep $originalFunctionName | tail -1)
	fi
	STATUS=$(echo $LOGLINE | awk -F " -" '{print $6}')
	SUMMARYHASH=$(echo $LOGLINE | awk -F " - " '{print $2}' | cut -c -4)
	EPOCHSUMMARY=$(echo $LOGLINE | awk -F "- " '{print $3}' | tr -d ' ')
	EPOCHDIFF="$(( EPOCH - EPOCHSUMMARY ))"
	EPOCHSUMMARYCONV=$(conv_time $EPOCHDIFF)
	INFO=$(echo $LOGLINE | awk -F " -" '{print $7}')
	
	if [[ $STATUS == "" ]]; then
		STATUS=" WARNING"
		INFO=" [No output found, possible script or configuration issue]"
	elif [[ $EPOCHDIFF -gt "600" ]]; then
		STATUS=" WARNING"
		INFO=" [Expired Output - $EPOCHSUMMARYCONV ($EPOCHSUMMARY)]"
	elif [[ $SUMMARYHASH != $SCRIPTHASH ]]; then
		STATUS=" WARNING"
		INFO=" [Script Mismatch - Master: $SCRIPTHASH Remote: $SUMMARYHASH]"
	fi
	
	printf "...$LINE\t\t|$STATUS | $INFO\n"
	if [[ $STATUS == " PROBLEM" ]]; then
		displayInterfaceSP_problem="1"
		displayInterfaceSP_problemInfo="$displayInterfaceSP_problemInfo $LINE $INFO"
	elif [[ $STATUS == " WARNING" ]]; then
		displayInterfaceSP_warning="1"
		displayInterfaceSP_warningInfo="$displayInterfaceSP_warningInfo $LINE $INFO"
	else
		displayInterfaceSP_workingInfo="$displayInterfaceSP_workingInfo $LINE $INFO"
	fi
	
done


#LOG OUTPUTS
echo "displayInterfaceSP_overallStatus $displayInterfaceSP_overallStatus" >> $RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Overall Status - $displayInterfaceSP_overallStatus" >> $HISTORYLOG

#RUN LOGIC

#SYSLOG
if [[ $displayInterfaceSP_problem == "1" ]]; then
	sendSyslog "$functionName" "PROBLEM" "displayInterfaceSP_problemInfo" "VALUE=\"$displayInterfaceSP_problemInfo\"" "SMO"
elif [[ $displayInterfaceSP_warning == "1" ]]; then
	sendSyslog "$functionName" "WARNING" "displayInterfaceSP_warningInfo" "VALUE=\"$displayInterfaceSP_warningInfo\"" "SMO"
else
	sendSyslog "$functionName" "WORKING" "displayInterfaceSP_workingInfo" "VALUE=\"$displayInterfaceSP_workingInfo\"" "SMO"
fi
sendSyslog "$functionName" "INFO" "displayInterfaceSP_overallStatus" "VALUE=\"$displayInterfaceSP_overallStatus\"" "SMO"

echo "displayInterfaceSP_warning $displayInterfaceSP_warning" >> $RUNLOG
echo "displayInterfaceSP_problem $displayInterfaceSP_problem" >> $RUNLOG
echo "END==displayInterfaceSP" >> $RUNLOG
}

###################################################################################################
displayAsgSP(){
echo "START==displayAsgSP" >> $RUNLOG

#DEFAULTS
displayAsgSP_problem="0"
functionName=${FUNCNAME[0]}
originalFunctionName=$(echo $functionName | sed -n 's/display/check/p')

#COLLECT OUTPUTS
for LINE in `echo $ALLSGM` ; do
	if [[ $LINE == $LOCALSGM ]]; then
		LOGLINE=$(cat $HISTORYLOG | grep $EPOCH | grep $originalFunctionName | grep SUMMARY | tail -1)
	else
		LOGLINE=$(cat $TEMPFILE_SUMMARY | grep $LINE | grep $originalFunctionName | tail -1)
	fi
	STATUS=$(echo $LOGLINE | awk -F " -" '{print $6}')
	SUMMARYHASH=$(echo $LOGLINE | awk -F " - " '{print $2}' | cut -c -4)
	EPOCHSUMMARY=$(echo $LOGLINE | awk -F "- " '{print $3}' | tr -d ' ')
	EPOCHDIFF="$(( EPOCH - EPOCHSUMMARY ))"
	EPOCHSUMMARYCONV=$(conv_time $EPOCHDIFF)
	INFO=$(echo $LOGLINE | awk -F " -" '{print $7}')
	
	if [[ $STATUS == "" ]]; then
		STATUS=" WARNING"
		INFO=" [No output found, possible script or configuration issue]"
	elif [[ $EPOCHDIFF -gt "600" ]]; then
		STATUS=" WARNING"
		INFO=" [Expired Output - $EPOCHSUMMARYCONV ($EPOCHSUMMARY)]"
	elif [[ $SUMMARYHASH != $SCRIPTHASH ]]; then
		STATUS=" WARNING"
		INFO=" [Script Mismatch - Master: $SCRIPTHASH Remote: $SUMMARYHASH]"
	fi
	
	printf "...$LINE\t\t|$STATUS | $INFO\n"
	if [[ $STATUS == " PROBLEM" ]]; then
		displayAsgSP_problem="1"
		displayAsgSP_problemInfo="$displayAsgSP_problemInfo $LINE $INFO"
	elif [[ $STATUS == " WARNING" ]]; then
		displayAsgSP_warning="1"
		displayAsgSP_warningInfo="$displayAsgSP_warningInfo $LINE $INFO"
	else
		displayAsgSP_workingInfo="$displayAsgSP_workingInfo $LINE $INFO"
	fi
	
done


#LOG OUTPUTS
echo "displayAsgSP_overallStatus $displayAsgSP_overallStatus" >> $RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Overall Status - $displayAsgSP_overallStatus" >> $HISTORYLOG

#RUN LOGIC

#SYSLOG
if [[ $displayAsgSP_problem == "1" ]]; then
	sendSyslog "$functionName" "PROBLEM" "displayAsgSP_problemInfo" "VALUE=\"$displayAsgSP_problemInfo\"" "SMO"
elif [[ $displayAsgSP_warning == "1" ]]; then
	sendSyslog "$functionName" "WARNING" "displayAsgSP_warningInfo" "VALUE=\"$displayAsgSP_warningInfo\"" "SMO"
else
	sendSyslog "$functionName" "WORKING" "displayAsgSP_workingInfo" "VALUE=\"$displayAsgSP_workingInfo\"" "SMO"
fi
sendSyslog "$functionName" "INFO" "displayAsgSP_overallStatus" "VALUE=\"$displayAsgSP_overallStatus\"" "SMO"

echo "displayAsgSP_warning $displayAsgSP_warning" >> $RUNLOG
echo "displayAsgSP_problem $displayAsgSP_problem" >> $RUNLOG
echo "END==displayAsgSP" >> $RUNLOG
}

###################################################################################################
displayBackupSP(){
echo "START==displayBackupSP" >> $RUNLOG

#DEFAULTS
displayBackupSP_problem="0"
functionName=${FUNCNAME[0]}
originalFunctionName=$(echo $functionName | sed -n 's/display/check/p')

#COLLECT OUTPUTS
for LINE in `echo $ALLSGM` ; do
	if [[ $LINE == $LOCALSGM ]]; then
		LOGLINE=$(cat $HISTORYLOG | grep $EPOCH | grep $originalFunctionName | grep SUMMARY | tail -1)
	else
		LOGLINE=$(cat $TEMPFILE_SUMMARY | grep $LINE | grep $originalFunctionName | tail -1)
	fi
	STATUS=$(echo $LOGLINE | awk -F " -" '{print $6}')
	SUMMARYHASH=$(echo $LOGLINE | awk -F " - " '{print $2}' | cut -c -4)
	EPOCHSUMMARY=$(echo $LOGLINE | awk -F "- " '{print $3}' | tr -d ' ')
	EPOCHDIFF="$(( EPOCH - EPOCHSUMMARY ))"
	EPOCHSUMMARYCONV=$(conv_time $EPOCHDIFF)
	INFO=$(echo $LOGLINE | awk -F " -" '{print $7}')

	if [[ $STATUS == "" ]]; then
		STATUS=" WARNING"
		INFO=" [No output found, possible script or configuration issue]"
	elif [[ $EPOCHDIFF -gt "600" ]]; then
		STATUS=" WARNING"
		INFO=" [Expired Output - $EPOCHSUMMARYCONV ($EPOCHSUMMARY)]"
	elif [[ $SUMMARYHASH != $SCRIPTHASH ]]; then
		STATUS=" WARNING"
		INFO=" [Script Mismatch - Master: $SCRIPTHASH Remote: $SUMMARYHASH]"
	fi
	
	printf "...$LINE\t\t|$STATUS | $INFO\n"
	if [[ $STATUS == " PROBLEM" ]]; then
		displayBackupSP_problem="1"
		displayBackupSP_problemInfo="$displayBackupSP_problemInfo $LINE $INFO"
	elif [[ $STATUS == " WARNING" ]]; then
		displayBackupSP_warning="1"
		displayBackupSP_warningInfo="$displayBackupSP_warningInfo $LINE $INFO"
	else
		displayBackupSP_workingInfo="$displayBackupSP_workingInfo $LINE $INFO"
	fi
	
done


#LOG OUTPUTS
echo "displayBackupSP_overallStatus $displayBackupSP_overallStatus" >> $RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Overall Status - $displayBackupSP_overallStatus" >> $HISTORYLOG

#RUN LOGIC

#SYSLOG
if [[ $displayBackupSP_problem == "1" ]]; then
	sendSyslog "$functionName" "PROBLEM" "displayBackupSP_problemInfo" "VALUE=\"$displayBackupSP_problemInfo\"" "SMO"
elif [[ $displayBackupSP_warning == "1" ]]; then
	sendSyslog "$functionName" "WARNING" "displayBackupSP_warningInfo" "VALUE=\"$displayBackupSP_warningInfo\"" "SMO"
else
	sendSyslog "$functionName" "WORKING" "displayBackupSP_workingInfo" "VALUE=\"$displayBackupSP_workingInfo\"" "SMO"
fi

sendSyslog "$functionName" "INFO" "displayBackupSP_overallStatus" "VALUE=\"$displayBackupSP_overallStatus\"" "SMO"

echo "displayBackupSP_warning $displayBackupSP_warning" >> $RUNLOG
echo "displayBackupSP_problem $displayBackupSP_problem" >> $RUNLOG
echo "END==displayBackupSP" >> $RUNLOG
}

###################################################################################################
displayNatTableSP(){
echo "START==displayNatTableSP" >> $RUNLOG

#DEFAULTS
displayNatTableSP_problem="0"
functionName=${FUNCNAME[0]}
originalFunctionName=$(echo $functionName | sed -n 's/display/check/p')

#COLLECT OUTPUTS
for LINE in `echo $ALLSGM` ; do
	if [[ $LINE == $LOCALSGM ]]; then
		LOGLINE=$(cat $HISTORYLOG | grep $EPOCH | grep $originalFunctionName | grep SUMMARY | tail -1)
	else
		LOGLINE=$(cat $TEMPFILE_SUMMARY | grep $LINE | grep $originalFunctionName | tail -1)
	fi
	STATUS=$(echo $LOGLINE | awk -F " -" '{print $6}')
	SUMMARYHASH=$(echo $LOGLINE | awk -F " - " '{print $2}' | cut -c -4)
	EPOCHSUMMARY=$(echo $LOGLINE | awk -F "- " '{print $3}' | tr -d ' ')
	EPOCHDIFF="$(( EPOCH - EPOCHSUMMARY ))"
	EPOCHSUMMARYCONV=$(conv_time $EPOCHDIFF)
	INFO=$(echo $LOGLINE | awk -F " -" '{print $7}')
	
	if [[ $STATUS == "" ]]; then
		STATUS=" WARNING"
		INFO=" [No output found, possible script or configuration issue]"
	elif [[ $EPOCHDIFF -gt "600" ]]; then
		STATUS=" WARNING"
		INFO=" [Expired Output - $EPOCHSUMMARYCONV ($EPOCHSUMMARY)]"
	elif [[ $SUMMARYHASH != $SCRIPTHASH ]]; then
		STATUS=" WARNING"
		INFO=" [Script Mismatch - Master: $SCRIPTHASH Remote: $SUMMARYHASH]"
	fi
	
	printf "...$LINE\t\t|$STATUS | $INFO\n"
	if [[ $STATUS == " PROBLEM" ]]; then
		displayNatTableSP_problem="1"
		displayNatTableSP_problemInfo="$displayNatTableSP_problemInfo $LINE $INFO"
	elif [[ $STATUS == " WARNING" ]]; then
		displayNatTableSP_warning="1"
		displayNatTableSP_warningInfo="$displayNatTableSP_warningInfo $LINE $INFO"
	else
		displayNatTableSP_workingInfo="$displayNatTableSP_workingInfo $LINE $INFO"
	fi
	
done


#LOG OUTPUTS
echo "displayNatTableSP_overallStatus $displayNatTableSP_overallStatus" >> $RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Overall Status - $displayNatTableSP_overallStatus" >> $HISTORYLOG

#RUN LOGIC

#SYSLOG
if [[ $displayNatTableSP_problem == "1" ]]; then
	sendSyslog "$functionName" "PROBLEM" "displayNatTableSP_problemInfo" "VALUE=\"$displayNatTableSP_problemInfo\"" "SMO"
elif [[ $displayNatTableSP_warning == "1" ]]; then
	sendSyslog "$functionName" "WARNING" "displayNatTableSP_warningInfo" "VALUE=\"$displayNatTableSP_warningInfo\"" "SMO"
else
	sendSyslog "$functionName" "WORKING" "displayNatTableSP_workingInfo" "VALUE=\"$displayNatTableSP_workingInfo\"" "SMO"
fi
sendSyslog "$functionName" "INFO" "displayNatTableSP_overallStatus" "VALUE=\"$displayNatTableSP_overallStatus\"" "SMO"

echo "displayNatTableSP_warning $displayNatTableSP_warning" >> $RUNLOG
echo "displayNatTableSP_problem $displayNatTableSP_problem" >> $RUNLOG
echo "END==displayNatTableSP" >> $RUNLOG
}

###################################################################################################
displayConnectionTableSP(){
echo "START==displayConnectionTableSP" >> $RUNLOG

#DEFAULTS
displayConnectionTableSP_problem="0"
functionName=${FUNCNAME[0]}
originalFunctionName=$(echo $functionName | sed -n 's/display/check/p')

#COLLECT OUTPUTS
for LINE in `echo $ALLSGM` ; do
	if [[ $LINE == $LOCALSGM ]]; then
		LOGLINE=$(cat $HISTORYLOG | grep $EPOCH | grep $originalFunctionName | grep SUMMARY | tail -1)
	else
		LOGLINE=$(cat $TEMPFILE_SUMMARY | grep $LINE | grep $originalFunctionName | tail -1)
	fi
	STATUS=$(echo $LOGLINE | awk -F " -" '{print $6}')
	SUMMARYHASH=$(echo $LOGLINE | awk -F " - " '{print $2}' | cut -c -4)
	EPOCHSUMMARY=$(echo $LOGLINE | awk -F "- " '{print $3}' | tr -d ' ')
	EPOCHDIFF="$(( EPOCH - EPOCHSUMMARY ))"
	EPOCHSUMMARYCONV=$(conv_time $EPOCHDIFF)
	INFO=$(echo $LOGLINE | awk -F " -" '{print $7}')
	
	if [[ $STATUS == "" ]]; then
		STATUS=" WARNING"
		INFO=" [No output found, possible script or configuration issue]"
	elif [[ $EPOCHDIFF -gt "600" ]]; then
		STATUS=" WARNING"
		INFO=" [Expired Output - $EPOCHSUMMARYCONV ($EPOCHSUMMARY)]"
	elif [[ $SUMMARYHASH != $SCRIPTHASH ]]; then
		STATUS=" WARNING"
		INFO=" [Script Mismatch - Master: $SCRIPTHASH Remote: $SUMMARYHASH]"
	fi
	
	printf "...$LINE\t\t|$STATUS | $INFO\n"
	if [[ $STATUS == " PROBLEM" ]]; then
		displayConnectionTableSP_problem="1"
		displayConnectionTableSP_problemInfo="$displayConnectionTableSP_problemInfo $LINE $INFO"
	elif [[ $STATUS == " WARNING" ]]; then
		displayConnectionTableSP_warning="1"
		displayConnectionTableSP_warningInfo="$displayConnectionTableSP_warningInfo $LINE $INFO"
	else
		displayConnectionTableSP_workingInfo="$displayConnectionTableSP_workingInfo $LINE $INFO"
	fi
	
done


#LOG OUTPUTS
echo "displayConnectionTableSP_overallStatus $displayConnectionTableSP_overallStatus" >> $RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Overall Status - $displayConnectionTableSP_overallStatus" >> $HISTORYLOG

#RUN LOGIC

#SYSLOG
if [[ $displayConnectionTableSP_problem == "1" ]]; then
	sendSyslog "$functionName" "PROBLEM" "displayConnectionTableSP_problemInfo" "VALUE=\"$displayConnectionTableSP_problemInfo\"" "SMO"
elif [[ $displayConnectionTableSP_warning == "1" ]]; then
	sendSyslog "$functionName" "WARNING" "displayConnectionTableSP_warningInfo" "VALUE=\"$displayConnectionTableSP_warningInfo\"" "SMO"
else
	sendSyslog "$functionName" "WORKING" "displayConnectionTableSP_workingInfo" "VALUE=\"$displayConnectionTableSP_workingInfo\"" "SMO"
fi

sendSyslog "$functionName" "INFO" "displayConnectionTableSP_overallStatus" "VALUE=\"$displayConnectionTableSP_overallStatus\"" "SMO"

echo "displayConnectionTableSP_warning $displayConnectionTableSP_warning" >> $RUNLOG
echo "displayConnectionTableSP_problem $displayConnectionTableSP_problem" >> $RUNLOG
echo "END==displayConnectionTableSP" >> $RUNLOG
}

###################################################################################################
displayVsxSP(){
echo "START==displayVsxSP" >> $RUNLOG

#DEFAULTS
displayVsxSP_problem="0"
functionName=${FUNCNAME[0]}
originalFunctionName=$(echo $functionName | sed -n 's/display/check/p')

#COLLECT OUTPUTS
for LINE in `echo $ALLSGM` ; do
	if [[ $LINE == $LOCALSGM ]]; then
		LOGLINE=$(cat $HISTORYLOG | grep $EPOCH | grep $originalFunctionName | grep SUMMARY | tail -1)
	else
		LOGLINE=$(cat $TEMPFILE_SUMMARY | grep $LINE | grep $originalFunctionName | tail -1)
	fi
	STATUS=$(echo $LOGLINE | awk -F " -" '{print $6}')
	SUMMARYHASH=$(echo $LOGLINE | awk -F " - " '{print $2}' | cut -c -4)
	EPOCHSUMMARY=$(echo $LOGLINE | awk -F "- " '{print $3}' | tr -d ' ')
	EPOCHDIFF="$(( EPOCH - EPOCHSUMMARY ))"
	EPOCHSUMMARYCONV=$(conv_time $EPOCHDIFF)
	INFO=$(echo $LOGLINE | awk -F " -" '{print $7}')
	
	if [[ $STATUS == "" ]]; then
		STATUS=" WARNING"
		INFO=" [No output found, possible script or configuration issue]"
	elif [[ $EPOCHDIFF -gt "600" ]]; then
		STATUS=" WARNING"
		INFO=" [Expired Output - $EPOCHSUMMARYCONV ($EPOCHSUMMARY)]"
	elif [[ $SUMMARYHASH != $SCRIPTHASH ]]; then
		STATUS=" WARNING"
		INFO=" [Script Mismatch - Master: $SCRIPTHASH Remote: $SUMMARYHASH]"
	fi
	
	printf "...$LINE\t\t|$STATUS | $INFO\n"
	if [[ $STATUS == " PROBLEM" ]]; then
		displayVsxSP_problem="1"
		displayVsxSP_problemInfo="$displayVsxSP_problemInfo $LINE $INFO"
	elif [[ $STATUS == " WARNING" ]]; then
		displayVsxSP_warning="1"
		displayVsxSP_problemInfo="$displayVsxSP_problemInfo $LINE $INFO"
	else
		displayVsxSP_problemInfo="$displayVsxSP_problemInfo $LINE $INFO"
	fi
	
done


#LOG OUTPUTS
echo "displayVsxSP_overallStatus $displayVsxSP_overallStatus" >> $RUNLOG
echo "$HISTORYLOGPREAMBLE - $functionName - INFO - Overall Status - $displayVsxSP_overallStatus" >> $HISTORYLOG

#RUN LOGIC

#SYSLOG
if [[ $displayVsxSP_problem == "1" ]]; then
	sendSyslog "$functionName" "PROBLEM" "displayVsxSP_problemInfo" "VALUE=\"$displayVsxSP_problemInfo\"" "SMO"
elif [[ $displayVsxSP_warning == "1" ]]; then
	sendSyslog "$functionName" "INFO" "displayVsxSP_problemInfo" "VALUE=\"$displayVsxSP_problemInfo\"" "SMO"
else
	sendSyslog "$functionName" "WORKING" "displayVsxSP_problemInfo" "VALUE=\"$displayVsxSP_problemInfo\"" "SMO"
fi

sendSyslog "$functionName" "INFO" "displayVsxSP_overallStatus" "VALUE=\"$displayVsxSP_overallStatus\""

echo "displayVsxSP_warning $displayVsxSP_warning" >> $RUNLOG
echo "displayVsxSP_problem $displayVsxSP_problem" >> $RUNLOG
echo "END==displayVsxSP" >> $RUNLOG
}

###################################################################################################
displayCLI() {
TEMPFILE_PIDLOCK=$TEMPDIR/$SCRIPT.$EPOCH.gall.pidlock
TEMPFILE_SUMMARY=$TEMPDIR/$SCRIPT.$EPOCH.gall.summary
displayCLI_problem="0"

if [[ $IS_SCALABLE_PLATFORM_MHO -eq "0" ]]; then
	if [[ $checkSelf_hwtype == "SP" ]] || [[ $checkSelf_hwtype == "MAESTRO" ]] || [[ $LOCALSMO == "1" ]]; then
		displayCLIRemote_fStart=$(date "+%s")
		clear
		printf "+-----------------------------------------------------------------------+\n"
		printf "+-----------------------------------------------------------------------+\n"
		echo "Local SGM is SMO - Collecting health checks on all SGMs"
		echo ""
		echo "Last time this took $LASTRUNTIME seconds to complete"
		printf "+-----------------------------------------------------------------------+\n"
		echo "...Copy latest script to SGMs $ALLSGMEXCEPTSMOCOMMALIST"
		asg_cp2blades $SCRIPTFULL
		rm -f $TEMPFILE_PIDLOCK > /dev/null 2>&1
		g_all "cat $PIDLOCK" > $TEMPFILE_PIDLOCK 2>&1
		echo ""
		echo ""
		for LINE in `echo $ALLSGMEXCEPTSMOLIST`; do
			LINE2=$(cat $TEMPFILE_PIDLOCK | grep -A1 $LINE | tail -1)
			PIDLOCKPRESENT=$(echo $LINE2 | grep -v "No such file" | wc -l)
			if [[ $PIDLOCKPRESENT == "1" ]]; then
				displayCLI_problem="1"
				displayCLI_problemInfo="$displayCLI_problemInfo [LOCK - $LINE]"
			fi
		done
		
		rm -f $TEMPFILE_PIDLOCK > /dev/null 2>&1
		
		if [[ $displayCLI_problem == "0" ]]; then
			echo "...Running on SGMs $ALLSGMEXCEPTSMOCOMMALIST"
		
		if [[ $SYSARG3 == "debug" ]]; then
			g_all "bash -xx /home/admin/fw_health_check.sh cron gexec 1 $EPOCH > $TEMPDIR/$SCRIPT.gall.debug.$EPOCH 2>&1"
		elif [[ $APPLIANCETYPE == "MAESTRO" ]] || [[ -f /opt/CPsmo-R80.20/bin/asg ]] || [[ -f /opt/CPsmo-R81.10/bin/asg ]] || [[ -f /opt/CPsmo-R81.20/bin/asg ]]; then
			gexec -c "/home/admin/fw_health_check.sh cron gexec 1 $EPOCH > /dev/null 2>&1"
		else
			g_all /home/admin/fw_health_check.sh cron gexec 1 $EPOCH > /dev/null 2>&1
		fi
		
		
		fi
		
		if [[ $displayCLI_problem == "0" ]]; then
			g_all "cat $CURRENTRUNHISTORYLOGOUTPUT | grep SUMMARY" | grep SUMMARY | grep -v $HOSTNAME | sed -e 's/^.*-ch\([0-9]\{1,2\}\)-\([0-9]\{1,2\}\)/\1_\2/g' > $TEMPFILE_SUMMARY
		fi
		
		
		
		displayCLIRemote_fEnd=$(date "+%s")
		displayCLIRemote_fRunTime=$(( displayCLIRemote_fEnd - displayCLIRemote_fStart ))
		echo "displayCLIRemote_fRunTime $displayCLIRemote_fRunTime" >>$RUNLOG
		echo "$HISTORYLOGPREAMBLE - displayCLIRemote - INFO - Run Time - $displayCLIRemote_fRunTime" >>$HISTORYLOG
		echo -e "\n"
		printf "+-----------------------------------------------------------------------+\n"
	fi
fi
clear
printf "+-----------------------------------------------------------------------+\n"
printf "+-----------------------------------------------------------------------+\n"
echo "Running FWHealthCheck Script version ($SCRIPTHASH#$SCRIPTVERSION)"
echo ""
echo "Last time this took $LASTRUNTIME seconds to complete"
echo "Last completed run status: $LASTRUNSUCCESSSTATUS"
printf "+-----------------------------------------------------------------------+\n"
printf "+-----------------------------------------------------------------------+\n"

checkStart
checkSelf
if [[ $checkSelf_hwtype == "SP" ]] || [[ $checkSelf_hwtype == "MAESTRO" ]]; then
	printf "Hostname\t| $HOSTNAME ($CLUSTERNAME)\n"
	printf "Management\t| $CMANAME ($CMAVER)\n"
	printf "Local SGM\t| $LOCALSGM\n"
	if [[ $LOCALSMO == "1" ]]; then
		printf "Local SGM SMO\t| Yes\n"
	else
		printf "Local SGM SMO\t| No\n"
	fi
	
	printf "All SGMs\t| $ALLSGMSINGLELINE\n"
	printf "Active SGMs\t| $ALLSGMSACTIVECHASSISCSV\n"
elif [[ $checkSelf_hwtype == "MHO" ]]; then
	printf "Hostname\t| $HOSTNAME\n"
	printf "Management\t| Not Centrally Managed\n"
else
	printf "Hostname\t| $HOSTNAME\n"
	if [[ $checkSelf_haInstalled == "1" ]]; then
		printf "Cluster Name\t| $CLUSTERNAME\n"
		printf "Cluster Members\t| $CLUSTERMEMBERS1\n"
	fi
	
	if [[ $APPLIANCETYPE != "SM" ]]; then
		printf "Management\t| $CMANAME ($CMAVER)\n"
	else
		printf "Mgmt Type\t| $MGMTTYPE\n"
	fi
	
fi
printf "Current Date\t| $DATE ($EPOCH)\n"
printf "Last Run\t| $SINCELASTRUN seconds ago ($LASTRUNEPOCH)\n"
if [[ $checkSelf_ipv6Enabled == "1" ]]; then
	if [[ $checkSelf_ipv6Configured == "0" ]]; then
		printf "IPv6 Enabled\t| Yes (but not configured)\n"
	else
		printf "IPv6 Enabled\t| Yes\n"
	fi
fi

if [[ $FCPENABLED == "1" ]]; then
		printf "FCP Enabled\t| Firewall Critical Platform (Hotspare)\n"
fi

if [[ $BLABENABLED == "1" ]]; then
		printf "LAB Enabled\t| Bellevue Lab Device\n"
fi

if [[ $APPLIANCETYPE != "SM" ]]; then
	if [[ $IDSENABLED == "1" ]]; then
		printf "IDS Enabled\t| Yes\n"
	fi
fi

if [[ $MDPSENABLED != "0" ]]; then
	printf "MDPS Enabled\t| Yes ($checkSelf_mdpsMode)\n"
fi

printf "Hardware\t| $checkSelf_hwmodel ($checkSelf_mac)\n"
printf "Software Version| $checkSelf_majorVer - $checkSelf_minorVer\n"
printf "Uptime (Load)\t| $UPTIME1 ($checkSelf_load)\n"
printf "+---------------+---------+---------------------------------------------+\n"

if [[ $displayCLI_problem -gt "0" ]]; then

	if [[ $checkSelf_hwtype == "SP" ]] || [[ $checkSelf_hwtype == "MAESTRO" ]]; then
		if [[ $LOCALSMO == "1" ]]; then
			printf "Fatal Error\t| PROBLEM | $displayCLI_problemInfo\n" 
			printf "+---------------+---------+---------------------------------------------+\n"
		fi
	fi

else

	#DROPS
	if [[ $EVALDROPS == "1" ]]; then
		if [[ $FCPENABLED == "0" ]]; then
			if [[ $APPLIANCETYPE != "MAESTRO-ORCHESTRATOR" ]]; then
				if [[ $APPLIANCETYPE != "SM" ]]; then
					# if [[ $VSXENABLED != "1" ]]; then
						if [[ $IDSENABLED != "1" ]]; then 
							if [[ $checkSelf_hwtype == "SP" ]]; then
								if [[ $LOCALSMO == "1" ]]; then
									checkDropsSP & > /dev/null 2>&1
									checkDropsPID=$!
								else
									checkDropsSP & > /dev/null 2>&1
								fi
							else
								checkDrops &
								checkDropsPID=$!
							fi
						fi
					# fi
				fi
			fi
		fi
	fi
	
	#LOGGING
	if [[ $FCPENABLED == "0" ]]; then
		if [[ $checkSelf_hwtype == "SP" ]] || [[ $checkSelf_hwtype == "MAESTRO" ]]; then
			if [[ $LOCALSMO == "1" ]]; then
				printf "Logging\n"
				checkLoggingSP
				displayLoggingSP
				if [[ $displayLoggingSP_problem == "1" ]]; then
					printf ">Overall Status\t| PROBLEM | \n"
				elif [[ $displayLoggingSP_warning == "1" ]]; then
					printf ">Overall Status\t| WARNING | \n"
				else
					printf ">Overall Status\t| WORKING | \n"
				fi
				printf "+---------------+---------+---------------------------------------------+\n"
			else
				checkLoggingSP
				if [[ $checkLoggingSP_problem == "1" ]]; then
					printf "Logging\t\t| PROBLEM | $checkLoggingSP_problemInfo$checkLoggingSP_warningInfo$checkLoggingSP_workingInfo\n"
				elif [[ $checkLoggingSP_warning == "1" ]]; then
					printf "Logging\t\t| WARNING | $checkLoggingSP_warningInfo$checkLoggingSP_workingInfo\n"
				else
					printf "Logging\t\t| WORKING | $checkLoggingSP_workingInfo\n"
				fi
			fi
		fi
		
		if [[ $checkSelf_hwtype == "NONSP" ]] || [[ $checkSelf_hwtype == "VM" || $checkSelf_hwtype == "SM" ]]; then
			if [[ $APPLIANCETYPE != "SM" ]]; then
				checkLogging
				if [[ $checkLogging_problem == "1" ]]; then
					printf "Logging\t\t| PROBLEM | $checkLogging_problemInfo$checkLogging_warningInfo$checkLogging_workingInfo\n"
				elif [[ $checkLogging_warning == "1" ]]; then
					printf "Logging\t\t| WARNING | $checkLogging_warningInfo$checkLogging_workingInfo\n"
				else
					printf "Logging\t\t| WORKING | $checkLogging_workingInfo\n"
				fi
			else
				checkLoggingSM
				if [[ $checkLoggingSM_problem == "1" ]]; then
					printf "Logging\t\t| PROBLEM | $checkLoggingSM_problemInfo$checkLoggingSM_warningInfo$checkLoggingSM_workingInfo\n"
				elif [[ $checkLoggingSM_warning == "1" ]]; then
					printf "Logging\t\t| WARNING | $checkLoggingSM_warningInfo$checkLoggingSM_workingInfo\n"
				else
					printf "Logging\t\t| WORKING | $checkLoggingSM_workingInfo\n"
				fi
			fi
		fi
	fi

	#BACKUP	
	if [[ $FCPENABLED == "0" ]]; then
		if [[ $BACKUPENABLED == "1" ]]; then
			if [[ $checkSelf_hwtype == "SP" ]] || [[ $checkSelf_hwtype == "MAESTRO" ]]; then
				if [[ $LOCALSMO == "1" ]]; then
					printf "Backup\n"
					checkBackupSP
					displayBackupSP
					if [[ $displayBackupSP_problem == "1" ]]; then
						printf ">Overall Status\t| PROBLEM | \n"
					elif [[ $displayBackupSP_warning == "1" ]]; then
						printf ">Overall Status\t| WARNING | \n"
					else
						printf ">Overall Status\t| WORKING | \n"
					fi
					printf "+---------------+---------+---------------------------------------------+\n"
				else
					checkBackupSP
					if [[ $checkBackupSP_problem == "1" ]]; then
						printf "Backup\t\t| PROBLEM | $checkBackupSP_problemInfo$checkBackupSP_warningInfo$checkBackupSP_workingInfo\n"
					elif [[ $checkBackupSP_warning == "1" ]]; then
						printf "Backup\t\t| WARNING | $checkBackupSP_warningInfo$checkBackupSP_workingInfo\n"
					else
						printf "Backup\t\t| WORKING | $checkBackupSP_workingInfo\n"
					fi
				fi
			fi
			
			if [[ $checkSelf_hwtype == "NONSP" ]] || [[ $checkSelf_hwtype == "VM" || $checkSelf_hwtype == "SM" ]]; then
				if [[ $APPLIANCETYPE != "SM" ]]; then
					checkBackup
					if [[ $checkBackup_problem == "1" ]]; then
						printf "Backup\t\t| PROBLEM | $checkBackup_problemInfo$checkBackup_warningInfo$checkBackup_workingInfo\n"
					elif [[ $checkBackup_warning == "1" ]]; then
						printf "Backup\t\t| WARNING | $checkBackup_warningInfo$checkBackup_workingInfo\n"
					else
						printf "Backup\t\t| WORKING | $checkBackup_workingInfo\n"
					fi
				else
					checkBackupSM
					if [[ $checkBackupSM_problem == "1" ]]; then
						printf "Backup\t\t| PROBLEM | $checkBackupSM_problemInfo$checkBackupSM_warningInfo$checkBackupSM_workingInfo\n"
					elif [[ $checkBackupSM_warning == "1" ]]; then
						printf "Backup\t\t| WARNING | $checkBackupSM_warningInfo$checkBackupSM_workingInfo\n"
					else
						printf "Backup\t\t| WORKING | $checkBackupSM_workingInfo\n"
					fi
				fi
			fi
		fi
	fi

	#CLUSTERXL	
	if [[ $FCPENABLED == "0" ]]; then
		if [[ $checkSelf_hwtype == "SP" ]] || [[ $checkSelf_hwtype == "MAESTRO" && $CHASSISQTY != "1" ]]; then
			if [[ $LOCALSMO == "1" ]]; then
				printf "ClusterXL\n"
				checkClusterXLSP
				displayClusterXLSP
				if [[ $displayClusterXLSP_problem == "1" ]]; then
					printf ">Overall Status\t| PROBLEM | \n"
				elif [[ $displayClusterXLSP_warning == "1" ]]; then
					printf ">Overall Status\t| WARNING | \n"
				else
					printf ">Overall Status\t| WORKING | \n"
				fi
				printf "+---------------+---------+---------------------------------------------+\n"
			else
				checkClusterXLSP
				if [[ $checkClusterXLSP_problem == "1" ]]; then
					printf "ClusterXL\t| PROBLEM | $checkClusterXLSP_problemInfo$checkClusterXLSP_warningInfo$checkClusterXLSP_workingInfo\n"
				elif [[ $checkClusterXLSP_warning == "1" ]]; then
					printf "ClusterXL\t| WARNING | $checkClusterXLSP_warningInfo$checkClusterXLSP_workingInfo\n"
				else
					printf "ClusterXL\t| WORKING | $checkClusterXLSP_workingInfo\n"
				fi
			fi
		fi
		
		if [[ $checkSelf_hwtype == "NONSP" ]] || [[ $checkSelf_hwtype == "VM" ]]; then
			if [[ $APPLIANCETYPE != "SM" ]]; then
				if [[ $checkSelf_haInstalled == "1" ]] && [[ $checkSelf_haNotStarted == "0" ]]; then
					checkClusterXL
					if [[ $checkClusterXL_problem == "1" ]]; then
						printf "ClusterXL\t| PROBLEM | $checkClusterXL_problemInfo$checkClusterXL_warningInfo$checkClusterXL_workingInfo\n" 
					elif [[ $checkClusterXL_warning == "1" ]]; then
						printf "ClusterXL\t| WARNING | $checkClusterXL_warningInfo$checkClusterXL_workingInfo\n" 
					else
						printf "ClusterXL\t| WORKING | $checkClusterXL_workingInfo\n"
					fi
				fi
			fi
		fi
	fi

	#POLICY
	if [[ $FCPENABLED == "0" ]]; then
		if [[ $checkSelf_hwtype == "SP" ]]; then
			if [[ $LOCALSMO == "1" ]]; then
				printf "Policy\n"
				checkPolicySP
				displayPolicySP
				if [[ $displayPolicySP_problem == "1" ]]; then
					printf ">Overall Status\t| PROBLEM | \n"
				elif [[ $displayPolicySP_warning == "1" ]]; then
					printf ">Overall Status\t| WARNING | \n"
				else
					printf ">Overall Status\t| WORKING | \n"
				fi
				printf "+---------------+---------+---------------------------------------------+\n"
			else
				checkPolicySP
				if [[ $checkPolicySP_problem == "1" ]]; then
					printf "Policy\t\t| PROBLEM | $checkPolicySP_problemInfo$checkPolicySP_warningInfo$checkPolicySP_workingInfo\n"
				elif [[ $checkPolicySP_warning == "1" ]]; then
					printf "Policy\t\t| WARNING | $checkPolicySP_warningInfo$checkPolicySP_workingInfo\n"
				else
					printf "Policy\t\t| WORKING | $checkPolicySP_workingInfo\n"
				fi
			fi
		fi
		
		if [[ $checkSelf_hwtype == "MAESTRO" ]]; then
			if [[ $LOCALSMO == "1" ]]; then
				printf "Policy\n"
				checkPolicySP
				displayPolicySP
				if [[ $displayPolicySP_problem == "1" ]]; then
					printf ">Overall Status\t| PROBLEM | \n"
				elif [[ $displayPolicySP_warning == "1" ]]; then
					printf ">Overall Status\t| WARNING | \n"
				else
					printf ">Overall Status\t| WORKING | \n"
				fi
				printf "+---------------+---------+---------------------------------------------+\n"
			else
				checkPolicySP
				if [[ $checkPolicySP_problem == "1" ]]; then
					printf "Policy\t\t| PROBLEM | $checkPolicySP_problemInfo$checkPolicySP_warningInfo$checkPolicySP_workingInfo\n"
				elif [[ $checkPolicySP_warning == "1" ]]; then
					printf "Policy\t\t| WARNING | $checkPolicySP_warningInfo$checkPolicySP_workingInfo\n"
				else
					printf "Policy\t\t| WORKING | $checkPolicySP_workingInfo\n"
				fi
			fi
		fi
		
		if [[ $checkSelf_hwtype == "NONSP" ]] || [[ $checkSelf_hwtype == "VM" ]]; then
			if [[ $APPLIANCETYPE != "SM" ]]; then
				checkPolicy
				if [[ $checkPolicy_problem == "1" ]]; then
					printf "Policy\t\t| PROBLEM | $checkPolicy_problemInfo$checkPolicy_warningInfo$checkPolicy_workingInfo\n" 
				elif [[ $checkPolicy_warning == "1" ]]; then
					printf "Policy\t\t| WARNING | $checkPolicy_warningInfo$checkPolicy_workingInfo\n" 
				else
					printf "Policy\t\t| WORKING | $checkPolicy_workingInfo\n"
				fi
			fi
		fi
		
		if [[ $checkSelf_hwtype == "SM" ]]; then
			checkPolicySM
			if [[ $checkPolicySM_problem == "1" ]]; then
				printf "Policy\t\t| PROBLEM | $checkPolicySM_problemInfo$checkPolicySM_warningInfo$checkPolicySM_workingInfo\n" 
			elif [[ $checkPolicySM_warning == "1" ]]; then
				printf "Policy\t\t| WARNING | $checkPolicySM_warningInfo$checkPolicySM_workingInfo\n" 
			else
				printf "Policy\t\t| WORKING | $checkPolicySM_workingInfo\n"
			fi
		fi 
		
	fi

	#CONNECTIONS	
	if [[ $FCPENABLED == "0" ]]; then
		if [[ $checkSelf_hwtype == "SP" ]] || [[ $checkSelf_hwtype == "MAESTRO" ]]; then
			if [[ $LOCALSMO == "1" ]]; then
				printf "Connections\n"
				checkConnectionsSP
				displayConnectionsSP
				if [[ $displayConnectionsSP_problem == "1" ]]; then
					printf ">Overall Status\t| PROBLEM | \n"
				elif [[ $displayConnectionsSP_warning == "1" ]]; then
					printf ">Overall Status\t| PROBLEM | \n"
				else
					printf ">Overall Status\t| WORKING | \n"
				fi
				printf "+---------------+---------+---------------------------------------------+\n"
			else
				checkConnectionsSP
				if [[ $checkConnectionsSP_problem == "1" ]]; then
					printf "Connections\t| PROBLEM | $checkConnectionsSP_problemInfo$checkConnectionsSP_warningInfo$checkConnectionsSP_workingInfo\n"
				elif [[ $checkConnectionsSP_warning == "1" ]]; then
					printf "Connections\t| WARNING | $checkConnectionsSP_warningInfo$checkConnectionsSP_workingInfo\n"
				else
					printf "Connections\t| WORKING | $checkConnectionsSP_workingInfo\n"
				fi
			fi
		fi
		
		if [[ $checkSelf_hwtype == "NONSP" ]] || [[ $checkSelf_hwtype == "VM" ]]; then
			if [[ $APPLIANCETYPE != "SM" ]]; then
				checkConnections
				if [[ $checkConnections_problem == "1" ]]; then
					printf "Connections\t| PROBLEM | $checkConnections_problemInfo$checkConnections_warningInfo$checkConnections_workingInfo\n" 
				elif [[ $checkConnections_warning == "1" ]]; then
					printf "Connections\t| WARNING | $checkConnections_warningInfo$checkConnections_workingInfo\n" 
				else
					printf "Connections\t| WORKING | $checkConnections_workingInfo\n"
				fi
			fi
		fi
	fi

	#SECUREXL	
	if [[ $FCPENABLED == "0" ]]; then
		if [[ $checkSelf_hwtype == "SP" ]] || [[ $checkSelf_hwtype == "MAESTRO" ]]; then
			if [[ $LOCALSMO == "1" ]]; then
				printf "SecureXL\n"
				checkSecureXLSP
				displaySecureXLSP
				if [[ $displaySecureXLSP_problem == "1" ]]; then
					printf ">Overall Status\t| PROBLEM | \n"
				elif [[ $displaySecureXLSP_warning == "1" ]]; then
					printf ">Overall Status\t| WARNING | \n"
				else
					printf ">Overall Status\t| WORKING | \n"
				fi
				printf "+---------------+---------+---------------------------------------------+\n"
			else
				checkSecureXLSP
				if [[ $checkSecureXLSP_problem == "1" ]]; then
					printf "SecureXL\t| PROBLEM | $checkSecureXLSP_problemInfo$checkSecureXLSP_warningInfo$checkSecureXLSP_workingInfo\n"
				elif [[ $checkSecureXLSP_warning == "1" ]]; then
					printf "SecureXL\t| WARNING | $checkSecureXLSP_warningInfo$checkSecureXLSP_workingInfo\n"
				else
					printf "SecureXL\t| WORKING | $checkSecureXLSP_workingInfo\n"
				fi
			fi
		fi
		
		if [[ $checkSelf_hwtype == "NONSP" ]] || [[ $checkSelf_hwtype == "VM" ]]; then
			if [[ $APPLIANCETYPE != "SM" ]]; then
				checkSecureXL
				if [[ $checkSecureXL_problem == "1" ]]; then
					printf "SecureXL\t| PROBLEM | $checkSecureXL_problemInfo$checkSecureXL_warningInfo$checkSecureXL_workingInfo\n" 
				elif [[ $checkSecureXL_warning == "1" ]]; then
					printf "SecureXL\t| WARNING | $checkSecureXL_warningInfo$checkSecureXL_workingInfo\n" 
				else
					printf "SecureXL\t| WORKING | $checkSecureXL_workingInfo\n"
				fi
			fi
		fi
	fi

	#LICENSE		
	if [[ $FCPENABLED == "0" ]]; then
		if [[ $checkSelf_hwtype == "SP" ]] || [[ $checkSelf_hwtype == "MAESTRO" ]]; then
			if [[ $LOCALSMO == "1" ]]; then
				printf "License\n"
				checkLicenseSP
				displayLicenseSP
				if [[ $displayLicenseSP_problem == "1" ]]; then
					printf ">Overall Status\t| PROBLEM | \n"
				elif [[ $displayLicenseSP_warning == "1" ]]; then
					printf ">Overall Status\t| WARNING | \n"
				else
					printf ">Overall Status\t| WORKING | \n"
				fi
			else
				checkLicenseSP
				if [[ $checkLicenseSP_problem == "1" ]]; then
					printf "License\t\t| PROBLEM | $checkLicenseSP_problemInfo$checkLicenseSP_warningInfo$checkLicenseSP_workingInfo\n"
				elif [[ $checkLicenseSP_warning == "1" ]]; then
					printf "License\t\t| WARNING | $checkLicenseSP_warningInfo$checkLicenseSP_workingInfo\n"
				else
					printf "License\t\t| WORKING | $checkLicenseSP_workingInfo\n"
				fi
			fi
			printf "+---------------+---------+---------------------------------------------+\n"
		fi
		
		if [[ $checkSelf_hwtype == "NONSP" ]] || [[ $checkSelf_hwtype == "VM" ]]; then
			if [[ $APPLIANCETYPE != "SM" ]]; then
				checkLicense
				if [[ $checkLicense_problem == "1" ]]; then
					printf "License\t\t| PROBLEM | $checkLicense_problemInfo$checkLicense_warningInfo$checkLicense_workingInfo\n" 
				elif [[ $checkLicense_warning == "1" ]]; then
					printf "License\t\t| WARNING | $checkLicense_warningInfo$checkLicense_workingInfo\n" 
				else
					printf "License\t\t| WORKING | $checkLicense_workingInfo\n"
				fi
			fi
		fi
	fi

	#HARDWARE	
	# if [[ $checkSelf_hwtype == "SP" ]] || [[ $checkSelf_hwtype == "MAESTRO" ]]; then
		# if [[ $checkSelf_hwtype == "MAESTRO" ]]; then
			# printf "Hardware\n"
			# checkHardwareSP
			# displayHardwareSP
			# if [[ $displayHardwareSP_problem == "1" ]]; then
				# printf ">Overall Status\t| PROBLEM | \n"
			# elif [[ $displayHardwareSP_warning == "1" ]]; then
				# printf ">Overall Status\t| WARNING | \n"
			# else
				# printf ">Overall Status\t| WORKING | \n"
			# fi
		# elif [[ $LOCALSMO == "1" ]]; then
				# checkHardwareSP
			# if [[ $checkHardwareSP_problem == "1" ]]; then
				# printf "Hardware\t| PROBLEM | $checkHardwareSP_problemInfo$checkHardwareSP_warningInfo$checkHardwareSP_workingInfo\n" 
			# elif [[ $checkHardwareSP_warning == "1" ]]; then
				# printf "Hardware\t| WARNING | $checkHardwareSP_warningInfo$checkHardwareSP_workingInfo \n" 
			# else
				# printf "Hardware\t| WORKING | $checkHardwareSP_workingInfo\n"
			# fi
		# else
			# printf "Hardware\t| SKIPPED |  ...Run from SMO Only\n"
		# fi
		# printf "+---------------+---------+---------------------------------------------+\n"
	# fi

	if [[ $checkSelf_hwtype == "MAESTRO" ]]; then
		if [[ $LOCALSMO == "1" ]]; then
			printf "Hardware\n"
			checkHardwareSP
			displayHardwareSP
			if [[ $displayHardwareSP_problem == "1" ]]; then
				printf ">Overall Status\t| PROBLEM | \n"
			elif [[ $displayHardwareSP_warning == "1" ]]; then
				printf ">Overall Status\t| WARNING | \n"
			else
				printf ">Overall Status\t| WORKING | \n"
			fi
		else
			checkHardwareSP
			if [[ $checkHardwareSP_problem == "1" ]]; then
				printf "Hardware\t| PROBLEM | $checkHardwareSP_problemInfo$checkHardwareSP_warningInfo$checkHardwareSP_workingInfo\n" 
			elif [[ $checkHardwareSP_warning == "1" ]]; then
				printf "Hardware\t| WARNING | $checkHardwareSP_warningInfo$checkHardwareSP_workingInfo \n" 
			else
				printf "Hardware\t| WORKING | $checkHardwareSP_workingInfo\n"
			fi
		fi
		printf "+---------------+---------+---------------------------------------------+\n"
	fi

	if [[ $checkSelf_hwtype == "SP" ]]; then
		if [[ $LOCALSMO == "1" ]]; then
			printf "Hardware\n"
			checkHardwareSP
			if [[ $checkHardwareSP_problem == "1" ]]; then
				printf ">Overall Status\t| PROBLEM | \n"
			elif [[ $checkHardwareSP_warning == "1" ]]; then
				printf ">Overall Status\t| WARNING | \n"
			else
				printf ">Overall Status\t| WORKING | \n"
			fi
		else
			printf "Hardware\t| SKIPPED |  ...Run from SMO Only\n"
		fi
		printf "+---------------+---------+---------------------------------------------+\n"
	fi

	if [[ $checkSelf_hwtype == "VM" ]]; then
		printf "Hardware\t| SKIPPED |  ...VMware\n"
	fi

	if [[ $checkSelf_hwtype == "NONSP" || $checkSelf_hwtype == "SM" ]]; then	
		checkHardware
		if [[ $checkHardware_problem == "1" ]]; then
			printf "Hardware\t| PROBLEM | $checkHardware_problemInfo$checkHardware_warningInfo$checkHardware_workingInfo\n" 
		elif [[ $checkHardware_warning == "1" ]]; then
			printf "Hardware\t| WARNING | $checkHardware_warningInfo$checkHardware_workingInfo \n" 
		else
			printf "Hardware\t| WORKING | $checkHardware_workingInfo\n"
		fi
	fi
			
	#PERFORMANCE			
	if [[ $checkSelf_hwtype == "SP" ]] || [[ $checkSelf_hwtype == "MAESTRO" ]]; then
		if [[ $LOCALSMO == "1" ]]; then
			printf "Performance\n"
			checkPerformanceSP
			displayPerformanceSP
			if [[ $displayPerformanceSP_problem == "1" ]]; then
				printf ">Overall Status\t| PROBLEM | \n"
			elif [[ $displayPerformanceSP_warning == "1" ]]; then
				printf ">Overall Status\t| WARNING | \n"
			else
				printf ">Overall Status\t| WORKING | \n"
			fi
		else
			checkPerformanceSP
			if [[ $checkPerformanceSP_problem == "1" ]]; then
				printf "Performance\t| PROBLEM | $checkPerformanceSP_problemInfo$checkPerformanceSP_warningInfo$checkPerformanceSP_workingInfo\n"
			elif [[ $checkPerformanceSP_warning == "1" ]]; then
				printf "Performance\t| WARNING | $checkPerformanceSP_warningInfo$checkPerformanceSP_workingInfo\n"
			else
				printf "Performance\t| WORKING | $checkPerformanceSP_workingInfo\n"
			fi
		fi
		printf "+---------------+---------+---------------------------------------------+\n"
	fi

	if [[ $checkSelf_hwtype == "NONSP" ]] || [[ $checkSelf_hwtype == "VM" ]] || [[ $checkSelf_hwtype == "SM" ]]; then
		checkPerformance
		if [[ $checkPerformance_problem == "1" ]]; then
			printf "Performance\t| PROBLEM | $checkPerformance_problemInfo$checkPerformance_warningInfo$checkPerformance_workingInfo\n" 
		elif [[ $checkPerformance_warning == "1" ]]; then
			printf "Performance\t| WARNING | $checkPerformance_warningInfo$checkPerformance_workingInfo\n" 
		else
			printf "Performance\t| WORKING | $checkPerformance_workingInfo\n"
		fi
	fi

	#ROUTING	
	if [[ $checkSelf_hwtype == "SP" ]] || [[ $checkSelf_hwtype == "MAESTRO" ]]; then
		if [[ $LOCALSMO == "1" ]]; then
			printf "Routing\n"
			checkRoutingSP
			displayRoutingSP
			if [[ $displayRoutingSP_problem == "1" ]]; then
				printf ">Overall Status\t| PROBLEM | \n"
			elif [[ $displayRoutingSP_warning == "1" ]]; then
				printf ">Overall Status\t| WARNING | \n"
			else
				printf ">Overall Status\t| WORKING | \n"
			fi
		else
			checkRoutingSP
			if [[ $checkRoutingSP_problem == "1" ]]; then
				printf "Routing\t\t| PROBLEM | $checkRoutingSP_problemInfo$checkRoutingSP_warningInfo$checkRoutingSP_workingInfo\n"
			elif [[ $checkRoutingSP_warning == "1" ]]; then
				printf "Routing\t\t| WARNING | $checkRoutingSP_warningInfo$checkRoutingSP_workingInfo\n"
			else
				printf "Routing\t\t| WORKING | $checkRoutingSP_workingInfo\n"
			fi
		fi
		printf "+---------------+---------+---------------------------------------------+\n"
	fi

	if [[ $checkSelf_hwtype == "NONSP" ]] || [[ $checkSelf_hwtype == "VM" ]]; then
		if [[ $APPLIANCETYPE != "SM" ]]; then
			checkRouting
			if [[ $checkRouting_problem == "1" ]]; then
				printf "Routing\t\t| PROBLEM | $checkRouting_problemInfo$checkRouting_warningInfo$checkRouting_workingInfo\n" 
			elif [[ $checkRouting_warning == "1" ]]; then
				printf "Routing\t\t| WARNING | $checkRouting_warningInfo$checkRouting_workingInfo\n" 
			else
				printf "Routing\t\t| WORKING | $checkRouting_workingInfo\n"
			fi
		fi
	fi

	#BONDING	
	if [[ $checkSelf_hwtype == "SP" ]] || [[ $checkSelf_hwtype == "MAESTRO" ]]; then
		echo "Skipped because its redundant to interface check" > /dev/null
	fi

	if [[ $checkSelf_hwtype == "NONSP" ]]; then	
		if [[ $APPLIANCETYPE != "SM" ]]; then
			if [[ $checkSelf_bonding > "0" ]]; then
				checkBonding
				if [[ $checkBonding_problem == "1" ]]; then
					printf "Bonding\t\t| PROBLEM | $checkBonding_problemInfo$checkBonding_warningInfo$checkBonding_workingInfo\n" 
				elif [[ $checkBonding_warning == "1" ]]; then
					printf "Bonding\t\t| WARNING | $checkBonding_warningInfo$checkBonding_workingInfo\n" 
				else
					printf "Bonding\t\t| WORKING | $checkBonding_workingInfo\n"
				fi
			fi
		fi
	fi

	#INTERFACE
#	if [[ $VSXENABLED != "1" ]]; then
		# if [[ $checkSelf_hwtype == "SP" ]] || [[ $checkSelf_hwtype == "MAESTRO" ]]; then
			# if [[ $LOCALSMO == "1" ]]; then
				# checkInterfaceSP
				# displayInterfaceSP
				# if [[ $checkInterfaceSP_problem == "1" ]]; then
					# printf "Interface\t| PROBLEM | $checkInterfaceSP_problemInfo$checkInterfaceSP_warningInfo$checkInterfaceSP_workingInfo\n" 
				# elif [[ $checkInterfaceSP_warning == "1" ]]; then
					# printf "Interface\t| WARNING | $checkInterfaceSP_warningInfo$checkInterfaceSP_workingInfo\n" 
				# else
					# printf "Interface\t| WORKING | $checkInterfaceSP_workingInfo\n"
				# fi	
			# else
				# if [[ $checkInterfaceSP_problem == "1" ]]; then
					# printf "Interface\t| PROBLEM | $checkInterfaceSP_problemInfo$checkInterfaceSP_warningInfo$checkInterfaceSP_workingInfo\n" 
				# elif [[ $checkInterfaceSP_warning == "1" ]]; then
					# printf "Interface\t| WARNING | $checkInterfaceSP_warningInfo$checkInterfaceSP_workingInfo\n" 
				# else
					# printf "Interface\t| WORKING | $checkInterfaceSP_workingInfo\n"
				# fi
			# fi
			# printf "+---------------+---------+---------------------------------------------+\n"
		# fi
		
		# if [[ $checkSelf_hwtype == "NONSP" ]] || [[ $checkSelf_hwtype == "VM" || $checkSelf_hwtype == "SM"  ]]; then
			# checkInterface
			# if [[ $checkInterface_problem == "1" ]]; then
				# printf "Interface\t| PROBLEM | $checkInterface_problemInfo$checkInterface_warningInfo$checkInterface_workingInfo\n" 
			# elif [[ $checkInterface_warning == "1" ]]; then
				# printf "Interface\t| WARNING | $checkInterface_warningInfo$checkInterface_workingInfo\n" 
			# else
				# printf "Interface\t| WORKING | $checkInterface_workingInfo\n"
			# fi	
		# fi
	
		if [[ $checkSelf_hwtype == "SP" ]] || [[ $checkSelf_hwtype == "MAESTRO" ]]; then
			if [[ $LOCALSMO == "1" ]]; then
				printf "Interface\n"
				checkInterfaceSP
				displayInterfaceSP
				if [[ $displayInterfaceSP_problem == "1" ]]; then
					printf ">Overall Status\t| PROBLEM | \n"
				elif [[ $displayInterfaceSP_warning == "1" ]]; then
					printf ">Overall Status\t| WARNING | \n"
				else
					printf ">Overall Status\t| WORKING | \n"
				fi
			else
				checkInterfaceSP
				if [[ $checkInterfaceSP_problem == "1" ]]; then
					printf "Interface\t| PROBLEM | $checkInterfaceSP_problemInfo$checkInterfaceSP_warningInfo$checkInterfaceSP_workingInfo\n"
				elif [[ $checkInterfaceSP_warning == "1" ]]; then
					printf "Interface\t| WARNING | $checkInterfaceSP_warningInfo$checkInterfaceSP_workingInfo\n"
				else
					printf "Interface\t| WORKING | $checkInterfaceSP_workingInfo\n"
				fi
			fi
			printf "+---------------+---------+---------------------------------------------+\n"
		fi

		if [[ $checkSelf_hwtype == "NONSP" ]] || [[ $checkSelf_hwtype == "VM" ]] || [[ $checkSelf_hwtype == "SM" ]]; then
			checkInterface
			if [[ $checkInterface_problem == "1" ]]; then
				printf "Interface\t| PROBLEM | $checkInterface_problemInfo$checkInterface_warningInfo$checkInterface_workingInfo\n" 
			elif [[ $checkInterface_warning == "1" ]]; then
				printf "Interface\t| WARNING | $checkInterface_warningInfo$checkInterface_workingInfo\n" 
			else
				printf "Interface\t| WORKING | $checkInterface_workingInfo\n"
			fi
		fi
	# fi



	
	#MAESTRO-MHO	
	if [[ $FCPENABLED == "0" ]]; then
		if [[ $checkSelf_hwtype == "MHO" ]]; then
			checkMaestroMHO
			if [[ $checkMaestroMHO_problem == "1" ]]; then
				printf "Maestro MHO\t| PROBLEM | $checkMaestroMHO_problemInfo$checkMaestroMHO_warningInfo$checkMaestroMHO_workingInfo\n"
			elif [[ $checkMaestroMHO_warning == "1" ]]; then
				printf "Maestro MHO\t| WARNING | $checkMaestroMHO_warningInfo$checkMaestroMHO_workingInfo\n"
			else
				printf "Maestro MHO\t| WORKING | $checkMaestroMHO_workingInfo\n"
			fi
			printf "+---------------+---------+---------------------------------------------+\n"
		fi
	fi
	
	#ASG	
	if [[ $FCPENABLED == "0" ]]; then
		if [[ $checkSelf_hwtype == "SP" ]] || [[ $checkSelf_hwtype == "MAESTRO" ]]; then
			if [[ $LOCALSMO == "1" ]]; then
				printf "ASG\n"
				checkAsgSP
				displayAsgSP
				if [[ $displayAsgSP_problem == "1" ]]; then
					printf ">Overall Status\t| PROBLEM | \n"
				elif [[ $displayAsgSP_warning == "1" ]]; then
					printf ">Overall Status\t| WARNING | \n"
				else
					printf ">Overall Status\t| WORKING | \n"
				fi
			else
				checkAsgSP
				if [[ $checkAsgSP_problem == "1" ]]; then
					printf "ASG\t\t| PROBLEM | $checkAsgSP_problemInfo$checkAsgSP_warningInfo$checkAsgSP_workingInfo\n"
				elif [[ $checkAsgSP_warning == "1" ]]; then
					printf "ASG\t\t| PROBLEM | $checkAsgSP_warningInfo$checkAsgSP_workingInfo\n"
				else
					printf "ASG\t\t| WORKING | $checkAsgSP_workingInfo\n"
				fi
			fi
			printf "+---------------+---------+---------------------------------------------+\n"
		fi
	fi

	#API
	if [[ $FCPENABLED == "0" ]]; then
		if [[ $APPLIANCETYPE == "SM" ]]; then
			checkApiSM
			if [[ $checkApiSM_problem == "1" ]]; then
				printf "API\t\t| PROBLEM | $checkApiSM_problemInfo$checkApiSM_warningInfo$checkApiSM_workingInfo\n"
			elif [[ $checkApiSM_warning == "1" ]]; then
				printf "API\t\t| WARNING | $checkApiSM_warningInfo$checkApiSM_workingInfo\n"
			else
				printf "API\t\t| WORKING | $checkApiSM_workingInfo\n"
			fi
		fi
	fi

	#Drops
	if [[ $EVALDROPS == "1" ]]; then
		if [[ $FCPENABLED == "0" ]]; then	
			if [[ $APPLIANCETYPE != "MAESTRO-ORCHESTRATOR" ]]; then	
				if [[ $APPLIANCETYPE != "SM" ]]; then
				#	if [[ $VSXENABLED != "1" ]]; then
						if [[ $IDSENABLED != "1" ]]; then
							if [[ $LOCALSMO == "0" ]]; then
								echo 1 > /dev/null
							else
								checkDropsRunning=$(ps -p $checkDropsPID | grep -v "PID" | wc -l)
							fi

							if [[ $checkDropsRunning -gt "0" ]]; then
								printf "+-----------------------------------------------------------------------+\n"
								printf "+--------------------FINISHING DROP ANALYSIS----------------------------+\n"
								while [ $checkDropsRunning -gt "0" ]; do
									sleep 1
									echo -n "."
									checkDropsRunning=$(ps -p $checkDropsPID | grep -v "PID" | wc -l)
								done
								echo "complete!"
								printf "+-----------------------------------------------------------------------+\n"
							fi

							if [[ $checkSelf_hwtype == "SP" ]] || [[ $checkSelf_hwtype == "MAESTRO" ]]; then
								if [[ $LOCALSMO == "1" ]]; then
									checkDropsSP_problem=$(cat $TEMPDIR/$SCRIPT.$EPOCH.var.checkDropsSP_problem)
									checkDropsSP_problemInfo=$(cat $TEMPDIR/$SCRIPT.$EPOCH.var.checkDropsSP_problemInfo)
									if [[ $checkDropsSP_problem == "1" ]]; then
										printf "Drops\t\t| PROBLEM | $checkDropsSP_problemInfo\n"
										if [[ -f $DROPSFOUNDFILE ]]; then
											printf "\n"
											echo "SOURCE_IP DEST_IP DEST_PORT PROTOCOL RULE_NUMBER"
											cat $DROPSFOUNDFILE | grep -v "NA" | column -t
											printf "\n"
											printf "+-----------------------------------------------------------------------+\n"
										fi
									else
										printf "Drops\t\t| WORKING | $checkDropsSP_problemInfo\n"
									fi
								else
									printf "Drops\t\t| SKIPPED |  ...Run from SMO Only\n"
								fi
								printf "+---------------+---------+---------------------------------------------+\n"
							fi
							
							if [[ $checkSelf_hwtype == "NONSP" ]] || [[ $checkSelf_hwtype == "VM" ]]; then
								if [[ -f $TEMPDIR/$SCRIPT.$EPOCH.var.checkDrops_problem ]] && [[ -f $TEMPDIR/$SCRIPT.$EPOCH.var.checkDrops_problemInfo ]]; then
									checkDrops_problem=$(cat $TEMPDIR/$SCRIPT.$EPOCH.var.checkDrops_problem)
									checkDrops_problemInfo=$(cat $TEMPDIR/$SCRIPT.$EPOCH.var.checkDrops_problemInfo)
								else
									checkDrops_problem="0"
									checkDrops_problemInfo="[0 Drops Captured]"
								fi
								if [[ $checkDrops_problem == "1" ]]; then
									printf "Drops\t\t| PROBLEM | $checkDrops_problemInfo\n"
									if [[ -f $DROPSFOUNDFILE ]]; then
										printf "\n"
										echo "SOURCE_IP DEST_IP DEST_PORT PROTOCOL RULE_NUMBER"
										cat $DROPSFOUNDFILE | grep -v "NA" | column -t
										printf "\n"
										printf "+-----------------------------------------------------------------------+\n"
									fi
								else
									printf "Drops\t\t| WORKING | $checkDrops_problemInfo\n"
									
								fi
								printf "+---------------+---------+---------------------------------------------+\n"
							fi
						fi
					# fi
				fi
			fi
		fi
	fi

	
	#ConnectionTable
	if [[ $EVALDROPS == "1" ]]; then
		if [[ $FCPENABLED == "0" ]]; then	
			if [[ $APPLIANCETYPE != "SM" ]]; then
				# if [[ $VSXENABLED != "1" ]]; then
					if [[ $IDSENABLED != "1" ]]; then		
						if [[ $checkSelf_hwtype == "SP" ]] || [[ $checkSelf_hwtype == "MAESTRO" ]]; then
							if [[ $LOCALSMO == "1" ]]; then
								printf "Connection Tbl\n"
								checkConnectionTableSP
								displayConnectionTableSP
								if [[ $displayConnectionTableSP_problem == "1" ]]; then
									printf ">Overall Status\t| PROBLEM | \n"
								elif [[ $displayConnectionTableSP_warning == "1" ]]; then
									printf ">Overall Status\t| WARNING | \n"
								else
									printf ">Overall Status\t| WORKING | \n"
								fi
								printf "+---------------+---------+---------------------------------------------+\n"
							else
								checkConnectionTableSP
								if [[ $checkConnectionTableSP_problem == "1" ]]; then
									printf "Connection Tbl\t| PROBLEM | $checkConnectionTableSP_problemInfo\n"
								elif [[ $checkConnectionTableSP_warning == "1" ]]; then
									printf "Connection Tbl\t| WARNING | $checkConnectionTableSP_problemInfo\n"
								else
									printf "Connection Tbl\t| WORKING | $checkConnectionTableSP_problemInfo\n"
								fi
							fi
						fi
						
						if [[ $checkSelf_hwtype == "NONSP" ]] || [[ $checkSelf_hwtype == "VM" ]]; then
							if [[ $APPLIANCETYPE != "SM" ]]; then
								checkConnectionTable
								if [[ $checkConnectionTable_problem == "1" ]]; then
									printf "Connection Tbl\t| PROBLEM | $checkConnectionTable_problemInfo\n"
								elif [[ $checkConnectionTable_warning == "1" ]]; then
									printf "Connection Tbl\t| WARNING | $checkConnectionTable_problemInfo\n"
								else
									printf "Connection Tbl\t| WORKING | $checkConnectionTable_problemInfo\n"
								fi
							fi
						fi
					fi
				# fi
			fi
		fi
	fi

	#NAT Table
	if [[ $FCPENABLED == "0" ]]; then	
		if [[ $APPLIANCETYPE != "SM" ]]; then
			# if [[ $VSXENABLED != "1" ]]; then
				if [[ $IDSENABLED != "1" ]]; then
					if [[ $checkSelf_hwtype == "SP" ]] || [[ $checkSelf_hwtype == "MAESTRO" ]]; then
						if [[ $LOCALSMO == "1" ]]; then
							printf "NAT Table\n"
							checkNatTableSP
							displayNatTableSP
							if [[ $displayNatTableSP_problem == "1" ]]; then
								printf ">Overall Status\t| PROBLEM | \n"
							elif [[ $displayNatTableSP_warning == "1" ]]; then
								printf ">Overall Status\t| WARNING | \n"
							else
								printf ">Overall Status\t| WORKING | \n"
							fi
							printf "+---------------+---------+---------------------------------------------+\n"
						else
							checkNatTableSP
							if [[ $checkNatTableSP_problem == "1" ]]; then
								printf "NAT Table\t| PROBLEM | $checkNatTableSP_problemInfo$checkNatTableSP_warningInfo$checkNatTableSP_workingInfo\n"
							elif [[ $checkNatTableSP_warning == "1" ]]; then
								printf "NAT Table\t| WARNING | $checkNatTableSP_warningInfo$checkNatTableSP_workingInfo\n"
							else
								printf "NAT Table\t| WORKING | $checkNatTableSP_workingInfo\n"
							fi
						fi
					fi
					
					if [[ $checkSelf_hwtype == "NONSP" ]] || [[ $checkSelf_hwtype == "VM" ]]; then
						if [[ $APPLIANCETYPE != "SM" ]]; then
							if [[ $IDSENABLED != "1" ]]; then
								checkNatTable
								if [[ $checkNatTable_problem == "1" ]]; then
									printf "NAT Table\t| PROBLEM | $checkNatTable_problemInfo$checkNatTable_warningInfo$checkNatTable_workingInfo\n"
								elif [[ $checkNatTable_warning == "1" ]]; then
									printf "NAT Table\t| WARNING | $checkNatTable_warningInfo$checkNatTable_workingInfo\n"
								else
									printf "NAT Table\t| WORKING | $checkNatTable_workingInfo\n"
								fi
							fi
						fi
					fi
				fi
			# fi
		fi
	fi

	#VSX
	# if [[ $FCPENABLED == "0" ]]; then	
		# if [[ $APPLIANCETYPE != "SM" ]]; then
			# if [[ $VSXENABLED == "1" ]]; then
				# if [[ $checkSelf_hwtype == "SP" ]] || [[ $checkSelf_hwtype == "MAESTRO" ]]; then
					# if [[ $LOCALSMO == "1" ]]; then
						# printf "VSX\n"
						# checkVsxSP
						# displayVsxSP
						# if [[ $displayVsxSP_problem == "1" ]]; then
							# printf ">Overall Status\t| PROBLEM | \n"
						# elif [[ $displayVsxSP_warning == "1" ]]; then
							# printf ">Overall Status\t| WARNING | \n"
						# else
							# printf ">Overall Status\t| WORKING | \n"
						# fi
						# printf "+---------------+---------+---------------------------------------------+\n"
					# else
						# checkVsxSP
						# if [[ $checkVsxSP_problem == "1" ]]; then
							# printf "VSX\t\t| PROBLEM | $checkVsxSP_problemInfo$checkVsxSP_warningInfo$checkVsxSP_workingInfo\n"
						# elif [[ $checkVsxSP_warning == "1" ]]; then
							# printf "VSX\t\t| WARNING | $checkVsxSP_warningInfo$checkVsxSP_workingInfo\n"
						# else
							# printf "VSX\t\t| WORKING | $checkVsxSP_workingInfo\n"
						# fi
					# fi
				# fi
				
				# if [[ $checkSelf_hwtype == "NONSP" ]] || [[ $checkSelf_hwtype == "VM" ]]; then
					# checkVsx
					# if [[ $checkVsx_problem == "1" ]]; then
						# printf "VSX\t\t| PROBLEM | $checkVsx_problemInfo$checkVsx_warningInfo$checkVsx_workingInfo\n"
					# elif [[ $checkVsx_warning == "1" ]]; then
						# printf "VSX\t\t| WARNING | $checkVsx_warningInfo$checkVsx_workingInfo\n"
					# else
						# printf "VSX\t\t| WORKING | $checkVsx_workingInfo\n"
					# fi
				# fi
			# fi
		# fi
	# fi		

	#Score
	if [[ $FCPENABLED == "0" ]]; then	
		if [[ $APPLIANCETYPE != "SM" ]]; then
			if [[ $checkSelf_hwtype == "SP" ]] || [[ $checkSelf_hwtype == "MAESTRO" ]]; then
				if [[ $LOCALSMO == "1" ]]; then
					checkScoreSP
					if [[ $checkScoreSP_problem == "1" ]]; then
						printf "Capacity Score\t| PROBLEM | $checkScoreSP_problemInfo$checkScoreSP_warningInfo$checkScoreSP_workingInfo\n"
					elif [[ $checkScoreSP_warning == "1" ]]; then
						printf "Capacity Score\t| WARNING | $checkScoreSP_warningInfo$checkScoreSP_workingInfo\n"
					else
						printf "Capacity Score\t| WORKING | $checkScoreSP_workingInfo\n"
					fi
				else
					printf "Capacity Score\t| Skipped | Run on SMO only\n"
				fi
			fi
			
			if [[ $checkSelf_hwtype == "NONSP" ]] || [[ $checkSelf_hwtype == "VM" ]]; then
				if [[ $APPLIANCETYPE != "SM" ]]; then
					checkScore
					if [[ $checkScore_problem == "1" ]]; then
						printf "Capacity Score\t| PROBLEM | $checkScore_problemInfo$checkScore_warningInfo$checkScore_workingInfo\n"
					elif [[ $checkScore_warning == "1" ]]; then
						printf "Capacity Score\t| WARNING | $checkScore_warningInfo$checkScore_workingInfo\n"
					else
						printf "Capacity Score\t| WORKING | $checkScore_workingInfo\n"
					fi
				fi
			fi
		fi
	fi

	rm -f $TEMPDIR/$SCRIPT.$EPOCH.var.checkDrops_problem $TEMPDIR/$SCRIPT.$EPOCH.var.checkDrops_problemInfo $TEMPDIR/$SCRIPT.$EPOCH.var.checkDropsSP_problem $TEMPDIR/$SCRIPT.$EPOCH.var.checkDropsSP_problemInfo > /dev/null 2>&1
			
fi

printf "+---------------+---------+---------------------------------------------+\n"
checkUltimateStatus
if [[ $checkUltimateStatus_problem == "1" ]]; then
	printf "Overall System\t| PROBLEM | [$checkUltimateStatus_problemInfo ] [Run Time: $TOTALRUNTIME seconds]\n" 
elif [[ $checkUltimateStatus_warning == "1" ]]; then
	printf "Overall System\t| WARNING | [$checkUltimateStatus_problemInfo ] [Run Time: $TOTALRUNTIME seconds]\n" 
else
	printf "Overall System\t| WORKING | [Run Time: $TOTALRUNTIME seconds]\n"
fi
printf "+-----------------------------------------------------------------------+\n"

cleanUp
# if [[ $HOSTNAME == "FWTPOL0504" || $HOSTNAME =~ "IDSHOU0101" ]]; then
	# processLog
# fi
}

###################################################################################################
runHealthCheck() {

# wait 6 seconds to let sub5monitoring complete
SUB5MONITORING_ENABLED=$(crontab -l -u hpna | grep "sub5monitoring" | grep -v "#" | wc -l)
if [[ $SUB5MONITORING_ENABLED -gt "0" ]]; then
	echo "starting...."
	sleep 6
fi
globalVars

##HANDLE AUTO REMOVE LOCKS
if [[ -f $PIDLOCK ]] && [[ $APPLIANCETYPE == "NONSP" || $APPLIANCETYPE == "SM" ]] && [[ $SCRIPTSRUNNINGQTY -le "3" ]]; then
	removeLock
	echo "$HISTORYLOGPREAMBLE - Auto Removed Lock - INFO - Uptime: $UPTIME Time since last run: $SINCELASTRUN Scripts Running: $SCRIPTSRUNNINGQTY" >>$HISTORYLOG
	sendSyslog "$functionName" "INFO" "AutoRemovedLock" "VALUE=\"Uptime: $UPTIME Time since last run: $SINCELASTRUN Scripts Running: $SCRIPTSRUNNINGQTY\""
fi

if [[ $APPLIANCETYPE == "SP" || $APPLIANCETYPE == "MAESTRO" ]] && [[ $LOCALSMO == "1" && $PIDLOCKPRESENT -gt "0" && $SCRIPTSRUNNINGQTY -le "3" ]]; then
	removeLock
	echo "$HISTORYLOGPREAMBLE - Auto Removed Lock - INFO - Uptime: $UPTIME Time since last run: $SINCELASTRUN Scripts Running: $SCRIPTSRUNNINGQTY PID Lock: $PIDLOCKPRESENT" >>$HISTORYLOG
	sendSyslog "$functionName" "INFO" "AutoRemovedLock" "VALUE=\"Uptime: $UPTIME Time since last run: $SINCELASTRUN Scripts Running: $SCRIPTSRUNNINGQTY PID Lock: $PIDLOCKPRESENT\""
fi



if [[ -f $PIDLOCK ]]; then

	LOCKEPOCH=$(cat $PIDLOCK)
	LOCKEPOCHDIFF="$(( EPOCH - LOCKEPOCH ))"
	TIMESINCE=$(conv_time $LOCKEPOCHDIFF)
	if [[ $LOCALSMO == "1" ]] && [[ $SYSARG1 == "cron" ]] && [[ $SYSARG2 == "gexec" ]]; then
		#die silently
		echo "Already running (started $TIMESINCE), last successful execution took $LASTRUNTIME seconds, exiting" 
	else
		echo "Already running (started $TIMESINCE), last successful execution took $LASTRUNTIME seconds, exiting" 
		PIDLOCK2=$(cat $PIDLOCK)
		echo "$HISTORYLOGPREAMBLE - Already Running Error - FATAL ERROR - $PIDLOCK2 -" >>$HISTORYLOG
		sendSyslog "$functionName" "PROBLEM" "AlreadyRunningError" "VALUE=\"$PIDLOCK2\""
	fi
else
	echo $EPOCH > $PIDLOCK
	displayCLI
	rm $PIDLOCK
fi

}

###################################################################################################
removeLock() {

#if [[ -f /opt/CPsuite-R76/fw1/bin/asg ]] || [[ -f /opt/CPsmo-R80.30/bin/asg ]] || [[ -f /opt/CPsmo-R80.20/bin/asg ]] || [[ -f /opt/CPsmo-R81.10/bin/asg ]] || [[ -f /opt/CPsmo-R81.20/bin/asg ]]; then
if [[ $IS_SCALABLE_PLATFORM -eq "1" ]]; then
	echo "Deleting $PIDLOCK from all SGMs"
	gexec -c "rm -f $PIDLOCK"
else
	PIDEPOCH=$(cat $PIDLOCK)
	PIDLOCKDATE=$(date -d @$PIDEPOCH)
	echo "Deleting $PIDLOCK from ($PIDLOCKDATE)"
	rm -rf $PIDLOCK
fi
}

###################################################################################################
displayGatewayLogCurrent() {
cat $CURRENTRUNHISTORYLOGOUTPUT
}

###################################################################################################
displayLastRunStatus() {
globalVars
LASTRUNSUCCESSDIFF=$(( EPOCH - $LASTRUNSUCCESSEPOCH))
LASTRUNSUCCESSDIFFCONV=$(conv_time $LASTRUNSUCCESSDIFF)
echo ""
echo $LASTRUNSUCCESSSTATUS
echo ""
echo "Since list run time: $LASTRUNSUCCESSDIFFCONV"
echo ""
echo ""
}

###################################################################################################
displayLastCli() {
globalVars
if [[ -f $TEMPDIR/$SCRIPT.cli ]]; then
	clear
	cat $TEMPDIR/$SCRIPT.cli
else
	echo "LAST RUN NOT FOUND"
fi
}

###################################################################################################
displaySnmpSearch() {

OUTPUT=$(cat $CURRENTRUNHISTORYLOGOUTPUT | grep $1 | grep INFO | grep -v Info | awk -F " - " '{print $7}')
if [[ $OUTPUT == "" ]]; then
	echo $1
	echo "N/A"
else
	echo $1
	echo $OUTPUT
fi

}

###################################################################################################
displaySnmp() {
CURRENTRUNHISTORYLOGOUTPUT="/var/log/tmp/fw_health_check.sh.current"

# 1.3.6.1.4.1.8072.1.3

if [[ $1 == "checkSelf" ]]; then
	displaySnmpSearch "checkSelf_problem"
	displaySnmpSearch "checkSelf_problemInfo"
	displaySnmpSearch "checkSelf_runTime"
fi


if [[ $1 == "checkLogging" ]]; then
	displaySnmpSearch "checkLogging_problem"
	displaySnmpSearch "checkLogging_problemInfo"
	displaySnmpSearch "checkLogging_runTime"
fi


if [[ $1 == "checkLoggingSP" ]]; then
	displaySnmpSearch "checkLoggingSP_problem"
	displaySnmpSearch "checkLoggingSP_problemInfo"
	displaySnmpSearch "checkLoggingSP_runTime"
fi


if [[ $1 == "checkClusterXL" ]]; then
	displaySnmpSearch "checkClusterXL_problem"
	displaySnmpSearch "checkClusterXL_problemInfo"
	displaySnmpSearch "checkClusterXL_runTime"
fi


if [[ $1 == "checkClusterXLSP" ]]; then
	displaySnmpSearch "checkClusterXLSP_problem"
	displaySnmpSearch "checkClusterXLSP_problemInfo"
	displaySnmpSearch "checkClusterXLSP_runTime"
fi


if [[ $1 == "checkPolicy" ]]; then
	displaySnmpSearch "checkPolicy_problem"
	displaySnmpSearch "checkPolicy_problemInfo"
	displaySnmpSearch "checkPolicy_runTime"
fi


if [[ $1 == "checkPolicySP" ]]; then
	displaySnmpSearch "checkPolicySP_problem"
	displaySnmpSearch "checkPolicySP_problemInfo"
	displaySnmpSearch "checkPolicySP_runTime"
fi


if [[ $1 == "checkConnections" ]]; then
	displaySnmpSearch "checkConnections_problem"
	displaySnmpSearch "checkConnections_problemInfo"
	displaySnmpSearch "checkConnections_runTime"
fi


if [[ $1 == "checkConnectionsSP" ]]; then
	displaySnmpSearch "checkConnectionsSP_problem"
	displaySnmpSearch "checkConnectionsSP_problemInfo"
	displaySnmpSearch "checkConnectionsSP_runTime"
fi


if [[ $1 == "checkSecureXL" ]]; then
	displaySnmpSearch "checkSecureXL_problem"
	displaySnmpSearch "checkSecureXL_problemInfo"
	displaySnmpSearch "checkSecureXL_runTime"
fi


if [[ $1 == "checkSecureXLSP" ]]; then
	displaySnmpSearch "checkSecureXLSP_problem"
	displaySnmpSearch "checkSecureXLSP_problemInfo"
	displaySnmpSearch "checkSecureXLSP_runTime"
fi


if [[ $1 == "checkLicense" ]]; then
	displaySnmpSearch "checkLicense_problem"
	displaySnmpSearch "checkLicense_problemInfo"
	displaySnmpSearch "checkLicense_runTime"
fi


if [[ $1 == "checkLicenseSP" ]]; then
	displaySnmpSearch "checkLicenseSP_problem"
	displaySnmpSearch "checkLicenseSP_problemInfo"
	displaySnmpSearch "checkLicenseSP_runTime"
fi


if [[ $1 == "checkHardware" ]]; then
	displaySnmpSearch "checkHardware_problem"
	displaySnmpSearch "checkHardware_problemInfo"
	displaySnmpSearch "checkHardware_runTime"
fi


if [[ $1 == "checkHardwareSP" ]]; then
	displaySnmpSearch "checkHardwareSP_problem"
	displaySnmpSearch "checkHardwareSP_problemInfo"
	displaySnmpSearch "checkHardwareSP_runTime"
fi


if [[ $1 == "checkPerformance" ]]; then
	displaySnmpSearch "checkPerformance_problem"
	displaySnmpSearch "checkPerformance_problemInfo"
	displaySnmpSearch "checkPerformance_runTime"
fi


if [[ $1 == "checkPerformanceSP" ]]; then
	displaySnmpSearch "checkPerformanceSP_problem"
	displaySnmpSearch "checkPerformanceSP_problemInfo"
	displaySnmpSearch "checkPerformanceSP_runTime"
fi


if [[ $1 == "checkRouting" ]]; then
	displaySnmpSearch "checkRouting_problem"
	displaySnmpSearch "checkRouting_problemInfo"
	displaySnmpSearch "checkRouting_runTime"
fi


if [[ $1 == "checkRoutingSP" ]]; then
	displaySnmpSearch "checkRoutingSP_problem"
	displaySnmpSearch "checkRoutingSP_problemInfo"
	displaySnmpSearch "checkRoutingSP_runTime"
fi


if [[ $1 == "checkBonding" ]]; then
	displaySnmpSearch "checkBonding_problem"
	displaySnmpSearch "checkBonding_problemInfo"
	displaySnmpSearch "checkBonding_runTime"
fi


if [[ $1 == "checkInterface" ]]; then
	displaySnmpSearch "checkInterface_problem"
	displaySnmpSearch "checkInterface_problemInfo"
	displaySnmpSearch "checkInterface_runTime"
fi


if [[ $1 == "checkInterfaceSP" ]]; then
	displaySnmpSearch "checkInterfaceSP_problem"
	displaySnmpSearch "checkInterfaceSP_problemInfo"
	displaySnmpSearch "checkInterfaceSP_runTime"
fi


if [[ $1 == "checkAsgSP" ]]; then
	displaySnmpSearch "checkAsgSP_problem"
	displaySnmpSearch "checkAsgSP_problemInfo"
	displaySnmpSearch "checkAsgSP_runTime"
fi


if [[ $1 == "checkConnectionTable" ]]; then
	displaySnmpSearch "checkConnectionTable_problem"
	displaySnmpSearch "checkConnectionTable_problemInfo"
	displaySnmpSearch "checkConnectionTable_runTime"
fi


if [[ $1 == "checkConnectionTableSP" ]]; then
	displaySnmpSearch "checkConnectionTableSP_problem"
	displaySnmpSearch "checkConnectionTableSP_problemInfo"
	displaySnmpSearch "checkConnectionTableSP_runTime"
fi


if [[ $1 == "checkDrops" ]]; then
	displaySnmpSearch "checkDrops_problem"
	displaySnmpSearch "checkDrops_problemInfo"
	displaySnmpSearch "checkDrops_runTime"
fi


if [[ $1 == "checkDropsSP" ]]; then
	displaySnmpSearch "checkDropsSP_problem"
	displaySnmpSearch "checkDropsSP_problemInfo"
	displaySnmpSearch "checkDropsSP_runTime"
fi


if [[ $1 == "checkBackup" ]]; then
	displaySnmpSearch "checkBackup_problem"
	displaySnmpSearch "checkBackup_problemInfo"
	displaySnmpSearch "checkBackup_runTime"
fi


if [[ $1 == "checkBackupSP" ]]; then
	displaySnmpSearch "checkBackupSP_problem"
	displaySnmpSearch "checkBackupSP_problemInfo"
	displaySnmpSearch "checkBackupSP_runTime"
fi


if [[ $1 == "checkBackupSM" ]]; then
	displaySnmpSearch "checkBackupSM_problem"
	displaySnmpSearch "checkBackupSM_problemInfo"
	displaySnmpSearch "checkBackupSM_runTime"
fi


if [[ $1 == "checkNatTable" ]]; then
	displaySnmpSearch "checkNatTable_problem"
	displaySnmpSearch "checkNatTable_problemInfo"
	displaySnmpSearch "checkNatTable_runTime"
fi


if [[ $1 == "checkNatTableSP" ]]; then
	displaySnmpSearch "checkNatTableSP_problem"
	displaySnmpSearch "checkNatTableSP_problemInfo"
	displaySnmpSearch "checkNatTableSP_runTime"
fi


if [[ $1 == "checkScore" ]]; then
	displaySnmpSearch "checkScore_problem"
	displaySnmpSearch "checkScore_problemInfo"
	displaySnmpSearch "checkScore_runTime"
	displaySnmpSearch "checkScore_sndCapacityMacro"
	displaySnmpSearch "checkScore_sndCapacityMicro"
	displaySnmpSearch "checkScore_cpuFwworkerCapacityMacro"
	displaySnmpSearch "checkScore_cpuFwworkerCapacityMicro"
	displaySnmpSearch "checkScore_throughput"
	displaySnmpSearch "checkScore_dropInterfaceRate"
	displaySnmpSearch "checkScore_dropSecurexlRate"
	displaySnmpSearch "checkScore_dropCorexlRate"
	displaySnmpSearch "checkScore_dropPolicyRate"
	displaySnmpSearch "checkScore_dropPolicyIpsRate"
	displaySnmpSearch "checkScore_dropTotalRate"
fi


if [[ $1 == "checkScoreSP" ]]; then
	displaySnmpSearch "checkScoreSP_problem"
	displaySnmpSearch "checkScoreSP_problemInfo"
	displaySnmpSearch "checkScoreSP_runTime"
	displaySnmpSearch "checkScoreSP_sndCapacityMacro"
	displaySnmpSearch "checkScoreSP_sndCapacityMicro"
	displaySnmpSearch "checkScoreSP_cpuFwworkerCapacityMacro"
	displaySnmpSearch "checkScoreSP_cpuFwworkerCapacityMicro"
	displaySnmpSearch "checkScoreSP_throughput"
	displaySnmpSearch "checkScoreSP_dropInterfaceRate"
	displaySnmpSearch "checkScoreSP_dropSecurexlRate"
	displaySnmpSearch "checkScoreSP_dropCorexlRate"
	displaySnmpSearch "checkScoreSP_dropPolicyRate"
	displaySnmpSearch "checkScoreSP_dropPolicyIpsRate"
	displaySnmpSearch "checkScoreSP_dropTotalRate"
fi


if [[ $1 == "checkApiSM" ]]; then
	displaySnmpSearch "checkApiSM_problem"
	displaySnmpSearch "checkApiSM_problemInfo"
	displaySnmpSearch "checkApiSM_runTime"
fi


if [[ $1 == "checkVsx" ]]; then
	displaySnmpSearch "checkVsx_problem"
	displaySnmpSearch "checkVsx_problemInfo"
	displaySnmpSearch "checkVsx_runTime"
fi


if [[ $1 == "checkVsxSP" ]]; then
	displaySnmpSearch "checkVsxSP_problem"
	displaySnmpSearch "checkVsxSP_problemInfo"
	displaySnmpSearch "checkVsxSP_runTime"
fi

}

###################################################################################################
checkSub5Monitoring() {

if [[ -f /etc/.scalable_platform ]]; then
	IS_SCALABLE_PLATFORM="1"
	IS_SCALABLE_PLATFORM_MHO="0"
	LOCALSMO=$(asg stat -i tasks | grep "SMO" | grep "local" | wc -l)
elif [[ -f /etc/.scalable_platform_mho ]]; then
	IS_SCALABLE_PLATFORM="1"
	IS_SCALABLE_PLATFORM_MHO="1"
	LOCALSMO="1"
else
	IS_SCALABLE_PLATFORM="0"
fi

ALREADY_RUNNING=$(ps aux | grep -v "grep" | grep "fw_health_check.sh" | grep "sub5monitoring" | tr '\n' '|')
ALREADY_RUNNING_QTY=$(echo $ALREADY_RUNNING | tr '|' '\n' | wc -l)
if [[ $ALREADY_RUNNING_QTY -ge "5" ]]; then
	echo "ALREADY RUNNING $ALREADY_RUNNING_QTY"
	echo $ALREADY_RUNNING >> /var/log/messages
	echo "fw_health_check.sh sub5monitoring - ALREADY RUNNING $ALREADY_RUNNING_QTY" >> /var/log/messages
else
	#GLOBALS
	source /etc/profile.d/CP.sh
	ORIGIFS=$IFS
	HOSTNAME=$(hostname)
	DATE=$(date +"%d-%b-%Y %H:%M %Z")
	if [[ ! $SYSARG4 ]]; then
		EPOCH=$(date +'%s')
	else
		EPOCH=$SYSARG4
	fi
	SCRIPTDIR=/home/admin
	LOGGER="/usr/bin/logger -p local5.notice"
	SCRIPT=$(basename $BASH_SOURCE)
	SCRIPTFULL=$(echo $SCRIPTDIR/$SCRIPT)
	SCRIPTVERSION="1"
	#if [[ -f /opt/CPsuite-R76/fw1/bin/asg ]] || [[ -f /opt/CPsmo-R80.30/bin/asg ]] || [[ -f /opt/CPsmo-R80.20/bin/asg ]] || [[ -f /opt/CPsmo-R81.10/bin/asg ]] || [[ -f /opt/CPsmo-R81.20/bin/asg ]]; then
	if [[ $IS_SCALABLE_PLATFORM -eq "1" ]]; then
		SCRIPTHASH=$(md5sum /home/admin/$SCRIPT |cut -c1-4)
		LOCALSGM=$(hostname | rev | cut -c -4 | rev | sed 's/-/_/g')
	else
		SCRIPTHASH=$(md5sum $SCRIPTFULL | cut -c1-4)
		LOCALSGM="n/a"
	fi
	CLUSTERNAME=$(head -1 $FWDIR/state/local/FW1/local.ft | awk '{print $13}')
	HISTORYLOGPREAMBLE="$HOSTNAME - $SCRIPTHASH#$SCRIPTVERSION - $EPOCH"
	HISTORYLOG=/var/log/tmp/$SCRIPT.sub5Monitoring.log
	LASTRUNEPOCH=$(cat $HISTORYLOG | head -1 | awk -F " - " '{print $3}')
	if [[ $LASTRUNEPOCH == "" ]]; then
		LASTRUNEPOCH=$(( EPOCH - 1 ))
	fi
	SINCELASTRUN=$(echo $EPOCH - $LASTRUNEPOCH | bc | awk -F "." '{print $1}')
	
	
	
	
	
	#DEFAULTS
	functionName=${FUNCNAME[0]}
	TEMPFILE=/var/log/tmp/$SCRIPT.$EPOCH.$functionName
	
	#COLLECT OUTPUTS
	
	
	##### CPU UTILIZATION
	LINUX_VER=$(/bin/uname -r)
	/usr/bin/mpstat -P ALL 2 3 | grep "Average" | grep -v "CPU" > $TEMPFILE
	IFS=$'\n'
	for LINE in `cat $TEMPFILE` ; do
		CPU=$(echo "$LINE" | awk '{print $2}')
		USER=$(echo "$LINE" | awk '{print $3}')
		SYSTEM=$(echo "$LINE" | awk '{print $5}')
		IOWAIT=$(echo "$LINE" | awk '{print $6}')
		IRQ=$(echo "$LINE" | awk '{print $8}')
		SOFT=$(echo "$LINE" | awk '{print $8}')
		#R80.40
		if [[ $LINUX_VER == "3.10.0-957.21.3cpx86_64" || $LINUX_VER == "3.10.0-693cpx86_64" ]]; then
			IDLE=$(echo "$LINE" | awk '{print $12}')
		elif [[ $LINUX_VER == "2.6.18-92cpx86_64" ]]; then
			IDLE=$(echo "$LINE" | awk '{print $10}')
		else
			IDLE="0"
		fi
		USAGE=$(echo "(0 - $IDLE) + 100" | bc)
		echo "CPU=$CPU USER=$USER SYSTEM=$SYSTEM IOWAIT=$IOWAIT IRQ=$IRQ SOFT=$SOFT IDLE=$IDLE USAGE=$USAGE"
		IFS=$ORIGIFS
		sendSyslog "$functionName" "INFO" "checkSub5Monitoring_cpuCounters" "SGM=\"$LOCALSGM\" CPU=\"$CPU\" USER=\"$USER\" SYSTEM=\"$SYSTEM\" IOWAIT=\"$IOWAIT\" IRQ=\"$IRQ\" SOFT=\"$SOFT\" IDLE=\"$IDLE\" USAGE=\"$USAGE\""
		IFS=$'\n'
	done
	IFS=$ORIGIFS

	###### MEMORY
	checkSub5Monitoring_memTotal=$(free | grep Mem | awk '{print $2}')
	checkSub5Monitoring_memUsed=$(free | grep "Mem" | awk '{print $3}')
	checkSub5Monitoring_memFree=$(free | grep "Mem" | awk '{print $4}')
	checkSub5Monitoring_memShared=$(free | grep "Mem" | awk '{print $5}')
	checkSub5Monitoring_memBuffCache=$(free | grep "Mem" | awk '{print $6}')
	checkSub5Monitoring_memAvailable=$(free | grep "Mem" | awk '{print $7}')
	checkSub5Monitoring_memSwapTotal=$(free | grep Swap | awk '{print $2}')
	checkSub5Monitoring_memSwapUsed=$(free | grep Swap | awk '{print $3}')
	echo "TOTAL=$checkSub5Monitoring_memTotal USED=$checkSub5Monitoring_memUsed FREE=$checkSub5Monitoring_memFree SHARED=$checkSub5Monitoring_memShared BUFFCACHE=$checkSub5Monitoring_memBuffCache AVAILABLE=$checkSub5Monitoring_memAvailable SWAP_TOTAL=$checkSub5Monitoring_memSwapTotal SWAP_USED=$checkSub5Monitoring_memSwapUsed"

	###### SYSTEM LOAD
	checkSub5Monitoring_load1=$(uptime | awk -F "load average:" '{print $2}' | awk -F "," '{print $1}' | tr -d ' ')
	checkSub5Monitoring_load5=$(uptime | awk -F "load average:" '{print $2}' | awk -F "," '{print $2}' | tr -d ' ')
	checkSub5Monitoring_load15=$(uptime | awk -F "load average:" '{print $2}' | awk -F "," '{print $3}' | tr -d ' ')
	echo "Load Average 1 - $checkSub5Monitoring_load1"
	echo "Load Average 5 - $checkSub5Monitoring_load5"
	echo "Load Average 15 - $checkSub5Monitoring_load15"


	##### COREXL DROPS
	fw ctl pstat -m > $TEMPFILE 2>&1
	checkSub5Monitoring_fwmultikEnqueueFailInboundPacketKernel=$(cat $TEMPFILE | grep -A17 "fwmultik enqueue fail stats" | grep "inbound packet kernel\|Inbound packet userspace" | awk '{print $NF}' | paste -sd+ | bc)
	checkSub5Monitoring_fwmultikEnqueueFailOutboundPacketKernel=$(cat $TEMPFILE | grep -A17 "fwmultik enqueue fail stats" | grep "outbound packet kernel\|Outbound packet userspace" | awk '{print $NF}' | paste -sd+ | bc)
	checkSub5Monitoring_fwmultikEnqueueFailF2pPacketKernel=$(cat $TEMPFILE | grep -A17 "fwmultik enqueue fail stats" | grep "F2P packet kernel\|F2P packet userspace" | awk '{print $NF}' | paste -sd+ | bc)

	if [[ -f $HISTORYLOG ]]; then
		checkSub5Monitoring_fwmultikEnqueueFailInboundPacketKernelLastrun=$(cat $HISTORYLOG | grep "checkSub5Monitoring_fwmultikEnqueueFailInboundPacketKernel" | awk -F " - " '{print $NF}' | head -1)
		if [[ $checkSub5Monitoring_fwmultikEnqueueFailInboundPacketKernelLastrun == "" ]]; then
			checkSub5Monitoring_fwmultikEnqueueFailInboundPacketKernelLastrun="0"
			checkSub5Monitoring_fwmultikEnqueueFailInboundPacketKernelRate="0"
		else
			checkSub5Monitoring_fwmultikEnqueueFailInboundPacketKernelRate=$(( (checkSub5Monitoring_fwmultikEnqueueFailInboundPacketKernel - checkSub5Monitoring_fwmultikEnqueueFailInboundPacketKernelLastrun) / SINCELASTRUN ))
		fi
		if [[ $checkSub5Monitoring_fwmultikEnqueueFailInboundPacketKernelRate -lt "0" ]]; then
			checkSub5Monitoring_fwmultikEnqueueFailInboundPacketKernelRate="0"
		fi
		checkSub5Monitoring_fwmultikEnqueueFailOutboundPacketKernelLastrun=$(cat $HISTORYLOG | grep "checkSub5Monitoring_fwmultikEnqueueFailOutboundPacketKernel" | awk -F " - " '{print $NF}' | head -1)
		if [[ $checkSub5Monitoring_fwmultikEnqueueFailOutboundPacketKernelLastrun == "" ]]; then
			checkSub5Monitoring_fwmultikEnqueueFailOutboundPacketKernelLastrun="0"
			checkSub5Monitoring_fwmultikEnqueueFailOutboundPacketKernelRate="0"
		else
			checkSub5Monitoring_fwmultikEnqueueFailOutboundPacketKernelRate=$(( (checkSub5Monitoring_fwmultikEnqueueFailOutboundPacketKernel - checkSub5Monitoring_fwmultikEnqueueFailOutboundPacketKernelLastrun) / SINCELASTRUN ))
		fi
		if [[ $checkSub5Monitoring_fwmultikEnqueueFailOutboundPacketKernelRate -lt "0" ]]; then
			checkSub5Monitoring_fwmultikEnqueueFailOutboundPacketKernelRate="0"
		fi
		checkSub5Monitoring_fwmultikEnqueueFailF2pPacketKernelLastrun=$(cat $HISTORYLOG | grep "checkSub5Monitoring_fwmultikEnqueueFailF2pPacketKernel" | awk -F " - " '{print $NF}' | head -1)
		if [[ $checkSub5Monitoring_fwmultikEnqueueFailF2pPacketKernelLastrun == "" ]]; then
			checkSub5Monitoring_fwmultikEnqueueFailF2pPacketKernelLastrun="0"
			checkSub5Monitoring_fwmultikEnqueueFailF2pPacketKernelRate=$(( (checkSub5Monitoring_fwmultikEnqueueFailF2pPacketKernel - checkSub5Monitoring_fwmultikEnqueueFailF2pPacketKernelLastrun) / SINCELASTRUN ))
		else
			checkSub5Monitoring_fwmultikEnqueueFailF2pPacketKernelRate="0"
		fi
		
		if [[ $checkSub5Monitoring_fwmultikEnqueueFailF2pPacketKernelRate -lt "0" ]]; then
			checkSub5Monitoring_fwmultikEnqueueFailF2pPacketKernelRate="0"
		fi
		echo "FWMULTIK Enqueue Fail Inbound Packet Kernel Rate - $checkSub5Monitoring_fwmultikEnqueueFailInboundPacketKernelRate"
		echo "FWMULTIK Enqueue Fail Outbound Packet Kernel Rate - $checkSub5Monitoring_fwmultikEnqueueFailOutboundPacketKernelRate"
		echo "FWMULTIK Enqueue Fail F2P Packet Kernel Rate - $checkSub5Monitoring_fwmultikEnqueueFailF2pPacketKernelRate"
	fi


	##### PSTAT
	fw ctl pstat > $TEMPFILE 2>&1
	checkSub5Monitoring_fragments=$(cat $TEMPFILE | grep fragments | awk '{print $1}')
	checkSub5Monitoring_fragmentsExpired=$(cat $TEMPFILE | grep fragments | awk '{print $5}')
	checkSub5Monitoring_connections=$(cat $TEMPFILE | grep -A1 "Connections" | grep TCP | awk '{print $1}')

	if [[ -f $HISTORYLOG ]]; then
		checkSub5Monitoring_fragmentsLastrun=$(cat $HISTORYLOG | grep "checkSub5Monitoring_fragments" | awk -F " - " '{print $NF}' | head -1)
		if [[ $checkSub5Monitoring_fragmentsLastrun == "" ]]; then
			checkSub5Monitoring_fragmentsLastrun="0"
			checkSub5Monitoring_fragmentsRate="0"
		else
			checkSub5Monitoring_fragmentsRate=$(( (checkSub5Monitoring_fragments - checkSub5Monitoring_fragmentsLastrun) / SINCELASTRUN ))
		fi
		if [[ $checkSub5Monitoring_fragmentsRate -lt "0" ]]; then
			checkSub5Monitoring_fragmentsRate="0"
		fi
		checkSub5Monitoring_fragmentsExpiredLastrun=$(cat $HISTORYLOG | grep "checkSub5Monitoring_fragmentsExpired" | awk -F " - " '{print $NF}' | head -1)
		if [[ $checkSub5Monitoring_fragmentsExpiredLastrun == "" ]]; then
			checkSub5Monitoring_fragmentsExpiredLastrun="0"
			checkSub5Monitoring_fragmentsExpiredRate="0"
		else
			checkSub5Monitoring_fragmentsExpiredRate=$(( (checkSub5Monitoring_fragmentsExpired - checkSub5Monitoring_fragmentsExpiredLastrun) / SINCELASTRUN ))
		fi
		if [[ $checkSub5Monitoring_fragmentsExpiredRate -lt "0" ]]; then
			checkSub5Monitoring_fragmentsExpiredRate="0"
		fi
		checkSub5Monitoring_connectionsLastrun=$(cat $HISTORYLOG | grep "checkSub5Monitoring_connections" | awk -F " - " '{print $NF}' | head -1)
		if [[ $checkSub5Monitoring_connectionsLastrun == "" ]]; then
			checkSub5Monitoring_connectionsLastrun="0"
			checkSub5Monitoring_connectionsRate="0"
		else
			checkSub5Monitoring_connectionsRate=$(( (checkSub5Monitoring_connections - checkSub5Monitoring_connectionsLastrun) / SINCELASTRUN ))
		fi
		if [[ $checkSub5Monitoring_connectionsRate -lt "0" ]]; then
			checkSub5Monitoring_connectionsRate="0"
		fi
		echo "Fragments Rate - $checkSub5Monitoring_fragmentsRate"
		echo "Fragments Expired Rate - $checkSub5Monitoring_fragmentsExpiredRate"
		echo "Connection Rate - $checkSub5Monitoring_connectionsRate"
	fi


	##### INTERFACE DETAILS
	
	if [[ $LOCALSGM == "n/a" ]]; then
		IFS=$'\n'
		for LINE in `netstat -i | grep "eth*" | grep -v "Iface\|brS" | awk '$4!=0' | awk '{print $1}'` ; do
			/sbin/ethtool -S $LINE >> $TEMPFILE 2>&1
			checkSub5Monitoring_interfaces="$LINE $checkSub5Monitoring_interfaces"
		done
		IFS=$ORIGIFS
	#elif [[ -f /opt/CPsmo-R81.10/bin/asg ]]; then
	elif [[ $IS_SCALABLE_PLATFORM -eq "1" ]]; then
		IFS=$'\n'
		for LINE in `netstat -i | grep "BPEth*" | awk '$4!=0' | awk '{print $1}'` ; do
			/sbin/ethtool -S $LINE >> $TEMPFILE 2>&1
			checkSub5Monitoring_interfaces="$LINE $checkSub5Monitoring_interfaces"
		done
		IFS=$ORIGIFS	
	else
		IFS=$'\n'
		for LINE in `netstat -i | grep "ethsBP" | awk '$4!=0' | awk '{print $1}'` ; do
			/sbin/ethtool -S $LINE >> $TEMPFILE 2>&1
			checkSub5Monitoring_interfaces="$LINE $checkSub5Monitoring_interfaces"
		done
		IFS=$ORIGIFS
	fi
	
	checkSub5Monitoring_rxDropped=$(cat $TEMPFILE | grep "rx_dropped\|rx_out_of_buffer\|rx_missed_errors" | grep -v "port.rx_dropped" | awk '{print $NF}' | paste -sd+ | bc)
	checkSub5Monitoring_rxPackets=$(cat $TEMPFILE | grep "rx_packets" | grep -v "rx-\|phy\|nic\|veb\|vf\|port" | awk '{print $NF}' | paste -sd+ | bc)
	checkSub5Monitoring_rxBytes=$(cat $TEMPFILE | grep "rx_bytes" | grep -v "rx-\|port\|phy\|nic\|veb\|vf\|port" | awk '{print $NF}' | paste -sd+ | bc)


	if [[ -f $HISTORYLOG ]]; then
		checkSub5Monitoring_rxDroppedLastrun=$(cat $HISTORYLOG | grep "checkSub5Monitoring_rxDropped" | awk -F " - " '{print $NF}' | head -1)
		if [[ $checkSub5Monitoring_rxDroppedLastrun == "" ]]; then
			checkSub5Monitoring_rxDroppedLastrun="0"
			checkSub5Monitoring_rxDroppedRate="0"
		else
			checkSub5Monitoring_rxDroppedRate=$(( (checkSub5Monitoring_rxDropped - checkSub5Monitoring_rxDroppedLastrun) / SINCELASTRUN ))
		fi
		if [[ $checkSub5Monitoring_rxDroppedRate -lt "0" ]]; then
			checkSub5Monitoring_rxDroppedRate="0"
		fi
		echo "RX Drops Rate - $checkSub5Monitoring_rxDroppedRate"
		
		checkSub5Monitoring_rxPacketsLastrun=$(cat $HISTORYLOG | grep "checkSub5Monitoring_rxPackets" | awk -F " - " '{print $NF}' | head -1)
		if [[ $checkSub5Monitoring_rxPacketsLastrun == "" ]]; then
			checkSub5Monitoring_rxPacketsLastrun="0"
			checkSub5Monitoring_rxPacketsRate="0"
		else
			checkSub5Monitoring_rxPacketsRate=$(( (checkSub5Monitoring_rxPackets - checkSub5Monitoring_rxPacketsLastrun) / SINCELASTRUN ))
		fi
		if [[ $checkSub5Monitoring_rxPacketsRate -lt "0" ]]; then
			checkSub5Monitoring_rxPacketsRate="0"
		fi
		echo "RX Packets Rate - $checkSub5Monitoring_rxPacketsRate"
		
		checkSub5Monitoring_rxBytesLastrun=$(cat $HISTORYLOG | grep "checkSub5Monitoring_rxBytes" | awk -F " - " '{print $NF}' | head -1)
		if [[ $checkSub5Monitoring_rxBytesLastrun == "" ]]; then
			checkSub5Monitoring_rxBytesLastrun="0"
			checkSub5Monitoring_rxBytesRate="0"
		else
			checkSub5Monitoring_rxBytesRate=$(( (checkSub5Monitoring_rxBytes - checkSub5Monitoring_rxBytesLastrun) / SINCELASTRUN ))
		fi
		if [[ $checkSub5Monitoring_rxBytesRate -lt "0" ]]; then
			checkSub5Monitoring_rxBytesRate="0"
		fi
		echo "RX Bytes Rate - $checkSub5Monitoring_rxBytesRate"
		echo "Interfaces Evaluated - $checkSub5Monitoring_interfaces"
	fi


	echo "Last Run Epoch Time - $LASTRUNEPOCH"
	echo "Current Epoch Time - $EPOCH"
	echo "Time Since Last Run - $SINCELASTRUN"


	#REMOVE LAST RUN
	rm -f $HISTORYLOG > /dev/null 2>&1
		
	#LOG OUTPUTS
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSub5Monitoring_fwmultikEnqueueFailInboundPacketKernel - $checkSub5Monitoring_fwmultikEnqueueFailInboundPacketKernel" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSub5Monitoring_fwmultikEnqueueFailInboundPacketKernelRate - $checkSub5Monitoring_fwmultikEnqueueFailInboundPacketKernelRate" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSub5Monitoring_fwmultikEnqueueFailOutboundPacketKernel - $checkSub5Monitoring_fwmultikEnqueueFailOutboundPacketKernel" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSub5Monitoring_fwmultikEnqueueFailOutboundPacketKernelRate - $checkSub5Monitoring_fwmultikEnqueueFailOutboundPacketKernelRate" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSub5Monitoring_fwmultikEnqueueFailF2pPacketKernel - $checkSub5Monitoring_fwmultikEnqueueFailF2pPacketKernel" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSub5Monitoring_fwmultikEnqueueFailF2pPacketKernelRate - $checkSub5Monitoring_fwmultikEnqueueFailF2pPacketKernelRate" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSub5Monitoring_fragments - $checkSub5Monitoring_fragments" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSub5Monitoring_fragmentsRate - $checkSub5Monitoring_fragmentsRate" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSub5Monitoring_fragmentsExpired - $checkSub5Monitoring_fragmentsExpired" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSub5Monitoring_fragmentsExpiredRate - $checkSub5Monitoring_fragmentsExpiredRate" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSub5Monitoring_connections - $checkSub5Monitoring_connections" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSub5Monitoring_connectionsRate - $checkSub5Monitoring_connectionsRate" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSub5Monitoring_rxDropped - $checkSub5Monitoring_rxDropped" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSub5Monitoring_rxDroppedRate - $checkSub5Monitoring_rxDroppedRate" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSub5Monitoring_rxPackets - $checkSub5Monitoring_rxPackets" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSub5Monitoring_rxPacketsRate - $checkSub5Monitoring_rxPacketsRate" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSub5Monitoring_rxBytes - $checkSub5Monitoring_rxBytes" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSub5Monitoring_rxBytesRate - $checkSub5Monitoring_rxBytesRate" >>$HISTORYLOG
	echo "$HISTORYLOGPREAMBLE - $functionName - INFO - checkSub5Monitoring_interfaces - $checkSub5Monitoring_interfaces" >>$HISTORYLOG



	#RUN LOGIC

	#CLEANUP
	rm -f $TEMPFILE

	#SYSLOG
	sendSyslog "$functionName" "INFO" "checkSub5Monitoring_load1" "SGM=\"$LOCALSGM\" VALUE=\"$checkSub5Monitoring_load1\" SINCELASTRUN=\"$SINCELASTRUN\""
	sleep 1
	sendSyslog "$functionName" "INFO" "checkSub5Monitoring_load5" "SGM=\"$LOCALSGM\" VALUE=\"$checkSub5Monitoring_load5\" SINCELASTRUN=\"$SINCELASTRUN\""
	sleep 1
	sendSyslog "$functionName" "INFO" "checkSub5Monitoring_load15" "SGM=\"$LOCALSGM\" VALUE=\"$checkSub5Monitoring_load15\" SINCELASTRUN=\"$SINCELASTRUN\""
	sleep 1
	sendSyslog "$functionName" "INFO" "checkSub5Monitoring_memDetails" "SGM=\"$LOCALSGM\" TOTAL=\"$checkSub5Monitoring_memTotal\" USED=\"$checkSub5Monitoring_memUsed\" FREE=\"$checkSub5Monitoring_memFree\" SHARED=\"$checkSub5Monitoring_memShared\" BUFFCACHE=\"$checkSub5Monitoring_memBuffCache\" AVAILABLE=\"$checkSub5Monitoring_memAvailable\" SWAP_TOTAL=\"$checkSub5Monitoring_memSwapTotal\" SWAP_USED=\"$checkSub5Monitoring_memSwapUsed\" SINCELASTRUN=\"$SINCELASTRUN\""
	sleep 1
	sendSyslog "$functionName" "INFO" "checkSub5Monitoring_fwmultikEnqueueFailInboundPacketKernelRate" "SGM=\"$LOCALSGM\" VALUE=\"$checkSub5Monitoring_fwmultikEnqueueFailInboundPacketKernelRate\" PREVIOUS=\"$checkSub5Monitoring_fwmultikEnqueueFailInboundPacketKernelLastrun\" CURRENT=\"$checkSub5Monitoring_fwmultikEnqueueFailInboundPacketKernel\" SINCELASTRUN=\"$SINCELASTRUN\""
	sleep 1
	sendSyslog "$functionName" "INFO" "checkSub5Monitoring_fwmultikEnqueueFailOutboundPacketKernelRate" "SGM=\"$LOCALSGM\" VALUE=\"$checkSub5Monitoring_fwmultikEnqueueFailOutboundPacketKernelRate\" PREVIOUS=\"$checkSub5Monitoring_fwmultikEnqueueFailOutboundPacketKernelLastrun\" CURRENT=\"$checkSub5Monitoring_fwmultikEnqueueFailOutboundPacketKernel\" SINCELASTRUN=\"$SINCELASTRUN\""
	sleep 1
	sendSyslog "$functionName" "INFO" "checkSub5Monitoring_fwmultikEnqueueFailF2pPacketKernelRate" "SGM=\"$LOCALSGM\" VALUE=\"$checkSub5Monitoring_fwmultikEnqueueFailF2pPacketKernelRate\" PREVIOUS=\"$checkSub5Monitoring_fwmultikEnqueueFailF2pPacketKernelLastrun\" CURRENT=\"$checkSub5Monitoring_fwmultikEnqueueFailF2pPacketKernel\" SINCELASTRUN=\"$SINCELASTRUN\""
	sleep 1
	sendSyslog "$functionName" "INFO" "checkSub5Monitoring_fragmentsRate" "SGM=\"$LOCALSGM\" VALUE=\"$checkSub5Monitoring_fragmentsRate\" PREVIOUS=\"$checkSub5Monitoring_fragmentsLastrun\" CURRENT=\"$checkSub5Monitoring_fragments\" SINCELASTRUN=\"$SINCELASTRUN\""
	sleep 1
	sendSyslog "$functionName" "INFO" "checkSub5Monitoring_fragmentsExpiredRate" "SGM=\"$LOCALSGM\" VALUE=\"$checkSub5Monitoring_fragmentsExpiredRate\" PREVIOUS=\"$checkSub5Monitoring_fragmentsExpiredLastrun\" CURRENT=\"$checkSub5Monitoring_fragmentsExpired\" SINCELASTRUN=\"$SINCELASTRUN\""
	sleep 1
	sendSyslog "$functionName" "INFO" "checkSub5Monitoring_connectionsRate" "SGM=\"$LOCALSGM\" VALUE=\"$checkSub5Monitoring_connectionsRate\" PREVIOUS=\"$checkSub5Monitoring_connectionsLastrun\" CURRENT=\"$checkSub5Monitoring_connections\" SINCELASTRUN=\"$SINCELASTRUN\""
	sleep 1
	sendSyslog "$functionName" "INFO" "checkSub5Monitoring_rxDroppedRate" "SGM=\"$LOCALSGM\" VALUE=\"$checkSub5Monitoring_rxDroppedRate\" PREVIOUS=\"$checkSub5Monitoring_rxDroppedLastrun\" CURRENT=\"$checkSub5Monitoring_rxDropped\" SINCELASTRUN=\"$SINCELASTRUN\" INTERFACES=\"$checkSub5Monitoring_interfaces\""
	sleep 1
	sendSyslog "$functionName" "INFO" "checkSub5Monitoring_rxPacketsRate" "SGM=\"$LOCALSGM\" VALUE=\"$checkSub5Monitoring_rxPacketsRate\" PREVIOUS=\"$checkSub5Monitoring_rxPacketsLastrun\" CURRENT=\"$checkSub5Monitoring_rxPackets\" SINCELASTRUN=\"$SINCELASTRUN\" INTERFACES=\"$checkSub5Monitoring_interfaces\""
	sleep 1
	sendSyslog "$functionName" "INFO" "checkSub5Monitoring_rxBytesRate" "SGM=\"$LOCALSGM\" VALUE=\"$checkSub5Monitoring_rxBytesRate\" PREVIOUS=\"$checkSub5Monitoring_rxBytesLastrun\" CURRENT=\"$checkSub5Monitoring_rxBytes\" SINCELASTRUN=\"$SINCELASTRUN\" INTERFACES=\"$checkSub5Monitoring_interfaces\""
	
	

fi
}

###################################################################################################
checkRunning() {
/bin/date
SCRIPT=$(basename $BASH_SOURCE)
FOUND=$(ps aux | grep "$SCRIPT" | grep -v "grep\|running\|que" | wc -l)
if [[ $FOUND -gt "0" ]]; then
	echo -n "$SCRIPT is running"
	while [[ $FOUND -gt "0" ]]; do
		sleep 1
		echo -n "."
		FOUND=$(ps aux | grep "$SCRIPT" | grep -v "grep\|running\|que" | wc -l)
	done
	echo -n "done"
else
	echo -n "Not Running"
fi
echo ""
/bin/date
}

###################################################################################################
checkRunningQueued() {
/bin/date
SCRIPT=$(basename $BASH_SOURCE)
FOUND=$(ps aux | grep "$SCRIPT" | grep -v "grep\|running\|que" | wc -l)
if [[ $FOUND -gt "0" ]]; then
	echo -n "$SCRIPT is running"
	while [[ $FOUND -gt "0" ]]; do
		sleep 1
		echo -n "."
		FOUND=$(ps aux | grep "$SCRIPT" | grep -v "grep\|running\|que" | wc -l)
	done
fi
echo ""

source /etc/profile.d/CP.sh
if [[ -f /etc/.scalable_platform ]]; then
	IS_SCALABLE_PLATFORM="1"
	IS_SCALABLE_PLATFORM_MHO="0"
	LOCALSMO=$(asg stat -i tasks | grep "SMO" | grep "local" | wc -l)
elif [[ -f /etc/.scalable_platform_mho ]]; then
	IS_SCALABLE_PLATFORM="1"
	IS_SCALABLE_PLATFORM_MHO="1"
	LOCALSMO="1"
else
	IS_SCALABLE_PLATFORM="0"
fi
	
	
runHealthCheck
}

###################################################################################################
runJosh() {
clear
echo "----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
--------------------------------------------===============-=---------------------------------------
::::::::----:--:::::--------::::----=======++++++=++++++===+++=+===---------------------------------
:::::::::::::::::::::::::::::::---======++++++++++=++++++++++******+++=--::---------------------::::
:::::::::::::::::::::::::::::-====++++++++++++++++++++++++++++*********+=-::::::::-----:::::::::::::
-::::::::::::::::::::::::::--=+++++=++++++++++++++++++++++++++****++*****++-::::::::::::::::::::::::
----------------------::::-=++++++++++++++++++++++++++++++++++++++++*******+=-::::::::::::::::::::::
--------------------------==+++++++++++++++++++++++++++++++++++++**++*+++++++=-:::::::::::::::::::::
-----------------------::-==+++++++++++++++++++++++++++++++++++++++++++++==+++=-::::::::::::::::::::
----------------------::-=++=+==+++++++++++++++++++++++++++++++++++++++++===++==-:::::::::::::::::::
-------------------::::-====++=+++++++++++++++++++++++++++++++++++++++++==+==+===:::::::::::::::::::
:--::::::::------:::::=+++++++++++++++++++++++++++++++++++++++++==+++++===+=++====::::::::::::::::::
::::::::.::::-----::-=+====++++++++++++++++++++++++++++++=========++++++==+=+++===-.....::::::::::::
:::::::...::::::::::=+++++++++++++++++++++++++++++++++++++=++=+=+==+=++=====++=++=-........:::::::::
.....:::...::::::::-+=+++++++++++++++++++++++++++++*+++++++++++==+++==+=======++++=:...........:::::
:.........:::::::::++++++++++++++++++++++++++++++++++++++++++++==+++=+==+====++++===................
:::.......::::::::=**++++++**##**++++++++++++++++++++++++++++++++++==+++=+====+=+++=:..::...........
::::::...:::::::::**++++++++************+++++++++++++++++++++++++++++=++==++=++++++=::::::::::::::::
::::::::::::::::::++++++++++*********++++*++++++++++++++++++++++++++++++++====++++++-:::::::::::::::
::::::::::::::::::-****+++*****#%%%##***++++++++++++++++++++++++++++***++++++++++++=::::::::::::::::
:::::::::::::::::::+%%**++*****##%#***####****++++++++++++++*+*++***#**+*****+++++==::::::::::::::::
::::::::::::::::::::++*+++*******************+++++++++++++******++****+*****#*+++===::::::::::::::::
::::::::::::::::::::-++++******+********+++++++++++++++++++*****++**++*##*+*##*+++=-::::::::::::::::
::::::::::::::::::::=+++*******++++++++++++++++++++++++++++++**+++++++**++++*#*+++=::::::::::--:::::
:::--------::::::::+++*********+++++++++++++++++++++++++++++++++++++**###***+**++=-::-------------::
::---------:::::::+*********##*++++++++++++++++++++++++++++++++++++++*#####*+**++=------------------
:::---------------+**********##*+++++++++++++++++++++++++++++++++++++######***+++-------------------
::::------------::-++*#%@%***##*++++++++++++++++++++++++++++++++++++##*+**+**+*++-------------------
-----------------:-+***#######*+++++++++++++++++++++++++++++++++++++*++++***++*+=-------------------
-------------------+++*********++++++++++++++++*+*++++++++++++++++++*++++**++*+=--------------------
-------------------+++**********+++++++++******++*++++++++++++++++*+++++++++++=---------------------
-------------------+++**********++++++++*******+*++++++++++++++++**++++++++++=----------------------
=================--=+**###********+++++++***++++*++++++++++++++++**++++++++++=------================
=================--=+*#%%%%%%%##**+++++*+***++++++++++++++++++++++++++++=++==-----==================
==-----------------=+**********###**+++**++++++*++++++++++++++++++++++++=+==------------------------
--------------------++***********+***+****+++++++++++++++++++++++++++++==+=-:-----------------------
---==---------------=+*******+++++****+++++++****++++++++++++++++++++++===++=-:---------------------
=====---------------=++*****+++++********+++****+*++++++++++++++++++++====++++-:--------------------
===------------------++*******++*****#********++*+++++++++++++++++++++====+#*+=-:-------------------
---------------------+*************##***********+*++*+++++++++++++++++====*%#*+=::------------------
---------------------+****++********************++++++++++++++++++++++====+#%%*=-:.:----------------
---------------------=+**++******#****************+++++++++++++++++++=====+*#%*=-::::---------------
--------------------:-++**+**********#************+++++++++++++++++++=====+*#%*=-::::::::-----------
-----------------::::--=++++++*+****************+++**++++++++++++++++=====+*#*=--:::::::::::--------
---::::----:::::::::--:::=++++++*******************++**+++++++++++++=====++*#+---::::::::::::::::---
------::::::::---::---::::::-=++*+********+***++**+*+*+++++++++++++====++++*+-:-:::.::::::::::::::::
----::::::::----:--=--:::::------==+*++++++++++++***+++++++++++++++===++++*+--:-::::::::::::::::::::
-:.:::::::----::--=---:::::------===++*#%#******+*++++++++++++++++++++++*++--:::::::::::::::::::::::
:::::::-----:::-------::::-------====+++*#%%###******++**+++++++++++++***+--:::::::::::::.::::::::::
:::::------::---------:::::------==-===++++#%%#####**************++++***+:::::::::::::::::::::::::::
:::-------------------::::::----=-----====+++*####*************++++++**=-:::::::::::::::::::::::::::
----------------------::::---------=+**+-======+*#**********+++++++++==::::-::::.:::::::::::::::::::
----------------------:::-----+++=++****+=-------=+******+++++++=-::::::::::::-:::::::::::::::---:::
------------------:----:--=++++==-===+++++==----::--=+**++++++=-::::::::::.:::+*++==--::::::::::::::
-----------------::----=====--==----==++=====-===+=-::-=++++=::::::::::---:::===++++++++=-::::::::::
-----------------::----:--------------========----====---==-:::::--===+++================++=-:::::::
-----------::---:::---::------------------====-------::---::--============----------::::::::::::::::
-:--------:::--::-------------------------------------------=========-----------::::::::::::::::::::"

}

###################################################################################################
main() {

if [[ $SYSARG1 == "sub5monitoring" ]]; then
	checkSub5Monitoring
elif [[ $SYSARG1 == "snmp" ]]; then
	displaySnmp $SYSARG2
elif [[ $SYSARG1 == "running" ]]; then
	checkRunning
elif [[ $SYSARG1 == "que" ]]; then
	checkRunningQueued
elif [[ $SYSARG1 == "josh" ]]; then
	runJosh
elif [[ $SYSARG1 == "current" ]]; then
	cat /var/log/tmp/fw_health_check.sh.current
else
	
	#Report Uptime Immediately
	NEST_ACCEPTED=$(ls -al /home/admin/nest_accepted 2>&1 | grep -v "No such" | wc -l)
	LOGGER="/usr/bin/logger -p local5.notice"
	UPTIME=$(cat /proc/uptime | awk -F "." '{print $1}')
	sendSyslog "MAIN" "INFO" "DEVICE_UPTIME" "NESTSTATUS=\"$NEST_ACCEPTED\" VALUE=\"$UPTIME\""
	
	source /etc/profile.d/CP.sh
	if [[ -f /etc/.scalable_platform ]]; then
		IS_SCALABLE_PLATFORM="1"
		IS_SCALABLE_PLATFORM_MHO="0"
		LOCALSMO=$(asg stat -i tasks | grep "SMO" | grep "local" | wc -l)
	elif [[ -f /etc/.scalable_platform_mho ]]; then
		IS_SCALABLE_PLATFORM="1"
		IS_SCALABLE_PLATFORM_MHO="1"
		LOCALSMO="1"
	else
		IS_SCALABLE_PLATFORM="0"
	fi

	
	# if [[ -f /opt/CPsuite-R76/fw1/bin/asg ]] || [[ -f /opt/CPsmo-R80.30/bin/asg ]] || [[ -f /opt/CPsmo-R80.20/bin/asg ]] || [[ -f /opt/CPsmo-R81.10/bin/asg ]] || [[ -f /opt/CPsmo-R81.20/bin/asg ]]; then
		# MHO=$(cat /proc/cpuinfo | grep "model name" | grep "Atom\|Pentium" | wc -l)
		# if [[ $MHO -gt "0" ]]; then
			# LOCALSMO="1"
		# else
			# LOCALSMO=$(asg stat -i tasks | grep "SMO" | grep "local" | wc -l)
		# fi
	# fi

	if [[ $SYSARG1 == "cron" ]]; then
		if [[ $LOCALSMO == "0" ]]; then
			if [[ $SYSARG2 != "gexec" ]]; then
				echo "Cannot run in cron mode on non-SMO, exiting"
				exit 0
			fi
		fi
		runHealthCheck
	elif [[ $SYSARG1 == "last" ]]; then
		displayLastCli
	else
		echo "Usage:"
		echo ""
		echo "Run Health Check - ./fw_health_check.sh cron"
		echo ""
		echo ""
	fi

fi
}

SYSARG1=$1
SYSARG2=$2
SYSARG3=$3
SYSARG4=$4

main

exit 0